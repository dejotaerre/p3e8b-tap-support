# file opened: plus3.asm
    1 0000 ~            /*
    2 0000 ~            ====================================================================================================
    3 0000 ~            Los fuentes que estoy usando los descargué desde aquí:
    4 0000 ~            http://sourceforge.net/p/emuscriptoria/code/HEAD/tree/plusROMs/
    5 0000 ~            (y fueron "beautificados" con TABs sólidos a 8 columnas)
    6 0000 ~
    7 0000 ~            No he podido contactarme con Garry Lancaster solicitándole los fuentes
    8 0000 ~            de todas las versiones del proyecto +3e, solo con el fin de modificarlas
    9 0000 ~            agregando mi "extensión" de carga de archivos TAPs.
   10 0000 ~
   11 0000 ~            Una cosa si he podido notar de las diferentes versiones de ROMs, y es que las
   12 0000 ~            ROMs 0 y 3 son binariamente iguales en cualquier version de interface IDE
   13 0000 ~
   14 0000 ~            Las ROMS 1 y 2 son en parte desensamble de los archivos bajados de emuscriptoria y
   15 0000 ~            parte de desensambles mios ayudándome del maravilloso DZ80
   16 0000 ~
   17 0000 ~            Se ha realizado con muchísimo trabajo y horas de dedicación, hasta que tuve
   18 0000 ~            en mis manos unos fuentes operativos para llevar a cabo las modificaciones que
   19 0000 ~            tenía en mente
   20 0000 ~
   21 0000 ~            *******************************************************************************
   22 0000 ~            ** IMPORTANTE:                                                               **
   23 0000 ~            ** LA ROM 2 CORRESPONDE A LA DEL INTERFACE SIMPLE DE 8 BITS DEBIDO QUE LOS   **
   24 0000 ~            ** FUENTES DE LAS VERSIONES PARA LOS OTROS INTERFACES (ej: DivMMC) NO ESTAN  **
   25 0000 ~            ** DISPONIBLES, AUN ASÍ ES POSIBLE QUE TODO FUNCIONE BIEN INTERCAMBIANDO EL  **
   26 0000 ~            ** BINARIO DE LA ROM2 POR LAS DE OTRAS VERSIONES, YA QUE MI EXTENSION PARA   **
   27 0000 ~            ** CARGA DE TAPS LO UNICO QUE HACE ES ABRIR, CARGAR, Y CERRAR ARCHIVOS       **
   28 0000 ~            ** (aunque esto no lo he probado)                                            **
   29 0000 ~            *******************************************************************************
   30 0000 ~
   31 0000 ~            Por otro lado el inconveniente con estos fuentes es que solo funcionan con
   32 0000 ~            spanish=0, v41=0, garry=1, cualquier otra combinación no funciona, es decir:
   33 0000 ~            (falta de labels, defs con valores incorrectos, resultados diferentes a 16K,
   34 0000 ~            y larguísimo etc...)
   35 0000 ~
   36 0000 ~            Así que en base a esto decidí quitar toda referencia a spanish=0, v41=0, garry=1
   37 0000 ~            y solo quedarme con la versión con la que quiero trabajar, es decir:
   38 0000 ~            ROMS +3e de 8 bits en inglés
   39 0000 ~
   40 0000 ~            ====================================================================================================
   41 0000 ~
   42 0000 ~            Por favor si alguien dispone de los fuentes de Garry Lancaster en todas las versiones
   43 0000 ~            de interfaces IDE, quisiera saberlo para incorporarles mi "extension" de carga de TAPs
   44 0000 ~            en todas las versiones posibles, de lo contrario solo estará disponible de momento
   45 0000 ~            para el interface simple de 8 bits.
   46 0000 ~
   47 0000 ~            ====================================================================================================
   48 0000 ~            */
   49 0000
   50 0000              ; ==================================================================================================
   51 0000
   52 0000              	DEFINE	VMAYOR		1	; estas ROMS de +3e corresponden a la versión 1.38 de GL
   53 0000              	DEFINE	VMINOR		3	; me resultó imposible conseguir versiones mas recientes
   54 0000              	DEFINE	VPATCH		8	; en este caso es la version 1.38 + "t" para indicar que
   55 0000              	DEFINE	VRPATCH		"t"	; permite cargar TAPs con SPECTRUM "archivo.tap" + LOAD ""
   56 0000
   57 0000              ; ==================================================================================================
   58 0000
   59 0000              	DEFINE	alternative	1	; En 1 si prefiero mis modificaciones (aparte de
   60 0000              					; la carga de TAPs) que son en esencia "cosméticas" de
   61 0000              					; colores, y con mensajes de inicio minimalistas e
   62 0000              					; históricamente mas "correctos" en el booteo, además del
   63 0000              					; sonido original en la selección de las opciones de menues
   64 0000              					;
   65 0000              					; (estos son gustos personales pero se puede desactivar
   66 0000              					; esta constante, o bien poner alt_colors en 0 y
   67 0000              					; modificar los parámetros en el ELSE del
   68 0000              					; IF alt_colors de mas abajo)
   69 0000
   70 0000              	DEFINE	alt_colors	1	; esquema de colores para el modo alternativo
   71 0000
   72 0000              ; ==================================================================================================
   73 0000
   74 0000              	IF 1
   75 0000
   76 0000              		IF 1
   77 0000
   78 0000              			DEFINE	defattr		%00001101 ; 1) fondo azul y tinta cyan
   79 0000              			DEFINE	defborder	%00000001 ; 2) pone borde azul
   80 0000              			DEFINE	definklin_lw	%00000111 ; 3) tinta blanca linea 2 barra de estado
   81 0000              			DEFINE	defink		%00000101 ; 4) tinta cyan luego de la iniciación
   82 0000
   83 0000              							  ; con estos colores sugiero:
   84 0000              							  ; "SPECTRUM ATTR 13 ASN" par conservar
   85 0000              							  ; los mismos colores en la inicialización
   86 0000
   87 0000              		ELSE
   88 0000 ~
   89 0000 ~            			; estos serían los valores para el clásico
   90 0000 ~            			; fondo/borde blanco con tinta negra
   91 0000 ~
   92 0000 ~            			DEFINE	defattr		%00111000 ; 1) fondo blanco tinta negra
   93 0000 ~            			DEFINE	defborder	%00000111 ; 2) pone borde blanco
   94 0000 ~            			DEFINE	definklin_lw	%00000000 ; 3) tinta negra linea 2 barra de estado
   95 0000 ~            			DEFINE	defink		%00000000 ; 4) tinta negra luego de la iniciación
   96 0000 ~
   97 0000 ~            							  ; con estos colores sugiero:
   98 0000 ~            							  ; "SPECTRUM ATTR 56 ASN" par conservar
   99 0000 ~            							  ; los mismos colores en la inicialización
  100 0000 ~
  101 0000              		ENDIF
  102 0000
  103 0000              	ELSE
  104 0000 ~
  105 0000 ~            		DEFINE	defattr		%00111000 ; el estandar con fondo blanco, tinta
  106 0000 ~            		DEFINE	defborder	%00000111 ; negra, y con borde blanco (ídem alt_colors=0)
  107 0000 ~            		DEFINE	definklin_lw	%00000000 ; (no se usa para alternative=0)
  108 0000 ~            		DEFINE	defink		%00000000 ; (no se usa para alternative=0)
  109 0000 ~
  110 0000              	ENDIF
  111 0000
  112 0000              ; ==================================================================================================
  113 0000
  114 0000              	INCLUDE "sysvar48.asm"			; variables del sistema para ROM 48K
# file opened: sysvar48.asm
    1+0000              ; System variable definitions for 48K Spectrum
    2+0000              ; sysvar48.asm
    3+0000
    4+0000              		DEFINE		KSTATE		$5C00
    5+0000              		DEFINE		LAST_K		$5C08
    6+0000              		DEFINE		REPDEL		$5C09
    7+0000              		DEFINE		REPPER		$5C0A
    8+0000              		DEFINE		DEFADD		$5C0B
    9+0000              		DEFINE		K_DATA		$5C0D
   10+0000              		DEFINE		TVDATA		$5C0E
   11+0000              		DEFINE		STRMS		$5C10
   12+0000              		DEFINE		CHARS		$5C36
   13+0000              		DEFINE		RASP		$5C38
   14+0000              		DEFINE		PIP		$5C39
   15+0000              		DEFINE		ERR_NR		$5C3A
   16+0000              		DEFINE		FLAGS		$5C3B
   17+0000              		DEFINE		TV_FLAG		$5C3C
   18+0000              		DEFINE		ERR_SP		$5C3D
   19+0000              		DEFINE		LIST_SP		$5C3F
   20+0000              		DEFINE		MODE		$5C41
   21+0000              		DEFINE		NEWPPC		$5C42
   22+0000              		DEFINE		NSPPC		$5C44
   23+0000              		DEFINE		PPC		$5C45
   24+0000              		DEFINE		SUBPPC		$5C47
   25+0000              		DEFINE		BORDCR		$5C48
   26+0000              		DEFINE		E_PPC		$5C49
   27+0000              		DEFINE		VARS		$5C4B
   28+0000              		DEFINE		DEST		$5C4D
   29+0000              		DEFINE		CHANS		$5C4F
   30+0000              		DEFINE		CURCHL		$5C51
   31+0000              		DEFINE		PROG		$5C53
   32+0000              		DEFINE		NXTLIN		$5C55
   33+0000              		DEFINE		DATADD		$5C57
   34+0000              		DEFINE		E_LINE		$5C59
   35+0000              		DEFINE		K_CUR		$5C5B
   36+0000              		DEFINE		CH_ADD		$5C5D
   37+0000              		DEFINE		X_PTR		$5C5F
   38+0000              		DEFINE		WORKSP		$5C61
   39+0000              		DEFINE		STKBOT		$5C63
   40+0000              		DEFINE		STKEND		$5C65
   41+0000              		DEFINE		BREG		$5C67
   42+0000              		DEFINE		MEM		$5C68
   43+0000              		DEFINE		FLAGS2		$5C6A
   44+0000              		DEFINE		DF_SZ		$5C6B
   45+0000              		DEFINE		S_TOP		$5C6C
   46+0000              		DEFINE		OLDPPC		$5C6E
   47+0000              		DEFINE		OSPCC		$5C70
   48+0000              		DEFINE		FLAGX		$5C71
   49+0000              		DEFINE		STRLEN		$5C72
   50+0000              		DEFINE		T_ADDR		$5C74
   51+0000              		DEFINE		SEED		$5C76
   52+0000              		DEFINE		FRAMES		$5C78
   53+0000              		DEFINE		UDG		$5C7B
   54+0000              		DEFINE		COORDS		$5C7D
   55+0000              		DEFINE		P_POSN		$5C7F
   56+0000              		DEFINE		PR_CC		$5C80
   57+0000              		DEFINE		ECHO_E		$5C82
   58+0000              		DEFINE		DF_CC		$5C84
   59+0000              		DEFINE		DF_CCL		$5C86
   60+0000              		DEFINE		S_POSN		$5C88
   61+0000              		DEFINE		SPOSNL		$5C8A
   62+0000              		DEFINE		SCR_CT		$5C8C
   63+0000              		DEFINE		ATTR_P		$5C8D
   64+0000              		DEFINE		MASK_P		$5C8E
   65+0000              		DEFINE		ATTR_T		$5C8F
   66+0000              		DEFINE		MASK_T		$5C90
   67+0000              		DEFINE		P_FLAG		$5C91
   68+0000              		DEFINE		MEMBOT		$5C92
   69+0000              		DEFINE		NMIADD		$5CB0	; ONLY USED IN +3
   70+0000              		DEFINE		RAMTOP		$5CB2
   71+0000              		DEFINE		P_RAMT		$5CB4
   72+0000
# file closed: sysvar48.asm
  115 0000              	INCLUDE "sysvarp3.asm"			; variables del sistema para +3DOS
# file opened: sysvarp3.asm
    1+0000              ; VARIABLES DEL SISTEMA ESPECIFICAS PARA +3DOS QUE VAN
    2+0000              ; EN LO QUE ANTES ERA EL BUFFER DE IMPRESORA
    3+0000
    4+0000              		DEFINE		SWAP		$5B00
    5+0000              		DEFINE		STOO		$5B10
    6+0000              		DEFINE		YOUNGER		$5B21
    7+0000              		DEFINE		REGNUOY		$5B2A
    8+0000              		DEFINE		ONERR		$5B3A
    9+0000              		DEFINE		OLDHL		$5B52
   10+0000              		DEFINE		OLDBC		$5B54
   11+0000              		DEFINE		OLDAF		$5B56
   12+0000              		DEFINE		TARGET		$5B58
   13+0000              		DEFINE		RETADDR		$5B5A
   14+0000              		DEFINE		BANKM		$5B5C
   15+0000              		DEFINE		RAMRST		$5B5D
   16+0000              		DEFINE		RAMERR		$5B5E
   17+0000              		DEFINE		BAUD		$5B5F
   18+0000              		DEFINE		SERFL		$5B61
   19+0000              		DEFINE		COL		$5B63
   20+0000              		DEFINE		WIDTH		$5B64
   21+0000              		DEFINE		TVPARS		$5B65
   22+0000              		DEFINE		FLAGS3		$5B66
   23+0000              		DEFINE		BANK678		$5B67
   24+0000              		DEFINE		XLOC		$5B68
   25+0000              		DEFINE		YLOC		$5B69
   26+0000              		DEFINE		OLDSP		$5B6A
   27+0000              		DEFINE		SYNRET		$5B6C
   28+0000              		DEFINE		LASTV		$5B6E
   29+0000              		DEFINE		RC_LINE		$5B73
   30+0000              		DEFINE		RC_START	$5B75
   31+0000              		DEFINE		RC_STEP		$5B77
   32+0000              		DEFINE		LODDRV		$5B79
   33+0000              		DEFINE		SAVDRV		$5B7A
   34+0000              		DEFINE		DUMPLF		$5B7B
   35+0000              		DEFINE		STRIP1		$5B7C
   36+0000              		DEFINE		STRIP2		$5B84
   37+0000              		DEFINE		TSTACK		$5BFF
   38+0000
   39+0000              ; PUERTOS DE SWITCHEO DE MEMORIA
   40+0000              PBANKM:		EQU		$7FFD			; PUERTO CONF. DE PAGINAS RAM (1)
   41+0000              PBANK678:	EQU		$1FFD			; PUERTO CONF. DE PAGINAS RAM (2)
# file closed: sysvarp3.asm
  116 0000              	INCLUDE "sysvarp7.asm"			; variables +3e página 7
# file opened: sysvarp7.asm
    1+0000              ;--------------------------------------------------
    2+0000              ; Additional system variables used in the +3
    3+0000              ;--------------------------------------------------
    4+0000
    5+0000              ; System variables and data structures in DOS workspace (page 7)
    6+0000
    7+0000              ; Alternate screen $C000-$DAFF
    8+0000              ; Also used by +3 BASIC commands for temporary storage
    9+0000
   10+0000              	DEFINE		src_add		$C000		; (2) address of source filespec
   11+0000              	DEFINE		dst_add		$C002		; (2) address of dest filespec
   12+0000              	DEFINE		src_drv		$C004		; (1) source drive
   13+0000              	DEFINE		dst_drv		$C005		; (1) dest drive
   14+0000              	DEFINE		eof		$C006		; (1) EOF flag
   15+0000              	DEFINE		free_m		$C007		; (2) space free on M: for copying
   16+0000              	DEFINE		copy_ram	$C009		; (1) flag: true if copy via RAM, not M:
   17+0000              	DEFINE		dst_open	$C00A		; (1) flag: true if dst_file is open
   18+0000              	DEFINE		wild		$C00B		; (1) flag: true for wildcards in filespec
   19+0000              	DEFINE		dst_dev		$C00C		; (1) dest dev:$00=file,$e0=printer,$aa=screen
   20+0000              	DEFINE		tmp_bytes	$C00D		; (2) #bytes copied to temporary file
   21+0000              	DEFINE		copied		$C00F		; (1) #files copied
   22+0000              	DEFINE		dst_file	$C010		; (18) dest filespec ($ff-term)
   23+0000              	DEFINE		src_file	$C022		; (18) source filespec ($ff-term)
   24+0000              	DEFINE		cat_spec	$C034		; (13) filespec to search catalog from
   25+0000              	DEFINE		wld_next	$C041		; (13) next filename formed from wild spec
   26+0000              	DEFINE		tmp_file	$C04E		; (18) temp filespec ($ff-term)
   27+0000
   28+0000              ; +3DOS permanent structures & variables
   29+0000
   30+0000              	DEFINE		pg_buffer	$DB00		; ($20) buffer for copying between pages
   31+0000              	DEFINE		rt_alert	$DB20		; (2) ALERT routine address
   32+0000              	DEFINE		al_resp		$DB22		; (7) ALERT response string
   33+0000              	DEFINE		al_mess		$DB29		; ($77) message for ALERT routine
   34+0000              	DEFINE		fcbs		$DBA0		; ($380) FCBs ($38 bytes each for $10 files)
   35+0000              	DEFINE		sysfcb0		$DF20		; ($38) system FCB 0
   36+0000              	DEFINE		sysfcb1		$DF58		; ($38) system FCB 1
   37+0000              	DEFINE		filerecs	$DF90		; (3) #recs in file (during open)
   38+0000              	DEFINE		def_user	$DF93		; (1) default user area
   39+0000              	DEFINE		def_drv		$DF94		; (1) default drive
   40+0000              	DEFINE		extchg		$DF95		; (1) extents changed in operation flag
   41+0000              	DEFINE		att_clr		$DF96		; (1) attributes to clear
   42+0000              	DEFINE		att_set		$DF97		; (1) attributes to set
   43+0000              	DEFINE		cat_buff	$DF98		; (2) address of catalog buffer
   44+0000              	DEFINE		cat_filt	$DF9A		; (1) catalog filter
   45+0000              	DEFINE		cat_size	$DF9B		; (1) catalog buffer size (in entries)
   46+0000              	DEFINE		cat_ents	$DF9C		; (1) number of completed catalog entries
   47+0000
   48+0000              	; $df9d-$df9f unused (3 bytes)
   49+0000
   50+0000              	DEFINE		rt_dirent	$DFA0		; (2) routine to call for every dir entry
   51+0000              	DEFINE		direntry	$DFA2		; ($20) directory entry buffer
   52+0000
   53+0000              	; $dfc2-$dfcf unused (14 bytes)
   54+0000              	; Not advisable to use, due to bug in datestamp checking routine
   55+0000
   56+0000              	DEFINE		rw_page		$DFD0		; (1) page to read/write to
   57+0000              	DEFINE		rw_add		$DFD1		; (2) address to read/write to
   58+0000
   59+0000              	; $dfd3-$dfdf unused (13 bytes)
   60+0000
   61+0000              	DEFINE		bcbs		$DFE0		; ($b0) BCBs ($0b bytes each for $10 buffers)
   62+0000              	DEFINE		cache7		$E090		; ($200) Page 7 cache buffer (always exists)
   63+0000              	DEFINE		cachenum	$E290		; (1) number of cache buffers
   64+0000              	DEFINE		cachefst	$E291		; (1) first cache buffer number
   65+0000              	DEFINE		bcb_inuse	$E292		; (2) inuse BCB chain
   66+0000              	DEFINE		bcb_free	$E294		; (2) free BCB chain
   67+0000
   68+0000              	; $e296-$e29f unused (10 bytes)
   69+0000
   70+0000              	DEFINE		xdpb_ptrs	$E2A0		; ($20) pointers to XDPBs (or 0) for A: to P:
   71+0000              	DEFINE		xdpb_a		$E2C0		; ($30) XDPB for drive A:
   72+0000              	DEFINE		chksm_a		$E2F0		; ($10) checksum vector for drive A:
   73+0000              	DEFINE		alloc_a		$E300		; ($2d) allocation bitmap for drive A:
   74+0000              	DEFINE		xdpb_b		$E32D		; ($30) XDPB for drive B:
   75+0000              	DEFINE		chksm_b		$E35D		; ($10) checksum vector for drive B:
   76+0000              	DEFINE		alloc_b		$E36D		; ($2d) allocation bitmap for drive B:
   77+0000              	DEFINE		xdpb_m		$E39A		; ($30) XDPB for drive M:
   78+0000              	DEFINE		alloc_m		$E3CA		; ($20) allocation bitmap for drive M:
   79+0000              	DEFINE		unit0		$E3EA		; (1) drive mapped to unit 0
   80+0000              	DEFINE		rt_chgdsk	$E3EB		; (2) CHANGE_DISK routine address
   81+0000              	DEFINE		rt_temp		$E3ED		; (2) address of subroutine (temporary)
   82+0000              	DEFINE		spec_m		$E3EF		; (8) disk spec for drive M:
   83+0000
   84+0000              	; $e3f7-$e3ff unused (9 bytes)
   85+0000
   86+0000              	DEFINE		ddl_parms	$E400		; ($19) parameters in calls to DD_L_READ etc
   87+0000              	DEFINE		rt_encode	$E419		; (2) ENCODE routine address
   88+0000
   89+0000              	; $e41a-$e41f unused (6 bytes)
   90+0000
   91+0000              	DEFINE		equipment	$E420		; (8) equipment info for FD units 0 to 3
   92+0000              							; Byte 0: bits 0..1=side info (0=unknown,1/2=#sides)
   93+0000              							; Byte 0: bits 2..3=track info (0=unknown,1/2=single/double)
   94+0000              							; Byte 0: bit 6 set if head position known
   95+0000              							; Byte 1: track under head
   96+0000              	DEFINE		tm_mtron	$E428		; (1) motor on time
   97+0000              	DEFINE		tm_mtroff	$E429		; (1) motor off time
   98+0000              	DEFINE		tm_wroff	$E42A		; (1) write off time
   99+0000              	DEFINE		tm_hdset	$E42B		; (1) head settle time
  100+0000              	DEFINE		tm_step		$E42C		; (1) step rate
  101+0000              	DEFINE		retry_cnt	$E42D		; (1) retry count
  102+0000
  103+0000              	; $e42e-$e42f unused (2 bytes)
  104+0000
  105+0000              	DEFINE		fdc_res		$E430		; (8) FDC results buffer
  106+0000
  107+0000              	; $e438-$e5ff unused (456 bytes)
  108+0000
  109+0000              	DEFINE		timeout		$E600		; (1) current disk motor timeout
  110+0000
  111+0000              	; $e601 unused (1 byte)
  112+0000
  113+0000              ; From this point, "unused" status is not 100% certain, due to limited
  114+0000              ; knowledge of the Editor ROM
  115+0000
  116+0000              ; Temporary storage used when switching ROMs etc
  117+0000
  118+0000              	DEFINE		tmp_sp		$E602		; (2) temporary SP store
  119+0000              	DEFINE		tmp_ret		$E604		; (2) temporary return address store
  120+0000              	DEFINE		tmp_af		$E606		; (2) temporary AF store
  121+0000              	DEFINE		tmp_hl		$E608		; (2) temporary HL store
  122+0000              	DEFINE		tmp_de		$E60A		; (2) temporary DE store
  123+0000              	DEFINE		tmp_bc		$E60C		; (2) temporary BC store
  124+0000
  125+0000              	; $e60e-$e77b unused (366 bytes)
  126+0000
  127+0000              	DEFINE		tmp_stack	$E7ff		; ($84) temporary TSTACK store
  128+0000              							; from $e77c-$e7ff
  129+0000
  130+0000              	; $e800-$ebff unused (1024 bytes)
  131+0000
  132+0000              ; Editor variables
  133+0000
  134+0000              	DEFINE		men_high	$EC0C		; (1) highlighted menu line
  135+0000              	DEFINE		ed_flags	$EC0D		; (1) - bit 1 set when processing menu
  136+0000              	DEFINE		process		$EC0E		; (1) process: $07 Loader, $04 Calculator
  137+0000              	DEFINE		ed_ATTR_P	$EC0F		; (1) editor/saved ATTR_P
  138+0000              	DEFINE		ed_MASK_P	$EC10		; (1) editor/saved MASK_P
  139+0000              	DEFINE		ed_ATTR_T	$EC11		; (1) editor/saved ATTR_T
  140+0000              	DEFINE		ed_MASK_T	$EC12		; (1) editor/saved MASK_T
  141+0000              	DEFINE		ed_P_FLAG	$EC13		; (1) editor/saved P_FLAG
  142+0000              	DEFINE		ed_N_ROWS	$EC15		;
  143+0000
  144+0000              	; $ec20-$ecff unused (224 bytes)
  145+0000
  146+0000              ; Temporary buffers/storage
  147+0000
  148+0000              	DEFINE		tmp_fspec	$ED01		; (??) temporary filespec workspace
  149+0000              	DEFINE		tmp_buff	$ED11		; (2048) temporary buffer for FORMAT/COPY
  150+0000              							; *BUG* means COPY uses page 0 instead of 7
  151+0000              	; $f511-$f6e9 unused (473 bytes)
  152+0000
  153+0000              	DEFINE		men_rout	$F6EA		; (2) address of menu routines table
  154+0000              	DEFINE		men_text	$F6EC		; (2) address of menu text
  155+0000              	DEFINE		ed_area		$F6F3		; (1) Edit area info - Number of rows in the editing area.
  156+0000              	DEFINE		row_below	$F6F5		; (1) Number of rows held in the Below-Screen Line Edit Buffer.
  157+0000
  158+0000              	; $f700-$f8ff unused (512 bytes)
  159+0000
  160+0000              	DEFINE		nr_above	$F9DB		; (1) Number of rows held in the Above-Screen Line Edit Buffer.
  161+0000
  162+0000              	; $fa00-$fbff unused (512 bytes)
  163+0000
  164+0000              	DEFINE		ign_space	$FC9E		; (1) flag: if set, ignore leading space
  165+0000              	DEFINE		line_add	$FC9F		; (2) 0 or add of line data
  166+0000              	DEFINE		ascii_add	$FCA1		; (2) 0 or add of ASCII expanded token/number
  167+0000              	DEFINE		ascii_txt	$FCA3		; (??) bit-7 terminated ASCII text
  168+0000
  169+0000              	; IX normally set to $fd98, so this area unknown exactly
  170+0000
  171+0000              	DEFINE		edit_top	$FD99		; (1) top screen line of editing area
  172+0000
  173+0000              	DEFINE		curs_cols	$FD9E		; (1) cursor colours
  174+0000              	DEFINE		curs_attr	$FD9F		; (1) saved attribute under cursor
  175+0000              	DEFINE		chkword		$FDA0		; (??) word to check if token
  176+0000
  177+0000              	; $fe00-$ffff used to load bootsector by +3DOS ROM
  178+0000              ;--------------------------------------------------
  179+0000              ;
  180+0000              	; ADICIONO variableas PARA MI EXTENSION DE CARGA DE ARCHIVOS TAPs
  181+0000
  182+0000              	DEFINE		tmp_workmem		$8000	; idem para contener rutinas temp y stack
  183+0000              	DEFINE		save_buffer		$c100	; creo que +3DOS no usa esto (1K)
  184+0000              	DEFINE		tmp_buffertap		$c600	; tmp en donde vuelco lo que lea desde disco
  185+0000              	DEFINE		CONFRAM			$E800	; guardo el nro de pagina del 4to seg que
  186+0000              							; habia al llamarse la rutina LOAD de ROM3
  187+0000              	DEFINE		tmp_BANKM		$E801	; guardo una copia aqui de lo que habia en BANKM
  188+0000              	DEFINE		tmp_BANK678		$E802	; idem pero para BANK678
  189+0000              	DEFINE		save_STACK		$E803	; (2) guardo temporalmente SP aqui
  190+0000              	DEFINE		tapl_stat1		$E805	; (1) multiproposito tapeloader 1
  191+0000              	DEFINE		tapl_stat2		$E806	; (1) multiproposito tapeloader 2
  192+0000              	DEFINE		save_REGI		$E807	; (1) respaldo aqui el registro I
  193+0000              	DEFINE		save_INTERR		$E808	; (1) respaldo aqui el estado de las interrupciones
  194+0000              	DEFINE		buffer_ADDR		$E809	; (2) direccion del buffer por la que voy
  195+0000              	DEFINE		buffer_COUNT		$E80B	; (2) cuenta regresiva para vaciar el buffer
  196+0000              	DEFINE		end_LOAD		$E80D	; (1) poner a 1 para terminar la carga y salir por error
  197+0000              	DEFINE		EXCEPCIONES		$E80E	; (1) indique llamar a funciones alternativas en la funcion
  198+0000              							; que llega del buffer
  199+0000              	DEFINE		S_PFILE			$E80F	; (4) guarda temporalmente la posicion del puntero del archivo #6
  200+0000              	DEFINE		save_rt_alert		$E813	; (2) swapeo acá la dir de la rutina alert. para desactivarla
  201+0000              							; mientras dure la carga desde "cinta"
  202+0000
  203+0000              	DEFINE		buff_tapsize		5*1024	; si uso valores mayores o no funciona, o queda corrupto
  204+0000
# file closed: sysvarp7.asm
  117 0000
  118 0000              ; ==================================================================================================
  119 0000
  120 0000              	INCLUDE	"plus3ROM0.asm"			; ROM DEL EDITOR ROM
# file opened: plus3ROM0.asm
    1+0000              		OUTPUT	"p3t_rom0.rom"
    2+0000
    3+0000              		ORG	$0000
    4+0000
    5+0000              ; **************************************************
    6+0000              ; *** SPECTRUM +3 ROM 0 DISASSEMBLY (EDITOR ROM) ***
    7+0000              ; **************************************************
    8+0000
    9+0000              ; The Spectrum ROMs are copyright Amstrad, who have kindly given permission
   10+0000              ; to reverse engineer and publish Spectrum ROM disassemblies.
   11+0000
   12+0000
   13+0000              ; =====
   14+0000              ; NOTES
   15+0000              ; =====
   16+0000
   17+0000              ; ------------------------
   18+0000              ; Disassembly Contributors
   19+0000              ; ------------------------
   20+0000              ; Garry Lancaster
   21+0000              ;
   22+0000              ; The ROM disassembly was created with the aid of dZ80 V1.10, and incorporates work from
   23+0000              ; "The canonical list of +3 oddities" by Ian Collier.
   24+0000
   25+0000              ; -----------------
   26+0000              ; Assembler Details
   27+0000              ; -----------------
   28+0000
   29+0000              ; This file can be assembled to produce a binary omp348k.romage of the ROM
   30+0000              ; with Interlogic's Z80ASM assembler (available for Z88, QL, DOS and Linux).
   31+0000              ; Note that the defs directive is used and this causes a block of $00 bytes to be created.
   32+0000
   33+0000              		ORG	$0000
   34+0000
   35+0000 F3           l0000:		DI
   36+0001 01 03 6C     		LD	BC,$6C03
   37+0004
   38+0004 0B           l0004:		DEC	BC		; Delay for approx 0.2s
   39+0005 78           		LD	A,B
   40+0006 B1           		OR	C
   41+0007 20 FB        		JR	NZ,l0004
   42+0009 C3 0F 01     		JP	l010f		; go to test memory
   43+000C
   44+000C 45 44        		DB	"ED"		; Editor ROM ID
   45+000E 00 00        		DS	2
   46+0010
   47+0010              ; RST 10: call the RST 10 routine in ROM 3 to print a character
   48+0010
   49+0010 EF           l0010:		RST	28H
   50+0011 10 00        		DW	$0010		; call RST 10 in ROM 3
   51+0013 C9           		RET
   52+0014
   53+0014 00 00 00 00  		DS	4
   54+0018
   55+0018              ; RST 18: call the RST 18 routine in ROM 3 to collect a character
   56+0018
   57+0018 EF           l0018:		RST	28H
   58+0019 18 00        		DW	$0018		; call RST 18 in ROM 3
   59+001B C9           		RET
   60+001C
   61+001C 00 00 00 00  		DS	4
   62+0020
   63+0020              ; RST 20: call the RST 20 routine in ROM 3 to collect next character
   64+0020
   65+0020 EF           l0020:		RST	28H
   66+0021 20 00        		DW	$0020		; call RST 20 in ROM 3
   67+0023 C9           		RET
   68+0024
   69+0024 00 00 00 00  		DS	4
   70+0028
   71+0028              ; RST 28 : Call a routine in ROM 3, then return to ROM 0
   72+0028              ; The address following the RST 28 instruction is called, then control
   73+0028              ; is returned to the instruction following the address
   74+0028
   75+0028 E3           l0028:		EX	(SP),HL		; save HL, get return address
   76+0029 F5           		PUSH	AF		; save AF
   77+002A 7E           		LD	A,(HL)		; A=low byte of address to call
   78+002B 23           		INC	HL
   79+002C 23           		INC	HL		; HL=address of instruction to return to
   80+002D 22 5A 5B     		LD	(	$5B5A),HL	; save
   81+0030
   82+0030 2B           l0030:		DEC	HL
   83+0031 66           		LD	H,(HL)
   84+0032 6F           		LD	L,A		; HL=address to call in ROM 3
   85+0033 F1           		POP	AF		; restore AF
   86+0034 C3 AE 00     		JP	l00ae		; jump on
   87+0037
   88+0037 00           		DS	1
   89+0038
   90+0038              ; The maskable interrupt routine, called every 50ms while in IM1
   91+0038
   92+0038 E5           l0038:		PUSH	HL		; save HL
   93+0039 21 48 00     		LD	HL,o0048
   94+003C E5           		PUSH	HL
   95+003D 21 00 5B     		LD	HL,	$5B00
   96+0040 E5           		PUSH	HL
   97+0041 21 38 00     		LD	HL,o0038
   98+0044 E5           		PUSH	HL
   99+0045 C3 00 5B     		JP		$5B00		; call MASK-INT and KEY-INT in ROM 3
  100+0048 E1           		POP	HL		; restore HL
  101+0049 F3           		DI			; disable interrupts again
  102+004A CD 74 00     		CALL	l0074
  103+004D FB           		EI			; re-enable interrupts
  104+004E C9           		RET
  105+004F
  106+004F              FREE_ROM0_0:	EQU	$
  107+004F
  108+004F              		;...
  109+004F              		;...
  110+004F
  111+004F              R0_FREE_0:	EQU	$17-($-FREE_ROM0_0)
  112+004F 00 00 00...  ROM0_SPARE0:	DS	R0_FREE_0
  113+0066
  114+0066              ; NMI routine
  115+0066
  116+0066 F5           l0066:		PUSH	AF		; save AF & HL
  117+0067 E5           		PUSH	HL
  118+0068 2A B0 5C     		LD	HL,(	$5CB0	)
  119+006B 7C           		LD	A,H
  120+006C B5           		OR	L
  121+006D 28 01        		JR	Z,l0070		; skip if no routine (NMIADD=0)
  122+006F E9           		JP	(HL)		; else execute
  123+0070 E1           l0070:		POP	HL		; restore registers
  124+0071 F1           		POP	AF
  125+0072 ED 45        		RETN
  126+0074
  127+0074              ; Disk motor timeout subroutine
  128+0074              ; Called by maskable interrupt to turn off disk motor when timeout occurs
  129+0074
  130+0074 F5           l0074:		PUSH	AF		; save AF & BC
  131+0075 C5           		PUSH	BC
  132+0076 01 FD 7F     		LD	BC,PBANKM
  133+0079 3A 5C 5B     		LD	A,(	$5B5C)
  134+007C F6 07        		OR	$07
  135+007E ED 79        		OUT	(C),A		; get page 7 (+3DOS workspace)
  136+0080 3A 00 E6     		LD	A,($E600)	; check motor off timeout
  137+0083 B7           		OR	A
  138+0084 28 1D        		JR	Z,l00a3		; move on if already off
  139+0086 3A 78 5C     		LD	A,(	$5C78)
  140+0089 CB 47        		BIT	0,A
  141+008B 20 16        		JR	NZ,l00a3	; only decrement every other time
  142+008D 3A 00 E6     		LD	A,($E600)
  143+0090 3D           		DEC	A
  144+0091 32 00 E6     		LD	($E600),A	; decrement motor off timeout
  145+0094 20 0D        		JR	NZ,l00a3	; move on if still should be on
  146+0096 01 FD 1F     		LD	BC,PBANK678
  147+0099 3A 67 5B     		LD	A,(	$5B67)
  148+009C E6 F7        		AND	$F7
  149+009E 32 67 5B     		LD	(	$5B67),A
  150+00A1 ED 79        		OUT	(C),A		; turn motor off
  151+00A3 01 FD 7F     l00a3:		LD	BC,PBANKM
  152+00A6 3A 5C 5B     		LD	A,(	$5B5C)
  153+00A9 ED 79        		OUT	(C),A		; page previous memory back in
  154+00AB C1           		POP	BC		; restore registers
  155+00AC F1           		POP	AF
  156+00AD C9           		RET
  157+00AE
  158+00AE              ; Continuation of RST 28: call a routine in ROM 3
  159+00AE
  160+00AE 22 58 5B     l00ae:		LD	(	$5B58),HL	; save ROM 3 address in TARGET
  161+00B1 21 21 5B     		LD	HL,	$5B21
  162+00B4 E3           		EX	(SP),HL		; stack YOUNGER address beneath TOS
  163+00B5 E5           		PUSH	HL
  164+00B6 2A 58 5B     		LD	HL,(	$5B58)	; get HL=target address in ROM 3
  165+00B9 E3           		EX	(SP),HL		; restore HL & save target address on stack
  166+00BA C3 00 5B     		JP		$5B00		; jump to SWAP - pages in ROM 3, returns to
  167+00BD              					; target routine which returns to YOUNGER
  168+00BD              					; where ROM 0 is paged back and jump made
  169+00BD              					; back to RETADDR
  170+00BD
  171+00BD
  172+00BD              ; Here follows the five paging subroutines which are copied into
  173+00BD              ; the system variables on startup
  174+00BD
  175+00BD              ; Enter at SWAP to change ROM 0<->3 or ROM 1<->2
  176+00BD
  177+00BD F5           l00bd:		PUSH	AF		; save AF & BC
  178+00BE C5           		PUSH	BC
  179+00BF 01 FD 7F     		LD	BC,PBANKM
  180+00C2 3A 5C 5B     		LD	A,(	$5B5C)	; get copy of last OUT to $7FFD
  181+00C5 EE 10        		XOR	$10		; change ROM 0<->1 or ROM 2<->3
  182+00C7 F3           		DI			; disable interrupts
  183+00C8 32 5C 5B     		LD	(	$5B5C),A
  184+00CB ED 79        		OUT	(C),A		; page new ROM
  185+00CD
  186+00CD              ; Enter at STOO with interrupts disabled and AF/BC stacked
  187+00CD              ; to change ROM 0<->2 or ROM 1<->3
  188+00CD
  189+00CD 01 FD 1F     l00cd:		LD	BC,PBANK678
  190+00D0 3A 67 5B     		LD	A,(	$5B67)	; get copy of last OUT to $1FFD
  191+00D3 EE 04        		XOR	$04		; change ROM 0<->2 or ROM 1<->3
  192+00D5 32 67 5B     		LD	(	$5B67),A
  193+00D8 ED 79        		OUT	(C),A		; page new ROM
  194+00DA FB           		EI			; re-enable interrupts
  195+00DB C1           		POP	BC		; restore registers
  196+00DC F1           		POP	AF
  197+00DD C9           		RET
  198+00DE
  199+00DE              ; Enter at YOUNGER with return address in RETADDR to swap
  200+00DE              ; ROM 0<->3 or ROM 1<->2 and return there
  201+00DE
  202+00DE CD 00 5B     l00de:		CALL		$5B00		; swap ROM 0<->3 or ROM 1<->2
  203+00E1 E5           		PUSH	HL		; save HL
  204+00E2 2A 5A 5B     		LD	HL,(	$5B5A)	; get return address from system vars
  205+00E5 E3           		EX	(SP),HL		; restore return address & HL
  206+00E6 C9           		RET
  207+00E7
  208+00E7              ; Enter at REGNUOY with return address in RETADDR to swap
  209+00E7              ; ROM 0<->2 or ROM 1<->3 and return there
  210+00E7
  211+00E7 E5           l00e7:		PUSH	HL		; save HL
  212+00E8 21 34 5B     		LD	HL,$5B34
  213+00EB E3           		EX	(SP),HL		; place $5B34 as return address
  214+00EC F5           		PUSH	AF		; save AF & BC
  215+00ED C5           		PUSH	BC
  216+00EE C3 10 5B     		JP		$5B10		; swap ROM 0<->2 or ROM 1<->3 and return here
  217+00F1 E5           		PUSH	HL		; save HL
  218+00F2 2A 5A 5B     		LD	HL,(	$5B5A)	; get return address from system vars
  219+00F5 E3           		EX	(SP),HL		; restore return address & HL
  220+00F6 C9           		RET
  221+00F7
  222+00F7              ; Enter at ONERR to page in Syntax ROM (ROM 1) and jump to error handler
  223+00F7
  224+00F7 F3           l00f7:		DI
  225+00F8 AF           		XOR	A
  226+00F9 01 FD 1F     		LD	BC,PBANK678
  227+00FC ED 79        		OUT	(C),A		; ensure ROM 0 or 1 is paged
  228+00FE 32 67 5B     		LD	(	$5B67),A
  229+0101 CB E7        		SET	4,A
  230+0103 01 FD 7F     		LD	BC,PBANKM
  231+0106 ED 79        		OUT	(C),A		; ensure ROM 1 is paged
  232+0108 32 5C 5B     		LD	(	$5B5C),A
  233+010B FB           		EI			; enable interrupts
  234+010C C3 3A 25     		JP	m253a		; jump to error handler in ROM 1
  235+010F
  236+010F              ; Test memory at startup & initialise
  237+010F
  238+010F 06 08        l010f:		LD	B,$08		; 8 pages to clear
  239+0111
  240+0111 78           l0111:		LD	A,B
  241+0112 D9           		EXX
  242+0113 3D           		DEC	A
  243+0114 01 FD 7F     		LD	BC,PBANKM
  244+0117 ED 79        		OUT	(C),A		; page next RAM page to $C000
  245+0119 21 00 C0     		LD	HL,$C000
  246+011C 11 01 C0     		LD	DE,$C001
  247+011F 01 FF 3F     		LD	BC,$3FFF
  248+0122 36 00        		LD	(HL),$00
  249+0124 ED B0        		LDIR			; clear it
  250+0126 D9           		EXX
  251+0127 10 E8        		DJNZ	l0111		; back for more pages
  252+0129 AF           		XOR	A
  253+012A 21 BA DC     		LD	HL,$DCBA	; an address in top 16K of ROM
  254+012D 01 FD 7F     		LD	BC,PBANKM	; memory paging address
  255+0130
  256+0130 11 08 01     l0130:		LD	DE,$0108	; E=8 bits to test, D=bit 0
  257+0133 ED 79        		OUT	(C),A		; get next page to segment 3
  258+0135 08           		EX	AF,AF'		; save A'=page
  259+0136
  260+0136 7A           l0136:		LD	A,D		; test to see if bit can be set
  261+0137 77           		LD	(HL),A
  262+0138 7E           		LD	A,(HL)
  263+0139 A2           		AND	D
  264+013A CA 67 03     		JP	Z,l0367		; jump if memory not re-read correctly
  265+013D 2F           		CPL			; test to see if bit can be reset
  266+013E 77           		LD	(HL),A
  267+013F 7E           		LD	A,(HL)
  268+0140 A2           		AND	D
  269+0141 C2 67 03     		JP	NZ,l0367	; jump if memory not re-read correctly
  270+0144 CB 02        		RLC	D
  271+0146 1D           		DEC	E
  272+0147 20 ED        		JR	NZ,l0136	; loop back to test other bits
  273+0149 08           		EX	AF,AF'
  274+014A 3C           		INC	A
  275+014B FE 08        		CP	$08
  276+014D 20 E1        		JR	NZ,l0130	; loop back to test other pages
  277+014F 0E FD        		LD	C,$FD
  278+0151 16 FF        		LD	D,$FF
  279+0153 1E BF        		LD	E,$BF
  280+0155 42           		LD	B,D
  281+0156 3E 0E        		LD	A,$0E
  282+0158 ED 79        		OUT	(C),A		; select AY register 14 (RS232/AUX)
  283+015A 43           		LD	B,E
  284+015B 3E FF        		LD	A,$FF
  285+015D ED 79        		OUT	(C),A		; set all RS232/AUX lines high
  286+015F 18 06        		JR	l0167		; move on, with page 7 at $C000
  287+0161
  288+0161
  289+0161              ; Apparently unused section, possibly originally intended to
  290+0161              ; flag a memory error
  291+0161
  292+0161 D9           		EXX
  293+0162 78           		LD	A,B
  294+0163 D3 FE        		OUT	($FE),A
  295+0165 18 FE        l0165:		JR	l0165
  296+0167
  297+0167
  298+0167              ; More initialisation (with page 7 at $C000)
  299+0167
  300+0167 AF           l0167:		XOR	A
  301+0168 08           		EX	AF,AF'		; A' clear to show reset, not NEW
  302+0169 31 00 60     		LD	SP,$6000	; set stack within page 5
  303+016C
  304+016C 42           l016c:		LD	B,D
  305+016D 3E 07        		LD	A,$07
  306+016F ED 79        		OUT	(C),A		; select AY register $07
  307+0171 43           		LD	B,E
  308+0172 3E FF        		LD	A,$FF
  309+0174 ED 79        		OUT	(C),A		; initialise AY chip (?)
  310+0176 11 00 5B     		LD	DE,	$5B00
  311+0179 21 BD 00     		LD	HL,l00bd
  312+017C 01 52 00     		LD	BC,$0052
  313+017F ED B0        		LDIR			; copy paging subroutines to system vars
  314+0181 3E CF        		LD	A,$CF
  315+0183 32 5D 5B     		LD	(	$5B5D),A	; place RST 8 instruction at RAMRST
  316+0186 21 FF FF     		LD	HL,$FFFF
  317+0189 22 B4 5C     		LD	(	$5CB4),HL	; set P RAMT to 64K
  318+018C 11 AF 3E     		LD	DE,$3EAF	; prepare to copy chars A-U from ROM 3
  319+018F 01 A8 00     		LD	BC,$00A8	; to UDG area
  320+0192 EB           		EX	DE,HL
  321+0193 EF           		RST	28H		; execute a LDDR from ROM 3 to copy them
  322+0194 61 16        		DW	o1661
  323+0196 EB           		EX	DE,HL
  324+0197 23           		INC	HL
  325+0198 22 7B 5C     		LD	(	$5C7B),HL	; store address of first UDG
  326+019B 2B           		DEC	HL
  327+019C 01 40 00     		LD	BC,$0040
  328+019F ED 43 38 5C  		LD	(	$5C38),BC	; set RASP and PIP
  329+01A3 22 B2 5C     		LD	(	$5CB2),HL	; set RAMTOP below UDGs
  330+01A6 21 66 5B     		LD	HL,	$5B66
  331+01A9 CB BE        		res	7,(HL)		; reset bit 7 of FLAGS3 (??)
  332+01AB 21 7B 5B     		LD	HL,	$5B7B
  333+01AE 36 09        		LD	(HL),$09	; set DUMPLF
  334+01B0
  335+01B0              ; The NEW command enters here
  336+01B0
  337+01B0 21 00 3C     l01b0:		LD	HL,$3C00
  338+01B3 22 36 5C     		LD	(	$5C36),HL	; set CHARS
  339+01B6 ED 56        		IM	1		; set interrupt mode 1
  340+01B8 FD 21 3A 5C  		LD	IY,	$5C3A	; IY points to ERR NR
  341+01BC FD CB 01 E6  		SET	4,(IY+$01)	; set "+3 BASIC mode"
  342+01C0 21 66 5B     		LD	HL,	$5B66
  343+01C3 CB 9E        		res	3,(HL)		; set "print to Centronics"
  344+01C5 CB D6        		SET	2,(HL)		; set "print expanded tokens"
  345+01C7 21 0B 00     		LD	HL,$000B
  346+01CA 22 5F 5B     		LD	(	$5B5F),HL	; set BAUD
  347+01CD AF           		XOR	A
  348+01CE 32 61 5B     		LD	(	$5B61),A	; clear SERFL
  349+01D1 32 63 5B     		LD	(	$5B63),A		; clear COL
  350+01D4 32 65 5B     		LD	(	$5B65),A	; clear TVPARS
  351+01D7 21 00 EC     		LD	HL,$EC00
  352+01DA 22 24 FF     		LD	($FF24),HL	; ???
  353+01DD 3E 50        		LD	A,$50
  354+01DF 32 64 5B     		LD	(	$5B64),A	; set WIDTH
  355+01E2 21 0A 00     		LD	HL,$000A
  356+01E5 22 75 5B     		LD	($5B75),HL	; set RCSTART
  357+01E8 22 77 5B     		LD	(	$5B77),HL	; set RCSTEP
  358+01EB 3E 54        		LD	A,$54
  359+01ED 32 79 5B     		LD	(	$5B79),A	; set LODDRV to "T"
  360+01F0 32 7A 5B     		LD	(	$5B7A),A	; set SAVDRV to "T"
  361+01F3 21 B6 5C     		LD	HL,$5CB6
  362+01F6 22 4F 5C     		LD	(	$5C4F),HL	; set CHANS immediately after system vars
  363+01F9 11 B8 03     		LD	DE,l03b8
  364+01FC 01 15 00     		LD	BC,$0015
  365+01FF EB           		EX	DE,HL
  366+0200 ED B0        		LDIR			; copy initial channel information
  367+0202 EB           		EX	DE,HL
  368+0203 2B           		DEC	HL
  369+0204 22 57 5C     		LD	(	$5C57),HL	; set DATADD after CHANS
  370+0207 23           		INC	HL
  371+0208 22 53 5C     		LD	(	$5C53),HL	; set PROG after DATADD
  372+020B 22 4B 5C     		LD	(	$5C4B),HL	; set VARS
  373+020E 36 80        		LD	(HL),$80	; store end of variables marker
  374+0210 23           		INC	HL
  375+0211 22 59 5C     		LD	(	$5C59),HL	; set ELINE after VARS
  376+0214 36 0D        		LD	(HL),$0D	; store end of line marker
  377+0216 23           		INC	HL
  378+0217 36 80        		LD	(HL),$80	; store end of ELINE marker
  379+0219 23           		INC	HL
  380+021A 22 61 5C     		LD	(	$5C61),HL	; set WORKSP after ELINE
  381+021D 22 63 5C     		LD	(	$5C63),HL	; set STKBOT
  382+0220 22 65 5C     		LD	(	$5C65),HL	; set STKEND
  383+0223 3E 0D        		LD	A,	%00001101
  384+0225 32 8D 5C     		LD	(	$5C8D),A	; set ATTR P
  385+0228 32 8F 5C     		LD	(	$5C8F),A	; set ATTR T
  386+022B 32 48 5C     		LD	(	$5C48),A	; set BORDCR
  387+022E AF           		XOR	A
  388+022F 32 13 EC     		LD	($EC13		),A	; set editor's P_FLAG
  389+0232 3E 01        		LD	A,%00000001
  390+0234 D3 FE        		OUT	($FE),A		; white border
  391+0236 21 23 05     		LD	HL,$0523
  392+0239 22 09 5C     		LD	(	$5C09),HL	; set REPDEL and REPPER
  393+023C FD 35 C6     		DEC	(IY-$3A)	; set two bytes of KSTATE to $FF
  394+023F FD 35 CA     		DEC	(IY-$36)
  395+0242 21 CD 03     		LD	HL,l03cd
  396+0245 11 10 5C     		LD	DE,	$5C10
  397+0248 01 0E 00     		LD	BC,$000E
  398+024B ED B0        		LDIR			; copy initial stream addresses to STRMS
  399+024D FD CB 01 8E  		res	1,(IY+$01)	; reset bit 1 of FLAGS
  400+0251 FD 36 00 FF  		LD	(IY+$00),$FF	; set ERR NR to no error
  401+0255 FD 36 31 02  		LD	(IY+$31),$02	; set DF SZ
  402+0259 08           		EX	AF,AF'
  403+025A FE 52        		CP	$52
  404+025C 00           		NOP
  405+025D 00           		NOP
  406+025E 00           		NOP
  407+025F 2A B2 5C     		LD	HL,(	$5CB2)
  408+0262 23           		INC	HL
  409+0263 F9           		LD	SP,HL		; set SP to RAMTOP+1
  410+0264 FB           		EI			; enable interrupts
  411+0265 EF           		RST	28H
  412+0266 6B 0D        		DW	o0D6B		; CLS using ROM 3
  413+0268 CD AA 02     		CALL	l02aa		; display test image if BREAK held down
  414+026B 11 34 38     		LD	DE,l3834
  415+026E CD 9E 02     		CALL	l029e		; display copyright message
  416+0271 21 FF 5B     		LD	HL,	$5BFF
  417+0274 22 6A 5B     		LD	(	$5B6A),HL	; set OLDSP to TSTACK area
  418+0277 CD CC 05     		CALL	l05cc		; switch in page 7 with stack in TSTACK
  419+027A 3E 0D        		LD	A,	%00001101
  420+027C 32 11 EC     		LD	($EC11		),A	; set editor's ATTR_T
  421+027F 32 0F EC     		LD	($EC0F		),A	; set editor's ATTR_P
  422+0282 CD A7 05     		CALL	l05a7		; switch back page 0
  423+0285 CD 80 3E     		CALL	l3e80
  424+0288 10 24        		DW	m2410		; initialise DOS & display drive info
  425+028A CD CC 05     		CALL	l05cc		; switch in page 7 with stack in TSTACK
  426+028D FD 36 31 02  		LD	(IY+$31),$02	; set DFSZ
  427+0291 FD CB 02 EE  		SET	5,(IY+$02)	; set bit 5 of TVFLAG
  428+0295 CD 33 06     		CALL	l0633		; ???
  429+0298 CD A7 05     		CALL	l05a7		; switch back page 0
  430+029B C3 4E 06     		JP	l064e		; move on
  431+029E
  432+029E              ; Print string subroutine
  433+029E              ; Displays a string terminated by a byte with bit 7 set
  434+029E              ; Entry: DE=address of string
  435+029E              ; Exit: DE=address after string, A corrupted
  436+029E
  437+029E 1A           l029e:		LD	A,(DE)		; get next character
  438+029F E6 7F        		AND	$7F		; mask high bit
  439+02A1 D5           		PUSH	DE
  440+02A2 D7           		RST	10H		; print it
  441+02A3 D1           		POP	DE
  442+02A4 1A           		LD	A,(DE)
  443+02A5 13           		INC	DE		; increment address
  444+02A6 87           		ADD	A,A
  445+02A7 30 F5        		JR	NC,l029e	; loop back if bit 7 wasn't set
  446+02A9 C9           		RET
  447+02AA
  448+02AA              ; Check to see if BREAK is held down, entering the test image if so
  449+02AA
  450+02AA 3E 7F        l02aa:		LD	A,$7F
  451+02AC DB FE        		IN	A,($FE)
  452+02AE 1F           l02ae:		RRA
  453+02AF D8           		RET	C		; exit if SPACE not held down
  454+02B0 3E FE        		LD	A,$FE
  455+02B2 DB FE        		IN	A,($FE)
  456+02B4 1F           		RRA
  457+02B5 D8           		RET	C		; exit if CAPS SHIFT not held down
  458+02B6 3E 07        		LD	A,$07
  459+02B8 D3 FE        		OUT	($FE),A		; white border
  460+02BA 3E 02        		LD	A,$02
  461+02BC EF           		RST	28H
  462+02BD 01 16        		DW	o1601		; open stream 2 for output
  463+02BF AF           		XOR	A
  464+02C0 32 3C 5C     		LD	(	$5C3C),A	; clear TV FLAG
  465+02C3 3E 16        		LD	A,$16
  466+02C5 D7           		RST	10H
  467+02C6 AF           		XOR	A
  468+02C7 D7           		RST	10H
  469+02C8 AF           		XOR	A
  470+02C9 D7           		RST	10H		; AT 0,0
  471+02CA 1E 08        		LD	E,$08		; E=8, used many times in routine
  472+02CC 43           		LD	B,E		; B=8 messages per line
  473+02CD 50           		LD	D,B		; D=8 lines
  474+02CE 78           l02ce:		LD	A,B
  475+02CF 3D           		DEC	A
  476+02D0 CB 17        		RL	A
  477+02D2 CB 17        		RL	A
  478+02D4 CB 17        		RL	A		; A=paper colour from position along line
  479+02D6 82           		ADD	A,D
  480+02D7 3D           		DEC	A		; add in ink colour from line number
  481+02D8 32 8F 5C     		LD	(	$5C8F),A	; set ATTR T
  482+02DB 21 B0 03     		LD	HL,l03b0	; address of '1987' test message
  483+02DE 4B           		LD	C,E		; C=8=length of message
  484+02DF 7E           l02df:		LD	A,(HL)
  485+02E0 D7           		RST	10H		; display next character
  486+02E1 23           		INC	HL
  487+02E2 0D           		DEC	C
  488+02E3 20 FA        		JR	NZ,l02df	; loop back for more characters
  489+02E5 10 E7        		DJNZ	l02ce		; loop back for more messages
  490+02E7 43           		LD	B,E		; B=8 messages per line
  491+02E8 15           		DEC	D
  492+02E9 20 E3        		JR	NZ,l02ce	; loop back for more lines
  493+02EB 21 00 48     		LD	HL,$4800	; start of middle third of screen
  494+02EE 54           		LD	D,H
  495+02EF 5D           		LD	E,L
  496+02F0 13           		INC	DE
  497+02F1 AF           		XOR	A
  498+02F2 77           		LD	(HL),A
  499+02F3 01 FF 0F     		LD	BC,$0FFF
  500+02F6 ED B0        		LDIR			; clear bottom two thirds of screen
  501+02F8 EB           		EX	DE,HL
  502+02F9 11 00 59     		LD	DE,$5900
  503+02FC 01 00 02     		LD	BC,$0200
  504+02FF ED B0        		LDIR			; copy attribs of top third to rest of screen
  505+0301 F3           		DI			; disable interrupts
  506+0302 11 70 03     l0302:		LD	DE,$0370
  507+0305 2E 07        		LD	L,$07
  508+0307 01 99 00     l0307:		LD	BC,$0099
  509+030A 0B           l030a:		DEC	BC
  510+030B 78           		LD	A,B
  511+030C B1           		OR	C
  512+030D 20 FB        		JR	NZ,l030a	; delay
  513+030F 7D           		LD	A,L
  514+0310 EE 10        		XOR	$10
  515+0312 6F           		LD	L,A
  516+0313 D3 FE        		OUT	($FE),A		; generate tone
  517+0315 1B           		DEC	DE
  518+0316 7A           		LD	A,D
  519+0317 B3           		OR	E
  520+0318 20 ED        		JR	NZ,l0307	; loop back for tone
  521+031A
  522+031A              ; Here we test for sets of keys pressed at the test image, and jump
  523+031A              ; to routines to handle them if necessary
  524+031A
  525+031A 18 E6        		JR	l0302		; sound tone again
  526+031C CD 9F 08     		CALL	l089f
  527+031F 77           		LD	(HL),A
  528+0320 C9           		RET
  529+0321 CD 9F 08     		CALL	l089f
  530+0324 7E           		LD	A,(HL)
  531+0325 C9           		RET
  532+0326 04           		INC	B
  533+0327 10 05        		DJNZ	l032e
  534+0329 11 0F 00     		LD	DE,15
  535+032C 18 24        		JR	l0352
  536+032E 10 1F        l032e:		DJNZ	l034f
  537+0330 7A           		LD	A,D
  538+0331 B3           		OR	E
  539+0332 C2 D5 38     		JP	NZ,$38D5
  540+0335 E5           		PUSH	HL
  541+0336 2A 51 5C     		LD	HL,(	$5C51)
  542+0339 11 0D 00     		LD	DE,13
  543+033C 19           		ADD	HL,DE
  544+033D 5E           		LD	E,(HL)
  545+033E 23           		INC	HL
  546+033F 56           		LD	D,(HL)
  547+0340 1B           		DEC	DE
  548+0341 23           		INC	HL
  549+0342 EB           		EX	DE,HL
  550+0343 C1           		POP	BC
  551+0344 A7           		AND	A
  552+0345 ED 42        		SBC	HL,BC
  553+0347 EB           		EX	DE,HL
  554+0348 DA D5 38     		JP	C,$38D5
  555+034B 71           		LD	(HL),C
  556+034C 23           		INC	HL
  557+034D 70           		LD	(HL),B
  558+034E C9           		RET
  559+034F 11 0D 00     l034f:		LD	DE,13
  560+0352 2A 51 5C     l0352:		LD	HL,(	$5C51)
  561+0355 19           		ADD	HL,DE
  562+0356 5E           		LD	E,(HL)
  563+0357 23           		INC	HL
  564+0358 56           		LD	D,(HL)
  565+0359 EB           		EX	DE,HL
  566+035A 11 00 00     		LD	DE,0
  567+035D C9           		RET
  568+035E 00 00 00...  l035e:		DS	9
  569+0367
  570+0367              ; Jump here if there is a memory test error:
  571+0367              ; if the bit couldn't be set, a border is set to the bit number,
  572+0367              ; if it couldn't be reset, an alternating bit number/bit number XOR 7
  573+0367              ; border is set.
  574+0367
  575+0367 3E 08        l0367:		LD	A,8
  576+0369 93           		SUB	E
  577+036A 08           		EX	AF,AF'		; A'=bit number failed on
  578+036B A7           		AND	A
  579+036C 20 05        		JR	NZ,l0373	; jump on if bit could be set
  580+036E 08           		EX	AF,AF'
  581+036F D3 FE        		OUT	($FE),A		; else halt with border set to bit number
  582+0371 18 FE        l0371:		JR	l0371
  583+0373
  584+0373 08           l0373:		EX	AF,AF'
  585+0374 4F           		LD	C,A
  586+0375 06 07        		LD	B,$07
  587+0377 A8           		XOR	B
  588+0378 47           		LD	B,A		; B=bit number XOR 7
  589+0379
  590+0379 79           l0379:		LD	A,C
  591+037A D3 FE        		OUT	($FE),A		; set bit number border
  592+037C 11 00 00     		LD	DE,$0000
  593+037F 1B           l037f:		DEC	DE
  594+0380 7A           		LD	A,D
  595+0381 B3           		OR	E
  596+0382 20 FB        		JR	NZ,l037f	; pause for approx 0.5s
  597+0384 78           		LD	A,B
  598+0385 D3 FE        		OUT	($FE),A		; set bit number XOR 7 border
  599+0387 11 AA 2A     		LD	DE,$2AAA
  600+038A 1B           l038a:		DEC	DE
  601+038B 7A           		LD	A,D
  602+038C B3           		OR	E
  603+038D 20 FB        		JR	NZ,l038a	; pause for approx 0.1s
  604+038F 18 E8        		JR	l0379		; loop back
  605+0391
  606+0391              FREE_ROM0_1:	EQU	$
  607+0391
  608+0391              		;...
  609+0391              		;...
  610+0391
  611+0391              R0_FREE_1:	EQU	31-($-FREE_ROM0_1)
  612+0391 00 00 00...  ROM0_SPARE1:	DS	R0_FREE_1
  613+03B0
  614+03B0 13 00 31 39  l03b0:		DB	$13,$00,"19"
  615+03B4 13 01 38 37  		DB	$13,$01,"87"
  616+03B8
  617+03B8              ; Here is the initial channel information, copied to CHANS
  618+03B8
  619+03B8 F4 09        l03b8:		DW	o09F4
  620+03BA A8 10        		DW	o10A8
  621+03BC 4B           		DB	"K"		; keyboard/lower screen channel
  622+03BD F4 09        		DW	o09F4
  623+03BF C4 15        		DW	o15C4
  624+03C1 53           		DB	"S"		; main screen channel
  625+03C2 81 0F        		DW	o0F81
  626+03C4 C4 15        		DW	o15C4
  627+03C6 58           		DB	"X"		; workspace channel
  628+03C7 00 5B        		DW	$5B00
  629+03C9 00 5B        		DW	$5B00
  630+03CB 50           		DB	"P"		; printer channel
  631+03CC 80           		DB	$80		; end of channel information
  632+03CD
  633+03CD              ; Here is the initial stream addresses, copied to STRMS
  634+03CD
  635+03CD 01 00        l03cd:		DW	$0001		; stream -3, 'K'
  636+03CF 06 00        		DW	$0006		; stream -2, 'S'
  637+03D1 0B 00        		DW	$000B		; stream -1, 'X'
  638+03D3 01 00        		DW	$0001		; stream 0, 'K'
  639+03D5 01 00        		DW	$0001		; stream 1, 'K'
  640+03D7 06 00        		DW	$0006		; stream 2, 'S'
  641+03D9 10 00        		DW	$0010		; stream 3, 'P'
  642+03DB
  643+03DB              ; Copyright message
  644+03DB
  645+03DB 7F 31 39 38  l03db:		DB	$7F, "1982, 1986, 1987 Amstrad Plc.", $8D
  645+03DF 32 2C 20 31
  645+03E3 39 38 36 2C
  645+03E7 20 31 39 38
  645+03EB 37 20 41 6D
  645+03EF 73 74 72 61
  645+03F3 64 20 50 6C
  645+03F7 63 2E 8D
  646+03FA
  647+03FA              ; Subroutine to ???
  648+03FA
  649+03FA 21 F5 EE     l03fa:		LD	HL,$EEF5
  650+03FD CB 86        		res	0,(HL)		; ???
  651+03FF CB CE        		SET	1,(HL)		; ???
  652+0401 2A 49 5C     l0401:		LD	HL,(	$5C49)	; get current line
  653+0404 7C           		LD	A,H
  654+0405 B5           		OR	L
  655+0406 20 03        		JR	NZ,l040b	; move on unless 0
  656+0408 22 06 EC     l0408:		LD	($EC06),HL	; ???
  657+040B 3A DB F9     l040b:		LD	A,($F9DB		)	; ???
  658+040E F5           		PUSH	AF
  659+040F 2A 9A FC     		LD	HL,($FC9A)	; ???
  660+0412 CD 18 14     		CALL	l1418		; get number of line before (or 0)
  661+0415 22 D7 F9     		LD	($F9D7),HL	; ???
  662+0418 CD F0 12     		CALL	l12f0		; ???
  663+041B CD A4 11     		CALL	l11a4		; ???
  664+041E F1           		POP	AF
  665+041F B7           l041f:		OR	A
  666+0420 28 0C        		JR	Z,l042e		; move on if ???
  667+0422 F5           		PUSH	AF
  668+0423 CD AD 11     l0423:		CALL	l11ad		; ???
  669+0426 EB           		EX	DE,HL
  670+0427 CD 38 13     		CALL	l1338
  671+042A F1           		POP	AF
  672+042B 3D           		DEC	A
  673+042C 18           		DB	$18
  674+042D F1           		DB	-15
  675+042E 0E 00        l042e:		LD	C,$00
  676+0430 CD 82 11     		CALL	l1182
  677+0433 41           		LD	B,C
  678+0434 3A 15 EC     		LD	A,($EC15		)
  679+0437 4F           		LD	C,A
  680+0438 C5           		PUSH	BC
  681+0439 D5           		PUSH	DE
  682+043A CD AD 11     l043a:		CALL	l11ad
  683+043D 3A F5 EE     		LD	A,($EEF5)
  684+0440 CB 4F        		BIT	1,A
  685+0442 28           		DB	$28
  686+0443 1D           		DB	29
  687+0444 D5           		PUSH	DE
  688+0445 E5           		PUSH	HL
  689+0446 11 20 00     l0446:		LD	DE,$0020
  690+0449 19           		ADD	HL,DE
  691+044A CB 46        		BIT	0,(HL)
  692+044C 28           		DB	$28
  693+044D 11           		DB	17
  694+044E 23           		INC	HL
  695+044F 56           		LD	D,(HL)
  696+0450 23           		INC	HL
  697+0451 5E           		LD	E,(HL)
  698+0452 B7           		OR	A
  699+0453 2A 49 5C     		LD	HL,(	$5C49)
  700+0456 ED 52        		SBC	HL,DE
  701+0458 20           		DB	$20
  702+0459 05           		DB	5
  703+045A 21 F5 EE     		LD	HL,$EEF5
  704+045D CB C6        		SET	0,(HL)
  705+045F E1           l045f:		POP	HL
  706+0460 D1           		POP	DE
  707+0461 C5           l0461:		PUSH	BC
  708+0462 E5           		PUSH	HL
  709+0463 01 23 00     		LD	BC,$0023
  710+0466 ED B0        		LDIR
  711+0468 E1           		POP	HL
  712+0469 C1           		POP	BC
  713+046A D5           		PUSH	DE
  714+046B C5           		PUSH	BC
  715+046C EB           		EX	DE,HL
  716+046D 21 F5 EE     		LD	HL,$EEF5
  717+0470 CB 46        		BIT	0,(HL)
  718+0472 28           		DB	$28
  719+0473 2A           		DB	42
  720+0474 06 00        		LD	B,$00
  721+0476 2A 06 EC     l0476:		LD	HL,($EC06)
  722+0479 7C           		LD	A,H
  723+047A B5           		OR	L
  724+047B 28           		DB	$28
  725+047C 0E           		DB	14
  726+047D E5           		PUSH	HL
  727+047E CD 0F 0F     		CALL	l0f0f
  728+0481 E1           		POP	HL
  729+0482 30           		DB	$30
  730+0483 12           		DB	18
  731+0484 2B           		DEC	HL
  732+0485 04           		INC	B
  733+0486 22 06 EC     		LD	($EC06),HL
  734+0489 18           		DB	$18
  735+048A EB           		EX	DE,HL
  736+048B CD 0F 0F     		CALL	l0f0f
  737+048E D4 31 0F     		CALL	NC,l0f31
  738+0491 21 F5 EE     		LD	HL,$EEF5
  739+0494 36 00        		LD	(HL),$00
  740+0496 78           l0496:		LD	A,B
  741+0497 C1           		POP	BC
  742+0498 C5           		PUSH	BC
  743+0499 48           		LD	C,B
  744+049A 47           		LD	B,A
  745+049B CD DC 0A     		CALL	l0adc
  746+049E C1           l049e:		POP	BC
  747+049F D1           		POP	DE
  748+04A0 79           		LD	A,C
  749+04A1 04           		INC	B
  750+04A2 B8           		CP	B
  751+04A3 30           		DB	$30
  752+04A4 95           		DB	-107
  753+04A5 3A F5 EE     		LD	A,($EEF5)
  754+04A8 CB 4F        		BIT	1,A
  755+04AA 28           		DB	$28
  756+04AB 21           		DB	33
  757+04AC CB 47        		BIT	0,A
  758+04AE 20           		DB	$20
  759+04AF 1D           		DB	29
  760+04B0 2A 49 5C     		LD	HL,(	$5C49)
  761+04B3 7C           		LD	A,H
  762+04B4 B5           		OR	L
  763+04B5 28           		DB	$28
  764+04B6 08           		DB	8
  765+04B7 22 9A FC     		LD	($FC9A),HL
  766+04BA CD F0 12     		CALL	l12f0
  767+04BD 18           		DB	$18
  768+04BE 09           		DB	9
  769+04BF 22 9A FC     l04bf:		LD	($FC9A),HL
  770+04C2 CD 20 14     		CALL	l1420
  771+04C5 22 49 5C     		LD	(	$5C49),HL
  772+04C8 D1           l04c8:		POP	DE
  773+04C9 C1           		POP	BC
  774+04CA C3 01 04     		JP	l0401
  775+04CD
  776+04CD D1           l04cd:		POP	DE
  777+04CE C1           		POP	BC
  778+04CF BF           		CP	A
  779+04D0
  780+04D0 F5           l04d0:		PUSH	AF
  781+04D1 79           		LD	A,C
  782+04D2 48           		LD	C,B
  783+04D3 CD 82 11     		CALL	l1182
  784+04D6 EB           		EX	DE,HL
  785+04D7
  786+04D7 F5           l04d7:		PUSH	AF
  787+04D8 CD FE 16     		CALL	l16fe
  788+04DB F1           		POP	AF
  789+04DC 11 23 00     		LD	DE,$0023
  790+04DF 19           		ADD	HL,DE
  791+04E0 0C           		INC	C
  792+04E1 B9           		CP	C
  793+04E2 30 F3        		JR	NC,l04d7	; (-13)
  794+04E4 F1           		POP	AF
  795+04E5 C8           		RET	Z
  796+04E6 CD D2 0A     		CALL	l0ad2
  797+04E9
  798+04E9 CD 43 0C     l04e9:		CALL	l0c43
  799+04EC 2A 06 EC     		LD	HL,($EC06)
  800+04EF 2B           		DEC	HL
  801+04F0 7C           		LD	A,H
  802+04F1 B5           		OR	L
  803+04F2 22 06 EC     		LD	($EC06),HL
  804+04F5 20 F2        		JR	NZ,l04e9	; (-14)
  805+04F7 C3 DC 0A     		JP	l0adc
  806+04FA C9           		RET
  807+04FB
  808+04FB 06 00        l04fb:		LD	B,$00
  809+04FD 3A 15 EC     		LD	A,($EC15		)
  810+0500 57           		LD	D,A
  811+0501 C3 6B 1D     		JP	l1d6b
  812+0504
  813+0504 06 00        l0504:		LD	B,$00
  814+0506 E5           		PUSH	HL
  815+0507 48           		LD	C,B
  816+0508 CD 82 11     		CALL	l1182
  817+050B CD 38 13     		CALL	l1338
  818+050E E1           		POP	HL
  819+050F D0           		RET	NC
  820+0510 CD AD 11     		CALL	l11ad
  821+0513
  822+0513 C5           l0513:		PUSH	BC
  823+0514 E5           		PUSH	HL
  824+0515 21 23 00     		LD	HL,$0023
  825+0518 19           		ADD	HL,DE
  826+0519 3A 15 EC     		LD	A,($EC15		)
  827+051C 4F           		LD	C,A
  828+051D B8           		CP	B
  829+051E 28 0E        		JR	Z,l052e		; (14)
  830+0520 C5           		PUSH	BC
  831+0521
  832+0521 C5           l0521:		PUSH	BC
  833+0522 01 23 00     		LD	BC,$0023
  834+0525 ED B0        		LDIR
  835+0527 C1           		POP	BC
  836+0528 79           		LD	A,C
  837+0529 04           		INC	B
  838+052A B8           		CP	B
  839+052B 20 F4        		JR	NZ,l0521	; (-12)
  840+052D C1           		POP	BC
  841+052E
  842+052E E1           l052e:		POP	HL
  843+052F CD 12 17     		CALL	l1712
  844+0532 01 23 00     		LD	BC,$0023
  845+0535 ED B0        		LDIR
  846+0537 37           		SCF
  847+0538 C1           		POP	BC
  848+0539 C9           		RET
  849+053A
  850+053A 06 00        l053a:		LD	B,$00
  851+053C CD F9 12     		CALL	l12f9
  852+053F D0           		RET	NC
  853+0540
  854+0540 C5           l0540:		PUSH	BC
  855+0541 E5           		PUSH	HL
  856+0542 3A 15 EC     		LD	A,($EC15		)
  857+0545 4F           		LD	C,A
  858+0546 CD 82 11     		CALL	l1182
  859+0549 CD EC 11     		CALL	l11ec
  860+054C 30 26        		JR	NC,l0574	; (38)
  861+054E 1B           		DEC	DE
  862+054F 21 23 00     		LD	HL,$0023
  863+0552 19           		ADD	HL,DE
  864+0553 EB           		EX	DE,HL
  865+0554 C5           		PUSH	BC
  866+0555 78           		LD	A,B
  867+0556 B9           		CP	C
  868+0557 28 0C        		JR	Z,l0565		; (12)
  869+0559
  870+0559 C5           l0559:		PUSH	BC
  871+055A 01 23 00     		LD	BC,$0023
  872+055D ED B8        		LDDR
  873+055F C1           		POP	BC
  874+0560 78           		LD	A,B
  875+0561 0D           		DEC	C
  876+0562 B9           		CP	C
  877+0563 38 F4        		JR	C,l0559		; (-12)
  878+0565
  879+0565 EB           l0565:		EX	DE,HL
  880+0566 13           		INC	DE
  881+0567 C1           		POP	BC
  882+0568 E1           		POP	HL
  883+0569 CD 26 17     		CALL	l1726
  884+056C 01 23 00     		LD	BC,$0023
  885+056F ED B0        		LDIR
  886+0571 37           		SCF
  887+0572 C1           		POP	BC
  888+0573 C9           		RET
  889+0574
  890+0574 E1           l0574:		POP	HL
  891+0575 C1           		POP	BC
  892+0576 C9           		RET
  893+0577
  894+0577 D5           l0577:		PUSH	DE
  895+0578 26 00        		LD	H,$00
  896+057A 68           		LD	L,B
  897+057B 19           		ADD	HL,DE
  898+057C 57           		LD	D,A
  899+057D 78           		LD	A,B
  900+057E
  901+057E 5E           l057e:		LD	E,(HL)
  902+057F 72           		LD	(HL),D
  903+0580 53           		LD	D,E
  904+0581 23           		INC	HL
  905+0582 3C           		INC	A
  906+0583 FE 20        		CP	$20
  907+0585 38 F7        		JR	C,l057e		; (-9)
  908+0587 7B           		LD	A,E
  909+0588 FE 00        		CP	$00
  910+058A D1           		POP	DE
  911+058B C9           		RET
  912+058C
  913+058C D5           l058c:		PUSH	DE
  914+058D 21 20 00     		LD	HL,$0020
  915+0590 19           		ADD	HL,DE
  916+0591 E5           		PUSH	HL
  917+0592 57           		LD	D,A
  918+0593 3E 1F        		LD	A,$1F
  919+0595 18 07        		JR	l059e		; (7)
  920+0597
  921+0597 5E           l0597:		LD	E,(HL)
  922+0598 72           		LD	(HL),D
  923+0599 53           		LD	D,E
  924+059A B8           		CP	B
  925+059B 28 04        		JR	Z,l05a1		; (4)
  926+059D 3D           		DEC	A
  927+059E
  928+059E 2B           l059e:		DEC	HL
  929+059F 18 F6        		JR	l0597		; (-10)
  930+05A1
  931+05A1 7B           l05a1:		LD	A,E
  932+05A2 FE 00        		CP	$00
  933+05A4 E1           		POP	HL
  934+05A5 D1           		POP	DE
  935+05A6 C9           		RET
  936+05A7
  937+05A7              ; Subroutine to page in normal memory (page 0) and swap SP with OLDSP
  938+05A7
  939+05A7 08           l05a7:		EX	AF,AF'		; save AF
  940+05A8 3E 00        		LD	A,$00
  941+05AA F3           		DI
  942+05AB CD C1 05     		CALL	l05c1		; page in page 0
  943+05AE F1           		POP	AF		; AF holds return address
  944+05AF 22 58 5B     		LD	(	$5B58),HL	; save HL in TARGET
  945+05B2 2A 6A 5B     		LD	HL,(	$5B6A)	; get OLDSP
  946+05B5 ED 73 6A 5B  		LD	(	$5B6A),SP	; save SP in OLDSP
  947+05B9 F9           		LD	SP,HL		; SP now holds what was in OLDSP
  948+05BA FB           		EI
  949+05BB 2A 58 5B     		LD	HL,(	$5B58)	; restore HL
  950+05BE F5           		PUSH	AF		; push back return address
  951+05BF 08           		EX	AF,AF'		; restore AF
  952+05C0 C9           		RET
  953+05C1
  954+05C1              ; Subroutine to page in page A
  955+05C1
  956+05C1 C5           l05c1:		PUSH	BC		; save BC
  957+05C2 01 FD 7F     		LD	BC,PBANKM
  958+05C5 ED 79        		OUT	(C),A		; change page
  959+05C7 32 5C 5B     		LD	(	$5B5C),A	; save copy of OUT
  960+05CA C1           		POP	BC		; restore BC
  961+05CB C9           		RET
  962+05CC
  963+05CC              ; Subroutine to page in DOS workspace (page 7) and swap SP with OLDSP
  964+05CC
  965+05CC 08           l05cc:		EX	AF,AF'		; save AF
  966+05CD F3           		DI
  967+05CE F1           		POP	AF		; AF holds return address
  968+05CF 22 58 5B     		LD	(	$5B58),HL	; save HL in TARGET
  969+05D2 2A 6A 5B     		LD	HL,(	$5B6A)	; get OLDSP
  970+05D5 ED 73 6A 5B  		LD	(	$5B6A),SP	; save SP in OLDSP
  971+05D9 F9           		LD	SP,HL		; SP now holds what was in OLDSP
  972+05DA 2A 58 5B     		LD	HL,(	$5B58)	; restore HL
  973+05DD F5           		PUSH	AF		; push back return address
  974+05DE 3E 07        		LD	A,$07
  975+05E0 CD C1 05     		CALL	l05c1		; page in page 7
  976+05E3 FB           		EI
  977+05E4 08           		EX	AF,AF'		; restore AF
  978+05E5 C9           		RET
  979+05E6
  980+05E6              ; The editing keys table
  981+05E6              ; Most of these keys are produced by the external keypad, which was not
  982+05E6              ; made available in the UK.
  983+05E6
  984+05E6 15           l05e6:		DB	$15
  985+05E7 0B           		DB	$0B		; cursor up
  986+05E8 5F 0B        		DW	l0b5f
  987+05EA 0A           		DB	$0A		; cursor down
  988+05EB 80 0B        		DW	l0b80
  989+05ED 08           		DB	$08		; cursor left
  990+05EE A2 0B        		DW	l0ba2
  991+05F0 09           		DB	$09		; cursor right
  992+05F1 AE 0B        		DW	l0bae
  993+05F3 AD           		DB	$AD		; TAB (up 10)
  994+05F4 1A 0B        		DW	l0b1a
  995+05F6 AC           		DB	$AC		; AT (down 10)
  996+05F7 F0 0A        		DW	l0af0
  997+05F9 AF           		DB	$AF		; CODE (left word)
  998+05FA 9F 0A        		DW	l0a9f
  999+05FC AE           		DB	$AE		; VAL$ (right word)
 1000+05FD AC 0A        		DW	l0aac
 1001+05FF A6           		DB	$A6		; INKEY$ (top)
 1002+0600 4E 0A        		DW	l0a4e
 1003+0602 A5           		DB	$A5		; RND (bottom)
 1004+0603 76 0A        		DW	l0a76
 1005+0605 A8           		DB	$A8		; FN (start of line)
 1006+0606 52 0B        		DW	l0b52
 1007+0608 A7           		DB	$A7		; PI (end of line)
 1008+0609 45 0B        		DW	l0b45
 1009+060B AA           		DB	$AA		; SCREEN$ (delete char right)
 1010+060C E6 09        		DW	l09e6
 1011+060E 0C           		DB	$0C		; delete
 1012+060F F6 09        		DW	l09f6
 1013+0611 B3           		DB	$B3		; COS (delete word right)
 1014+0612 E5 10        		DW	l10e5
 1015+0614 B4           		DB	$B4		; TAN (delete word left)
 1016+0615 8A 10        		DW	l108a
 1017+0617 B0           		DB	$B0		; VAL (delete line right)
 1018+0618 40 11        		DW	l1140
 1019+061A B1           		DB	$B1		; LEN (delete line left)
 1020+061B 0C 11        		DW	l110c
 1021+061D 0D           		DB	$0D		; enter
 1022+061E 0F 0A        		DW	l0a0f
 1023+0620 A9           		DB	$A9		; POINT (screen)
 1024+0621 48 07        		DW	l0748
 1025+0623 07           		DB	$07		; edit
 1026+0624 B1 07        		DW	l07b1
 1027+0626
 1028+0626              ; The menu keys table
 1029+0626
 1030+0626 04           l0626:		DB	$04
 1031+0627 0B           		DB	$0B		; cursor up
 1032+0628 DC 07        		DW	l07dc
 1033+062A 0A           		DB	$0A		; cursor down
 1034+062B DF 07        		DW	l07df
 1035+062D 07           		DB	$07		; edit
 1036+062E C5 07        		DW	l07c5
 1037+0630 0D           		DB	$0D		; enter
 1038+0631 C5 07        		DW	l07c5
 1039+0633
 1040+0633              ; Subroutine to ????
 1041+0633
 1042+0633 CD 89 09     l0633:		CALL	l0989
 1043+0636 21 00 00     		LD	HL,$0000
 1044+0639 22 9A FC     		LD	($FC9A),HL
 1045+063C 3E 82        		LD	A,$82
 1046+063E 32 0D EC     		LD	($EC0D		),A
 1047+0641 21 00 00     		LD	HL,$0000
 1048+0644 22 49 5C     		LD	(	$5C49),HL
 1049+0647 CD B6 16     		CALL	l16b6
 1050+064A CD 58 17     		CALL	l1758
 1051+064D C9           		RET
 1052+064E
 1053+064E              ; Routine to display main menu & go to process it
 1054+064E
 1055+064E 21 FF 5B     l064e:		LD	HL,	$5BFF
 1056+0651 22 6A 5B     		LD	(	$5B6A),HL	; set "OLDSP" to temporary stack area
 1057+0654 CD CC 05     		CALL	l05cc		; page in DOS workspace
 1058+0657 3E 02        		LD	A,$02
 1059+0659 EF           		RST	28H
 1060+065A 01 16        		DW	o1601		; open channel to stream 2
 1061+065C 21 F2 07     l065c:		LD	HL,l07f2
 1062+065F 22 EA F6     		LD	($F6EA		),HL	; store main menu routine table address
 1063+0662 21 FF 07     		LD	HL,l07ff
 1064+0665 22 EC F6     		LD	($F6EC		),HL	; store main menu text address
 1065+0668 E5           		PUSH	HL		; save menu address
 1066+0669 21 0D EC     		LD	HL,$EC0D
 1067+066C CB CE        		SET	1,(HL)		; signal "processing menu"
 1068+066E CB A6        		res	4,(HL)		; ???
 1069+0670 2B           		DEC	HL
 1070+0671 36 00        		LD	(HL),$00	; set men_high=0
 1071+0673 E1           		POP	HL		; restore menu address
 1072+0674 AF           		XOR	A
 1073+0675 CD 9A 18     		CALL	l189a		; display main menu
 1074+0678 C3 03 07     		JP	l0703		; move to process menu
 1075+067B
 1076+067B
 1077+067B DD 21 98 FD  l067b:		LD	IX,$FD98
 1078+067F 21 FF 5B     		LD	HL,	$5BFF
 1079+0682 22 6A 5B     		LD	(	$5B6A),HL
 1080+0685 CD CC 05     		CALL	l05cc
 1081+0688 3E 02        		LD	A,$02
 1082+068A EF           		RST	28H
 1083+068B 01 16        		DW	o1601
 1084+068D CD 5A 18     		CALL	l185a
 1085+0690 21 3B 5C     		LD	HL,	$5C3B
 1086+0693
 1087+0693 CB 6E        l0693:		BIT	5,(HL)
 1088+0695 28 FC        		JR	Z,l0693		; (-4)
 1089+0697 21 0D EC     		LD	HL,$EC0D
 1090+069A CB 9E        		res	3,(HL)
 1091+069C CB 76        		BIT	6,(HL)
 1092+069E 20 14        		JR	NZ,l06b4	; (20)
 1093+06A0 3A 0E EC     		LD	A,(	$EC0E		)
 1094+06A3 FE 04        		CP	$04
 1095+06A5 28 0A        		JR	Z,l06b1		; (10)
 1096+06A7 FE 00        		CP	$00
 1097+06A9 C2 92 09     		JP	NZ,l0992
 1098+06AC CD 5A 1A     		CALL	l1a5a
 1099+06AF 18 03        		JR	l06b4		; (3)
 1100+06B1
 1101+06B1 CD 5F 1A     l06b1:		CALL	l1a5f		; display "Calculator" bar
 1102+06B4 CD A4 11     l06b4:		CALL	l11a4
 1103+06B7 CD F0 12     		CALL	l12f0
 1104+06BA 3A 0E EC     		LD	A,(	$EC0E		)	; get current process
 1105+06BD FE 04        		CP	$04
 1106+06BF 28 42        		JR	Z,l0703		; move on if its the calculator
 1107+06C1 2A 49 5C     		LD	HL,(	$5C49)	; get number of current line
 1108+06C4 7C           		LD	A,H
 1109+06C5 B5           		OR	L
 1110+06C6 20 15        		JR	NZ,l06dd	; move on if not zero
 1111+06C8 2A 53 5C     		LD	HL,(	$5C53)
 1112+06CB ED 4B 4B 5C  		LD	BC,(	$5C4B)
 1113+06CF A7           		AND	A
 1114+06D0 ED 42        		SBC	HL,BC		; get length of BASIC program
 1115+06D2 20 06        		JR	NZ,l06da	; move on if not zero
 1116+06D4 21 00 00     		LD	HL,$0000
 1117+06D7 22 08 EC     		LD	($EC08),HL	; ??? last line
 1118+06DA 2A 08 EC     l06da:		LD	HL,($EC08)	; ??? last line
 1119+06DD CD A7 05     l06dd:		CALL	l05a7		; page in normal memory
 1120+06E0 EF           		RST	28H
 1121+06E1 6E 19        		DW	o196E		; ???
 1122+06E3 EF           		RST	28H
 1123+06E4 95 16        		DW	o1695
 1124+06E6 CD CC 05     		CALL	l05cc		; page in DOS workspace
 1125+06E9 ED 53 49 5C  		LD	(	$5C49),DE
 1126+06ED 21 0D EC     		LD	HL,$EC0D
 1127+06F0 CB 6E        		BIT	5,(HL)
 1128+06F2 20 0F        		JR	NZ,l0703	; (15)
 1129+06F4 21 00 00     		LD	HL,$0000
 1130+06F7 22 06 EC     		LD	($EC06),HL
 1131+06FA CD FA 03     		CALL	l03fa
 1132+06FD CD BD 0A     		CALL	l0abd
 1133+0700 CD 0F 0A     		CALL	l0a0f
 1134+0703
 1135+0703              ; Main routine to process menus & editing functions
 1136+0703
 1137+0703 31 FF 5B     l0703:		LD	SP,	$5BFF	; set SP in temporary stack
 1138+0706 CD 71 18     l0706:		CALL	l1871		; get a key
 1139+0709 F5           		PUSH	AF
 1140+070A 3A 39 5C     		LD	A,(	$5C39)
 1141+070D CD 99 07     		CALL	l0799		; sound a 'PIP'
 1142+0710 F1           		POP	AF
 1143+0711 CD 16 07     		CALL	l0716		; "do" the key
 1144+0714 18 F0        		JR	l0706		; loop back
 1145+0716 21 0D EC     l0716:		LD	HL,$EC0D
 1146+0719 CB 4E        		BIT	1,(HL)		; check editing/menu flag
 1147+071B F5           		PUSH	AF
 1148+071C 21 26 06     		LD	HL,l0626	; use menu keys table
 1149+071F 20 03        		JR	NZ,l0724
 1150+0721 21 E6 05     		LD	HL,l05e6	; or editing keys table
 1151+0724 CD 66 21     l0724:		CALL	l2166		; perform pressed key action
 1152+0727 20 05        		JR	NZ,l072e
 1153+0729 D4 94 07     		CALL	NC,l0794	; sound a RASP if action failed
 1154+072C F1           		POP	AF		; restore editing/menu flag status
 1155+072D C9           		RET
 1156+072E F1           l072e:		POP	AF		; restore editing/menu flag status
 1157+072F 28 05        		JR	Z,l0736		; move on if editing
 1158+0731 AF           		XOR	A
 1159+0732 32 41 5C     		LD	(	$5C41),A	; else in menu, so set MODE=0
 1160+0735 C9           		RET
 1161+0736 21 0D EC     l0736:		LD	HL,$EC0D
 1162+0739 CB 46        		BIT	0,(HL)
 1163+073B 28 04        		JR	Z,l0741		; move on if ???
 1164+073D CD 94 07     		CALL	l0794		; sound a RASP
 1165+0740 C9           		RET
 1166+0741 FE A3        l0741:		CP	$A3
 1167+0743 D0           		RET	NC
 1168+0744 00           		NOP
 1169+0745 C3 BC 09     		JP	l09bc
 1170+0748
 1171+0748              ; Editing keys: SCREEN
 1172+0748
 1173+0748 3A 0E EC     l0748:		LD	A,(	$EC0E		)
 1174+074B FE 04        		CP	$04
 1175+074D C8           		RET	Z		; exit if in Calculator
 1176+074E CD FB 04     		CALL	l04fb
 1177+0751 21 0D EC     		LD	HL,$EC0D
 1178+0754 CB 9E        		res	3,(HL)
 1179+0756 7E           		LD	A,(HL)
 1180+0757 EE 40        		XOR	$40
 1181+0759 77           		LD	(HL),A
 1182+075A E6 40        		AND	$40
 1183+075C 28 05        		JR	Z,l0763		; (5)
 1184+075E CD 68 07     		CALL	l0768
 1185+0761 18 03        		JR	l0766		; (3)
 1186+0763 CD 7B 07     l0763:		CALL	l077b
 1187+0766 37           l0766:		SCF
 1188+0767 C9           		RET
 1189+0768
 1190+0768 CD 8E 1A     l0768:		CALL	l1a8e
 1191+076B 21 0D EC     		LD	HL,$EC0D
 1192+076E CB F6        		SET	6,(HL)
 1193+0770 CD FB 0E     		CALL	l0efb
 1194+0773 CD 95 1C     		CALL	l1c95
 1195+0776 CD AA 09     		CALL	l09aa
 1196+0779 18 0B        		JR	l0786		; (11)
 1197+077B
 1198+077B 21 0D EC     l077b:		LD	HL,$EC0D
 1199+077E CB B6        		res	6,(HL)
 1200+0780 CD 89 09     		CALL	l0989
 1201+0783 CD 5A 1A     		CALL	l1a5a
 1202+0786 2A 9A FC     l0786:		LD	HL,($FC9A)
 1203+0789 7C           		LD	A,H
 1204+078A B5           		OR	L
 1205+078B C4 18 14     		CALL	NZ,l1418
 1206+078E CD FA 03     		CALL	l03fa
 1207+0791 C3 BD 0A     		JP	l0abd
 1208+0794
 1209+0794              ; Subroutine to sound a PIP or RASP
 1210+0794              ; Enter at l0799 with A=PIP, or at l0794 for RASP
 1211+0794
 1212+0794 3A 38 5C     l0794:		LD	A,(	$5C38)
 1213+0797 CB 3F        		SRL	A		; A=RASP/2
 1214+0799 DD E5        l0799:		PUSH	IX		; save IX
 1215+079B 16 00        		LD	D,$00
 1216+079D 5F           		LD	E,A		; DE=f*t
 1217+079E
 1218+079E              		IF 1
 1219+079E 21 80 0C     			LD	HL,$0C80	; HL=timing constant (same original)
 1220+07A1              		ELSE
 1221+07A1 ~            			LD	HL,$00C8	; NEW HL=timing LIKE 48K
 1222+07A1              		ENDIF
 1223+07A1
 1224+07A1 EF           l07a1:		RST	28H
 1225+07A2 B5 03        		DW	o03B5		; call BEEPER
 1226+07A4 DD E1        		POP	IX		; restore IX
 1227+07A6 C9           		RET
 1228+07A7
 1229+07A7              ; Another sound
 1230+07A7
 1231+07A7 DD E5        l07a7:		PUSH	IX
 1232+07A9 11 30 00     		LD	DE,$0030
 1233+07AC 21 00 03     		LD	HL,$0300
 1234+07AF 18 F0        		JR	l07a1
 1235+07B1
 1236+07B1              ; Editing keys: EDIT
 1237+07B1
 1238+07B1 CD B7 0A     l07b1:		CALL	l0ab7		; remove cursor
 1239+07B4 21 0D EC     		LD	HL,$EC0D
 1240+07B7 CB CE        		SET	1,(HL)		; set "processing menu"
 1241+07B9 2B           		DEC	HL
 1242+07BA 36 00        		LD	(HL),$00	; highlight on line 0
 1243+07BC 2A EC F6     		LD	HL,($F6EC		)
 1244+07BF AF           		XOR	A
 1245+07C0 CD 9A 18     		CALL	l189a		; display menu
 1246+07C3 37           		SCF
 1247+07C4 C9           		RET
 1248+07C5
 1249+07C5              ; The menu ENTER/EDIT routine
 1250+07C5
 1251+07C5 21 0D EC     l07c5:		LD	HL,$EC0D
 1252+07C8 CB 8E        		res	1,(HL)		; signal editing mode
 1253+07CA 2B           		DEC	HL
 1254+07CB 7E           		LD	A,(HL)		; A=currently highlighted line
 1255+07CC 2A EA F6     		LD	HL,($F6EA		)	; HL=menu routines table
 1256+07CF E5           		PUSH	HL
 1257+07D0 F5           		PUSH	AF
 1258+07D1 CD 50 19     		CALL	l1950		; copy saved area back to screen
 1259+07D4 F1           		POP	AF
 1260+07D5 E1           		POP	HL
 1261+07D6 CD 66 21     		CALL	l2166		; execute required routine
 1262+07D9 C3 BD 0A     		JP	l0abd		; move on
 1263+07DC
 1264+07DC              ; The menu cursor up/down routines
 1265+07DC              ; Enter at l07dc for up, l07df for down
 1266+07DC
 1267+07DC 37           l07dc:		SCF
 1268+07DD 18 01        		JR	l07e0
 1269+07DF A7           l07df:		AND	A		; clear carry for cursor down
 1270+07E0 21 0C EC     l07e0:		LD	HL,$EC0C
 1271+07E3 7E           		LD	A,(HL)		; get currently highlighted line number
 1272+07E4 E5           		PUSH	HL
 1273+07E5 2A EC F6     		LD	HL,($F6EC		)	; point to menu
 1274+07E8 DC B9 19     		CALL	C,l19b9		; move highlight up
 1275+07EB D4 C8 19     		CALL	NC,l19c8	; or down
 1276+07EE E1           		POP	HL
 1277+07EF 77           		LD	(HL),A		; replace highlighted line number
 1278+07F0 37           l07f0:		SCF
 1279+07F1 C9           		RET
 1280+07F2
 1281+07F2              ; The main menu routine address table
 1282+07F2
 1283+07F2 04           l07f2:		DB	$04
 1284+07F3 00           		DB	$00
 1285+07F4 E8 08        		DW	l08e8		; Loader
 1286+07F6 01           		DB	$01
 1287+07F7 37 09        		DW	l0937		; +3 BASIC
 1288+07F9 02           		DB	$02
 1289+07FA 50 09        		DW	l0950		; Calculator
 1290+07FC 03           		DB	$03
 1291+07FD DF 08        		DW	l08df		; 48K BASIC
 1292+07FF
 1293+07FF              ; The main menu
 1294+07FF
 1295+07FF 05           l07ff:		DB	$05		; 5 lines total
 1296+0800
 1297+0800              		IF 1
 1298+0800 31 32 38 20  			DB	"128 +3  ", $FF
 1298+0804 2B 33 20 20
 1298+0808 FF
 1299+0809              		ELSE
 1300+0809 ~            			DB	"128 +3e ", $FF
 1301+0809              		ENDIF
 1302+0809
 1303+0809 4C 6F 61 64  l0809:		DB	"Loade","r"             + $80
 1303+080D 65 F2
 1304+080F 2B 33 20 42  l080f:		DB	"+3 BASI","C"           + $80
 1304+0813 41 53 49 C3
 1305+0817 43 61 6C 63  l0817:		DB	"Calculato","r"         + $80
 1305+081B 75 6C 61 74
 1305+081F 6F F2
 1306+0821 34 38 20 42  		DB	"48 BASI","C"           + $80
 1306+0825 41 53 49 C3
 1307+0829 A0           		DB	" "                     + $80
 1308+082A
 1309+082A              ; The editor menu routine address table
 1310+082A
 1311+082A 05           l082a:		DB	$05
 1312+082B 00           		DB	$00
 1313+082C F0 07        		DW	l07f0		; +3 BASIC
 1314+082E 01           		DB	$01
 1315+082F 17 09        		DW	l0917		; Renumber
 1316+0831 02           		DB	$02
 1317+0832 C5 08        		DW	l08c5		; Screen
 1318+0834 03           		DB	$03
 1319+0835 28 09        		DW	l0928		; Print
 1320+0837 04           		DB	$04
 1321+0838 CA 08        		DW	l08ca		; Exit
 1322+083A
 1323+083A              ; The editor menu
 1324+083A
 1325+083A 06           l083a:		DB	$06
 1326+083B 4F 70 74 69  		DB	"Options ",$FF
 1326+083F 6F 6E 73 20
 1326+0843 FF
 1327+0844
 1328+0844 2B 33 20 42  		DB	"+3 BASI","C"           + $80
 1328+0848 41 53 49 C3
 1329+084C 52 65 6E 75  		DB	"Renumbe","r"           + $80
 1329+0850 6D 62 65 F2
 1330+0854 53 63 72 65  		DB	"Scree","n"             + $80
 1330+0858 65 EE
 1331+085A 50 72 69 6E  		DB	"Prin","t"              + $80
 1331+085E F4
 1332+085F 45 78 69 F4  		DB	"Exi","t"               + $80
 1333+0863 A0           		DB	" "                     + $80
 1334+0864
 1335+0864              ; The calculator menu routines table
 1336+0864
 1337+0864 02           l0864:		DB	$02
 1338+0865 00           		DB	$00
 1339+0866 F0 07        		DW	l07f0		; Calculator
 1340+0868 01           		DB	$01
 1341+0869 CA 08        		DW	l08ca		; Exit
 1342+086B
 1343+086B              ; The calculator menu
 1344+086B
 1345+086B 03           l086b:		DB	$03
 1346+086C 4F 70 74 69  		DB	"Options ",$FF
 1346+0870 6F 6E 73 20
 1346+0874 FF
 1347+0875
 1348+0875 43 61 6C 63  		DB	"Calculato","r"         + $80
 1348+0879 75 6C 61 74
 1348+087D 6F F2
 1349+087F 45 78 69 F4  		DB	"Exi","t"               + $80
 1350+0883 A0           		DB	" "                     + $80
 1351+0884
 1352+0884              ; Cassette loader message
 1353+0884
 1354+0884              FREE_ROM0_2:	EQU	$
 1355+0884
 1356+0884              l0884:		;...
 1357+0884              		;...
 1358+0884
 1359+0884              R0_FREE_2:	EQU	27-($-FREE_ROM0_2)
 1360+0884 00 00 00...  ROM0_SPARE2:	DS	R0_FREE_2
 1361+089F
 1362+089F 2A 51 5C     l089f:		LD	HL,(	$5C51)
 1363+08A2 11 0D 00     		LD	DE,13
 1364+08A5 19           		ADD	HL,DE
 1365+08A6 4E           		LD	C,(HL)
 1366+08A7 23           		INC	HL
 1367+08A8 46           		LD	B,(HL)
 1368+08A9 23           		INC	HL
 1369+08AA 5E           		LD	E,(HL)
 1370+08AB 23           		INC	HL
 1371+08AC 56           		LD	D,(HL)
 1372+08AD EB           		EX	DE,HL
 1373+08AE E5           		PUSH	HL
 1374+08AF A7           		AND	A
 1375+08B0 ED 42        		SBC	HL,BC
 1376+08B2 E1           		POP	HL
 1377+08B3 EB           		EX	DE,HL
 1378+08B4 D2 D5 38     		JP	NC,$38D5
 1379+08B7 13           		INC	DE
 1380+08B8 72           		LD	(HL),D
 1381+08B9 2B           		DEC	HL
 1382+08BA 73           		LD	(HL),E
 1383+08BB 23           		INC	HL
 1384+08BC 23           		INC	HL
 1385+08BD 4E           		LD	C,(HL)
 1386+08BE 23           		INC	HL
 1387+08BF 46           		LD	B,(HL)
 1388+08C0 EB           		EX	DE,HL
 1389+08C1 09           		ADD	HL,BC
 1390+08C2 2B           		DEC	HL
 1391+08C3 37           		SCF
 1392+08C4 C9           		RET
 1393+08C5
 1394+08C5              ; The Screen menu option
 1395+08C5
 1396+08C5 CD 48 07     l08c5:		CALL	l0748		; call SCREEN editing key routine
 1397+08C8 18 75        		JR	l093f		; ???
 1398+08CA
 1399+08CA              ; The "Exit" from submenu option
 1400+08CA
 1401+08CA 21 0D EC     l08ca:		LD	HL,$EC0D
 1402+08CD CB B6        		res	6,(HL)		; ???
 1403+08CF CD 89 09     		CALL	l0989		; ???
 1404+08D2 06 00        		LD	B,$00
 1405+08D4 16 17        		LD	D,$17
 1406+08D6 CD 6B 1D     		CALL	l1d6b		; clear whole screen to editor colours
 1407+08D9 CD A7 05     		CALL	l05a7		; page in normal memory
 1408+08DC C3 4E 06     		JP	l064e		; display main menu & process it
 1409+08DF
 1410+08DF              ; The 48K BASIC menu option
 1411+08DF
 1412+08DF CD A7 05     l08df:		CALL	l05a7		; page in normal memory
 1413+08E2 CD 80 3E     		CALL	l3e80
 1414+08E5 88 14        		DW	m1488		; enter 48K BASIC via ROM 1
 1415+08E7 C9           		RET
 1416+08E8
 1417+08E8              ; The Loader menu option
 1418+08E8
 1419+08E8 CD 64 1A     l08e8:		CALL	l1a64		; display "Loader" bar
 1420+08EB 21 3C 5C     		LD	HL,	$5C3C
 1421+08EE CB C6        		SET	0,(HL)		; signal "using lower screen"
 1422+08F0 11 EB 37     		LD	DE,$37EB
 1423+08F3 00           		NOP
 1424+08F4 00           		NOP
 1425+08F5 3A 79 5B     		LD	A,(	$5B79)
 1426+08F8 FE 54        		CP	$54
 1427+08FA 20 03        		JR	NZ,l08ff	; move on if disk interface present
 1428+08FC CD 9E 02     		CALL	l029e		; display cassette loader message
 1429+08FF
 1430+08FF CB 86        l08ff:		res	0,(HL)		; ???
 1431+0901 CB F6        		SET	6,(HL)		; ???
 1432+0903 3E 07        		LD	A,$07
 1433+0905 32 0E EC     		LD	(	$EC0E		),A	; signal "current process is Loader"
 1434+0908 01 00 00     		LD	BC,$0000
 1435+090B CD 1D 19     		CALL	l191d		; output "AT 0,0"
 1436+090E CD A7 05     l090e:		CALL	l05a7		; page in normal memory
 1437+0911 CD 80 3E     		CALL	l3e80
 1438+0914 E8 12        		DW	m12e8
 1439+0916 C9           		RET
 1440+0917
 1441+0917 CD 95 1A     l0917:		CALL	l1a95
 1442+091A D4 94 07     		CALL	NC,l0794
 1443+091D 21 00 00     		LD	HL,$0000
 1444+0920 22 49 5C     		LD	(	$5C49),HL
 1445+0923 22 08 EC     		LD	($EC08),HL
 1446+0926 18 08        		JR	l0930		; (8)
 1447+0928
 1448+0928              ; The Print menu option
 1449+0928
 1450+0928 CD A7 05     l0928:		CALL	l05a7		; page in normal memory
 1451+092B CD 80 3E     		CALL	l3e80
 1452+092E 51 14        		DW	m1451
 1453+0930 21 0D EC     l0930:		LD	HL,$EC0D
 1454+0933 CB 76        		BIT	6,(HL)		; ???
 1455+0935 20 08        l0935:		JR	NZ,l093f
 1456+0937
 1457+0937              ; The +3 BASIC routine - called from the main menu
 1458+0937
 1459+0937 21 3C 5C     l0937:		LD	HL,	$5C3C
 1460+093A CB 86        		res	0,(HL)		; signal "main screen"
 1461+093C CD 5A 1A     		CALL	l1a5a		; display "+3 BASIC" bar
 1462+093F 21 0D EC     l093f:		LD	HL,$EC0D
 1463+0942 CB AE        		res	5,(HL)		; ???
 1464+0944 CB A6        		res	4,(HL)		; ???
 1465+0946 3E 00        		LD	A,$00		; ???
 1466+0948 21 2A 08     		LD	HL,l082a	; +3 BASIC menu addresses
 1467+094B 11 3A 08     		LD	DE,l083a	; +3 BASIC menu
 1468+094E 18 2C        		JR	l097c		; go to set menu
 1469+0950
 1470+0950              ; The Calculator routine - called from the main menu
 1471+0950
 1472+0950 21 0D EC     l0950:		LD	HL,$EC0D
 1473+0953 CB EE        		SET	5,(HL)		; ???
 1474+0955 CB E6        		SET	4,(HL)		; ???
 1475+0957 CB B6        		res	6,(HL)		; ???
 1476+0959 CD 89 09     		CALL	l0989
 1477+095C CD 5F 1A     		CALL	l1a5f		; display "Calculator" bar
 1478+095F 3E 04        		LD	A,$04
 1479+0961 32 0E EC     		LD	(	$EC0E		),A
 1480+0964 21 00 00     		LD	HL,$0000
 1481+0967 22 49 5C     		LD	(	$5C49),HL
 1482+096A CD FA 03     		CALL	l03fa
 1483+096D 01 00 00     		LD	BC,$0000
 1484+0970 78           		LD	A,B
 1485+0971 CD C3 0A     		CALL	l0ac3
 1486+0974 3E 04        		LD	A,$04
 1487+0976 21 64 08     		LD	HL,l0864
 1488+0979 11 6B 08     		LD	DE,l086b
 1489+097C
 1490+097C              ; Routine to set new menu and ???
 1491+097C
 1492+097C 32 0E EC     l097c:		LD	(	$EC0E		),A	; ???
 1493+097F 22 EA F6     		LD	($F6EA		),HL	; store routine address table
 1494+0982 ED 53 EC F6  		LD	($F6EC		),DE	; store menu address
 1495+0986 C3 B4 06     		JP	l06b4		; ???
 1496+0989
 1497+0989              ; Subroutine to ???
 1498+0989
 1499+0989 CD ED 0E     l0989:		CALL	l0eed
 1500+098C CD 8C 1C     		CALL	l1c8c
 1501+098F C3 B3 09     		JP	l09b3
 1502+0992
 1503+0992 06 00        l0992:		LD	B,$00
 1504+0994 16 17        		LD	D,$17
 1505+0996 CD 6B 1D     		CALL	l1d6b		; clear screen to editor colours
 1506+0999 C3 5C 06     		JP	l065c
 1507+099C
 1508+099C 06           l099c:		DB	$06
 1509+099D 00           		DB	0
 1510+099E 00           		DB	0
 1511+099F 00           		DB	0
 1512+09A0 04           		DB	$04
 1513+09A1 10           		DB	$10
 1514+09A2 14           		DB	$14
 1515+09A3
 1516+09A3 06           l09a3:		DB	$06
 1517+09A4 00           		DB	0
 1518+09A5 00           		DB	0
 1519+09A6 00           		DB	0
 1520+09A7 00           		DB	0
 1521+09A8 01           		DB	$01
 1522+09A9 01           		DB	$01
 1523+09AA
 1524+09AA 21 A3 09     l09aa:		LD	HL,l09a3
 1525+09AD 11 EE F6     		LD	DE,$F6EE
 1526+09B0 C3 52 21     		JP	l2152
 1527+09B3
 1528+09B3 21 9C 09     l09b3:		LD	HL,l099c
 1529+09B6 11 EE F6     		LD	DE,$F6EE
 1530+09B9 C3 52 21     		JP	l2152
 1531+09BC
 1532+09BC              ; Subroutine to ???
 1533+09BC
 1534+09BC 21 0D EC     l09bc:		LD	HL,$EC0D
 1535+09BF B7           		OR	A
 1536+09C0 B7           		OR	A
 1537+09C1 CB 46        		BIT	0,(HL)
 1538+09C3 C2 BD 0A     		JP	NZ,l0abd
 1539+09C6 CB BE        		res	7,(HL)
 1540+09C8 CB DE        		SET	3,(HL)
 1541+09CA E5           		PUSH	HL
 1542+09CB F5           		PUSH	AF
 1543+09CC CD B7 0A     		CALL	l0ab7
 1544+09CF F1           		POP	AF
 1545+09D0 F5           		PUSH	AF
 1546+09D1 CD 4F 0F     		CALL	l0f4f
 1547+09D4 F1           		POP	AF
 1548+09D5 78           		LD	A,B
 1549+09D6 CD 43 0C     		CALL	l0c43
 1550+09D9 E1           		POP	HL
 1551+09DA CB FE        		SET	7,(HL)
 1552+09DC D2 BD 0A     		JP	NC,l0abd
 1553+09DF 78           		LD	A,B
 1554+09E0 DA C3 0A     		JP	C,l0ac3
 1555+09E3 C3 BD 0A     		JP	l0abd
 1556+09E6
 1557+09E6
 1558+09E6              ; Editing keys: DELETE RIGHT
 1559+09E6
 1560+09E6 21 0D EC     l09e6:		LD	HL,$EC0D
 1561+09E9 CB DE        		SET	3,(HL)
 1562+09EB CD B7 0A     		CALL	l0ab7
 1563+09EE CD E0 0F     		CALL	l0fe0
 1564+09F1 37           		SCF
 1565+09F2 78           		LD	A,B
 1566+09F3 C3 C3 0A     		JP	l0ac3
 1567+09F6
 1568+09F6              ; Editing keys: DELETE
 1569+09F6
 1570+09F6 21 0D EC     l09f6:		LD	HL,$EC0D
 1571+09F9 CB 86        		res	0,(HL)
 1572+09FB CB DE        		SET	3,(HL)
 1573+09FD CD B7 0A     		CALL	l0ab7
 1574+0A00 CD 26 0C     		CALL	l0c26
 1575+0A03 3F           		CCF
 1576+0A04 DA BD 0A     		JP	C,l0abd
 1577+0A07 CD E0 0F     l0a07:		CALL	l0fe0
 1578+0A0A 37           		SCF
 1579+0A0B 78           		LD	A,B
 1580+0A0C C3 C3 0A     		JP	l0ac3
 1581+0A0F
 1582+0A0F              ; Editing keys: ENTER
 1583+0A0F
 1584+0A0F CD B7 0A     l0a0f:		CALL	l0ab7
 1585+0A12 F5           		PUSH	AF
 1586+0A13 CD 82 11     		CALL	l1182
 1587+0A16 C5           		PUSH	BC
 1588+0A17 06 00        		LD	B,$00
 1589+0A19 CD 0F 0F     		CALL	l0f0f
 1590+0A1C C1           		POP	BC
 1591+0A1D 38 0A        		JR	C,l0a29		; (10)
 1592+0A1F 21 20 00     		LD	HL,$0020
 1593+0A22 19           		ADD	HL,DE
 1594+0A23 7E           		LD	A,(HL)
 1595+0A24 2F           		CPL
 1596+0A25 E6 09        		AND	$09
 1597+0A27 28 1C        		JR	Z,l0a45		; (28)
 1598+0A29 3A 0D EC     l0a29:		LD	A,($EC0D		)
 1599+0A2C CB 5F        		BIT	3,A
 1600+0A2E 28 05        		JR	Z,l0a35		; (5)
 1601+0A30 CD 59 0D     		CALL	l0d59
 1602+0A33 30 15        		JR	NC,l0a4a	; (21)
 1603+0A35 CD 17 0D     l0a35:		CALL	l0d17
 1604+0A38 CD 43 0C     		CALL	l0c43
 1605+0A3B CD 9C 0F     		CALL	l0f9c
 1606+0A3E 06 00        		LD	B,$00
 1607+0A40 F1           		POP	AF
 1608+0A41 37           		SCF
 1609+0A42 C3 C3 0A     		JP	l0ac3
 1610+0A45 F1           l0a45:		POP	AF
 1611+0A46 37           		SCF
 1612+0A47 C3 BD 0A     		JP	l0abd
 1613+0A4A F1           l0a4a:		POP	AF
 1614+0A4B C3 BD 0A     		JP	l0abd
 1615+0A4E
 1616+0A4E              ; Editing keys: TOP
 1617+0A4E
 1618+0A4E 3A 0E EC     l0a4e:		LD	A,(	$EC0E		)
 1619+0A51 FE 04        		CP	$04
 1620+0A53 C8           		RET	Z		; exit if in Calculator
 1621+0A54 CD B7 0A     		CALL	l0ab7		; remove cursor
 1622+0A57 21 00 00     		LD	HL,$0000	; line 0
 1623+0A5A CD A7 05     		CALL	l05a7		; page in normal memory
 1624+0A5D EF           		RST	28H
 1625+0A5E 6E 19        		DW	o196E		; get address of first line in HL
 1626+0A60 EF           		RST	28H
 1627+0A61 95 16        		DW	o1695		; get line number in DE
 1628+0A63 CD CC 05     		CALL	l05cc		; page in DOS workspace
 1629+0A66 ED 53 49 5C  		LD	(	$5C49),DE	; set as current line
 1630+0A6A 3E 0F        		LD	A,$0F
 1631+0A6C CD A3 1C     		CALL	l1ca3		; set colours to blue ink, white paper
 1632+0A6F CD FA 03     		CALL	l03fa		; ???
 1633+0A72 37           		SCF			; success
 1634+0A73 C3 BD 0A     		JP	l0abd		; place cursor & exit
 1635+0A76
 1636+0A76              ; Editing keys: BOTTOM
 1637+0A76
 1638+0A76 3A 0E EC     l0a76:		LD	A,(	$EC0E		)
 1639+0A79 FE 04        		CP	$04
 1640+0A7B C8           		RET	Z		; exit if in Calculator
 1641+0A7C CD B7 0A     		CALL	l0ab7		; remove cursor
 1642+0A7F 21 0F 27     		LD	HL,9999		; last possible line
 1643+0A82 CD A7 05     		CALL	l05a7		; page in normal memory
 1644+0A85 EF           		RST	28H
 1645+0A86 6E 19        		DW	o196E		; get last line address in DE
 1646+0A88 EB           		EX	DE,HL
 1647+0A89 EF           		RST	28H
 1648+0A8A 95 16        		DW	o1695		; get last line number in DE
 1649+0A8C CD CC 05     		CALL	l05cc		; page in DOS workspace
 1650+0A8F ED 53 49 5C  		LD	(	$5C49),DE	; set as current line
 1651+0A93 3E 0F        		LD	A,$0F
 1652+0A95 CD A3 1C     		CALL	l1ca3		; set colours to blue ink, white paper
 1653+0A98 CD FA 03     		CALL	l03fa		; ???
 1654+0A9B 37           		SCF			; success
 1655+0A9C C3 BD 0A     		JP	l0abd		; place cursor & exit
 1656+0A9F
 1657+0A9F              ; Editing keys: LEFT WORD
 1658+0A9F
 1659+0A9F CD B7 0A     l0a9f:		CALL	l0ab7
 1660+0AA2 CD B5 0C     		CALL	l0cb5
 1661+0AA5 D2 BD 0A     		JP	NC,l0abd
 1662+0AA8 78           		LD	A,B
 1663+0AA9 C3 C3 0A     		JP	l0ac3
 1664+0AAC
 1665+0AAC              ; Editing keys: RIGHT WORD
 1666+0AAC
 1667+0AAC CD B7 0A     l0aac:		CALL	l0ab7
 1668+0AAF CD D4 0C     		CALL	l0cd4
 1669+0AB2 30 09        		JR	NC,l0abd	; (9)
 1670+0AB4 78           		LD	A,B
 1671+0AB5 18 0C        		JR	l0ac3		; (12)
 1672+0AB7
 1673+0AB7              ; Subroutine to remove cursor
 1674+0AB7
 1675+0AB7 CD D2 0A     l0ab7:		CALL	l0ad2		; get cursor position
 1676+0ABA C3 49 17     		JP	l1749		; remove it
 1677+0ABD
 1678+0ABD              ; Subroutine to place cursor
 1679+0ABD
 1680+0ABD CD D2 0A     l0abd:		CALL	l0ad2		; get cursor position
 1681+0AC0 C3 3A 17     		JP	l173a		; place it
 1682+0AC3
 1683+0AC3              ; Subroutine to set cursor to line C, column B, ??? A
 1684+0AC3              ; and set colours & place it
 1685+0AC3
 1686+0AC3 CD DC 0A     l0ac3:		CALL	l0adc		; set cursor details
 1687+0AC6 F5           		PUSH	AF
 1688+0AC7 C5           		PUSH	BC
 1689+0AC8 3E 0F        		LD	A,$0F
 1690+0ACA CD A3 1C     		CALL	l1ca3		; set colours to blue INK, white PAPER
 1691+0ACD C1           		POP	BC
 1692+0ACE F1           		POP	AF
 1693+0ACF C3 3A 17     		JP	l173a		; place cursor
 1694+0AD2
 1695+0AD2              ; Subroutine to get cursor line (C), column (B), and ??? (A)
 1696+0AD2
 1697+0AD2 21 EE F6     l0ad2:		LD	HL,$F6EE
 1698+0AD5 4E           		LD	C,(HL)		; get line (within editing area)
 1699+0AD6 23           		INC	HL
 1700+0AD7 46           		LD	B,(HL)		; get column
 1701+0AD8 23           		INC	HL
 1702+0AD9 7E           		LD	A,(HL)		; get ???
 1703+0ADA 23           		INC	HL
 1704+0ADB C9           		RET
 1705+0ADC
 1706+0ADC              ; Subroutine to set cursor line (C), column (B), and ??? (A)
 1707+0ADC
 1708+0ADC 21 EE F6     l0adc:		LD	HL,$F6EE
 1709+0ADF 71           		LD	(HL),C		; set line
 1710+0AE0 23           		INC	HL
 1711+0AE1 70           		LD	(HL),B		; set column
 1712+0AE2 23           		INC	HL
 1713+0AE3 77           		LD	(HL),A		; set ???
 1714+0AE4 C9           		RET
 1715+0AE5
 1716+0AE5
 1717+0AE5
 1718+0AE5 E5           l0ae5:		PUSH	HL
 1719+0AE6 CD 82 11     		CALL	l1182
 1720+0AE9 26 00        		LD	H,$00
 1721+0AEB 68           		LD	L,B
 1722+0AEC 19           		ADD	HL,DE
 1723+0AED 7E           		LD	A,(HL)
 1724+0AEE E1           		POP	HL
 1725+0AEF C9           		RET
 1726+0AF0
 1727+0AF0              ; Editing keys: DOWN 10 LINES
 1728+0AF0
 1729+0AF0 CD B7 0A     l0af0:		CALL	l0ab7
 1730+0AF3 5F           		LD	E,A
 1731+0AF4 16 0A        		LD	D,$0A
 1732+0AF6 D5           l0af6:		PUSH	DE
 1733+0AF7 CD FB 0B     		CALL	l0bfb
 1734+0AFA D1           		POP	DE
 1735+0AFB 30 C0        		JR	NC,l0abd	; (-64)
 1736+0AFD 7B           		LD	A,E
 1737+0AFE CD DC 0A     		CALL	l0adc
 1738+0B01 43           		LD	B,E
 1739+0B02 CD C4 0B     		CALL	l0bc4
 1740+0B05 30 06        		JR	NC,l0b0d	; (6)
 1741+0B07 15           		DEC	D
 1742+0B08 20 EC        		JR	NZ,l0af6	; (-20)
 1743+0B0A 7B           		LD	A,E
 1744+0B0B 38 B6        		JR	C,l0ac3		; (-74)
 1745+0B0D D5           l0b0d:		PUSH	DE
 1746+0B0E CD D6 0B     		CALL	l0bd6
 1747+0B11 D1           		POP	DE
 1748+0B12 43           		LD	B,E
 1749+0B13 CD C4 0B     		CALL	l0bc4
 1750+0B16 7B           		LD	A,E
 1751+0B17 B7           		OR	A
 1752+0B18 18 A9        		JR	l0ac3		; (-87)
 1753+0B1A
 1754+0B1A              ; Editing keys: UP 10 LINES
 1755+0B1A
 1756+0B1A CD B7 0A     l0b1a:		CALL	l0ab7
 1757+0B1D 5F           		LD	E,A
 1758+0B1E 16 0A        		LD	D,$0A
 1759+0B20 D5           l0b20:		PUSH	DE
 1760+0B21 CD D6 0B     		CALL	l0bd6
 1761+0B24 D1           		POP	DE
 1762+0B25 30 96        		JR	NC,l0abd	; (-106)
 1763+0B27 7B           		LD	A,E
 1764+0B28 CD DC 0A     		CALL	l0adc
 1765+0B2B 43           		LD	B,E
 1766+0B2C CD CD 0B     		CALL	l0bcd
 1767+0B2F 30 07        		JR	NC,l0b38	; (7)
 1768+0B31 15           		DEC	D
 1769+0B32 20 EC        		JR	NZ,l0b20	; (-20)
 1770+0B34 7B           		LD	A,E
 1771+0B35 DA C3 0A     		JP	C,l0ac3
 1772+0B38 F5           l0b38:		PUSH	AF
 1773+0B39 CD FB 0B     		CALL	l0bfb
 1774+0B3C 06 00        		LD	B,$00
 1775+0B3E CD 9F 0C     		CALL	l0c9f
 1776+0B41 F1           		POP	AF
 1777+0B42 C3 C3 0A     		JP	l0ac3
 1778+0B45
 1779+0B45              ; Editing keys: END OF LINE
 1780+0B45
 1781+0B45 CD B7 0A     l0b45:		CALL	l0ab7
 1782+0B48 CD 17 0D     		CALL	l0d17
 1783+0B4B D2 BD 0A     		JP	NC,l0abd
 1784+0B4E 78           		LD	A,B
 1785+0B4F C3 C3 0A     		JP	l0ac3
 1786+0B52
 1787+0B52              ; Editing keys: START OF LINE
 1788+0B52
 1789+0B52 CD B7 0A     l0b52:		CALL	l0ab7
 1790+0B55 CD FC 0C     		CALL	l0cfc
 1791+0B58 D2 BD 0A     		JP	NC,l0abd
 1792+0B5B 78           		LD	A,B
 1793+0B5C C3 C3 0A     		JP	l0ac3
 1794+0B5F
 1795+0B5F              ; Editing keys: CURSOR UP
 1796+0B5F
 1797+0B5F CD B7 0A     l0b5f:		CALL	l0ab7		; remove cursor
 1798+0B62 5F           		LD	E,A
 1799+0B63 D5           		PUSH	DE
 1800+0B64 CD D6 0B     		CALL	l0bd6
 1801+0B67 D1           		POP	DE
 1802+0B68 D2 BD 0A     		JP	NC,l0abd
 1803+0B6B 43           		LD	B,E
 1804+0B6C CD CD 0B     		CALL	l0bcd
 1805+0B6F 7B           		LD	A,E
 1806+0B70 DA C3 0A     		JP	C,l0ac3
 1807+0B73 F5           		PUSH	AF
 1808+0B74 CD FB 0B     		CALL	l0bfb
 1809+0B77 06 00        		LD	B,$00
 1810+0B79 CD C4 0B     		CALL	l0bc4
 1811+0B7C F1           		POP	AF
 1812+0B7D C3 C3 0A     		JP	l0ac3
 1813+0B80
 1814+0B80              ; Editing keys: CURSOR DOWN
 1815+0B80
 1816+0B80 CD B7 0A     l0b80:		CALL	l0ab7		; remove cursor
 1817+0B83 5F           		LD	E,A
 1818+0B84 D5           		PUSH	DE
 1819+0B85 CD FB 0B     		CALL	l0bfb
 1820+0B88 D1           		POP	DE
 1821+0B89 D2 BD 0A     		JP	NC,l0abd
 1822+0B8C 43           		LD	B,E
 1823+0B8D CD CD 0B     		CALL	l0bcd
 1824+0B90 7B           		LD	A,E
 1825+0B91 DA C3 0A     		JP	C,l0ac3
 1826+0B94 D5           		PUSH	DE
 1827+0B95 CD D6 0B     		CALL	l0bd6
 1828+0B98 D1           		POP	DE
 1829+0B99 43           		LD	B,E
 1830+0B9A CD C4 0B     		CALL	l0bc4
 1831+0B9D 7B           		LD	A,E
 1832+0B9E B7           		OR	A
 1833+0B9F C3 C3 0A     		JP	l0ac3
 1834+0BA2
 1835+0BA2              ; Editing keys: CURSOR LEFT
 1836+0BA2
 1837+0BA2 CD B7 0A     l0ba2:		CALL	l0ab7		; remove cursor
 1838+0BA5 CD 26 0C     		CALL	l0c26
 1839+0BA8 DA C3 0A     		JP	C,l0ac3
 1840+0BAB C3 BD 0A     		JP	l0abd
 1841+0BAE
 1842+0BAE              ; Editing keys: CURSOR RIGHT
 1843+0BAE
 1844+0BAE CD B7 0A     l0bae:		CALL	l0ab7		; remove cursor
 1845+0BB1 CD 43 0C     		CALL	l0c43
 1846+0BB4 DA C3 0A     		JP	C,l0ac3
 1847+0BB7 F5           		PUSH	AF
 1848+0BB8 CD D6 0B     		CALL	l0bd6
 1849+0BBB 06 1F        		LD	B,$1F
 1850+0BBD CD AA 0C     		CALL	l0caa
 1851+0BC0 F1           		POP	AF
 1852+0BC1 C3 C3 0A     		JP	l0ac3
 1853+0BC4
 1854+0BC4
 1855+0BC4
 1856+0BC4 D5           l0bc4:		PUSH	DE
 1857+0BC5 CD 9F 0C     		CALL	l0c9f
 1858+0BC8 D4 AA 0C     		CALL	NC,l0caa
 1859+0BCB D1           		POP	DE
 1860+0BCC C9           		RET
 1861+0BCD
 1862+0BCD D5           l0bcd:		PUSH	DE
 1863+0BCE CD AA 0C     		CALL	l0caa
 1864+0BD1 D4 9F 0C     		CALL	NC,l0c9f
 1865+0BD4 D1           		POP	DE
 1866+0BD5 C9           		RET
 1867+0BD6
 1868+0BD6 CD 47 0D     l0bd6:		CALL	l0d47
 1869+0BD9 30 1F        		JR	NC,l0bfa	; (31)
 1870+0BDB C5           		PUSH	BC
 1871+0BDC CD 82 11     		CALL	l1182
 1872+0BDF 06 00        		LD	B,$00
 1873+0BE1 CD 0F 0F     		CALL	l0f0f
 1874+0BE4 D4 4E 10     		CALL	NC,l104e
 1875+0BE7 C1           		POP	BC
 1876+0BE8 21 F1 F6     		LD	HL,$F6F1
 1877+0BEB 7E           		LD	A,(HL)
 1878+0BEC B9           		CP	C
 1879+0BED 38 09        		JR	C,l0bf8		; (9)
 1880+0BEF C5           		PUSH	BC
 1881+0BF0 CD 3A 05     		CALL	l053a
 1882+0BF3 C1           		POP	BC
 1883+0BF4 D8           		RET	C
 1884+0BF5 79           		LD	A,C
 1885+0BF6 B7           		OR	A
 1886+0BF7 C8           		RET	Z
 1887+0BF8
 1888+0BF8 0D           l0bf8:		DEC	C
 1889+0BF9 37           		SCF
 1890+0BFA
 1891+0BFA C9           l0bfa:		RET
 1892+0BFB
 1893+0BFB C5           l0bfb:		PUSH	BC
 1894+0BFC CD 82 11     		CALL	l1182
 1895+0BFF 06 00        		LD	B,$00
 1896+0C01 CD 0F 0F     		CALL	l0f0f
 1897+0C04 C1           		POP	BC
 1898+0C05 38 03        		JR	C,l0c0a		; (3)
 1899+0C07 C3 4E 10     		JP	l104e
 1900+0C0A
 1901+0C0A CD 33 0D     l0c0a:		CALL	l0d33
 1902+0C0D 30 16        		JR	NC,l0c25	; (22)
 1903+0C0F 21 F1 F6     		LD	HL,$F6F1
 1904+0C12 23           		INC	HL
 1905+0C13 79           		LD	A,C
 1906+0C14 BE           		CP	(HL)
 1907+0C15 38 0C        		JR	C,l0c23		; (12)
 1908+0C17 C5           		PUSH	BC
 1909+0C18 E5           		PUSH	HL
 1910+0C19 CD 04 05     		CALL	l0504
 1911+0C1C E1           		POP	HL
 1912+0C1D C1           		POP	BC
 1913+0C1E D8           		RET	C
 1914+0C1F 23           		INC	HL
 1915+0C20 7E           		LD	A,(HL)
 1916+0C21 B9           		CP	C
 1917+0C22 C8           		RET	Z
 1918+0C23
 1919+0C23 0C           l0c23:		INC	C
 1920+0C24 37           		SCF
 1921+0C25
 1922+0C25 C9           l0c25:		RET
 1923+0C26
 1924+0C26 57           l0c26:		LD	D,A
 1925+0C27 05           		DEC	B
 1926+0C28 FA 31 0C     		JP	m,l0c31
 1927+0C2B 58           		LD	E,B
 1928+0C2C CD AA 0C     		CALL	l0caa
 1929+0C2F 7B           		LD	A,E
 1930+0C30 D8           		RET	C
 1931+0C31
 1932+0C31 D5           l0c31:		PUSH	DE
 1933+0C32 CD D6 0B     		CALL	l0bd6
 1934+0C35 D1           		POP	DE
 1935+0C36 7B           		LD	A,E
 1936+0C37 D0           		RET	NC
 1937+0C38 06 1F        		LD	B,$1F
 1938+0C3A CD AA 0C     		CALL	l0caa
 1939+0C3D 78           		LD	A,B
 1940+0C3E D8           		RET	C
 1941+0C3F 7A           		LD	A,D
 1942+0C40 06 00        		LD	B,$00
 1943+0C42 C9           		RET
 1944+0C43
 1945+0C43 57           l0c43:		LD	D,A
 1946+0C44 04           		INC	B
 1947+0C45 3E 1F        		LD	A,$1F
 1948+0C47 B8           		CP	B
 1949+0C48 38 06        		JR	C,l0c50		; (6)
 1950+0C4A 58           		LD	E,B
 1951+0C4B CD 9F 0C     		CALL	l0c9f
 1952+0C4E 7B           		LD	A,E
 1953+0C4F D8           		RET	C
 1954+0C50
 1955+0C50 05           l0c50:		DEC	B
 1956+0C51 C5           		PUSH	BC
 1957+0C52 E5           		PUSH	HL
 1958+0C53 21 0D EC     		LD	HL,$EC0D
 1959+0C56 CB 7E        		BIT	7,(HL)
 1960+0C58 20 31        		JR	NZ,l0c8b	; (49)
 1961+0C5A CD 82 11     		CALL	l1182
 1962+0C5D 21 20 00     		LD	HL,$0020
 1963+0C60 19           		ADD	HL,DE
 1964+0C61 7E           		LD	A,(HL)
 1965+0C62 CB 4F        		BIT	1,A
 1966+0C64 20 25        		JR	NZ,l0c8b	; (37)
 1967+0C66 CB CE        		SET	1,(HL)
 1968+0C68 CB 9E        		res	3,(HL)
 1969+0C6A 21 23 00     		LD	HL,$0023
 1970+0C6D 19           		ADD	HL,DE
 1971+0C6E EB           		EX	DE,HL
 1972+0C6F E1           		POP	HL
 1973+0C70 C1           		POP	BC
 1974+0C71 F5           		PUSH	AF
 1975+0C72 CD FB 0B     		CALL	l0bfb
 1976+0C75 F1           		POP	AF
 1977+0C76 CD 82 11     		CALL	l1182
 1978+0C79 21 23 00     		LD	HL,$0023
 1979+0C7C 19           		ADD	HL,DE
 1980+0C7D EB           		EX	DE,HL
 1981+0C7E CB 87        		res	0,A
 1982+0C80 CB DF        		SET	3,A
 1983+0C82 CD A1 0F     		CALL	l0fa1
 1984+0C85 CD EE 16     		CALL	l16ee
 1985+0C88 78           		LD	A,B
 1986+0C89 37           		SCF
 1987+0C8A C9           		RET
 1988+0C8B
 1989+0C8B E1           l0c8b:		POP	HL
 1990+0C8C C1           		POP	BC
 1991+0C8D D5           		PUSH	DE
 1992+0C8E CD FB 0B     		CALL	l0bfb
 1993+0C91 D1           		POP	DE
 1994+0C92 78           		LD	A,B
 1995+0C93 D0           		RET	NC
 1996+0C94 06 00        		LD	B,$00
 1997+0C96 CD 9F 0C     		CALL	l0c9f
 1998+0C99 78           		LD	A,B
 1999+0C9A D8           		RET	C
 2000+0C9B 7B           		LD	A,E
 2001+0C9C 06 00        		LD	B,$00
 2002+0C9E C9           		RET
 2003+0C9F
 2004+0C9F D5           l0c9f:		PUSH	DE
 2005+0CA0 E5           		PUSH	HL
 2006+0CA1 CD 82 11     		CALL	l1182
 2007+0CA4 CD 0F 0F     		CALL	l0f0f
 2008+0CA7 C3 30 0D     		JP	l0d30
 2009+0CAA
 2010+0CAA D5           l0caa:		PUSH	DE
 2011+0CAB E5           		PUSH	HL
 2012+0CAC CD 82 11     		CALL	l1182
 2013+0CAF CD 31 0F     		CALL	l0f31
 2014+0CB2 C3 30 0D     		JP	l0d30
 2015+0CB5
 2016+0CB5 D5           l0cb5:		PUSH	DE
 2017+0CB6 E5           		PUSH	HL
 2018+0CB7 CD 26 0C     l0cb7:		CALL	l0c26
 2019+0CBA 30 16        		JR	NC,l0cd2	; (22)
 2020+0CBC CD E5 0A     		CALL	l0ae5
 2021+0CBF FE 20        		CP	$20
 2022+0CC1 28 F4        		JR	Z,l0cb7		; (-12)
 2023+0CC3 CD 26 0C     l0cc3:		CALL	l0c26
 2024+0CC6 30 0A        		JR	NC,l0cd2	; (10)
 2025+0CC8 CD E5 0A     		CALL	l0ae5
 2026+0CCB FE 20        		CP	$20
 2027+0CCD 20 F4        		JR	NZ,l0cc3	; (-12)
 2028+0CCF CD 43 0C     		CALL	l0c43
 2029+0CD2
 2030+0CD2 18 5C        l0cd2:		JR	l0d30		; (92)
 2031+0CD4
 2032+0CD4 D5           l0cd4:		PUSH	DE
 2033+0CD5 E5           		PUSH	HL
 2034+0CD6
 2035+0CD6 CD 43 0C     l0cd6:		CALL	l0c43
 2036+0CD9 30 1B        		JR	NC,l0cf6	; (27)
 2037+0CDB CD E5 0A     		CALL	l0ae5
 2038+0CDE FE 20        		CP	$20
 2039+0CE0 20 F4        		JR	NZ,l0cd6	; (-12)
 2040+0CE2
 2041+0CE2 CD 43 0C     l0ce2:		CALL	l0c43
 2042+0CE5 30 0F        		JR	NC,l0cf6	; (15)
 2043+0CE7 CD 0F 0F     		CALL	l0f0f
 2044+0CEA 30 0A        		JR	NC,l0cf6	; (10)
 2045+0CEC CD E5 0A     		CALL	l0ae5
 2046+0CEF FE 20        		CP	$20
 2047+0CF1 28 EF        		JR	Z,l0ce2		; (-17)
 2048+0CF3 37           		SCF
 2049+0CF4 18 3A        		JR	l0d30		; (58)
 2050+0CF6
 2051+0CF6 D4 26 0C     l0cf6:		CALL	NC,l0c26
 2052+0CF9 B7           		OR	A
 2053+0CFA 18 34        		JR	l0d30		; (52)
 2054+0CFC
 2055+0CFC D5           l0cfc:		PUSH	DE
 2056+0CFD E5           		PUSH	HL
 2057+0CFE
 2058+0CFE CD 82 11     l0cfe:		CALL	l1182
 2059+0D01 21 20 00     		LD	HL,$0020
 2060+0D04 19           		ADD	HL,DE
 2061+0D05 CB 46        		BIT	0,(HL)
 2062+0D07 20 07        		JR	NZ,l0d10	; (7)
 2063+0D09 CD D6 0B     		CALL	l0bd6
 2064+0D0C 38 F0        		JR	C,l0cfe		; (-16)
 2065+0D0E 18 20        		JR	l0d30		; (32)
 2066+0D10
 2067+0D10 06 00        l0d10:		LD	B,$00
 2068+0D12 CD 9F 0C     		CALL	l0c9f
 2069+0D15 18 19        		JR	l0d30		; (25)
 2070+0D17
 2071+0D17 D5           l0d17:		PUSH	DE
 2072+0D18 E5           		PUSH	HL
 2073+0D19
 2074+0D19 CD 82 11     l0d19:		CALL	l1182
 2075+0D1C 21 20 00     		LD	HL,$0020
 2076+0D1F 19           		ADD	HL,DE
 2077+0D20 CB 5E        		BIT	3,(HL)
 2078+0D22 20 07        		JR	NZ,l0d2b	; (7)
 2079+0D24 CD FB 0B     		CALL	l0bfb
 2080+0D27 38 F0        		JR	C,l0d19		; (-16)
 2081+0D29 18 05        		JR	l0d30		; (5)
 2082+0D2B
 2083+0D2B 06 1F        l0d2b:		LD	B,$1F
 2084+0D2D CD AA 0C     		CALL	l0caa
 2085+0D30
 2086+0D30 E1           l0d30:		POP	HL
 2087+0D31 D1           		POP	DE
 2088+0D32 C9           		RET
 2089+0D33
 2090+0D33 3A 0D EC     l0d33:		LD	A,($EC0D		)
 2091+0D36 CB 5F        		BIT	3,A
 2092+0D38 37           		SCF
 2093+0D39 C8           		RET	Z
 2094+0D3A CD 82 11     		CALL	l1182
 2095+0D3D 21 20 00     		LD	HL,$0020
 2096+0D40 19           		ADD	HL,DE
 2097+0D41 CB 5E        		BIT	3,(HL)
 2098+0D43 37           		SCF
 2099+0D44 C8           		RET	Z
 2100+0D45 18 12        		JR	l0d59		; (18)
 2101+0D47
 2102+0D47 3A 0D EC     l0d47:		LD	A,($EC0D		)
 2103+0D4A CB 5F        		BIT	3,A
 2104+0D4C 37           		SCF
 2105+0D4D C8           		RET	Z
 2106+0D4E CD 82 11     		CALL	l1182
 2107+0D51 21 20 00     		LD	HL,$0020
 2108+0D54 19           		ADD	HL,DE
 2109+0D55 CB 46        		BIT	0,(HL)
 2110+0D57 37           		SCF
 2111+0D58 C8           		RET	Z
 2112+0D59
 2113+0D59 3E 02        l0d59:		LD	A,$02
 2114+0D5B
 2115+0D5B CD 82 11     l0d5b:		CALL	l1182
 2116+0D5E 21 20 00     		LD	HL,$0020
 2117+0D61 19           		ADD	HL,DE
 2118+0D62 CB 46        		BIT	0,(HL)
 2119+0D64 20 08        		JR	NZ,l0d6e	; (8)
 2120+0D66 0D           		DEC	C
 2121+0D67 F2 5B 0D     		JP	p,l0d5b
 2122+0D6A 0E 00        		LD	C,$00
 2123+0D6C 3E 01        		LD	A,$01
 2124+0D6E
 2125+0D6E 21 00 EC     l0d6e:		LD	HL,$EC00
 2126+0D71 11 03 EC     		LD	DE,$EC03
 2127+0D74 F6 80        		OR	$80
 2128+0D76 77           		LD	(HL),A
 2129+0D77 12           		LD	(DE),A
 2130+0D78 23           		INC	HL
 2131+0D79 13           		INC	DE
 2132+0D7A 3E 00        		LD	A,$00
 2133+0D7C 77           		LD	(HL),A
 2134+0D7D 12           		LD	(DE),A
 2135+0D7E 23           		INC	HL
 2136+0D7F 13           		INC	DE
 2137+0D80 79           		LD	A,C
 2138+0D81 77           		LD	(HL),A
 2139+0D82 12           		LD	(DE),A
 2140+0D83 21 00 00     		LD	HL,$0000
 2141+0D86 22 06 EC     		LD	($EC06),HL
 2142+0D89 CD 2D 14     		CALL	l142d
 2143+0D8C CD FA 1D     		CALL	l1dfa
 2144+0D8F DD E5        		PUSH	IX
 2145+0D91 CD A7 05     		CALL	l05a7
 2146+0D94 CD 80 3E     		CALL	l3e80
 2147+0D97 F0 24        		DW	m24f0
 2148+0D99 CD CC 05     		CALL	l05cc
 2149+0D9C FB           		EI
 2150+0D9D DD E1        		POP	IX
 2151+0D9F 3A 3A 5C     		LD	A,(	$5C3A)
 2152+0DA2 3C           		INC	A
 2153+0DA3 20 18        		JR	NZ,l0dbd	; (24)
 2154+0DA5 21 0D EC     		LD	HL,$EC0D
 2155+0DA8 CB 9E        		res	3,(HL)
 2156+0DAA CD 58 17     		CALL	l1758
 2157+0DAD 3A 0E EC     		LD	A,(	$EC0E		)
 2158+0DB0 FE 04        		CP	$04
 2159+0DB2 C4 FA 03     		CALL	NZ,l03fa
 2160+0DB5 CD A7 07     		CALL	l07a7
 2161+0DB8 CD D2 0A     		CALL	l0ad2
 2162+0DBB 37           		SCF
 2163+0DBC C9           		RET
 2164+0DBD
 2165+0DBD 21 00 EC     l0dbd:		LD	HL,$EC00
 2166+0DC0 11 03 EC     		LD	DE,$EC03
 2167+0DC3 1A           		LD	A,(DE)
 2168+0DC4 CB BF        		res	7,A
 2169+0DC6 77           		LD	(HL),A
 2170+0DC7 23           		INC	HL
 2171+0DC8 13           		INC	DE
 2172+0DC9 1A           		LD	A,(DE)
 2173+0DCA 77           		LD	(HL),A
 2174+0DCB 23           		INC	HL
 2175+0DCC 13           		INC	DE
 2176+0DCD 1A           		LD	A,(DE)
 2177+0DCE 77           		LD	(HL),A
 2178+0DCF CD F6 1D     		CALL	l1df6
 2179+0DD2 38 04        		JR	C,l0dd8		; (4)
 2180+0DD4 ED 4B 06 EC  		LD	BC,($EC06)
 2181+0DD8
 2182+0DD8 2A 06 EC     l0dd8:		LD	HL,($EC06)
 2183+0DDB B7           		OR	A
 2184+0DDC ED 42        		SBC	HL,BC
 2185+0DDE F5           		PUSH	AF
 2186+0DDF E5           		PUSH	HL
 2187+0DE0 CD D2 0A     		CALL	l0ad2
 2188+0DE3 E1           		POP	HL
 2189+0DE4 F1           		POP	AF
 2190+0DE5 38 11        		JR	C,l0df8		; (17)
 2191+0DE7 28 2A        		JR	Z,l0e13		; (42)
 2192+0DE9
 2193+0DE9 E5           l0de9:		PUSH	HL
 2194+0DEA 78           		LD	A,B
 2195+0DEB CD 26 0C     		CALL	l0c26
 2196+0DEE E1           		POP	HL
 2197+0DEF 30 22        		JR	NC,l0e13	; (34)
 2198+0DF1 2B           		DEC	HL
 2199+0DF2 7C           		LD	A,H
 2200+0DF3 B5           		OR	L
 2201+0DF4 20 F3        		JR	NZ,l0de9	; (-13)
 2202+0DF6 18 1B        		JR	l0e13		; (27)
 2203+0DF8
 2204+0DF8 E5           l0df8:		PUSH	HL
 2205+0DF9 21 0D EC     		LD	HL,$EC0D
 2206+0DFC CB BE        		res	7,(HL)
 2207+0DFE E1           		POP	HL
 2208+0DFF EB           		EX	DE,HL
 2209+0E00 21 00 00     		LD	HL,$0000
 2210+0E03 B7           		OR	A
 2211+0E04 ED 52        		SBC	HL,DE
 2212+0E06
 2213+0E06 E5           l0e06:		PUSH	HL
 2214+0E07 78           		LD	A,B
 2215+0E08 CD 43 0C     		CALL	l0c43
 2216+0E0B E1           		POP	HL
 2217+0E0C 30 05        		JR	NC,l0e13	; (5)
 2218+0E0E 2B           		DEC	HL
 2219+0E0F 7C           		LD	A,H
 2220+0E10 B5           		OR	L
 2221+0E11 20 F3        		JR	NZ,l0e06	; (-13)
 2222+0E13
 2223+0E13 21 0D EC     l0e13:		LD	HL,$EC0D
 2224+0E16 CB FE        		SET	7,(HL)
 2225+0E18 CD DC 0A     		CALL	l0adc
 2226+0E1B 3E 17        		LD	A,$17
 2227+0E1D CD A3 1C     		CALL	l1ca3
 2228+0E20 B7           		OR	A
 2229+0E21 C9           		RET
 2230+0E22
 2231+0E22 21 00 EC     l0e22:		LD	HL,$EC00
 2232+0E25 CB 7E        		BIT	7,(HL)
 2233+0E27 28 07        		JR	Z,l0e30		; (7)
 2234+0E29 2A 06 EC     		LD	HL,($EC06)
 2235+0E2C 23           		INC	HL
 2236+0E2D 22 06 EC     		LD	($EC06),HL
 2237+0E30
 2238+0E30 21 00 EC     l0e30:		LD	HL,$EC00
 2239+0E33 7E           		LD	A,(HL)
 2240+0E34 23           		INC	HL
 2241+0E35 46           		LD	B,(HL)
 2242+0E36 23           		INC	HL
 2243+0E37 4E           		LD	C,(HL)
 2244+0E38 E5           		PUSH	HL
 2245+0E39 E6 0F        		AND	$0F
 2246+0E3B 21 53 0E     		LD	HL,l0e53
 2247+0E3E CD 66 21     		CALL	l2166
 2248+0E41 5D           		LD	E,L
 2249+0E42 E1           		POP	HL
 2250+0E43 28 02        		JR	Z,l0e47		; (2)
 2251+0E45 3E 0D        		LD	A,$0D
 2252+0E47
 2253+0E47 71           l0e47:		LD	(HL),C
 2254+0E48 2B           		DEC	HL
 2255+0E49 70           		LD	(HL),B
 2256+0E4A 2B           		DEC	HL
 2257+0E4B F5           		PUSH	AF
 2258+0E4C 7E           		LD	A,(HL)
 2259+0E4D E6 F0        		AND	$F0
 2260+0E4F B3           		OR	E
 2261+0E50 77           		LD	(HL),A
 2262+0E51 F1           		POP	AF
 2263+0E52 C9           		RET
 2264+0E53 03 02        l0e53:		DB	$03,$02
 2265+0E55 7A 0E        		DW	l0e7a
 2266+0E57 04           		DB	$04
 2267+0E58 B7 0E        		DW	l0eb7
 2268+0E5A 01           		DB	$01
 2269+0E5B 5D 0E        		DW	l0e5d
 2270+0E5D CD 85 13     l0e5d:		CALL	l1385
 2271+0E60 CD DC 0E     l0e60:		CALL	l0edc
 2272+0E63 30 07        		JR	NC,l0e6c	; (7)
 2273+0E65 FE 00        		CP	$00
 2274+0E67 28 F7        		JR	Z,l0e60		; (-9)
 2275+0E69 2E 01        		LD	L,$01
 2276+0E6B C9           		RET
 2277+0E6C
 2278+0E6C 0C           l0e6c:		INC	C
 2279+0E6D 06 00        		LD	B,$00
 2280+0E6F 21 DB F9     		LD	HL,$F9DB
 2281+0E72 79           		LD	A,C
 2282+0E73 BE           		CP	(HL)
 2283+0E74 38           		DB	$38
 2284+0E75 E7           		DB	-25
 2285+0E76 06 00        		LD	B,$00
 2286+0E78 0E 00        		LD	C,$00
 2287+0E7A
 2288+0E7A E5           l0e7a:		PUSH	HL
 2289+0E7B 21 EE F6     		LD	HL,$F6EE
 2290+0E7E 7E           		LD	A,(HL)
 2291+0E7F B9           		CP	C
 2292+0E80 20 0A        		JR	NZ,l0e8c	; (10)
 2293+0E82 23           		INC	HL
 2294+0E83 7E           		LD	A,(HL)
 2295+0E84 B8           		CP	B
 2296+0E85 20 05        		JR	NZ,l0e8c	; (5)
 2297+0E87 21 00 EC     		LD	HL,$EC00
 2298+0E8A CB BE        		res	7,(HL)
 2299+0E8C
 2300+0E8C E1           l0e8c:		POP	HL
 2301+0E8D
 2302+0E8D CD 82 11     l0e8d:		CALL	l1182
 2303+0E90 CD DC 0E     		CALL	l0edc
 2304+0E93 30 07        		JR	NC,l0e9c	; (7)
 2305+0E95 FE 00        		CP	$00
 2306+0E97 28 E1        		JR	Z,l0e7a		; (-31)
 2307+0E99 2E 02        		LD	L,$02
 2308+0E9B C9           		RET
 2309+0E9C
 2310+0E9C              ;End of row reached - no editable characters in the Screen Line Edit Buffer row
 2311+0E9C
 2312+0E9C 21 20 00     l0e9c:		LD	HL,$0020	;
 2313+0E9F 19           		ADD	HL,DE		; Point to the flag byte for the row.
 2314+0EA0 CB 5E        		BIT	3,(HL)		; Is it the last row of the BASIC line?
 2315+0EA2 28 05        		JR	Z,l0ea9		; Jump if not.
 2316+0EA4
 2317+0EA4              ;On last row of the BASIC line and finished fetching characters from the line
 2318+0EA4
 2319+0EA4 2E 08        		LD	L,$08		; L=Signal at the end of the last row of the BASIC line.
 2320+0EA6 3E 0D        		LD	A,$0D		; A='Enter' character.
 2321+0EA8 C9           		RET			; Return with zero flag reset to indicate match found.
 2322+0EA9
 2323+0EA9              ;Not on the last row of the BASIC line so move to the beginning of the next, if it is on screen.
 2324+0EA9
 2325+0EA9 21 F3 F6     l0ea9:		LD	HL,	$F6F3			; Point to the 'top row scroll threshold' value.
 2326+0EAC 0C           		INC	C		; Next row of the BASIC line in the Screen Line Edit Buffer.
 2327+0EAD 7E           		LD	A,(HL)		; Fetch the number of the last row in the Screen Line Edit Buffer.
 2328+0EAE B9           		CP	C		; Exceeded the upper scroll threshold?
 2329+0EAF 06 00        		LD	B,$00		; Column 0.
 2330+0EB1 30 DA        		JR	NC,l0e8d	; Jump back if not to retrieve the character from the next row.
 2331+0EB3
 2332+0EB3              ;The upper row threshold for triggering scrolling the screen has been reached so proceed to scroll up one line
 2333+0EB3
 2334+0EB3 06 00        		LD	B,$00		; Column 0. [Redundant byte]
 2335+0EB5 0E 01        		LD	C,$01		; Row 1. (Row 0 holds a copy of the last row visible on screen)
 2336+0EB7
 2337+0EB7              ; Table entry point - Using lower screen and only top row of a multi-row BASIC line is visible
 2338+0EB7              ; --------------------------------------------------------------------------------------------
 2339+0EB7
 2340+0EB7 CD 91 12     l0eb7:		CALL	l1291		; Find the address of the row specified by C in Below-Screen Line Edit Buffer, into DE.
 2341+0EBA
 2342+0EBA CD DC 0E     l0eba:		CALL	l0edc		; Fetch character from Below-Screen Line Edit Buffer row, incrementing the column number.
 2343+0EBD 30 07        		JR	NC,l0ec6	; Jump if end of row reached.
 2344+0EBF
 2345+0EBF FE 00        		CP	$00		; Is the character a null, i.e. not editable?
 2346+0EC1 28 F7        		JR	Z,l0eba		; Jump back if null to keep fetching characters until a character is found or the end of the row is reached.
 2347+0EC3
 2348+0EC3 2E 04        		LD	L,$04		; L=Signal a character was returned from the Below-Screen Line Edit Buffer row, with A holding the character.
 2349+0EC5 C9           		RET			; Return with zero flag reset to indicate match found.
 2350+0EC6
 2351+0EC6              ;End of row reached - no editable characters in the (below screen) Below-Screen Line Edit Buffer row
 2352+0EC6
 2353+0EC6 21 20 00     l0ec6:		LD	HL,$0020	;
 2354+0EC9 19           		ADD	HL,DE		; Point to the flag byte for the row.
 2355+0ECA CB 5E        		BIT	3,(HL)		; Is it the last row of the BASIC line?
 2356+0ECC 20 09        		JR	NZ,l0ed7	; Jump if so.
 2357+0ECE
 2358+0ECE 0C           		INC	C		; Next row.
 2359+0ECF 06 00        		LD	B,$00		; Column 0.
 2360+0ED1
 2361+0ED1 3A F5 F6     		LD	A,($F6F5		)	; Fetch number of rows in the Below-Screen Line Edit Buffer.
 2362+0ED4 B9           		CP	C		; Exceeded last line in Below-Screen Line Edit Buffer?
 2363+0ED5 30 E0        		JR	NC,l0eb7	; Jump back if not to retrieve the character from the next row.
 2364+0ED7
 2365+0ED7              ;All characters from rows off bottom of screen fetched so return an 'Enter'
 2366+0ED7
 2367+0ED7              ; [Note it is not possible to have more than 20 rows off the bottom of the screen]
 2368+0ED7
 2369+0ED7 2E 08        l0ed7:		LD	L,$08		; L=Signal at the end of the last row of the BASIC line.
 2370+0ED9 3E 0D        		LD	A,$0D		; A='Enter' character.
 2371+0EDB C9           		RET			; Return with zero flag reset to indicate match found.
 2372+0EDC              					; ------------------------------------
 2373+0EDC              					; Fetch Character from Edit Buffer Row
 2374+0EDC              					; ------------------------------------
 2375+0EDC              					; Entry: B =Column number.
 2376+0EDC              					;        DE=Start address of row in Edit Buffer.
 2377+0EDC              					; Exit : Carry flag set indicates character fetched, reset if column out of range.
 2378+0EDC
 2379+0EDC 3E 1F        l0edc:		LD	A,$1F		; Column 31.
 2380+0EDE B8           		CP	B		; Is column
 2381+0EDF 3F           		CCF			;
 2382+0EE0 D0           		RET	NC		; Return if B is greater than 31.
 2383+0EE1
 2384+0EE1 68           		LD	L,B		;
 2385+0EE2 26 00        		LD	H,$00		; HL=Column number.
 2386+0EE4 19           		ADD	HL,DE		;
 2387+0EE5 7E           		LD	A,(HL)		; Fetch the character at the specified column.
 2388+0EE6 04           		INC	B		; Increment the column number.
 2389+0EE7 37           		SCF			; Signal character fetched.
 2390+0EE8 C9           		RET			;
 2391+0EE9
 2392+0EE9 01           l0ee9:		DB	$01
 2393+0EEA 14           		DB	$14
 2394+0EEB
 2395+0EEB 01           l0eeb:		DB	$01
 2396+0EEC 01           		DB	$01
 2397+0EED
 2398+0EED              ; Subroutine to ???
 2399+0EED
 2400+0EED 21 3C 5C     l0eed:		LD	HL,	$5C3C
 2401+0EF0 CB 86        		res	0,(HL)		; signal "not using lower screen"
 2402+0EF2 21 E9 0E     		LD	HL,l0ee9
 2403+0EF5 11 15 EC     		LD	DE,$EC15
 2404+0EF8 C3 52 21     		JP	l2152		; copy $14 into ed_N_ROWS and exit
 2405+0EFB
 2406+0EFB 21 3C 5C     l0efb:		LD	HL,	$5C3C
 2407+0EFE CB C6        		SET	0,(HL)		; signal "using lower screen"
 2408+0F00 01 00 00     		LD	BC,$0000
 2409+0F03 CD 1D 19     		CALL	l191d		; output "AT 0,0"
 2410+0F06 21 EB 0E     		LD	HL,l0eeb
 2411+0F09 11 15 EC     		LD	DE,$EC15
 2412+0F0C C3 52 21     		JP	l2152		; copy $01 into ed_N_ROWS and exit
 2413+0F0F
 2414+0F0F 26 00        l0f0f:		LD	H,$00
 2415+0F11 68           		LD	L,B
 2416+0F12 19           		ADD	HL,DE
 2417+0F13 7E           		LD	A,(HL)
 2418+0F14 FE 00        		CP	$00
 2419+0F16 37           		SCF
 2420+0F17 C0           		RET	NZ
 2421+0F18 78           		LD	A,B
 2422+0F19 B7           		OR	A
 2423+0F1A 28 0D        		JR	Z,l0f29		; (13)
 2424+0F1C E5           		PUSH	HL
 2425+0F1D 2B           		DEC	HL
 2426+0F1E 7E           		LD	A,(HL)
 2427+0F1F FE 00        		CP	$00
 2428+0F21 37           		SCF
 2429+0F22 E1           		POP	HL
 2430+0F23 C0           		RET	NZ
 2431+0F24
 2432+0F24 7E           l0f24:		LD	A,(HL)
 2433+0F25 FE 00        		CP	$00
 2434+0F27 37           		SCF
 2435+0F28 C0           		RET	NZ
 2436+0F29
 2437+0F29 23           l0f29:		INC	HL
 2438+0F2A 04           		INC	B
 2439+0F2B 78           		LD	A,B
 2440+0F2C FE 1F        		CP	$1F
 2441+0F2E 38 F4        		JR	C,l0f24		; (-12)
 2442+0F30 C9           		RET
 2443+0F31
 2444+0F31 26 00        l0f31:		LD	H,$00
 2445+0F33 68           		LD	L,B
 2446+0F34 19           		ADD	HL,DE
 2447+0F35 7E           		LD	A,(HL)
 2448+0F36 FE 00        		CP	$00
 2449+0F38 37           		SCF
 2450+0F39 C0           		RET	NZ
 2451+0F3A
 2452+0F3A 7E           l0f3a:		LD	A,(HL)
 2453+0F3B FE 00        		CP	$00
 2454+0F3D 20 07        		JR	NZ,l0f46	; (7)
 2455+0F3F 78           		LD	A,B
 2456+0F40 B7           		OR	A
 2457+0F41 C8           		RET	Z
 2458+0F42 2B           		DEC	HL
 2459+0F43 05           		DEC	B
 2460+0F44 18 F4        		JR	l0f3a		; (-12)
 2461+0F46
 2462+0F46 04           l0f46:		INC	B
 2463+0F47 37           		SCF
 2464+0F48 C9           		RET
 2465+0F49 26 00        		LD	H,$00
 2466+0F4B 68           		LD	L,B
 2467+0F4C 19           		ADD	HL,DE
 2468+0F4D 7E           		LD	A,(HL)
 2469+0F4E C9           		RET
 2470+0F4F
 2471+0F4F 21 0D EC     l0f4f:		LD	HL,$EC0D
 2472+0F52 B7           		OR	A
 2473+0F53 CB 46        		BIT	0,(HL)
 2474+0F55 C0           		RET	NZ
 2475+0F56 C5           		PUSH	BC
 2476+0F57 F5           		PUSH	AF
 2477+0F58 CD 82 11     		CALL	l1182
 2478+0F5B F1           		POP	AF
 2479+0F5C
 2480+0F5C CD 77 05     l0f5c:		CALL	l0577
 2481+0F5F F5           		PUSH	AF
 2482+0F60 EB           		EX	DE,HL
 2483+0F61 CD FE 16     		CALL	l16fe
 2484+0F64 EB           		EX	DE,HL
 2485+0F65 F1           		POP	AF
 2486+0F66 3F           		CCF
 2487+0F67 28 31        		JR	Z,l0f9a		; (49)
 2488+0F69 F5           		PUSH	AF
 2489+0F6A 06 00        		LD	B,$00
 2490+0F6C 0C           		INC	C
 2491+0F6D 3A 15 EC     		LD	A,($EC15		)
 2492+0F70 B9           		CP	C
 2493+0F71 38 23        		JR	C,l0f96		; (35)
 2494+0F73 7E           		LD	A,(HL)
 2495+0F74 5F           		LD	E,A
 2496+0F75 E6 D7        		AND	$D7
 2497+0F77 BE           		CP	(HL)
 2498+0F78 77           		LD	(HL),A
 2499+0F79 7B           		LD	A,E
 2500+0F7A CB CE        		SET	1,(HL)
 2501+0F7C F5           		PUSH	AF
 2502+0F7D CD 82 11     		CALL	l1182
 2503+0F80 F1           		POP	AF
 2504+0F81 28 0D        		JR	Z,l0f90		; (13)
 2505+0F83 CB 87        		res	0,A
 2506+0F85 CD A1 0F     		CALL	l0fa1
 2507+0F88 30 10        		JR	NC,l0f9a	; (16)
 2508+0F8A CD EE 16     		CALL	l16ee
 2509+0F8D F1           		POP	AF
 2510+0F8E 18 CC        		JR	l0f5c		; (-52)
 2511+0F90
 2512+0F90 CD 0F 0F     l0f90:		CALL	l0f0f
 2513+0F93 F1           		POP	AF
 2514+0F94 18 C6        		JR	l0f5c		; (-58)
 2515+0F96
 2516+0F96 F1           l0f96:		POP	AF
 2517+0F97 CD 3C 12     		CALL	l123c
 2518+0F9A
 2519+0F9A C1           l0f9a:		POP	BC
 2520+0F9B C9           		RET
 2521+0F9C
 2522+0F9C CD 82 11     l0f9c:		CALL	l1182
 2523+0F9F 3E 09        		LD	A,$09
 2524+0FA1
 2525+0FA1 C5           l0fa1:		PUSH	BC
 2526+0FA2 D5           		PUSH	DE
 2527+0FA3 41           		LD	B,C
 2528+0FA4 21 BD 0F     		LD	HL,l0fbd
 2529+0FA7 4F           		LD	C,A
 2530+0FA8 C5           		PUSH	BC
 2531+0FA9 CD 40 05     		CALL	l0540
 2532+0FAC C1           		POP	BC
 2533+0FAD 79           		LD	A,C
 2534+0FAE 30 0A        		JR	NC,l0fba	; (10)
 2535+0FB0 48           		LD	C,B
 2536+0FB1 CD 82 11     		CALL	l1182
 2537+0FB4 21 20 00     		LD	HL,$0020
 2538+0FB7 19           		ADD	HL,DE
 2539+0FB8 77           		LD	(HL),A
 2540+0FB9 37           		SCF
 2541+0FBA
 2542+0FBA D1           l0fba:		POP	DE
 2543+0FBB C1           		POP	BC
 2544+0FBC C9           		RET
 2545+0FBD
 2546+0FBD 00 00 00...  l0fbd:		DS	$20
 2547+0FDD
 2548+0FDD 09           		ADD	HL,BC
 2549+0FDE
 2550+0FDE 00 00        		DS	2
 2551+0FE0
 2552+0FE0 C5           l0fe0:		PUSH	BC
 2553+0FE1 CD 82 11     		CALL	l1182
 2554+0FE4 C5           		PUSH	BC
 2555+0FE5
 2556+0FE5 21 20 00     l0fe5:		LD	HL,$0020
 2557+0FE8 19           		ADD	HL,DE
 2558+0FE9 CB 4E        		BIT	1,(HL)
 2559+0FEB 3E 00        		LD	A,$00
 2560+0FED 28 10        		JR	Z,l0fff		; (16)
 2561+0FEF 0C           		INC	C
 2562+0FF0 21 23 00     		LD	HL,$0023
 2563+0FF3 19           		ADD	HL,DE
 2564+0FF4 EB           		EX	DE,HL
 2565+0FF5 3A 15 EC     		LD	A,($EC15		)
 2566+0FF8 B9           		CP	C
 2567+0FF9 30 EA        		JR	NC,l0fe5	; (-22)
 2568+0FFB 0D           		DEC	C
 2569+0FFC CD 97 12     		CALL	l1297
 2570+0FFF
 2571+0FFF E1           l0fff:		POP	HL
 2572+1000
 2573+1000 E5           l1000:		PUSH	HL
 2574+1001 CD 82 11     		CALL	l1182
 2575+1004 E1           		POP	HL
 2576+1005 47           		LD	B,A
 2577+1006 79           		LD	A,C
 2578+1007 BD           		CP	L
 2579+1008 78           		LD	A,B
 2580+1009 F5           		PUSH	AF
 2581+100A 20 03        		JR	NZ,l100f	; (3)
 2582+100C 44           		LD	B,H
 2583+100D 18 09        		JR	l1018		; (9)
 2584+100F
 2585+100F F5           l100f:		PUSH	AF
 2586+1010 E5           		PUSH	HL
 2587+1011 06 00        		LD	B,$00
 2588+1013 CD 0F 0F     		CALL	l0f0f
 2589+1016 E1           		POP	HL
 2590+1017 F1           		POP	AF
 2591+1018
 2592+1018 E5           l1018:		PUSH	HL
 2593+1019 21 F4 F6     		LD	HL,$F6F4
 2594+101C CB C6        		SET	0,(HL)
 2595+101E 28 02        		JR	Z,l1022		; (2)
 2596+1020 CB 86        		res	0,(HL)
 2597+1022
 2598+1022 CD 8C 05     l1022:		CALL	l058c
 2599+1025 F5           		PUSH	AF
 2600+1026 C5           		PUSH	BC
 2601+1027 D5           		PUSH	DE
 2602+1028 21 F4 F6     l1028:		LD	HL,$F6F4
 2603+102B CB 46        		BIT	0,(HL)
 2604+102D 20 0E        		JR	NZ,l103d	; (14)
 2605+102F 06 00        		LD	B,$00
 2606+1031 CD 9F 0C     		CALL	l0c9f
 2607+1034 38 07        		JR	C,l103d		; (7)
 2608+1036 CD 4E 10     		CALL	l104e
 2609+1039 D1           		POP	DE
 2610+103A C1           		POP	BC
 2611+103B 18 05        		JR	l1042		; (5)
 2612+103D
 2613+103D E1           l103d:		POP	HL
 2614+103E C1           		POP	BC
 2615+103F CD FE 16     l103f:		CALL	l16fe
 2616+1042
 2617+1042 F1           l1042:		POP	AF
 2618+1043 0D           		DEC	C
 2619+1044
 2620+1044 47           l1044:		LD	B,A
 2621+1045 E1           		POP	HL
 2622+1046 F1           		POP	AF
 2623+1047 78           		LD	A,B
 2624+1048 C2 00 10     		JP	NZ,l1000
 2625+104B 37           		SCF
 2626+104C C1           		POP	BC
 2627+104D C9           		RET
 2628+104E
 2629+104E 21 20 00     l104e:		LD	HL,$0020
 2630+1051 19           		ADD	HL,DE
 2631+1052 7E           		LD	A,(HL)
 2632+1053 CB 46        		BIT	0,(HL)
 2633+1055 20 29        		JR	NZ,l1080	; (41)
 2634+1057 F5           		PUSH	AF
 2635+1058 C5           		PUSH	BC
 2636+1059 79           		LD	A,C
 2637+105A B7           		OR	A
 2638+105B 20 15        		JR	NZ,l1072	; (21)
 2639+105D C5           		PUSH	BC
 2640+105E 2A 9A FC     		LD	HL,($FC9A)
 2641+1061 CD 18 14     		CALL	l1418
 2642+1064 22 9A FC     		LD	($FC9A),HL
 2643+1067 3A DB F9     		LD	A,($F9DB		)
 2644+106A 4F           		LD	C,A
 2645+106B 0D           		DEC	C
 2646+106C CD 85 13     		CALL	l1385
 2647+106F C1           		POP	BC
 2648+1070 18 04        		JR	l1076		; (4)
 2649+1072
 2650+1072 0D           l1072:		DEC	C
 2651+1073 CD 82 11     		CALL	l1182
 2652+1076
 2653+1076 C1           l1076:		POP	BC
 2654+1077 F1           		POP	AF
 2655+1078 21 20 00     		LD	HL,$0020
 2656+107B 19           		ADD	HL,DE
 2657+107C CB 8E        		res	1,(HL)
 2658+107E B6           		OR	(HL)
 2659+107F 77           		LD	(HL),A
 2660+1080
 2661+1080 41           l1080:		LD	B,C
 2662+1081 CD 82 11     		CALL	l1182
 2663+1084 CD AD 11     		CALL	l11ad
 2664+1087 C3 13 05     		JP	l0513
 2665+108A
 2666+108A
 2667+108A              ; Editing keys: DELETE WORD LEFT
 2668+108A
 2669+108A CD 52 11     l108a:		CALL	l1152
 2670+108D E5           l108d:		PUSH	HL
 2671+108E CD 63 11     		CALL	l1163
 2672+1091 28 32        		JR	Z,l10c5		; (50)
 2673+1093 CD 26 0C     		CALL	l0c26
 2674+1096 E1           		POP	HL
 2675+1097 30 2D        		JR	NC,l10c6	; (45)
 2676+1099 CD E5 0A     		CALL	l0ae5
 2677+109C F5           		PUSH	AF
 2678+109D E5           		PUSH	HL
 2679+109E CD E0 0F     		CALL	l0fe0
 2680+10A1 E1           		POP	HL
 2681+10A2 F1           		POP	AF
 2682+10A3 FE 20        		CP	$20
 2683+10A5 28 E6        		JR	Z,l108d		; (-26)
 2684+10A7
 2685+10A7 E5           l10a7:		PUSH	HL
 2686+10A8 CD 63 11     		CALL	l1163
 2687+10AB 28 18        		JR	Z,l10c5		; (24)
 2688+10AD CD 26 0C     		CALL	l0c26
 2689+10B0 E1           		POP	HL
 2690+10B1 30 13        		JR	NC,l10c6	; (19)
 2691+10B3 CD E5 0A     		CALL	l0ae5
 2692+10B6 FE 20        		CP	$20
 2693+10B8 28 07        		JR	Z,l10c1		; (7)
 2694+10BA E5           		PUSH	HL
 2695+10BB CD E0 0F     		CALL	l0fe0
 2696+10BE E1           		POP	HL
 2697+10BF 18 E6        		JR	l10a7		; (-26)
 2698+10C1
 2699+10C1 E5           l10c1:		PUSH	HL
 2700+10C2 CD 43 0C     		CALL	l0c43
 2701+10C5
 2702+10C5 E1           l10c5:		POP	HL
 2703+10C6
 2704+10C6 78           l10c6:		LD	A,B
 2705+10C7 F5           		PUSH	AF
 2706+10C8 E5           		PUSH	HL
 2707+10C9 21 F5 EE     		LD	HL,$EEF5
 2708+10CC CB 96        		res	2,(HL)
 2709+10CE 3A 15 EC     		LD	A,($EC15		)
 2710+10D1 C5           		PUSH	BC
 2711+10D2 06 00        		LD	B,$00
 2712+10D4 4F           		LD	C,A
 2713+10D5 BF           		CP	A
 2714+10D6 CD D0 04     		CALL	l04d0
 2715+10D9 C1           		POP	BC
 2716+10DA 21 0D EC     		LD	HL,$EC0D
 2717+10DD CB DE        		SET	3,(HL)
 2718+10DF E1           		POP	HL
 2719+10E0 CD C3 0A     		CALL	l0ac3
 2720+10E3 F1           		POP	AF
 2721+10E4 C9           		RET
 2722+10E5
 2723+10E5
 2724+10E5              ; Editing keys: DELETE WORD RIGHT
 2725+10E5
 2726+10E5 CD 52 11     l10e5:		CALL	l1152
 2727+10E8 E5           l10e8:		PUSH	HL
 2728+10E9 CD E5 0A     		CALL	l0ae5
 2729+10EC E1           		POP	HL
 2730+10ED FE 00        		CP	$00
 2731+10EF 37           		SCF
 2732+10F0 28 D4        		JR	Z,l10c6		; (-44)
 2733+10F2 F5           		PUSH	AF
 2734+10F3 E5           		PUSH	HL
 2735+10F4 CD E0 0F     		CALL	l0fe0
 2736+10F7 E1           		POP	HL
 2737+10F8 F1           		POP	AF
 2738+10F9 FE 20        		CP	$20
 2739+10FB 20 EB        		JR	NZ,l10e8	; (-21)
 2740+10FD
 2741+10FD CD E5 0A     l10fd:		CALL	l0ae5
 2742+1100 FE 20        		CP	$20
 2743+1102 37           		SCF
 2744+1103 20 C1        		JR	NZ,l10c6	; (-63)
 2745+1105 E5           		PUSH	HL
 2746+1106 CD E0 0F     		CALL	l0fe0
 2747+1109 E1           		POP	HL
 2748+110A 18 F1        		JR	l10fd		; (-15)
 2749+110C
 2750+110C
 2751+110C              ; Editing keys: DELETE LINE LEFT
 2752+110C
 2753+110C CD 52 11     l110c:		CALL	l1152
 2754+110F E5           l110f:		PUSH	HL
 2755+1110 CD 82 11     		CALL	l1182
 2756+1113 21 20 00     		LD	HL,$0020
 2757+1116 19           		ADD	HL,DE
 2758+1117 CB 46        		BIT	0,(HL)
 2759+1119 20 0C        		JR	NZ,l1127	; (12)
 2760+111B CD 26 0C     		CALL	l0c26
 2761+111E 30 1B        		JR	NC,l113b	; (27)
 2762+1120 CD E0 0F     		CALL	l0fe0
 2763+1123 E1           		POP	HL
 2764+1124 18 E9        		JR	l110f		; (-23)
 2765+1126 E5           		PUSH	HL
 2766+1127
 2767+1127 78           l1127:		LD	A,B
 2768+1128 FE 00        		CP	$00
 2769+112A 28 0F        		JR	Z,l113b		; (15)
 2770+112C 05           		DEC	B
 2771+112D CD E5 0A     		CALL	l0ae5
 2772+1130 04           		INC	B
 2773+1131 FE 00        		CP	$00
 2774+1133 28 06        		JR	Z,l113b		; (6)
 2775+1135 05           		DEC	B
 2776+1136 CD E0 0F     		CALL	l0fe0
 2777+1139 18 EC        		JR	l1127		; (-20)
 2778+113B
 2779+113B E1           l113b:		POP	HL
 2780+113C
 2781+113C 37           l113c:		SCF
 2782+113D C3 C6 10     		JP	l10c6
 2783+1140
 2784+1140
 2785+1140              ; Editing keys: DELETE LINE RIGHT
 2786+1140
 2787+1140 CD 52 11     l1140:		CALL	l1152
 2788+1143 CD E5 0A     l1143:		CALL	l0ae5
 2789+1146 FE 00        		CP	$00
 2790+1148 37           		SCF
 2791+1149 28 F1        		JR	Z,l113c		; (-15)
 2792+114B E5           		PUSH	HL
 2793+114C CD E0 0F     		CALL	l0fe0
 2794+114F E1           		POP	HL
 2795+1150 18 F1        		JR	l1143		; (-15)
 2796+1152
 2797+1152 21 0D EC     l1152:		LD	HL,$EC0D
 2798+1155 CB 86        		res	0,(HL)
 2799+1157 CD B7 0A     		CALL	l0ab7
 2800+115A 21 F5 EE     		LD	HL,$EEF5
 2801+115D CB D6        		SET	2,(HL)
 2802+115F 21 F1 F6     		LD	HL,$F6F1
 2803+1162 C9           		RET
 2804+1163
 2805+1163 CD 82 11     l1163:		CALL	l1182
 2806+1166 21 20 00     		LD	HL,$0020
 2807+1169 19           		ADD	HL,DE
 2808+116A CB 46        		BIT	0,(HL)
 2809+116C 28 0E        		JR	Z,l117c		; (14)
 2810+116E 78           		LD	A,B
 2811+116F FE 00        		CP	$00
 2812+1171 28 0D        		JR	Z,l1180		; (13)
 2813+1173 05           		DEC	B
 2814+1174 CD E5 0A     		CALL	l0ae5
 2815+1177 04           		INC	B
 2816+1178 FE 00        		CP	$00
 2817+117A 28 04        		JR	Z,l1180		; (4)
 2818+117C
 2819+117C 3E 01        l117c:		LD	A,$01
 2820+117E B7           		OR	A
 2821+117F C9           		RET
 2822+1180
 2823+1180 AF           l1180:		XOR	A
 2824+1181 C9           		RET
 2825+1182
 2826+1182 21 16 EC     l1182:		LD	HL,$EC16
 2827+1185
 2828+1185 F5           l1185:		PUSH	AF
 2829+1186 79           		LD	A,C
 2830+1187 11 23 00     		LD	DE,$0023
 2831+118A
 2832+118A B7           l118a:		OR	A
 2833+118B 28 04        		JR	Z,l1191		; (4)
 2834+118D 19           		ADD	HL,DE
 2835+118E 3D           		DEC	A
 2836+118F 18 F9        		JR	l118a		; (-7)
 2837+1191
 2838+1191 EB           l1191:		EX	DE,HL
 2839+1192 F1           		POP	AF
 2840+1193 C9           		RET
 2841+1194 D5           		PUSH	DE
 2842+1195 CD 82 11     		CALL	l1182
 2843+1198 26 00        		LD	H,$00
 2844+119A 68           		LD	L,B
 2845+119B 19           		ADD	HL,DE
 2846+119C D1           		POP	DE
 2847+119D C9           		RET
 2848+119E
 2849+119E
 2850+119E 05           l119e:		DB	$05
 2851+119F 00 00 00 F8  		DB	$00,$00,$00,$F8,$F6
 2851+11A3 F6
 2852+11A4
 2853+11A4              ; Subroutine to ???
 2854+11A4
 2855+11A4 21 9E 11     l11a4:		LD	HL,l119e
 2856+11A7 11 F5 F6     		LD	DE,$F6F5
 2857+11AA C3 52 21     		JP	l2152
 2858+11AD
 2859+11AD              ; Subroutine to ???
 2860+11AD
 2861+11AD C5           l11ad:		PUSH	BC
 2862+11AE D5           		PUSH	DE
 2863+11AF 21 F5 F6     		LD	HL,$F6F5			; ???
 2864+11B2 E5           		PUSH	HL
 2865+11B3 7E           		LD	A,(HL)
 2866+11B4 B7           		OR	A
 2867+11B5 20 18        		JR	NZ,l11cf	; move on if ???
 2868+11B7 E5           		PUSH	HL
 2869+11B8 CD 2D 14     		CALL	l142d		; setup token routines in RAM
 2870+11BB 2A D7 F9     		LD	HL,($F9D7)
 2871+11BE CD 20 14     		CALL	l1420		; get line number after ???
 2872+11C1 30 03        		JR	NC,l11c6	; move on if none
 2873+11C3 22 D7 F9     		LD	($F9D7),HL	; store it
 2874+11C6 44           l11c6:		LD	B,H
 2875+11C7 4D           		LD	C,L
 2876+11C8 E1           		POP	HL
 2877+11C9 CD A4 13     		CALL	l13a4		; ???
 2878+11CC 3D           		DEC	A
 2879+11CD 18 15        		JR	l11e4
 2880+11CF 21 0D EC     l11cf:		LD	HL,$EC0D
 2881+11D2 CB 86        		res	0,(HL)
 2882+11D4 21 F8 F6     		LD	HL,$F6F8
 2883+11D7 54           		LD	D,H
 2884+11D8 5D           		LD	E,L
 2885+11D9 01 23 00     		LD	BC,$0023
 2886+11DC 09           		ADD	HL,BC
 2887+11DD 01 BC 02     		LD	BC,$02BC
 2888+11E0 ED B0        		LDIR
 2889+11E2 3D           		DEC	A
 2890+11E3 37           		SCF
 2891+11E4 D1           l11e4:		POP	DE
 2892+11E5 12           		LD	(DE),A
 2893+11E6 21 F8 F6     		LD	HL,$F6F8
 2894+11E9 D1           		POP	DE
 2895+11EA C1           		POP	BC
 2896+11EB C9           		RET
 2897+11EC
 2898+11EC
 2899+11EC C5           l11ec:		PUSH	BC
 2900+11ED D5           		PUSH	DE
 2901+11EE 21 20 00     		LD	HL,$0020
 2902+11F1 19           		ADD	HL,DE
 2903+11F2 7E           		LD	A,(HL)
 2904+11F3 2F           		CPL
 2905+11F4 E6 11        		AND	$11
 2906+11F6 20 15        		JR	NZ,l120d	; (21)
 2907+11F8 E5           		PUSH	HL
 2908+11F9 D5           		PUSH	DE
 2909+11FA 23           		INC	HL
 2910+11FB 56           		LD	D,(HL)
 2911+11FC 23           		INC	HL
 2912+11FD 5E           		LD	E,(HL)
 2913+11FE D5           		PUSH	DE
 2914+11FF CD 2D 14     		CALL	l142d
 2915+1202 E1           		POP	HL
 2916+1203 CD 18 14     		CALL	l1418
 2917+1206 30 03        		JR	NC,l120b	; (3)
 2918+1208 22 D7 F9     		LD	($F9D7),HL
 2919+120B
 2920+120B D1           l120b:		POP	DE
 2921+120C E1           		POP	HL
 2922+120D
 2923+120D CB 46        l120d:		BIT	0,(HL)
 2924+120F 21 F5 F6     		LD	HL,$F6F5
 2925+1212 E5           		PUSH	HL
 2926+1213 28 05        		JR	Z,l121a		; (5)
 2927+1215 3E 00        		LD	A,$00
 2928+1217 37           		SCF
 2929+1218 18 CA        		JR	l11e4		; (-54)
 2930+121A
 2931+121A 7E           l121a:		LD	A,(HL)
 2932+121B FE 14        		CP	$14
 2933+121D 28 C5        		JR	Z,l11e4		; (-59)
 2934+121F 01 23 00     		LD	BC,$0023
 2935+1222 21 F8 F6     		LD	HL,$F6F8
 2936+1225 EB           		EX	DE,HL
 2937+1226 ED B0        		LDIR
 2938+1228 21 D6 F9     		LD	HL,$F9D6
 2939+122B 54           		LD	D,H
 2940+122C 5D           		LD	E,L
 2941+122D 01 23 00     		LD	BC,$0023
 2942+1230 B7           		OR	A
 2943+1231 ED 42        		SBC	HL,BC
 2944+1233 01 BC 02     		LD	BC,$02BC
 2945+1236 ED B8        		LDDR
 2946+1238 3C           		INC	A
 2947+1239 37           		SCF
 2948+123A 18 A8        		JR	l11e4		; (-88)
 2949+123C
 2950+123C C5           l123c:		PUSH	BC
 2951+123D D5           		PUSH	DE
 2952+123E F5           		PUSH	AF
 2953+123F 06 00        		LD	B,$00
 2954+1241 0E 01        		LD	C,$01
 2955+1243 E5           		PUSH	HL
 2956+1244 CD 91 12     		CALL	l1291
 2957+1247 E1           		POP	HL
 2958+1248 CB 5E        		BIT	3,(HL)
 2959+124A CB 9E        		res	3,(HL)
 2960+124C 20 20        		JR	NZ,l126e	; (32)
 2961+124E
 2962+124E CD 0F 0F     l124e:		CALL	l0f0f
 2963+1251 F1           		POP	AF
 2964+1252
 2965+1252 CD 77 05     l1252:		CALL	l0577
 2966+1255 28 31        		JR	Z,l1288		; (49)
 2967+1257 F5           		PUSH	AF
 2968+1258 06 00        		LD	B,$00
 2969+125A 0C           		INC	C
 2970+125B 79           		LD	A,C
 2971+125C FE 15        		CP	$15
 2972+125E 38 0E        		JR	C,l126e		; (14)
 2973+1260 2B           		DEC	HL
 2974+1261 7E           		LD	A,(HL)
 2975+1262 23           		INC	HL
 2976+1263 FE 00        		CP	$00
 2977+1265 28 07        		JR	Z,l126e		; (7)
 2978+1267 E5           		PUSH	HL
 2979+1268 21 0D EC     		LD	HL,$EC0D
 2980+126B CB C6        		SET	0,(HL)
 2981+126D E1           		POP	HL
 2982+126E
 2983+126E CB 4E        l126e:		BIT	1,(HL)
 2984+1270 CB CE        		SET	1,(HL)
 2985+1272 CB 9E        		res	3,(HL)
 2986+1274 CD 91 12     		CALL	l1291
 2987+1277 20 D5        		JR	NZ,l124e	; (-43)
 2988+1279 C5           		PUSH	BC
 2989+127A D5           		PUSH	DE
 2990+127B CD E0 16     		CALL	l16e0		; pad line at DE with nulls to length 32
 2991+127E 36 08        		LD	(HL),$08
 2992+1280 D1           		POP	DE
 2993+1281 C1           		POP	BC
 2994+1282 CD EE 16     		CALL	l16ee
 2995+1285 F1           		POP	AF
 2996+1286 18 CA        		JR	l1252		; (-54)
 2997+1288
 2998+1288 79           l1288:		LD	A,C
 2999+1289 32 F5 F6     		LD	($F6F5		),A
 3000+128C CB DE        		SET	3,(HL)
 3001+128E D1           		POP	DE
 3002+128F C1           		POP	BC
 3003+1290 C9           		RET
 3004+1291
 3005+1291 21 F8 F6     l1291:		LD	HL,$F6F8
 3006+1294 C3 85 11     		JP	l1185
 3007+1297
 3008+1297 C5           l1297:		PUSH	BC
 3009+1298 D5           		PUSH	DE
 3010+1299 21 0D EC     		LD	HL,$EC0D
 3011+129C CB 86        		res	0,(HL)
 3012+129E 3A F5 F6     		LD	A,($F6F5		)
 3013+12A1 4F           		LD	C,A
 3014+12A2 B7           		OR	A
 3015+12A3 3E 00        		LD	A,$00
 3016+12A5 28 42        		JR	Z,l12e9		; (66)
 3017+12A7
 3018+12A7 CD 91 12     l12a7:		CALL	l1291
 3019+12AA F5           		PUSH	AF
 3020+12AB 06 00        		LD	B,$00
 3021+12AD CD 0F 0F     		CALL	l0f0f
 3022+12B0 30 0E        		JR	NC,l12c0	; (14)
 3023+12B2 F1           		POP	AF
 3024+12B3 CD 8C 05     		CALL	l058c
 3025+12B6 F5           		PUSH	AF
 3026+12B7 C5           		PUSH	BC
 3027+12B8 06 00        		LD	B,$00
 3028+12BA CD 0F 0F     		CALL	l0f0f
 3029+12BD C1           		POP	BC
 3030+12BE 38 24        		JR	C,l12e4		; (36)
 3031+12C0
 3032+12C0 23           l12c0:		INC	HL
 3033+12C1 7E           		LD	A,(HL)
 3034+12C2 F5           		PUSH	AF
 3035+12C3 C5           		PUSH	BC
 3036+12C4 79           		LD	A,C
 3037+12C5 FE 01        		CP	$01
 3038+12C7 20 09        		JR	NZ,l12d2	; (9)
 3039+12C9 3A 15 EC     		LD	A,($EC15		)
 3040+12CC 4F           		LD	C,A
 3041+12CD CD 82 11     		CALL	l1182
 3042+12D0 18 04        		JR	l12d6		; (4)
 3043+12D2
 3044+12D2 0D           l12d2:		DEC	C
 3045+12D3 CD 91 12     		CALL	l1291
 3046+12D6
 3047+12D6 C1           l12d6:		POP	BC
 3048+12D7 F1           		POP	AF
 3049+12D8 21 20 00     		LD	HL,$0020
 3050+12DB 19           		ADD	HL,DE
 3051+12DC CB 8E        		res	1,(HL)
 3052+12DE B6           		OR	(HL)
 3053+12DF 77           		LD	(HL),A
 3054+12E0 21 F5 F6     		LD	HL,$F6F5
 3055+12E3 35           		DEC	(HL)
 3056+12E4
 3057+12E4 F1           l12e4:		POP	AF
 3058+12E5 0D           		DEC	C
 3059+12E6 20 BF        		JR	NZ,l12a7	; (-65)
 3060+12E8 37           		SCF
 3061+12E9
 3062+12E9 D1           l12e9:		POP	DE
 3063+12EA C1           		POP	BC
 3064+12EB C9           		RET
 3065+12EC
 3066+12EC              ; ???
 3067+12EC
 3068+12EC 03           l12ec:		DB	$03
 3069+12ED 00 DE F9     		DB	$00,$DE,$F9
 3070+12F0
 3071+12F0              ; Subroutine to ???
 3072+12F0
 3073+12F0 21 EC 12     l12f0:		LD	HL,l12ec
 3074+12F3 11 DB F9     		LD	DE,$F9DB
 3075+12F6 C3 52 21     		JP	l2152
 3076+12F9
 3077+12F9 C5           l12f9:		PUSH	BC
 3078+12FA D5           		PUSH	DE
 3079+12FB 21 DB F9     		LD	HL,$F9DB
 3080+12FE E5           		PUSH	HL
 3081+12FF 7E           		LD	A,(HL)
 3082+1300 B7           		OR	A
 3083+1301 20 1E        		JR	NZ,l1321	; (30)
 3084+1303 E5           		PUSH	HL
 3085+1304 CD 2D 14     		CALL	l142d
 3086+1307 2A 9A FC     		LD	HL,($FC9A)
 3087+130A CD 18 14     		CALL	l1418
 3088+130D 30 03        		JR	NC,l1312	; (3)
 3089+130F 22 9A FC     		LD	($FC9A),HL
 3090+1312
 3091+1312 44           l1312:		LD	B,H
 3092+1313 4D           		LD	C,L
 3093+1314 E1           		POP	HL
 3094+1315 23           		INC	HL
 3095+1316 23           		INC	HL
 3096+1317 23           		INC	HL
 3097+1318 30 11        		JR	NC,l132b	; (17)
 3098+131A CD A4 13     		CALL	l13a4
 3099+131D 3D           		DEC	A
 3100+131E EB           		EX	DE,HL
 3101+131F 18 0A        		JR	l132b		; (10)
 3102+1321
 3103+1321 2A DC F9     l1321:		LD	HL,($F9DC)
 3104+1324 01 23 00     		LD	BC,$0023
 3105+1327 ED 42        		SBC	HL,BC
 3106+1329 37           		SCF
 3107+132A 3D           		DEC	A
 3108+132B
 3109+132B EB           l132b:		EX	DE,HL
 3110+132C E1           		POP	HL
 3111+132D 30 01        		JR	NC,l1330	; (1)
 3112+132F 77           		LD	(HL),A
 3113+1330
 3114+1330 23           l1330:		INC	HL
 3115+1331 73           		LD	(HL),E
 3116+1332 23           		INC	HL
 3117+1333 72           		LD	(HL),D
 3118+1334 EB           		EX	DE,HL
 3119+1335 D1           		POP	DE
 3120+1336 C1           		POP	BC
 3121+1337 C9           		RET
 3122+1338
 3123+1338 C5           l1338:		PUSH	BC
 3124+1339 D5           		PUSH	DE
 3125+133A 21 20 00     		LD	HL,$0020
 3126+133D 19           		ADD	HL,DE
 3127+133E 7E           		LD	A,(HL)
 3128+133F 2F           		CPL
 3129+1340 E6 11        		AND	$11
 3130+1342 20 0C        		JR	NZ,l1350	; (12)
 3131+1344 D5           		PUSH	DE
 3132+1345 E5           		PUSH	HL
 3133+1346 23           		INC	HL
 3134+1347 56           		LD	D,(HL)
 3135+1348 23           		INC	HL
 3136+1349 5E           		LD	E,(HL)
 3137+134A ED 53 9A FC  		LD	($FC9A),DE
 3138+134E E1           		POP	HL
 3139+134F D1           		POP	DE
 3140+1350
 3141+1350 CB 5E        l1350:		BIT	3,(HL)
 3142+1352 21 DB F9     		LD	HL,$F9DB
 3143+1355 E5           		PUSH	HL
 3144+1356 28 16        		JR	Z,l136e		; (22)
 3145+1358 E5           		PUSH	HL
 3146+1359 CD 2D 14     		CALL	l142d
 3147+135C 2A 9A FC     		LD	HL,($FC9A)
 3148+135F CD 20 14     		CALL	l1420
 3149+1362 22 9A FC     		LD	($FC9A),HL
 3150+1365 E1           		POP	HL
 3151+1366 23           		INC	HL
 3152+1367 23           		INC	HL
 3153+1368 23           		INC	HL
 3154+1369 3E 00        		LD	A,$00
 3155+136B 37           		SCF
 3156+136C 18 BD        		JR	l132b		; (-67)
 3157+136E
 3158+136E 7E           l136e:		LD	A,(HL)
 3159+136F FE 14        		CP	$14
 3160+1371 28 0E        		JR	Z,l1381		; (14)
 3161+1373 3C           		INC	A
 3162+1374 2A DC F9     		LD	HL,($F9DC)
 3163+1377 01 23 00     		LD	BC,$0023
 3164+137A EB           		EX	DE,HL
 3165+137B ED B0        		LDIR
 3166+137D EB           		EX	DE,HL
 3167+137E 37           		SCF
 3168+137F 18 AA        		JR	l132b		; (-86)
 3169+1381
 3170+1381 E1           l1381:		POP	HL
 3171+1382 D1           		POP	DE
 3172+1383 C1           		POP	BC
 3173+1384 C9           		RET
 3174+1385
 3175+1385 21 DE F9     l1385:		LD	HL,$F9DE
 3176+1388 C3 85 11     		JP	l1185
 3177+138B
 3178+138B              ; Table of routine addresses for printing chars in EDITOR
 3179+138B
 3180+138B 08           l138b:		DB	$08
 3181+138C 0D           		DB	$0D
 3182+138D C6 16        		DW	l16c6		; ???
 3183+138F 01           		DB	$01
 3184+1390 D4 16        		DW	l16d4		; ???
 3185+1392 12           		DB	$12
 3186+1393 28 14        		DW	l1428		; for colour codes, skip embedded code
 3187+1395 13           		DB	$13
 3188+1396 28 14        		DW	l1428
 3189+1398 14           		DB	$14
 3190+1399 28 14        		DW	l1428
 3191+139B 15           		DB	$15
 3192+139C 28 14        		DW	l1428
 3193+139E 10           		DB	$10
 3194+139F 28 14        		DW	l1428
 3195+13A1 11           		DB	$11
 3196+13A2 28 14        		DW	l1428
 3197+13A4
 3198+13A4              ; Subroutine to ???
 3199+13A4
 3200+13A4 54           l13a4:		LD	D,H
 3201+13A5 5D           		LD	E,L
 3202+13A6 13           		INC	DE
 3203+13A7 13           		INC	DE
 3204+13A8 13           		INC	DE
 3205+13A9 D5           l13a9:		PUSH	DE
 3206+13AA 21 20 00     		LD	HL,$0020
 3207+13AD 19           		ADD	HL,DE
 3208+13AE 36 01        		LD	(HL),$01	; store ???
 3209+13B0 23           		INC	HL
 3210+13B1 70           		LD	(HL),B
 3211+13B2 23           l13b2:		INC	HL
 3212+13B3 71           		LD	(HL),C		; store line number
 3213+13B4 0E 01        		LD	C,$01		; coloumn 1 ???
 3214+13B6 06 00        		LD	B,$00		; character position on screen line
 3215+13B8 C5           l13b8:		PUSH	BC
 3216+13B9 D5           		PUSH	DE
 3217+13BA 3A 0E EC     		LD	A,(	$EC0E		)
 3218+13BD FE 04        		CP	$04
 3219+13BF C4 11 16     		CALL	NZ,l1611	; unless in calculator, get next line char
 3220+13C2 D1           		POP	DE
 3221+13C3 C1           		POP	BC
 3222+13C4 38 0F        		JR	C,l13d5		; move on if found character
 3223+13C6 79           		LD	A,C
 3224+13C7 FE 01        		CP	$01
 3225+13C9 3E 0D        		LD	A,$0D
 3226+13CB 20 08        		JR	NZ,l13d5	; do CR unless no chars output
 3227+13CD 78           		LD	A,B
 3228+13CE B7           		OR	A
 3229+13CF 3E 01        		LD	A,$01
 3230+13D1 28 02        		JR	Z,l13d5		; ???
 3231+13D3 3E 0D        		LD	A,$0D		; CR
 3232+13D5 21 8B 13     l13d5:		LD	HL,l138b
 3233+13D8 CD 66 21     		CALL	l2166		; perform actions for special chars
 3234+13DB 38 1D        		JR	C,l13fa		; if successful action, move on
 3235+13DD 28 D9        		JR	Z,l13b8		; loop back if need new char
 3236+13DF F5           		PUSH	AF
 3237+13E0 3E 1F        		LD	A,$1F
 3238+13E2 B8           		CP	B
 3239+13E3 30 0F        		JR	NC,l13f4	; move on unless need to start new line
 3240+13E5 3E 12        		LD	A,$12
 3241+13E7 CD FF 13     		CALL	l13ff		; ???
 3242+13EA 38 05        		JR	C,l13f1		; ???
 3243+13EC F1           		POP	AF
 3244+13ED 3E 0D        		LD	A,$0D
 3245+13EF 18 E4        		JR	l13d5
 3246+13F1 CD EE 16     l13f1:		CALL	l16ee		; ???
 3247+13F4 F1           l13f4:		POP	AF
 3248+13F5 CD BF 16     		CALL	l16bf		; ???
 3249+13F8 18 BE        		JR	l13b8
 3250+13FA E1           l13fa:		POP	HL
 3251+13FB 79           		LD	A,C		; ???
 3252+13FC C8           		RET	Z
 3253+13FD 37           		SCF
 3254+13FE C9           		RET
 3255+13FF
 3256+13FF              ; Subroutine to ???
 3257+13FF
 3258+13FF F5           l13ff:		PUSH	AF
 3259+1400 CD E0 16     		CALL	l16e0		; pad line at DE to length 32 with nulls
 3260+1403 F1           		POP	AF
 3261+1404 AE           		XOR	(HL)		; ??
 3262+1405 77           		LD	(HL),A
 3263+1406 79           		LD	A,C
 3264+1407 FE 14        		CP	$14
 3265+1409 D0           		RET	NC
 3266+140A 0C           		INC	C
 3267+140B 21 23 00     		LD	HL,$0023
 3268+140E 19           		ADD	HL,DE
 3269+140F EB           		EX	DE,HL
 3270+1410 21 20 00     		LD	HL,$0020
 3271+1413 19           		ADD	HL,DE
 3272+1414 36 00        		LD	(HL),$00
 3273+1416 37           		SCF
 3274+1417 C9           		RET
 3275+1418
 3276+1418              ; Subroutine to get number (HL) of line before HL (or 0 if none)
 3277+1418
 3278+1418 CD B0 15     l1418:		CALL	l15b0		; find line number before HL
 3279+141B D8           		RET	C		; exit if found
 3280+141C 21 00 00     		LD	HL,$0000	; else use 0
 3281+141F C9           		RET
 3282+1420
 3283+1420              ; Subroutine to get number (HL) of line after HL (or 0 if none)
 3284+1420
 3285+1420 CD 2A 15     l1420:		CALL	l152a		; get line number after HL
 3286+1423 D8           		RET	C		; exit if found
 3287+1424 21 00 00     		LD	HL,$0000	; else use 0
 3288+1427 C9           		RET
 3289+1428
 3290+1428              ; Subroutine to skip an embedded colour code in a line
 3291+1428
 3292+1428 CD 11 16     l1428:		CALL	l1611		; get next char (skip colour code)
 3293+142B 3F           		CCF
 3294+142C D0           		RET	NC		; exit if success, else set no data left
 3295+142D
 3296+142D              ; Subroutine to setup token scanning/expanding routines
 3297+142D
 3298+142D 21 00 00     l142d:		LD	HL,$0000
 3299+1430 22 9F FC     		LD	($FC9F),HL	; set "no line data"
 3300+1433 22 A1 FC     		LD	($FCA1),HL	; set "no expanded token"
 3301+1436 21 42 14     		LD	HL,l1442
 3302+1439 11 AE FC     		LD	DE,$FCAE
 3303+143C 01 E8 00     		LD	BC,$00E8
 3304+143F ED B0        		LDIR			; copy token routines into RAM
 3305+1441 C9           		RET
 3306+1442
 3307+1442              ; Routine executed in RAM at $FCAE
 3308+1442              ; On entry, A=zero-based token number (code-$A5), and on exit $FCA1
 3309+1442              ; contains address of expanded token
 3310+1442
 3311+1442 F3           l1442:		DI
 3312+1443 F5           		PUSH	AF
 3313+1444 01 FD 7F     		LD	BC,PBANKM
 3314+1447 3E 17        		LD	A,$17
 3315+1449 ED 79        		OUT	(C),A		; page in ROM 1 & RAM 7
 3316+144B 01 FD 1F     		LD	BC,PBANK678
 3317+144E 3A 67 5B     		LD	A,(	$5B67)
 3318+1451 CB D7        		SET	2,A
 3319+1453 ED 79        		OUT	(C),A		; page in ROM 3
 3320+1455 F1           		POP	AF
 3321+1456 FE 50        		CP	$50
 3322+1458 30 31        		JR	NC,l148b	; these parts start off search at every
 3323+145A FE 40        		CP	$40		; 16th token for speed
 3324+145C 30 26        		JR	NC,l1484
 3325+145E FE 30        		CP	$30
 3326+1460 30 1B        		JR	NC,l147d
 3327+1462 FE 20        		CP	$20
 3328+1464 30 10        		JR	NC,l1476
 3329+1466 FE 10        		CP	$10
 3330+1468 30 05        		JR	NC,l146f
 3331+146A 21 96 00     		LD	HL,$0096	; RND in token table
 3332+146D 18 21        		JR	l1490
 3333+146F D6 10        l146f:		SUB	$10
 3334+1471 21 CF 00     		LD	HL,$00CF	; ASN in token table
 3335+1474 18 1A        		JR	l1490
 3336+1476 D6 20        l1476:		SUB	$20
 3337+1478 21 00 01     		LD	HL,$0100	; OR in token table
 3338+147B 18 13        		JR	l1490
 3339+147D D6 30        l147d:		SUB	$30
 3340+147F 21 3E 01     		LD	HL,$013E	; MERGE in token table
 3341+1482 18 0C        		JR	l1490
 3342+1484 D6 40        l1484:		SUB	$40
 3343+1486 21 8B 01     		LD	HL,$018B	; RESTORE in token table
 3344+1489 18 05        		JR	l1490
 3345+148B D6 50        l148b:		SUB	$50
 3346+148D 21 D4 01     		LD	HL,$01D4	; PRINT in token table
 3347+1490 47           l1490:		LD	B,A		; B=offset of token from current
 3348+1491 B7           		OR	A
 3349+1492 28 09        l1492:		JR	Z,l149d
 3350+1494 7E           l1494:		LD	A,(HL)		; get next character
 3351+1495 23           		INC	HL
 3352+1496 E6 80        		AND	$80
 3353+1498 28 FA        		JR	Z,l1494		; loop back until end of token found
 3354+149A 05           		DEC	B		; decrement token offset
 3355+149B 18 F5        		JR	l1492		; loop back
 3356+149D 11 A3 FC     l149d:		LD	DE,$FCA3
 3357+14A0 ED 53 A1 FC  		LD	($FCA1),DE	; set expanded token address
 3358+14A4 3A 9E FC     		LD	A,($FC9E)
 3359+14A7 B7           		OR	A		; test "leading space" flag
 3360+14A8 3E 00        		LD	A,$00
 3361+14AA 32 9E FC     		LD	($FC9E),A	; and set to zero
 3362+14AD 20 04        		JR	NZ,l14b3
 3363+14AF 3E 20        		LD	A," "
 3364+14B1 12           		LD	(DE),A		; insert space if necessary
 3365+14B2 13           		INC	DE
 3366+14B3 7E           l14b3:		LD	A,(HL)
 3367+14B4 47           		LD	B,A
 3368+14B5 23           		INC	HL
 3369+14B6 12           		LD	(DE),A		; copy token byte
 3370+14B7 13           		INC	DE
 3371+14B8 E6 80        		AND	$80
 3372+14BA 28 F7        		JR	Z,l14b3		; back until end of token
 3373+14BC 78           		LD	A,B
 3374+14BD E6 7F        		AND	$7F
 3375+14BF 1B           		DEC	DE
 3376+14C0 12           		LD	(DE),A		; mask off high bit in last char
 3377+14C1 13           		INC	DE
 3378+14C2 3E A0        		LD	A," "+$80	; and add terminating space
 3379+14C4 12           		LD	(DE),A
 3380+14C5 01 FD 7F     		LD	BC,PBANKM
 3381+14C8 3A 5C 5B     		LD	A,(	$5B5C)
 3382+14CB ED 79        		OUT	(C),A		; restore original ROM/RAM configuration
 3383+14CD 01 FD 1F     		LD	BC,PBANK678
 3384+14D0 3A 67 5B     		LD	A,(	$5B67)
 3385+14D3 ED 79        		OUT	(C),A
 3386+14D5 FB           		EI
 3387+14D6 C9           		RET
 3388+14D7
 3389+14D7              ; Routine executed in RAM at $FD43
 3390+14D7              ; On entry, bit-7 terminated word to check for is at $FDA0
 3391+14D7              ; On exit, if carry set, A=token code, else A=0
 3392+14D7
 3393+14D7 F3           l14d7:		DI
 3394+14D8 F5           		PUSH	AF
 3395+14D9 01 FD 7F     		LD	BC,PBANKM
 3396+14DC 3E 17        		LD	A,$17
 3397+14DE ED 79        		OUT	(C),A		; page in ROM 1 & RAM 7
 3398+14E0 01 FD 1F     		LD	BC,PBANK678
 3399+14E3 3A 67 5B     		LD	A,(	$5B67)
 3400+14E6 CB D7        		SET	2,A
 3401+14E8 ED 79        		OUT	(C),A		; page in ROM 3
 3402+14EA F1           		POP	AF
 3403+14EB 21 96 00     		LD	HL,$0096	; token table start
 3404+14EE 06 A5        		LD	B,$A5		; first token number
 3405+14F0 11 A0 FD     l14f0:		LD	DE,$FDA0	; start of word to test
 3406+14F3 1A           l14f3:		LD	A,(DE)		; get next letter of word to test
 3407+14F4 E6 7F        		AND	$7F
 3408+14F6 FE 61        		CP	$61
 3409+14F8 1A           		LD	A,(DE)
 3410+14F9 38 02        		JR	C,l14fd
 3411+14FB E6 DF        		AND	$DF		; mask lowercase letters to uppercase
 3412+14FD BE           l14fd:		CP	(HL)		; test against current token letter
 3413+14FE 20 09        		JR	NZ,l1509	; move on if no match
 3414+1500 23           		INC	HL
 3415+1501 13           		INC	DE
 3416+1502 E6 80        		AND	$80
 3417+1504 28 ED        		JR	Z,l14f3		; loop back unless last token character
 3418+1506 37           		SCF			; success
 3419+1507 18 0C        		JR	l1515
 3420+1509 04           l1509:		INC	B		; increment token number
 3421+150A 28 08        		JR	Z,l1514		; exit if all checked
 3422+150C 7E           l150c:		LD	A,(HL)
 3423+150D E6 80        		AND	$80
 3424+150F 23           		INC	HL
 3425+1510 28 FA        		JR	Z,l150c		; loop back until current token finished
 3426+1512 18 DC        		JR	l14f0		; back to check more tokens
 3427+1514 B7           l1514:		OR	A		; failure
 3428+1515 78           l1515:		LD	A,B
 3429+1516 57           		LD	D,A
 3430+1517 01 FD 7F     		LD	BC,PBANKM
 3431+151A 3A 5C 5B     		LD	A,(	$5B5C)
 3432+151D ED 79        		OUT	(C),A		; page back original ROM/RAM configuration
 3433+151F 01 FD 1F     		LD	BC,PBANK678
 3434+1522 3A 67 5B     		LD	A,(	$5B67)
 3435+1525 ED 79        		OUT	(C),A
 3436+1527 7A           		LD	A,D		; A=token number
 3437+1528 FB           		EI
 3438+1529 C9           		RET
 3439+152A
 3440+152A              ; Subroutine to form ASCII line number for next line after HL. Exits
 3441+152A              ; with DE=address of line data & HL=line number
 3442+152A
 3443+152A CD E4 15     l152a:		CALL	l15e4		; set "no line" addresses
 3444+152D B7           		OR	A
 3445+152E 32 9E FC     		LD	($FC9E),A	; set "leading spaces"
 3446+1531 CD A7 05     		CALL	l05a7		; page in normal memory
 3447+1534 CD F0 15     		CALL	l15f0		; get address of line HL
 3448+1537 30 52        		JR	NC,l158b	; exit if not found
 3449+1539 20 0C        		JR	NZ,l1547
 3450+153B 78           		LD	A,B
 3451+153C B1           		OR	C
 3452+153D 28 08        		JR	Z,l1547		; move on if first line was required
 3453+153F CD C9 15     		CALL	l15c9		; get address of next line
 3454+1542 CD D3 15     		CALL	l15d3
 3455+1545 30 44        		JR	NC,l158b	; exit if end of program
 3456+1547
 3457+1547              ; Subroutine to form ASCII line number for line at HL.
 3458+1547              ; Exits with HL=line number, DE=address of line data
 3459+1547
 3460+1547 56           l1547:		LD	D,(HL)
 3461+1548 23           		INC	HL
 3462+1549 5E           		LD	E,(HL)		; get line number
 3463+154A CD CC 05     		CALL	l05cc		; page in DOS workspace
 3464+154D D5           		PUSH	DE
 3465+154E E5           		PUSH	HL
 3466+154F DD E5        		PUSH	IX
 3467+1551 DD 21 A3 FC  		LD	IX,$FCA3
 3468+1555 DD 22 A1 FC  		LD	($FCA1),IX	; set ASCII line number address
 3469+1559 EB           		EX	DE,HL
 3470+155A 06 00        		LD	B,$00		; don't form leading zeros
 3471+155C 11 18 FC     		LD	DE,$FC18
 3472+155F CD 8F 15     		CALL	l158f		; form 1000s
 3473+1562 11 9C FF     		LD	DE,$FF9C
 3474+1565 CD 8F 15     		CALL	l158f		; form 100s
 3475+1568 11 F6 FF     		LD	DE,$FFF6
 3476+156B CD 8F 15     		CALL	l158f		; form 10s
 3477+156E 11 FF FF     		LD	DE,$FFFF
 3478+1571 CD 8F 15     		CALL	l158f		; form units
 3479+1574 DD 2B        		DEC	IX
 3480+1576 DD 7E 00     		LD	A,(IX+$00)
 3481+1579 F6 80        		OR	$80		; set bit 7 of last digit
 3482+157B DD 77 00     		LD	(IX+$00),A
 3483+157E DD E1        		POP	IX
 3484+1580 E1           		POP	HL
 3485+1581 D1           		POP	DE
 3486+1582 23           		INC	HL
 3487+1583 23           		INC	HL
 3488+1584 23           		INC	HL		; HL=address of line data
 3489+1585 22 9F FC     		LD	($FC9F),HL	; save it
 3490+1588 EB           		EX	DE,HL
 3491+1589 37           		SCF			; success
 3492+158A C9           		RET
 3493+158B CD CC 05     l158b:		CALL	l05cc		; page in DOS workspace
 3494+158E C9           		RET			; exit
 3495+158F
 3496+158F              ; Subroutine to form next digit of line number at IX
 3497+158F              ; Line number in HL, unit size in DE, and print zero flag in B
 3498+158F
 3499+158F AF           l158f:		XOR	A		; count 0
 3500+1590 19           l1590:		ADD	HL,DE		; reduce line number by unit size
 3501+1591 3C           		INC	A		; increment count
 3502+1592 38 FC        		JR	C,l1590		; loop until overflow
 3503+1594 ED 52        		SBC	HL,DE		; add back last try
 3504+1596 3D           		DEC	A
 3505+1597 C6 30        		ADD	A,"0"		; form ASCII digit
 3506+1599 DD 77 00     		LD	(IX+$00),A	; store it
 3507+159C FE 30        		CP	"0"
 3508+159E 20 0B        		JR	NZ,l15ab	; set flag if not zero
 3509+15A0 78           		LD	A,B
 3510+15A1 B7           		OR	A
 3511+15A2 20 09        		JR	NZ,l15ad	; if flag set, leave 0 digits
 3512+15A4 3E 00        		LD	A,$00
 3513+15A6 DD 77 00     		LD	(IX+$00),A	; else replace with $00
 3514+15A9 18 02        		JR	l15ad
 3515+15AB 06 01        l15ab:		LD	B,$01		; set "print 0 digits" flag
 3516+15AD DD 23        l15ad:		INC	IX		; increment pointer
 3517+15AF C9           		RET
 3518+15B0
 3519+15B0              ; Subroutine to get number (HL) and address (DE) of line before line HL
 3520+15B0              ; forming ASCII line number in page 7. Carry reset if no prior line.
 3521+15B0
 3522+15B0 CD E4 15     l15b0:		CALL	l15e4		; initialise "no line" addresses
 3523+15B3 B7           		OR	A
 3524+15B4 32 9E FC     		LD	($FC9E),A	; ???
 3525+15B7 CD A7 05     		CALL	l05a7		; page in normal memory
 3526+15BA CD F0 15     		CALL	l15f0		; find address of line HL
 3527+15BD 30 CC        		JR	NC,l158b	; if not found, exit with error
 3528+15BF EB           		EX	DE,HL
 3529+15C0 7D           		LD	A,L
 3530+15C1 B4           		OR	H		; was there a previous line?
 3531+15C2 37           		SCF
 3532+15C3 C2 47 15     		JP	NZ,l1547	; form line number & address of data if so
 3533+15C6 3F           		CCF
 3534+15C7 18 C2        		JR	l158b		; else exit with error
 3535+15C9
 3536+15C9              ; Subroutine to get address of next program line in HL (current is
 3537+15C9              ; saved in DE)
 3538+15C9
 3539+15C9 E5           l15c9:		PUSH	HL
 3540+15CA 23           		INC	HL
 3541+15CB 23           		INC	HL
 3542+15CC 5E           		LD	E,(HL)
 3543+15CD 23           		INC	HL
 3544+15CE 56           		LD	D,(HL)		; DE=line length
 3545+15CF 23           		INC	HL
 3546+15D0 19           		ADD	HL,DE		; HL=next line
 3547+15D1 D1           		POP	DE		; DE=previous line
 3548+15D2 C9           		RET
 3549+15D3
 3550+15D3              ; Subroutine to check for end of program (carry reset if so)
 3551+15D3
 3552+15D3 7E           l15d3:		LD	A,(HL)		; check next program byte
 3553+15D4 E6 C0        		AND	$C0
 3554+15D6 37           		SCF
 3555+15D7 C8           		RET	Z		; exit with carry set if not end-of-program
 3556+15D8 3F           		CCF			; clear carry if end-of-program
 3557+15D9 C9           		RET
 3558+15DA
 3559+15DA              ; Subroutine to check if line number at HL is equal to BC (carry set if so)
 3560+15DA
 3561+15DA 78           l15da:		LD	A,B
 3562+15DB BE           		CP	(HL)
 3563+15DC C0           		RET	NZ
 3564+15DD 79           		LD	A,C
 3565+15DE 23           		INC	HL
 3566+15DF BE           		CP	(HL)
 3567+15E0 2B           		DEC	HL
 3568+15E1 C0           		RET	NZ
 3569+15E2 37           		SCF
 3570+15E3 C9           		RET
 3571+15E4
 3572+15E4              ; Subroutine to set "no line" addresses
 3573+15E4
 3574+15E4 E5           l15e4:		PUSH	HL
 3575+15E5 21 00 00     		LD	HL,$0000
 3576+15E8 22 A1 FC     		LD	($FCA1),HL	; set "no ASCII line number"
 3577+15EB 22 9F FC     		LD	($FC9F),HL	; set "no line data"
 3578+15EE E1           		POP	HL
 3579+15EF C9           		RET
 3580+15F0
 3581+15F0              ; Subroutine to search for address of line HL, returning in HL with
 3582+15F0              ; carry set. If HL=0 first line address is returned. Carry reset if
 3583+15F0              ; line not found. DE=address of previous line (or 0)
 3584+15F0
 3585+15F0 E5           l15f0:		PUSH	HL
 3586+15F1 C1           		POP	BC		; BC=line to find
 3587+15F2 11 00 00     		LD	DE,$0000	; no previous line
 3588+15F5 2A 53 5C     		LD	HL,(	$5C53)	; get start of program
 3589+15F8 CD D3 15     		CALL	l15d3		; check if end
 3590+15FB C3 73 38     		JP	l3873
 3591+15FE 2A 51 5C     l15fe:		LD	HL,(	$5C51)
 3592+1601 C3 7F 38     l1601:		JP	l387f
 3593+1604
 3594+1604 CD C9 15     l1604:		CALL	l15c9		; get to next line
 3595+1607 CD D3 15     		CALL	l15d3
 3596+160A D0           		RET	NC		; exit if program end
 3597+160B CD DA 15     		CALL	l15da
 3598+160E 30 F4        		JR	NC,l1604	; loop back if not line BC yet
 3599+1610 C9           		RET
 3600+1611
 3601+1611              ; Subroutine to get next character (A) from line. Carry reset if none left
 3602+1611
 3603+1611 2A A1 FC     l1611:		LD	HL,($FCA1)	; get address of ASCII text
 3604+1614 7D           		LD	A,L
 3605+1615 B4           		OR	H
 3606+1616 28 1E        		JR	Z,l1636		; move on if none
 3607+1618 7E           		LD	A,(HL)
 3608+1619 23           		INC	HL
 3609+161A FE A0        		CP	$A0		; test for terminating space
 3610+161C 47           		LD	B,A
 3611+161D 3E 00        		LD	A,$00		; set "print leading space" if none
 3612+161F 20 02        		JR	NZ,l1623
 3613+1621 3E FF        		LD	A,$FF		; else suppress
 3614+1623 32 9E FC     l1623:		LD	($FC9E),A	; set flag
 3615+1626 78           		LD	A,B
 3616+1627 CB 7F        		BIT	7,A
 3617+1629 28 03        		JR	Z,l162e
 3618+162B 21 00 00     		LD	HL,$0000	; if last character, set "no text left"
 3619+162E 22 A1 FC     l162e:		LD	($FCA1),HL	; update address
 3620+1631 E6 7F        		AND	$7F		; mask high bit
 3621+1633 C3 89 16     		JP	l1689		; exit with success
 3622+1636 2A 9F FC     l1636:		LD	HL,($FC9F)	; get address of line data
 3623+1639 7D           		LD	A,L
 3624+163A B4           		OR	H
 3625+163B CA 8B 16     		JP	Z,l168b		; exit with fail if none
 3626+163E CD A7 05     		CALL	l05a7		; page in normal memory
 3627+1641 7E           l1641:		LD	A,(HL)
 3628+1642 FE 0E        		CP	$0E		; check for embedded number
 3629+1644 20 08        		JR	NZ,l164e
 3630+1646 23           		INC	HL		; if found, skip & loop back
 3631+1647 23           		INC	HL
 3632+1648 23           		INC	HL
 3633+1649 23           		INC	HL
 3634+164A 23           		INC	HL
 3635+164B 23           		INC	HL
 3636+164C 18 F3        		JR	l1641
 3637+164E CD CC 05     l164e:		CALL	l05cc		; page in DOS workspace
 3638+1651 23           		INC	HL
 3639+1652 22 9F FC     		LD	($FC9F),HL	; update address
 3640+1655 FE A5        		CP	$A5
 3641+1657 38 08        		JR	C,l1661		; move on unless 48K BASIC token
 3642+1659 D6 A5        		SUB	$A5		; get token number (0+)
 3643+165B CD AE FC     		CALL	$FCAE		; expand to ASCII text
 3644+165E C3 11 16     		JP	l1611		; go to get first char
 3645+1661 FE A3        l1661:		CP	$A3
 3646+1663 38 10        		JR	C,l1675		; move on unless +3 BASIC token
 3647+1665 20 05        		JR	NZ,l166c
 3648+1667 21 8E 16     		LD	HL,l168e	; SPECTRUM token
 3649+166A 18 03        		JR	l166f
 3650+166C 21 96 16     l166c:		LD	HL,l1696	; PLAY token
 3651+166F CD 09 FD     l166f:		CALL	$FD09		; expand to ASCII text
 3652+1672 C3 11 16     		JP	l1611		; go to get first char
 3653+1675 F5           l1675:		PUSH	AF
 3654+1676 3E 00        		LD	A,$00
 3655+1678 32 9E FC     		LD	($FC9E),A	; flag "print leading space"
 3656+167B F1           		POP	AF
 3657+167C FE 0D        		CP	$0D
 3658+167E 20 09        		JR	NZ,l1689	; exit with success unless end of line
 3659+1680 21 00 00     		LD	HL,$0000
 3660+1683 22 A1 FC     		LD	($FCA1),HL	; set no ASCII text
 3661+1686 22 9F FC     		LD	($FC9F),HL	; and no line data
 3662+1689 37           l1689:		SCF
 3663+168A C9           		RET
 3664+168B 37           l168b:		SCF
 3665+168C 3F           		CCF			; fail
 3666+168D C9           		RET
 3667+168E
 3668+168E 53 50 45 43  l168e:		DB	"SPECTRU", "M"+$80
 3668+1692 54 52 55 CD
 3669+1696 50 4C 41 D9  l1696:		DB	"PLA", "Y"+$80
 3670+169A 47 4F 54 CF  		DB	"GOT", "O"+$80
 3671+169E 47 4F 53 55  		DB	"GOSU", "B"+$80
 3671+16A2 C2
 3672+16A3 44 45 46 46  		DB	"DEFF", "N"+$80
 3672+16A7 CE
 3673+16A8 4F 50 45 4E  		DB	"OPEN", "#"+$80
 3673+16AC A3
 3674+16AD 43 4C 4F 53  		DB	"CLOSE", "#"+$80
 3674+16B1 45 A3
 3675+16B3
 3676+16B3 02           l16b3:		DB	$02
 3677+16B4 01           		DB	$01
 3678+16B5 05           		DB	$05
 3679+16B6
 3680+16B6 21 B3 16     l16b6:		LD	HL,l16b3
 3681+16B9 11 96 FD     		LD	DE,$FD96
 3682+16BC C3 52 21     		JP	l2152
 3683+16BF
 3684+16BF
 3685+16BF
 3686+16BF              ; Subroutine to ???
 3687+16BF
 3688+16BF 68           l16bf:		LD	L,B
 3689+16C0 26 00        		LD	H,$00
 3690+16C2 19           		ADD	HL,DE
 3691+16C3 77           		LD	(HL),A
 3692+16C4 04           		INC	B
 3693+16C5 C9           		RET
 3694+16C6 CD E0 16     l16c6:		CALL	l16e0		; pad line at DE to length 32 with nulls
 3695+16C9 7E           		LD	A,(HL)
 3696+16CA F6 18        		OR	$18
 3697+16CC 77           		LD	(HL),A
 3698+16CD 21 96 FD     		LD	HL,$FD96
 3699+16D0 CB C6        		SET	0,(HL)
 3700+16D2 37           		SCF
 3701+16D3 C9           		RET
 3702+16D4 CD E0 16     l16d4:		CALL	l16e0		; pad line at DE to length 32 with nulls
 3703+16D7 CB DE        		SET	3,(HL)
 3704+16D9 21 96 FD     		LD	HL,$FD96
 3705+16DC CB C6        		SET	0,(HL)
 3706+16DE 37           		SCF
 3707+16DF C9           		RET
 3708+16E0
 3709+16E0              ; Subroutine to pad line at DE (length B) with nulls to length B=32
 3710+16E0              ; On exit, HL=end of line+1
 3711+16E0
 3712+16E0 68           l16e0:		LD	L,B
 3713+16E1 26 00        		LD	H,0
 3714+16E3 19           		ADD	HL,DE		; get past last char on line
 3715+16E4 3E 20        		LD	A,$20
 3716+16E6 B8           l16e6:		CP	B
 3717+16E7 C8           		RET	Z		; exit if 32 chars already
 3718+16E8 36 00        		LD	(HL),0		; pad with zeros
 3719+16EA 23           		INC	HL
 3720+16EB 04           		INC	B
 3721+16EC 18 F8        		JR	l16e6
 3722+16EE
 3723+16EE
 3724+16EE 3A 97 FD     l16ee:		LD	A,($FD97)
 3725+16F1 06 00        		LD	B,$00
 3726+16F3
 3727+16F3 26 00        l16f3:		LD	H,$00
 3728+16F5 68           		LD	L,B
 3729+16F6 19           		ADD	HL,DE
 3730+16F7 36 00        		LD	(HL),$00
 3731+16F9 04           		INC	B
 3732+16FA 3D           		DEC	A
 3733+16FB 20 F6        		JR	NZ,l16f3	; (-10)
 3734+16FD C9           		RET
 3735+16FE
 3736+16FE C5           l16fe:		PUSH	BC
 3737+16FF D5           		PUSH	DE
 3738+1700 E5           		PUSH	HL
 3739+1701 E5           		PUSH	HL
 3740+1702 21 F5 EE     		LD	HL,$EEF5
 3741+1705 CB 56        		BIT	2,(HL)
 3742+1707 E1           		POP	HL
 3743+1708 20 04        		JR	NZ,l170e	; (4)
 3744+170A 41           		LD	B,C
 3745+170B CD 2B 1D     		CALL	l1d2b
 3746+170E
 3747+170E E1           l170e:		POP	HL
 3748+170F D1           		POP	DE
 3749+1710 C1           		POP	BC
 3750+1711 C9           		RET
 3751+1712
 3752+1712 C5           l1712:		PUSH	BC
 3753+1713 D5           		PUSH	DE
 3754+1714 E5           		PUSH	HL
 3755+1715 E5           		PUSH	HL
 3756+1716 21 F5 EE     		LD	HL,$EEF5
 3757+1719 CB 56        		BIT	2,(HL)
 3758+171B E1           		POP	HL
 3759+171C 20 04        		JR	NZ,l1722	; (4)
 3760+171E 59           		LD	E,C
 3761+171F CD CC 1C     		CALL	l1ccc
 3762+1722
 3763+1722 E1           l1722:		POP	HL
 3764+1723 D1           		POP	DE
 3765+1724 C1           		POP	BC
 3766+1725 C9           		RET
 3767+1726
 3768+1726 C5           l1726:		PUSH	BC
 3769+1727 D5           		PUSH	DE
 3770+1728 E5           		PUSH	HL
 3771+1729 E5           		PUSH	HL
 3772+172A 21 F5 EE     		LD	HL,$EEF5
 3773+172D CB 56        		BIT	2,(HL)
 3774+172F E1           		POP	HL
 3775+1730 20 04        		JR	NZ,l1736	; (4)
 3776+1732 59           		LD	E,C
 3777+1733 CD D3 1C     		CALL	l1cd3
 3778+1736
 3779+1736 E1           l1736:		POP	HL
 3780+1737 D1           		POP	DE
 3781+1738 C1           		POP	BC
 3782+1739 C9           		RET
 3783+173A
 3784+173A              ; Subroutine to place cursor at column B, line C (of editing area)
 3785+173A
 3786+173A F5           l173a:		PUSH	AF
 3787+173B C5           		PUSH	BC
 3788+173C D5           		PUSH	DE
 3789+173D E5           		PUSH	HL
 3790+173E 78           		LD	A,B
 3791+173F 41           		LD	B,C		; B=line of editing area
 3792+1740 4F           		LD	C,A		; C=column
 3793+1741 CD AA 1C     		CALL	l1caa
 3794+1744 E1           		POP	HL
 3795+1745 D1           		POP	DE
 3796+1746 C1           		POP	BC
 3797+1747 F1           		POP	AF
 3798+1748 C9           		RET
 3799+1749
 3800+1749              ; Subroutine to remove cursor from column B, line C (of editing area)
 3801+1749
 3802+1749 F5           l1749:		PUSH	AF
 3803+174A C5           		PUSH	BC
 3804+174B D5           		PUSH	DE
 3805+174C E5           		PUSH	HL
 3806+174D 78           		LD	A,B
 3807+174E 41           		LD	B,C
 3808+174F 4F           		LD	C,A
 3809+1750 CD BF 1C     		CALL	l1cbf
 3810+1753 E1           		POP	HL
 3811+1754 D1           		POP	DE
 3812+1755 C1           		POP	BC
 3813+1756 F1           		POP	AF
 3814+1757 C9           		RET
 3815+1758
 3816+1758 3E 00        l1758:		LD	A,$00
 3817+175A 32 41 5C     		LD	(	$5C41),A
 3818+175D 3E 02        		LD	A,$02
 3819+175F 32 0A 5C     		LD	(	$5C0A),A
 3820+1762 CD 5A 18     		CALL	l185a
 3821+1765 C9           		RET
 3822+1766
 3823+1766
 3824+1766 74           		LD	(HL),H
 3825+1767 DF           		RST	18H
 3826+1768 DE 55        		SBC	A,$55
 3827+176A 10 52        		DJNZ	l17bd+1		; (82)
 3828+176C C9           		RET
 3829+176D 9E           		SBC	A,(HL)
 3830+176E 9E           		SBC	A,(HL)
 3831+176F BD           		CP	L
 3832+1770 62           		LD	H,D
 3833+1771 C5           		PUSH	BC
 3834+1772 C0           		RET	NZ
 3835+1773 55           		LD	D,L
 3836+1774 C2 44 10     		DB	$C2,$44,$10
 3837+1777 17           		RLA
 3838+1778 FE 5F        		CP	$5F
 3839+177A 90           		SUB	B
 3840+177B FE D1        		CP	$D1
 3841+177D DD           		DB	$DD
 3842+177E D5           		PUSH	DE
 3843+177F 17           		RLA
 3844+1780 90           		SUB	B
 3845+1781 F7           		RST	30H
 3846+1782 DF           		RST	18H
 3847+1783 DF           		RST	18H
 3848+1784 D4 C7 D9     		CALL	NC,$D9C7
 3849+1787 DE C3        		SBC	A,$C3
 3850+1789 BD           		CP	L
 3851+178A F3           		DI
 3852+178B DC 59 D6     		CALL	C,$D659
 3853+178E 56           		LD	D,(HL)
 3854+178F 10 17        		DJNZ	l17a8		; (23)
 3855+1791 64           		LD	H,H
 3856+1792 47           		LD	B,A
 3857+1793 5F           		LD	E,A
 3858+1794 90           		SUB	B
 3859+1795 60           		LD	H,B
 3860+1796 DF           		RST	18H
 3861+1797 40           		LD	B,B
 3862+1798
 3863+1798 43           l1798:		LD	B,E
 3864+1799 97           		SUB	A
 3865+179A 10 FC        		DJNZ	l1798		; (-4)
 3866+179C 51           l179c:		LD	D,C
 3867+179D C7           		RST	$0
 3868+179E 43           		LD	B,E
 3869+179F 5F           		LD	E,A
 3870+17A0 DE BD        		SBC	A,$BD
 3871+17A2 66           		LD	H,(HL)
 3872+17A3 D9           		EXX
 3873+17A4
 3874+17A4 5B           l17a4:		LD	E,E
 3875+17A5 90           		SUB	B
 3876+17A6 17           		RLA
 3877+17A7 E2           		DB	$E2
 3878+17A8 D5           l17a8:		PUSH	DE
 3879+17A9 54           l17a9:		LD	D,H
 3880+17AA 10 F8        		DJNZ	l17a4		; (-8)
 3881+17AC 55           		LD	D,L
 3882+17AD 42           		LD	B,D
 3883+17AE 42           		LD	B,D
 3884+17AF 59           		LD	E,C
 3885+17B0 DE 57        		SBC	A,$57
 3886+17B2 17           		RLA
 3887+17B3 90           		SUB	B
 3888+17B4 7F           		LD	A,A
 3889+17B5 5C           		LD	E,H
 3890+17B6 5C           		LD	E,H
 3891+17B7 D9           		EXX
 3892+17B8 C6 55        		ADD	A,$55
 3893+17BA C2 90 51     		JP	NZ,$5190
 3894+17BD DE BD        l17bd:		SBC	A,$BD
 3895+17BF E4 D8 D5     		CALL	po,$D5D8
 3896+17C2 90           		SUB	B
 3897+17C3 74           		LD	(HL),H
 3898+17C4 5F           		LD	E,A
 3899+17C5 C2 5B 59     		JP	NZ,$595B
 3900+17C8 5E           		LD	E,(HL)
 3901+17C9 D7           		RST	10H
 3902+17CA 90           		SUB	B
 3903+17CB 7D           		LD	A,L
 3904+17CC 5F           		LD	E,A
 3905+17CD D2 BD 64     		JP	NC,$64BD
 3906+17D0 58           		LD	E,B
 3907+17D1 D1           		POP	DE
 3908+17D2
 3909+17D2 5E           l17d2:		LD	E,(HL)
 3910+17D3 DB C3        		IN	A,($C3)
 3911+17D5 10 C4        		DJNZ	l179c-1		; (-60)
 3912+17D7 5F           		LD	E,A
 3913+17D8 1E 1E        		LD	E,$1E
 3914+17DA BD           		CP	L
 3915+17DB 64           		LD	H,H
 3916+17DC D8           		RET	C
 3917+17DD D5           		PUSH	DE
 3918+17DE 10 F2        		DJNZ	l17d2		; (-14)
 3919+17E0 42           		LD	B,D
 3920+17E1 D5           		PUSH	DE
 3921+17E2 47           		LD	B,A
 3922+17E3 D5           		PUSH	DE
 3923+17E4 42           		LD	B,D
 3924+17E5 C9           		RET
 3925+17E6 90           		SUB	B
 3926+17E7 E4 D1 C0     		CALL	po,$C0D1
 3927+17EA 90           		SUB	B
 3928+17EB 18           		DB	$18
 3929+17EC 58           		DB	88
 3930+17ED D9           		EXX
 3931+17EE D3 19        		OUT	($19),A
 3932+17F0 BD           		CP	L
 3933+17F1 E2 5F DC     		JP	po,$DC5F
 3934+17F4
 3935+17F4 51           l17f4:		LD	D,C
 3936+17F5 DE 54        		SBC	A,$54
 3937+17F7 1C           		INC	E
 3938+17F8 90           		SUB	B
 3939+17F9 62           		LD	H,D
 3940+17FA D9           		EXX
 3941+17FB D3 58        		OUT	($58),A
 3942+17FD 51           		LD	D,C
 3943+17FE C2 54 90     		JP	NZ,$9054
 3944+1801 55           		LD	D,L
 3945+1802 44           		LD	B,H
 3946+1803 90           		SUB	B
 3947+1804 D1           		POP	DE
 3948+1805 5C           		LD	E,H
 3949+1806 BD           		CP	L
 3950+1807 51           		LD	D,C
 3951+1808 5E           		LD	E,(HL)
 3952+1809 54           		LD	D,H
 3953+180A 90           		SUB	B
 3954+180B F9           		LD	SP,HL
 3955+180C C6 DF        		ADD	A,$DF
 3956+180E 42           		LD	B,D
 3957+180F 10 98        		DJNZ	l17a9		; (-104)
 3958+1811 C7           		RST	$0
 3959+1812 D8           		RET	C
 3960+1813 49           		LD	C,C
 3961+1814 10 DE        		DJNZ	l17f4		; (-34)
 3962+1816 5F           		LD	E,A
 3963+1817
 3964+1817 C4 19 BD     l1817:		CALL	NZ,$BD19
 3965+181A 67           		LD	H,A
 3966+181B 42           		LD	B,D
 3967+181C D9           		EXX
 3968+181D 44           		LD	B,H
 3969+181E C4 D5 5E     		CALL	NZ,$5ED5
 3970+1821 90           		SUB	B
 3971+1822 DF           		RST	18H
 3972+1823 5E           		LD	E,(HL)
 3973+1824 90           		SUB	B
 3974+1825 60           		LD	H,B
 3975+1826 F3           		DI
 3976+1827 67           		LD	H,A
 3977+1828 90           		SUB	B
 3978+1829 88           		ADC	A,B
 3979+182A 05           		DEC	B
 3980+182B 81           		ADD	A,C
 3981+182C 02           		LD	(BC),A
 3982+182D 43           		LD	B,E
 3983+182E 1C           		INC	E
 3984+182F 10 45        		DJNZ	l1875+1		; (69)
 3985+1831 43           		LD	B,E
 3986+1832 D9           		EXX
 3987+1833 5E           		LD	E,(HL)
 3988+1834 BD           		CP	L
 3989+1835 FD           		DB	$FD
 3990+1836 08           		EX	AF,AF'
 3991+1837 00           		NOP
 3992+1838 90           		SUB	B
 3993+1839 51           		LD	D,C
 3994+183A
 3995+183A DE D4        l183a:		SBC	A,$D4
 3996+183C 10 FC        		DJNZ	l183a		; (-4)
 3997+183E 08           		EX	AF,AF'
 3998+183F 00           		NOP
 3999+1840 10 45        		DJNZ	l1887		; (69)
 4000+1842 5E           		LD	E,(HL)
 4001+1843 D4 55 C2     		CALL	NC,$C255
 4002+1846 10 F3        		DJNZ	l183a+1		; (-13)
 4003+1848 60           		LD	H,B
 4004+1849 9F           		SBC	A,A
 4005+184A FD           		DB	$FD
 4006+184B 9B           		SBC	A,E
 4007+184C BD           		CP	L
 4008+184D BD           		CP	L
 4009+184E C3 90 C4     		JP	$C490
 4010+1851 DF           		RST	18H
 4011+1852 1E 9E        		LD	E,$9E
 4012+1854 BD           		CP	L
 4013+1855 64           		LD	H,H
 4014+1856 D8           		RET	C
 4015+1857 55           		LD	D,L
 4016+1858 10 BD        		DJNZ	l1817		; (-67)
 4017+185A
 4018+185A 21 3B 5C     l185a:		LD	HL,	$5C3B
 4019+185D 7E           		LD	A,(HL)
 4020+185E F6 0C        		OR	$0C
 4021+1860 77           		LD	(HL),A
 4022+1861 21 0D EC     		LD	HL,$EC0D
 4023+1864 CB 66        		BIT	4,(HL)
 4024+1866 21 66 5B     		LD	HL,	$5B66
 4025+1869 20 03        		JR	NZ,l186e
 4026+186B CB 86        		res	0,(HL)
 4027+186D C9           		RET
 4028+186E CB C6        l186e:		SET	0,(HL)
 4029+1870 C9           		RET
 4030+1871
 4031+1871
 4032+1871              ; Subroutine to get a key - this may include keypad keys which
 4033+1871              ; send extended mode before a keycode to give a token
 4034+1871
 4035+1871 E5           l1871:		PUSH	HL		; save HL
 4036+1872 21 3B 5C     l1872:		LD	HL,	$5C3B
 4037+1875 CB 6E        l1875:		BIT	5,(HL)
 4038+1877 28 FC        		JR	Z,l1875		; loop until a key is available
 4039+1879 CB AE        		res	5,(HL)		; signal no key available
 4040+187B 3A 08 5C     		LD	A,(	$5C08)	; get key
 4041+187E 21 41 5C     		LD	HL,	$5C41
 4042+1881 CB 86        		res	0,(HL)		; set "L" mode (?)
 4043+1883 FE 20        		CP	$20
 4044+1885 30 0D        		JR	NC,l1894	; move on if not a control code
 4045+1887 FE 10        l1887:		CP	$10
 4046+1889 30 E7        		JR	NC,l1872	; loop back to ignore control codes>=$10
 4047+188B FE 06        		CP	$06
 4048+188D 38 E3        		JR	C,l1872		; ignore control codes<$06
 4049+188F CD 96 18     		CALL	l1896		; change mode if required
 4050+1892 30 DE        		JR	NC,l1872
 4051+1894 E1           l1894:		POP	HL		; restore HL
 4052+1895 C9           		RET
 4053+1896 EF           l1896:		RST	28H
 4054+1897 DB 10        		DW	o10DB		; call key mode change routine
 4055+1899 C9           		RET
 4056+189A
 4057+189A              ; Subroutine to display a menu
 4058+189A              ; On entry HL=address of menu
 4059+189A
 4060+189A E5           l189a:		PUSH	HL
 4061+189B CD 4D 19     		CALL	l194d		; save menu window area of screen
 4062+189E 21 3C 5C     		LD	HL,	$5C3C
 4063+18A1 CB 86        		res	0,(HL)		; signal "using main screen"
 4064+18A3 E1           		POP	HL
 4065+18A4 5E           		LD	E,(HL)		; E=number of menu lines
 4066+18A5 23           		INC	HL
 4067+18A6 E5           		PUSH	HL
 4068+18A7 21 FE 19     		LD	HL,l19fe
 4069+18AA CD 25 19     		CALL	l1925		; output control codes for top menu line
 4070+18AD E1           		POP	HL
 4071+18AE CD 25 19     		CALL	l1925		; output menu title
 4072+18B1 E5           		PUSH	HL
 4073+18B2 CD 34 1A     		CALL	l1a34		; output rainbow
 4074+18B5 21 0C 1A     		LD	HL,l1a0c
 4075+18B8 CD 25 19     		CALL	l1925		; output end of top menu line
 4076+18BB E1           		POP	HL
 4077+18BC D5           		PUSH	DE
 4078+18BD 01 07 08     		LD	BC,$0807
 4079+18C0 CD 1D 19     		CALL	l191d		; output 'AT 8,7'
 4080+18C3 C5           l18c3:		PUSH	BC		; save screen position
 4081+18C4 06 0C        		LD	B,$0C		; B=menu width 12 (+2 border)
 4082+18C6 3E 20        		LD	A," "
 4083+18C8 D7           		RST	10H		; output border space
 4084+18C9 7E           l18c9:		LD	A,(HL)		; get next char
 4085+18CA 23           		INC	HL
 4086+18CB FE 80        		CP	$80
 4087+18CD 30 03        		JR	NC,l18d2	; move on if last char on menu line
 4088+18CF D7           		RST	10H		; else output
 4089+18D0 10 F7        		DJNZ	l18c9		; & loop back for more
 4090+18D2 E6 7F        l18d2:		AND	$7F		; mask off end marker bit
 4091+18D4 D7           		RST	10H		; output last character
 4092+18D5 3E 20        l18d5:		LD	A,$20
 4093+18D7 D7           		RST	10H		; output spaces for rest of menu width
 4094+18D8 10 FB        		DJNZ	l18d5
 4095+18DA C1           		POP	BC
 4096+18DB 04           		INC	B		; get to next line
 4097+18DC CD 1D 19     		CALL	l191d		; output AT command
 4098+18DF 1D           		DEC	E
 4099+18E0 20 E1        		JR	NZ,l18c3	; loop back for more lines
 4100+18E2 21 38 6F     		LD	HL,$6F38	; HL=pixel coords for top left of menu
 4101+18E5 D1           		POP	DE		; E=total number of menu lines
 4102+18E6 CB 23        		SLA	E
 4103+18E8 CB 23        		SLA	E
 4104+18EA CB 23        		SLA	E
 4105+18EC 53           		LD	D,E
 4106+18ED 15           		DEC	D		; D=menu height in pixel lines-1
 4107+18EE 1E 6F        		LD	E,$6F		; E=menu width in pixel lines-1
 4108+18F0 01 00 FF     		LD	BC,$FF00
 4109+18F3 7A           		LD	A,D
 4110+18F4 CD 0B 19     		CALL	l190b		; draw line top to bottom
 4111+18F7 01 01 00     		LD	BC,$0001
 4112+18FA 7B           		LD	A,E
 4113+18FB CD 0B 19     		CALL	l190b		; draw line left to right
 4114+18FE 01 00 01     		LD	BC,$0100
 4115+1901 7A           		LD	A,D
 4116+1902 3C           		INC	A
 4117+1903 CD 0B 19     		CALL	l190b		; draw line bottom to top
 4118+1906 AF           		XOR	A
 4119+1907 CD DC 19     		CALL	l19dc		; put highlight on top line
 4120+190A C9           		RET
 4121+190B
 4122+190B              ; Subroutine to draw a line, used in menu display
 4123+190B              ; On entry, H=Y coord, L=X coord, A=line length, BC=amount to
 4124+190B              ; add to HL to get to next pixel
 4125+190B
 4126+190B F5           l190b:		PUSH	AF		; save registers
 4127+190C E5           		PUSH	HL
 4128+190D D5           		PUSH	DE
 4129+190E C5           		PUSH	BC
 4130+190F 44           		LD	B,H
 4131+1910 4D           		LD	C,L
 4132+1911 EF           		RST	28H
 4133+1912 E9 22        		DW	$22E9		; plot a pixel
 4134+1914 C1           		POP	BC		; restore registers
 4135+1915 D1           		POP	DE
 4136+1916 E1           		POP	HL
 4137+1917 F1           		POP	AF
 4138+1918 09           		ADD	HL,BC		; get coords of next pixel
 4139+1919 3D           		DEC	A
 4140+191A 20 EF        		JR	NZ,l190b	; back for rest of line
 4141+191C C9           		RET
 4142+191D
 4143+191D              ; Subroutine to output 'AT b,c'
 4144+191D
 4145+191D 3E 16        l191d:		LD	A,$16
 4146+191F D7           		RST	10H
 4147+1920 78           		LD	A,B
 4148+1921 D7           		RST	10H
 4149+1922 79           		LD	A,C
 4150+1923 D7           		RST	10H
 4151+1924 C9           		RET
 4152+1925
 4153+1925              ; Subroutine to output a $FF-terminated message (used in menus)
 4154+1925              ; If '+3' is encountered and a disk interface is not present, '+2e'
 4155+1925              ; is substituted
 4156+1925
 4157+1925 7E           l1925:		LD	A,(HL)		; get next character
 4158+1926 23           		INC	HL
 4159+1927 FE FF        		CP	$FF
 4160+1929 C8           		RET	Z		; exit if end-of-message marker
 4161+192A FE 2B        		CP	'+'
 4162+192C 28 03        		JR	Z,l1931		; move on to check '+'
 4163+192E D7           l192e:		RST	10H		; else output and loop back for more
 4164+192F 18 F4        		JR	l1925
 4165+1931 7E           l1931:		LD	A,(HL)
 4166+1932 FE 33        		CP	"3"		; check for '+3' string
 4167+1934 3E 2B        		LD	A,$2B		; reload with '+'
 4168+1936 20 F6        		JR	NZ,l192e	; go back to output if not '+3'
 4169+1938 E5           		PUSH	HL
 4170+1939 21 66 5B     		LD	HL,	$5B66
 4171+193C CB 66        		BIT	4,(HL)
 4172+193E E1           		POP	HL
 4173+193F 20 ED        		JR	NZ,l192e	; go back to output if disk interface present
 4174+1941 23           		INC	HL
 4175+1942 23           		INC	HL		; skip '+3 '
 4176+1943 3E 2B        		LD	A,'+'		; and output '+2A' instead
 4177+1945 D7           		RST	10H
 4178+1946 3E 32        		LD	A,"2"
 4179+1948 D7           		RST	10H
 4180+1949 3E 65        		LD	A, "e"
 4181+194B 18 E1        		JR	l192e		; back
 4182+194D
 4183+194D              ; This routine has a dual purpose: to either copy a "window" area to the
 4184+194D              ; screen, or to save a "window" area in high memory (of page 7)
 4185+194D              ; The window area is of fixed size 12 lines x 14 chars, located at
 4186+194D              ; 7,7
 4187+194D              ; Enter at l194d to copy the area FROM the screen, or at l1950 to copy
 4188+194D              ; the area TO the screen
 4189+194D              ; A total of:  21 (system variables)
 4190+194D              ;            + 12x14x8 (bitmap)
 4191+194D              ;            + 12x14 (attributes)
 4192+194D              ;            = 1533 bytes are saved, at $EEF6 to $F4F2
 4193+194D
 4194+194D 37           l194d:		SCF
 4195+194E 18 01        		JR	l1951
 4196+1950 A7           l1950:		AND	A		; reset carry (copying TO screen)
 4197+1951 11 F6 EE     l1951:		LD	DE,$EEF6	; DE contains window save area in page 7
 4198+1954 21 3C 5C     		LD	HL,	$5C3C
 4199+1957 38 01        		JR	C,l195a
 4200+1959 EB           		EX	DE,HL		; swap source & dest if necessary
 4201+195A ED A0        l195a:		LDI
 4202+195C 38 01        		JR	C,l195f
 4203+195E EB           		EX	DE,HL		; swap back
 4204+195F 21 7D 5C     l195f:		LD	HL,	$5C7D
 4205+1962 38 01        		JR	C,l1965		; swap source & dest
 4206+1964 EB           		EX	DE,HL
 4207+1965 01 14 00     l1965:		LD	BC,$0014
 4208+1968 ED B0        		LDIR			; copy COORDS to ATTR_T system variables
 4209+196A 38 01        		JR	C,l196d
 4210+196C EB           		EX	DE,HL		; swap back
 4211+196D 08           l196d:		EX	AF,AF'		; save carry flag
 4212+196E 01 07 07     		LD	BC,$0707	; Top left of window is 7,7
 4213+1971 CD A1 1D     		CALL	l1da1		; get C=33-C and B=24-B-(IX+1)
 4214+1974 DD 7E 01     		LD	A,(IX+$01)
 4215+1977 80           		ADD	A,B
 4216+1978 47           		LD	B,A		; correct B to 24-B
 4217+1979 3E 0C        		LD	A,$0C		; for 12 character lines
 4218+197B C5           l197b:		PUSH	BC		; save registers
 4219+197C F5           		PUSH	AF
 4220+197D D5           		PUSH	DE
 4221+197E EF           		RST	28H
 4222+197F 9B 0E        		DW	o0E9B		; get HL=address of line B in display file
 4223+1981 01 07 00     		LD	BC,$0007
 4224+1984 09           		ADD	HL,BC		; HL=address of left of window line
 4225+1985 D1           		POP	DE		; restore save area in page 7
 4226+1986 CD 90 19     		CALL	l1990		; copy a character line (width 14)
 4227+1989 F1           		POP	AF		; restore registers
 4228+198A C1           		POP	BC
 4229+198B 05           		DEC	B		; move to next character line
 4230+198C 3D           		DEC	A
 4231+198D 20 EC        		JR	NZ,l197b	; loop back for more lines
 4232+198F C9           		RET
 4233+1990
 4234+1990              ; Subroutine used by menu window transfer routine, to transfer a single
 4235+1990              ; character line (width 14)
 4236+1990              ; On entry, HL=screen address of top pixel line
 4237+1990              ;           DE=address of save area
 4238+1990              ;           Carry'=save/restore flag
 4239+1990
 4240+1990 01 0E 08     l1990:		LD	BC,$080E	; B=8 pixel lines,C=14 bytes window width
 4241+1993 C5           l1993:		PUSH	BC		; save counters
 4242+1994 06 00        		LD	B,$00		; BC=bytes to copy
 4243+1996 E5           		PUSH	HL		; save screen address
 4244+1997 08           		EX	AF,AF'		; get carry flag
 4245+1998 38 01        		JR	C,l199b
 4246+199A EB           		EX	DE,HL		; swap source & dest if necessary
 4247+199B ED B0        l199b:		LDIR
 4248+199D 38 01        		JR	C,l19a0
 4249+199F EB           		EX	DE,HL		; swap back
 4250+19A0 08           l19a0:		EX	AF,AF'		; save carry flag
 4251+19A1 E1           		POP	HL		; restore screen address
 4252+19A2 24           		INC	H		; get to next pixel line
 4253+19A3 C1           		POP	BC		; restore counts
 4254+19A4 10 ED        		DJNZ	l1993		; back for more pixel lines
 4255+19A6 C5           		PUSH	BC
 4256+19A7 D5           		PUSH	DE
 4257+19A8 EF           		RST	28H
 4258+19A9 88 0E        		DW	o0E88
 4259+19AB EB           		EX	DE,HL		; HL=attributes address
 4260+19AC D1           		POP	DE
 4261+19AD C1           		POP	BC
 4262+19AE 08           		EX	AF,AF'		; get carry flag
 4263+19AF 38 01        		JR	C,l19b2
 4264+19B1 EB           		EX	DE,HL		; swap source & dest if necessary
 4265+19B2 ED B0        l19b2:		LDIR
 4266+19B4 38 01        		JR	C,l19b7
 4267+19B6 EB           		EX	DE,HL		; swap back
 4268+19B7 08           l19b7:		EX	AF,AF'		; save carry flag
 4269+19B8 C9           		RET
 4270+19B9
 4271+19B9              ; Move menu highlight up a line
 4272+19B9              ; On entry, A=current highlight line number, HL=address of menu size
 4273+19B9
 4274+19B9 CD DC 19     l19b9:		CALL	l19dc		; remove current highlight
 4275+19BC 3D           		DEC	A		; decrement line number
 4276+19BD F2 C3 19     		JP	p,l19c3		; move on if still positive
 4277+19C0 7E           		LD	A,(HL)		; else set to bottom line
 4278+19C1 3D           		DEC	A
 4279+19C2 3D           		DEC	A
 4280+19C3 CD DC 19     l19c3:		CALL	l19dc		; replace highlight on new line
 4281+19C6 37           		SCF			; set carry, so calling routine doesn't
 4282+19C7 C9           		RET			;  immediately call "move highlight down"
 4283+19C8
 4284+19C8              ; Move menu highlight down a line
 4285+19C8              ; On entry, A=current highlight line number, HL=address of menu size
 4286+19C8
 4287+19C8 D5           l19c8:		PUSH	DE		; save DE
 4288+19C9 CD DC 19     		CALL	l19dc		; remove current highlight
 4289+19CC 3C           		INC	A		; increment line number
 4290+19CD 57           		LD	D,A
 4291+19CE 7E           		LD	A,(HL)
 4292+19CF 3D           		DEC	A
 4293+19D0 3D           		DEC	A
 4294+19D1 BA           		CP	D		; check against max line number
 4295+19D2 7A           		LD	A,D
 4296+19D3 F2 D7 19     		JP	p,l19d7
 4297+19D6 AF           		XOR	A		; set to 0 if too large
 4298+19D7 CD DC 19     l19d7:		CALL	l19dc		; replace highlight on new line
 4299+19DA D1           		POP	DE		; restore DE
 4300+19DB C9           		RET
 4301+19DC
 4302+19DC              ; Subroutine to switch menu line A (0=top) between highlighted and
 4303+19DC              ; non-highlighted
 4304+19DC
 4305+19DC F5           l19dc:		PUSH	AF		; save registers
 4306+19DD E5           		PUSH	HL
 4307+19DE D5           		PUSH	DE
 4308+19DF 21 07 59     		LD	HL,$5907	; attribute address of top menu line
 4309+19E2 11 20 00     		LD	DE,$0020
 4310+19E5 A7           		AND	A
 4311+19E6 28 04        		JR	Z,l19ec
 4312+19E8 19           l19e8:		ADD	HL,DE		; get to attribute address of required line
 4313+19E9 3D           		DEC	A
 4314+19EA 20 FC        		JR	NZ,l19e8
 4315+19EC 3E 78        l19ec:		LD	A,$78
 4316+19EE BE           		CP	(HL)		; is it BRIGHT 1, PAPER 7, INK 0?
 4317+19EF 20 02        		JR	NZ,l19f3	; if not, change to this
 4318+19F1 3E 68        		LD	A,$68		; if so, change to BRIGHT 1, PAPER 5, INK 0
 4319+19F3 16 0E        l19f3:		LD	D,$0E		; 14 characters to do
 4320+19F5 77           l19f5:		LD	(HL),A		; change attributes
 4321+19F6 23           		INC	HL
 4322+19F7 15           		DEC	D
 4323+19F8 20 FB        		JR	NZ,l19f5
 4324+19FA D1           		POP	DE		; restore registers
 4325+19FB E1           		POP	HL
 4326+19FC F1           		POP	AF
 4327+19FD C9           		RET
 4328+19FE
 4329+19FE              ; Control codes for top line of menus
 4330+19FE
 4331+19FE 16 07 07     l19fe:		DB	$16,$07,$07	; AT 7,7
 4332+1A01 15 00 14 00  		DB	$15,$00,$14,$00	; OVER 0,INVERSE 0
 4333+1A05 10 07 11 00  		DB	$10,$07,$11,$00	; INK 7,PAPER 0
 4334+1A09 13 01        		DB	$13,$01		; BRIGHT 1
 4335+1A0B FF           		DB	$FF
 4336+1A0C
 4337+1A0C              ; Control codes for end of top line of menus
 4338+1A0C
 4339+1A0C 11 00        l1a0c:		DB	$11,$00		; PAPER 0
 4340+1A0E 20           		DB	" "
 4341+1A0F 11 07        		DB	$11,$07		; PAPER 7
 4342+1A11 10 00        		DB	$10,$00		; INK 0
 4343+1A13 FF           		DB	$FF
 4344+1A14
 4345+1A14              ; A two-character "character set" used for displaying the
 4346+1A14              ; rainbow on menus and bars
 4347+1A14
 4348+1A14 01 03 07 0F  l1a14:		DB	$01,$03,$07,$0F
 4349+1A18 1F 3F 7F FF  		DB	$1F,$3F,$7F,$FF
 4350+1A1C FE FC F8 F0  		DB	$FE,$FC,$F8,$F0
 4351+1A20 E0 C0 80 00  		DB	$E0,$C0,$80,$00
 4352+1A24
 4353+1A24              ; The rainbow string
 4354+1A24
 4355+1A24 10 02 20     l1a24:		DB	$10,$02," "
 4356+1A27 11 06 21     		DB	$11,$06,'!'
 4357+1A2A 10 04 20     		DB	$10,$04," "
 4358+1A2D 11 05 21     		DB	$11,$05,'!'
 4359+1A30 10 00 20     		DB	$10,$00," "
 4360+1A33 FF           		DB	$FF
 4361+1A34
 4362+1A34              ; Subroutine to output the "rainbow" on menus and bars
 4363+1A34
 4364+1A34 C5           l1a34:		PUSH	BC		; save registers
 4365+1A35 D5           		PUSH	DE
 4366+1A36 E5           		PUSH	HL
 4367+1A37 21 14 1A     		LD	HL,l1a14
 4368+1A3A 11 7C 5B     		LD	DE,	$5B7C
 4369+1A3D 01 10 00     		LD	BC,$0010
 4370+1A40 ED B0        		LDIR			; copy rainbow charset into RAM
 4371+1A42 2A 36 5C     		LD	HL,(	$5C36)
 4372+1A45 E5           		PUSH	HL		; save CHARS
 4373+1A46 21 7C 5A     		LD	HL,	$5B7C-$0100
 4374+1A49 22 36 5C     		LD	(	$5C36),HL	; set to rainbow set
 4375+1A4C 21 24 1A     		LD	HL,l1a24
 4376+1A4F CD 25 19     		CALL	l1925		; output rainbow
 4377+1A52 E1           		POP	HL
 4378+1A53 22 36 5C     		LD	(	$5C36),HL	; restore CHARS
 4379+1A56 E1           		POP	HL		; restore registers
 4380+1A57 D1           		POP	DE
 4381+1A58 C1           		POP	BC
 4382+1A59 C9           		RET
 4383+1A5A
 4384+1A5A              ; Subroutines to display the bars for various functions
 4385+1A5A
 4386+1A5A 21 0F 08     l1a5a:		LD	HL,l080f	; +3 BASIC
 4387+1A5D 18 08        		JR	l1a67
 4388+1A5F
 4389+1A5F 21 17 08     l1a5f:		LD	HL,l0817	; Calculator
 4390+1A62 18 03        		JR	l1a67
 4391+1A64
 4392+1A64 21 09 08     l1a64:		LD	HL,l0809	; Loader
 4393+1A67
 4394+1A67
 4395+1A67              ; Subroutine to clear the bottom 3 lines to editor colours, and display
 4396+1A67              ; a bar with a rainbow and the text at HL (bit 7-terminated) on line 21
 4397+1A67
 4398+1A67 E5           l1a67:		PUSH	HL
 4399+1A68 CD 8E 1A     		CALL	l1a8e		; clear bottom 3 lines to editor colours
 4400+1A6B 21 A0 5A     		LD	HL,$5AA0	; attribute address of line 21
 4401+1A6E 06 20        		LD	B,$20
 4402+1A70 3E 40        		LD	A,$40
 4403+1A72 77           l1a72:		LD	(HL),A		; fill line 21 to BRIGHT 1, PAPER 0, INK 0
 4404+1A73 23           		INC	HL
 4405+1A74 10 FC        		DJNZ	l1a72
 4406+1A76 21 FE 19     		LD	HL,l19fe
 4407+1A79 CD 25 19     		CALL	l1925		; output control codes for top menu lines
 4408+1A7C 01 00 15     		LD	BC,$1500
 4409+1A7F CD 1D 19     		CALL	l191d		; output AT 21,0
 4410+1A82 D1           		POP	DE
 4411+1A83 CD 9E 02     		CALL	l029e		; ouput the bar text
 4412+1A86 0E 1A        		LD	C,$1A		; output AT 21,26
 4413+1A88 CD 1D 19     		CALL	l191d
 4414+1A8B C3 34 1A     		JP	l1a34		; output the rainbow
 4415+1A8E
 4416+1A8E              ; Subroutine to clear bottom 3 lines to editor colours
 4417+1A8E
 4418+1A8E 06 15        l1a8e:		LD	B,$15
 4419+1A90 16 17        		LD	D,$17
 4420+1A92 C3 6B 1D     l1a92:		JP	l1d6b		; clear bottom 3 lines to editor colours
 4421+1A95
 4422+1A95
 4423+1A95              ; The renumber routine
 4424+1A95
 4425+1A95 CD A7 05     l1a95:		CALL	l05a7		; page in normal memory
 4426+1A98 CD 12 1C     		CALL	l1c12		; get number of lines in BASIC program
 4427+1A9B 7A           		LD	A,D
 4428+1A9C B3           		OR	E
 4429+1A9D CA CD 1B     		JP	Z,l1bcd		; if none, signal "command failed" & exit
 4430+1AA0 2A 77 5B     		LD	HL,(	$5B77)
 4431+1AA3 EF           		RST	28H
 4432+1AA4 A9 30        		DW	o30A9		; HL=STEP*number of lines
 4433+1AA6 EB           		EX	DE,HL		; DE=STEP*number of lines
 4434+1AA7 2A 75 5B     		LD	HL,($5B75)
 4435+1AAA 19           		ADD	HL,DE		; HL=projected last line number
 4436+1AAB 11 10 27     		LD	DE,$2710
 4437+1AAE B7           		OR	A
 4438+1AAF ED 52        		SBC	HL,DE
 4439+1AB1 D2 CD 1B     		JP	NC,l1bcd	; if >9999, signal "command failed" & exit
 4440+1AB4 2A 53 5C     		LD	HL,(	$5C53)	; get start of program
 4441+1AB7 EF           l1ab7:		RST	28H
 4442+1AB8 B8 19        		DW	o19B8		; get address of next line
 4443+1ABA 23           		INC	HL
 4444+1ABB 23           		INC	HL
 4445+1ABC 22 73 5B     		LD	(	$5B73),HL	; store address of current line (after number)
 4446+1ABF 23           		INC	HL
 4447+1AC0 23           		INC	HL		; point after line length
 4448+1AC1 ED 53 95 5B  		LD	(	$5B84+$11),DE	; store address of next line
 4449+1AC5 7E           l1ac5:		LD	A,(HL)		; get next character
 4450+1AC6 EF           		RST	28H
 4451+1AC7 B6 18        		DW	o18B6		; skip past embedded number if necessary
 4452+1AC9 FE 0D        		CP	$0D
 4453+1ACB 28 05        		JR	Z,l1ad2		; move on if end of line
 4454+1ACD CD 1B 1B     		CALL	l1b1b		; replace any line number in this command
 4455+1AD0 18 F3        		JR	l1ac5		; loop back
 4456+1AD2 ED 5B 95 5B  l1ad2:		LD	DE,(	$5B84+$11)	; get address of next line
 4457+1AD6 2A 4B 5C     		LD	HL,(	$5C4B)
 4458+1AD9 A7           		AND	A
 4459+1ADA ED 52        		SBC	HL,DE
 4460+1ADC EB           		EX	DE,HL
 4461+1ADD 20 D8        		JR	NZ,l1ab7	; loop back if not end of program
 4462+1ADF CD 12 1C     		CALL	l1c12
 4463+1AE2 42           		LD	B,D
 4464+1AE3 4B           		LD	C,E		; BC=number of lines in program
 4465+1AE4 11 00 00     		LD	DE,$0000
 4466+1AE7 2A 53 5C     		LD	HL,(	$5C53)	; HL=address of first line
 4467+1AEA C5           l1aea:		PUSH	BC		; save registers
 4468+1AEB D5           		PUSH	DE
 4469+1AEC E5           		PUSH	HL
 4470+1AED 2A 77 5B     		LD	HL,(	$5B77)
 4471+1AF0 EF           		RST	28H
 4472+1AF1 A9 30        		DW	o30A9		; HL=(line-1)*STEP
 4473+1AF3 ED 5B 75 5B  		LD	DE,($5B75)
 4474+1AF7 19           		ADD	HL,DE
 4475+1AF8 EB           		EX	DE,HL		; DE=new line number
 4476+1AF9 E1           		POP	HL
 4477+1AFA 72           		LD	(HL),D
 4478+1AFB 23           		INC	HL
 4479+1AFC 73           		LD	(HL),E		; store new number at start of line
 4480+1AFD 23           		INC	HL
 4481+1AFE 4E           		LD	C,(HL)
 4482+1AFF 23           		INC	HL
 4483+1B00 46           		LD	B,(HL)
 4484+1B01 23           		INC	HL
 4485+1B02 09           		ADD	HL,BC		; get to start of next line
 4486+1B03 D1           		POP	DE
 4487+1B04 13           		INC	DE		; increment line count
 4488+1B05 C1           		POP	BC
 4489+1B06 0B           		DEC	BC		; decrement lines to do
 4490+1B07 78           		LD	A,B
 4491+1B08 B1           		OR	C
 4492+1B09 20 DF        		JR	NZ,l1aea	; loop back for more
 4493+1B0B CD CC 05     		CALL	l05cc		; page back DOS workspace
 4494+1B0E ED 43 73 5B  		LD	(	$5B73),BC	; reset "current line being renumbered"
 4495+1B12 37           		SCF			; signal "command succeeded"
 4496+1B13 C9           		RET
 4497+1B14
 4498+1B14              ; Table of commands containing line numbers
 4499+1B14
 4500+1B14 CA           l1b14:		DB	$CA		; LINE
 4501+1B15 F0           		DB	$F0		; LIST
 4502+1B16 E1           		DB	$E1		; LLIST
 4503+1B17 EC           		DB	$EC		; GOTO
 4504+1B18 ED           		DB	$ED		; GOSUB
 4505+1B19 E5           		DB	$E5		; RESTORE
 4506+1B1A F7           		DB	$F7		; RUN
 4507+1B1B
 4508+1B1B              ; Subroutine to replace any line number in the current statement.
 4509+1B1B              ; On entry, HL=address of code, A=code
 4510+1B1B              ; On exit HL=address of next code to check
 4511+1B1B
 4512+1B1B 23           l1b1b:		INC	HL
 4513+1B1C 22 93 5B     		LD	(	$5B84+$0F),HL	; save pointer after command
 4514+1B1F EB           		EX	DE,HL
 4515+1B20 01 07 00     		LD	BC,$0007
 4516+1B23 21 14 1B     		LD	HL,l1b14
 4517+1B26 ED B1        l1b26:		CPIR
 4518+1B28 EB           		EX	DE,HL
 4519+1B29 C0           		RET	NZ		; exit if not
 4520+1B2A 0E 00        		LD	C,$00		; set BC=0
 4521+1B2C 7E           l1b2c:		LD	A,(HL)		; get next character
 4522+1B2D FE 20        		CP	$20
 4523+1B2F 28 1B        		JR	Z,l1b4c		; go to skip spaces
 4524+1B31 EF           		RST	28H
 4525+1B32 1B 2D        		DW	o2D1B		; is it a digit?
 4526+1B34 30 16        		JR	NC,l1b4c	; go to skip if so
 4527+1B36 FE 2E        		CP	'.'
 4528+1B38 28 12        		JR	Z,l1b4c		; go to skip decimal point
 4529+1B3A FE 0E        		CP	$0E
 4530+1B3C 28 12        		JR	Z,l1b50		; move on if found embedded number
 4531+1B3E F6 20        		OR	$20
 4532+1B40 FE 65        		CP	$65
 4533+1B42 20 04        		JR	NZ,l1b48	; if it's not an "e", exit
 4534+1B44 78           		LD	A,B
 4535+1B45 B1           		OR	C
 4536+1B46 20 04        		JR	NZ,l1b4c	; found any characters suggesting a number?
 4537+1B48 2A 93 5B     l1b48:		LD	HL,(	$5B84+$0F)	; if not, exit with pointer after command
 4538+1B4B C9           		RET
 4539+1B4C 03           l1b4c:		INC	BC		; increment characters found
 4540+1B4D 23           		INC	HL
 4541+1B4E 18 DC        		JR	l1b2c		; loop back for more
 4542+1B50 ED 43 8B 5B  l1b50:		LD	(	$5B84+$07),BC	; save no of characters before embedded #
 4543+1B54 E5           		PUSH	HL		; save pointer to embedded number
 4544+1B55 EF           		RST	28H
 4545+1B56 B6 18        		DW	o18B6		; skip past embedded number
 4546+1B58 CD 43 1C     		CALL	l1c43		; skip past spaces
 4547+1B5B 7E           		LD	A,(HL)		; get following character
 4548+1B5C E1           		POP	HL		; restore pointer to embedded number
 4549+1B5D FE 3A        		CP	":"
 4550+1B5F 28 03        		JR	Z,l1b64
 4551+1B61 FE 0D        		CP	$0D
 4552+1B63 C0           		RET	NZ		; exit if following character not : or ENTER
 4553+1B64 23           l1b64:		INC	HL		; HL points to next statement/line
 4554+1B65 EF           		RST	28H
 4555+1B66 B4 33        		DW	o33B4		; stack the embedded number
 4556+1B68 EF           		RST	28H
 4557+1B69 A2 2D        		DW	o2DA2		; get embedded number to BC
 4558+1B6B 60           		LD	H,B
 4559+1B6C 69           		LD	L,C		; HL=embedded line number
 4560+1B6D EF           		RST	28H
 4561+1B6E 6E 19        		DW	o196E		; get HL=address of target line
 4562+1B70 28 0A        		JR	Z,l1b7c		; move on if the actual line was found
 4563+1B72 7E           		LD	A,(HL)
 4564+1B73 FE 28        		CP	$28
 4565+1B75 38 05        		JR	C,l1b7c		; or if there is a line afterwards (not end)
 4566+1B77 21 0F 27     		LD	HL,$270F	; use 9999 and move on
 4567+1B7A 18 11        		JR	l1b8d
 4568+1B7C
 4569+1B7C 22 91 5B     l1b7c:		LD	(	$5B84+$0D),HL	; save target line address
 4570+1B7F CD 18 1C     		CALL	l1c18		; get DE=number of lines before it
 4571+1B82 2A 77 5B     		LD	HL,(	$5B77)
 4572+1B85 EF           		RST	28H
 4573+1B86 A9 30        		DW	o30A9
 4574+1B88 ED 5B 75 5B  		LD	DE,($5B75)
 4575+1B8C 19           		ADD	HL,DE		; HL=target line's new number
 4576+1B8D 11 8D 5B     l1b8d:		LD	DE,	$5B84+$09
 4577+1B90 E5           		PUSH	HL		; save number
 4578+1B91 CD 49 1C     		CALL	l1c49		; form ASCII representation of it
 4579+1B94 58           		LD	E,B
 4580+1B95 1C           		INC	E
 4581+1B96 16 00        		LD	D,$00		; DE=length of ASCII string
 4582+1B98 D5           		PUSH	DE		; save length
 4583+1B99 E5           		PUSH	HL		; and address of string
 4584+1B9A 6B           		LD	L,E
 4585+1B9B 26 00        		LD	H,$00
 4586+1B9D ED 4B 8B 5B  		LD	BC,(	$5B84+$07)	; get number of characters available
 4587+1BA1 B7           		OR	A
 4588+1BA2 ED 42        		SBC	HL,BC
 4589+1BA4 22 8B 5B     		LD	(	$5B84+$07),HL	; save number of extra chars required
 4590+1BA7 28 33        		JR	Z,l1bdc		; move on if right size
 4591+1BA9 38 27        		JR	C,l1bd2		; move on if more chars available than needed
 4592+1BAB 44           		LD	B,H
 4593+1BAC 4D           		LD	C,L		; BC=chars to insert
 4594+1BAD 2A 93 5B     		LD	HL,(	$5B84+$0F)	; HL=address to insert at
 4595+1BB0 E5           		PUSH	HL		; save registers
 4596+1BB1 D5           		PUSH	DE
 4597+1BB2 2A 65 5C     		LD	HL,(	$5C65)
 4598+1BB5 09           		ADD	HL,BC
 4599+1BB6 38 13        		JR	C,l1bcb		; move on to signal error if no room
 4600+1BB8 EB           		EX	DE,HL
 4601+1BB9 21 82 00     		LD	HL,$0082
 4602+1BBC 19           		ADD	HL,DE
 4603+1BBD 38 0C        		JR	C,l1bcb		; error if can't leave $82 bytes free
 4604+1BBF ED 72        		SBC	HL,SP
 4605+1BC1 3F           		CCF
 4606+1BC2 38 07        		JR	C,l1bcb		; or if would encroach on stack
 4607+1BC4 D1           		POP	DE		; restore registers
 4608+1BC5 E1           		POP	HL
 4609+1BC6 EF           		RST	28H
 4610+1BC7 55 16        		DW	o1655		; make room
 4611+1BC9 18 11        		JR	l1bdc		; move on
 4612+1BCB D1           l1bcb:		POP	DE
 4613+1BCC E1           		POP	HL
 4614+1BCD CD CC 05     l1bcd:		CALL	l05cc		; page in DOS workspace
 4615+1BD0 A7           		AND	A		; signal "command failed"
 4616+1BD1 C9           		RET			; exit
 4617+1BD2 0B           l1bd2:		DEC	BC
 4618+1BD3 1D           		DEC	E
 4619+1BD4 20 FC        		JR	NZ,l1bd2	; BC=number of bytes to reclaim
 4620+1BD6 2A 93 5B     		LD	HL,(	$5B84+$0F)
 4621+1BD9 EF           		RST	28H
 4622+1BDA E8 19        		DW	o19E8		; reclaim room
 4623+1BDC ED 5B 93 5B  l1bdc:		LD	DE,(	$5B84+$0F)
 4624+1BE0 E1           		POP	HL
 4625+1BE1 C1           		POP	BC
 4626+1BE2 ED B0        		LDIR			; copy ASCII text of line number
 4627+1BE4 EB           		EX	DE,HL
 4628+1BE5 36 0E        		LD	(HL),$0E	; store embedded number marker
 4629+1BE7 C1           		POP	BC		; BC=new line number
 4630+1BE8 23           		INC	HL
 4631+1BE9 E5           		PUSH	HL		; save address to place FP number
 4632+1BEA EF           		RST	28H
 4633+1BEB 2B 2D        		DW	o2D2B		; stack BC on FP stack (HL=address)
 4634+1BED D1           		POP	DE
 4635+1BEE 01 05 00     		LD	BC,$0005
 4636+1BF1 ED B0        		LDIR			; copy FP representation
 4637+1BF3 EB           		EX	DE,HL
 4638+1BF4 E5           		PUSH	HL		; save address of next byte to check
 4639+1BF5 2A 73 5B     		LD	HL,(	$5B73)
 4640+1BF8 E5           		PUSH	HL		; save address of current line
 4641+1BF9 5E           		LD	E,(HL)
 4642+1BFA 23           		INC	HL
 4643+1BFB 56           		LD	D,(HL)		; DE=length of current line
 4644+1BFC 2A 8B 5B     		LD	HL,(	$5B84+$07)
 4645+1BFF 19           		ADD	HL,DE
 4646+1C00 EB           		EX	DE,HL		; DE=new length of current line
 4647+1C01 E1           		POP	HL
 4648+1C02 73           		LD	(HL),E
 4649+1C03 23           		INC	HL
 4650+1C04 72           		LD	(HL),D		; store new length
 4651+1C05 2A 95 5B     		LD	HL,(	$5B84+$11)
 4652+1C08 ED 5B 8B 5B  		LD	DE,(	$5B84+$07)
 4653+1C0C 19           		ADD	HL,DE
 4654+1C0D 22 95 5B     		LD	(	$5B84+$11),HL	; store new next line address
 4655+1C10 E1           		POP	HL		; restore address of next byte to check
 4656+1C11 C9           		RET
 4657+1C12
 4658+1C12              ; Subroutine to count the number of lines in a BASIC program,
 4659+1C12              ; either to the end (enter at l1c12), or to a certain address (enter
 4660+1C12              ; at l1c18 with address in STRIP2+$0D).
 4661+1C12              ; Number of lines is returned in DE
 4662+1C12
 4663+1C12 2A 4B 5C     l1c12:		LD	HL,(	$5C4B)
 4664+1C15 22 91 5B     		LD	(	$5B84+$0D),HL	; save VARS
 4665+1C18 2A 53 5C     l1c18:		LD	HL,(	$5C53)
 4666+1C1B ED 5B 91 5B  		LD	DE,(	$5B84+$0D)
 4667+1C1F B7           		OR	A
 4668+1C20 ED 52        		SBC	HL,DE
 4669+1C22 28 1A        		JR	Z,l1c3e		; move on if no BASIC program in memory
 4670+1C24 2A 53 5C     		LD	HL,(	$5C53)	; start at PROG
 4671+1C27 01 00 00     		LD	BC,$0000	; with 0 lines
 4672+1C2A C5           l1c2a:		PUSH	BC
 4673+1C2B EF           		RST	28H
 4674+1C2C B8 19        		DW	o19B8		; find DE=address of next line
 4675+1C2E 2A 91 5B     		LD	HL,(	$5B84+$0D)
 4676+1C31 A7           		AND	A
 4677+1C32 ED 52        		SBC	HL,DE
 4678+1C34 28 05        		JR	Z,l1c3b		; move on if no more lines
 4679+1C36 EB           		EX	DE,HL		; else swap to HL
 4680+1C37 C1           		POP	BC
 4681+1C38 03           		INC	BC		; increment line count
 4682+1C39 18 EF        		JR	l1c2a		; loop back
 4683+1C3B D1           l1c3b:		POP	DE		; restore number of lines
 4684+1C3C 13           		INC	DE		; increment for last line
 4685+1C3D C9           		RET
 4686+1C3E 11 00 00     l1c3e:		LD	DE,$0000	; BASIC program length=0
 4687+1C41 C9           		RET
 4688+1C42
 4689+1C42              ; Subroutine to skip spaces
 4690+1C42
 4691+1C42 23           l1c42:		INC	HL
 4692+1C43 7E           l1c43:		LD	A,(HL)		; get next char
 4693+1C44 FE 20        		CP	" "
 4694+1C46 28 FA        		JR	Z,l1c42		; skip if space
 4695+1C48 C9           		RET			; exit with HL pointing to non-space
 4696+1C49
 4697+1C49              ; Subroutine to form a text representation of a binary number up to 9999
 4698+1C49              ; On entry, DE=address to form number, HL=number
 4699+1C49              ; On exit, HL=start address of text number, DE=end address+1, B=#digits-1
 4700+1C49
 4701+1C49 D5           l1c49:		PUSH	DE		; save start address of text number
 4702+1C4A 01 18 FC     		LD	BC,-1000
 4703+1C4D CD 6D 1C     		CALL	l1c6d		; form 1000s digit
 4704+1C50 01 9C FF     		LD	BC,-100
 4705+1C53 CD 6D 1C     		CALL	l1c6d		; form 100s digit
 4706+1C56 0E F6        		LD	C,-10
 4707+1C58 CD 6D 1C     		CALL	l1c6d		; form 10s digit
 4708+1C5B 7D           		LD	A,L
 4709+1C5C C6 30        		ADD	A,"0"
 4710+1C5E 12           		LD	(DE),A		; form units digit
 4711+1C5F 13           		INC	DE
 4712+1C60 06 03        		LD	B,$03		; check first 3 digits
 4713+1C62 E1           		POP	HL		; restore start address of text number
 4714+1C63 7E           l1c63:		LD	A,(HL)
 4715+1C64 FE 30        		CP	"0"
 4716+1C66 C0           		RET	NZ		; exit if non-zero digit
 4717+1C67 36 20        		LD	(HL)," "	; replace leading 0s with spaces
 4718+1C69 23           		INC	HL
 4719+1C6A 10 F7        		DJNZ	l1c63		; loop back
 4720+1C6C C9           		RET
 4721+1C6D
 4722+1C6D              ; Subroutine to form a decimal digit from a binary number
 4723+1C6D              ; On entry, HL=number, DE=address to store digit, BC=-unit size
 4724+1C6D              ; On exit, HL is reduced and DE is incremented
 4725+1C6D
 4726+1C6D AF           l1c6d:		XOR	A		; zero counter
 4727+1C6E 09           l1c6e:		ADD	HL,BC		; subtract unit size
 4728+1C6F 3C           		INC	A		; and increment digit counter
 4729+1C70 38 FC        		JR	C,l1c6e		; loop back for more until failed
 4730+1C72 ED 42        		SBC	HL,BC		; add back last unit
 4731+1C74 3D           		DEC	A		; and decrement counter
 4732+1C75 C6 30        		ADD	A,"0"
 4733+1C77 12           		LD	(DE),A		; place ASCII digit
 4734+1C78 13           		INC	DE		; increment address
 4735+1C79 C9           		RET
 4736+1C7A
 4737+1C7A 08           l1c7a:		DB	$08
 4738+1C7B 00           		DB	0
 4739+1C7C 00           		DB	0
 4740+1C7D 14           		DB	$14
 4741+1C7E 00           		DB	0
 4742+1C7F 00           		DB	0
 4743+1C80 00           		DB	0
 4744+1C81 0F           		DB	$0F
 4745+1C82 00           		DB	0
 4746+1C83
 4747+1C83 08           l1c83:		DB	$08
 4748+1C84 00           		DB	0
 4749+1C85 16           		DB	$16
 4750+1C86 01           		DB	$01
 4751+1C87 00           		DB	0
 4752+1C88 00           		DB	0
 4753+1C89 00           		DB	0
 4754+1C8A 0F           		DB	$0F
 4755+1C8B 00           		DB	0
 4756+1C8C
 4757+1C8C              ; Subroutine to ???
 4758+1C8C
 4759+1C8C DD 21 98 FD  l1c8c:		LD	IX,$FD98
 4760+1C90 21 7A 1C     		LD	HL,l1c7a
 4761+1C93 18 03        		JR	l1c98		; (3)
 4762+1C95
 4763+1C95 21 83 1C     l1c95:		LD	HL,l1c83
 4764+1C98 11 98 FD     l1c98:		LD	DE,$FD98
 4765+1C9B C3 52 21     		JP	l2152
 4766+1C9E
 4767+1C9E
 4768+1C9E D7           l1c9e:		RST	10H
 4769+1C9F 7A           		LD	A,D
 4770+1CA0 D7           		RST	10H
 4771+1CA1 37           		SCF
 4772+1CA2 C9           		RET
 4773+1CA3
 4774+1CA3              ; Subroutine to set cursor colours to A
 4775+1CA3
 4776+1CA3 E6 3F        l1ca3:		AND	$3F		; mask off FLASH/BRIGHT bits
 4777+1CA5 DD 77 06     		LD	(IX+$06),A	; set colours
 4778+1CA8 37           		SCF
 4779+1CA9 C9           		RET
 4780+1CAA
 4781+1CAA              ; Subroutine to place cursor at column C, line B (of editing area)
 4782+1CAA
 4783+1CAA DD 7E 01     l1caa:		LD	A,(IX+$01)	; get line for top of editing area
 4784+1CAD 80           		ADD	A,B
 4785+1CAE 47           		LD	B,A		; B=line
 4786+1CAF CD AD 1D     		CALL	l1dad		; get attribute address
 4787+1CB2 7E           		LD	A,(HL)
 4788+1CB3 DD 77 07     		LD	(IX+$07),A	; save attribute
 4789+1CB6 2F           		CPL
 4790+1CB7 E6 C0        		AND	$C0		; get inverse of current FLASH/BRIGHT bits
 4791+1CB9 DD B6 06     		OR	(IX+$06)	; combine with cursor colour
 4792+1CBC 77           		LD	(HL),A		; set new attribute
 4793+1CBD 37           		SCF
 4794+1CBE C9           		RET
 4795+1CBF
 4796+1CBF              ; Subroutine to remove cursor from column C, line B (of editing area)
 4797+1CBF
 4798+1CBF DD 7E 01     l1cbf:		LD	A,(IX+$01)	; get line for top of editing area
 4799+1CC2 80           		ADD	A,B
 4800+1CC3 47           		LD	B,A		; B=line
 4801+1CC4 CD AD 1D     		CALL	l1dad		; get attribute address
 4802+1CC7 DD 7E 07     		LD	A,(IX+$07)
 4803+1CCA 77           		LD	(HL),A		; restore attribute
 4804+1CCB C9           		RET
 4805+1CCC
 4806+1CCC
 4807+1CCC E5           l1ccc:		PUSH	HL
 4808+1CCD 26 00        		LD	H,$00
 4809+1CCF 7B           		LD	A,E
 4810+1CD0 90           		SUB	B
 4811+1CD1 18 07        		JR	l1cda		; (7)
 4812+1CD3
 4813+1CD3 E5           l1cd3:		PUSH	HL
 4814+1CD4 7B           		LD	A,E
 4815+1CD5 58           		LD	E,B
 4816+1CD6 47           		LD	B,A
 4817+1CD7 93           		SUB	E
 4818+1CD8 26 FF        		LD	H,$FF
 4819+1CDA
 4820+1CDA 4F           l1cda:		LD	C,A
 4821+1CDB 78           		LD	A,B
 4822+1CDC BB           		CP	E
 4823+1CDD 28 4B        		JR	Z,l1d2a		; (75)
 4824+1CDF D5           		PUSH	DE
 4825+1CE0 CD A5 1D     		CALL	l1da5
 4826+1CE3
 4827+1CE3 C5           l1ce3:		PUSH	BC
 4828+1CE4 4C           		LD	C,H
 4829+1CE5 EF           		RST	28H
 4830+1CE6 9B 0E        		DW	o0E9B
 4831+1CE8 EB           		DB	$EB
 4832+1CE9 AF           		XOR	A
 4833+1CEA B1           		OR	C
 4834+1CEB 28 03        		JR	Z,l1cf0		; (3)
 4835+1CED 04           		INC	B
 4836+1CEE 18 01        		JR	l1cf1		; (1)
 4837+1CF0
 4838+1CF0 05           l1cf0:		DEC	B
 4839+1CF1
 4840+1CF1 D5           l1cf1:		PUSH	DE
 4841+1CF2 EF           		RST	28H
 4842+1CF3 9B 0E        		DW	o0E9B
 4843+1CF5 D1           		DB	$D1
 4844+1CF6 79           		LD	A,C
 4845+1CF7 0E 20        		LD	C,$20
 4846+1CF9 06 08        		LD	B,$08
 4847+1CFB
 4848+1CFB C5           l1cfb:		PUSH	BC
 4849+1CFC E5           		PUSH	HL
 4850+1CFD D5           		PUSH	DE
 4851+1CFE 06 00        		LD	B,$00
 4852+1D00 ED B0        		LDIR
 4853+1D02 D1           		POP	DE
 4854+1D03 E1           		POP	HL
 4855+1D04 C1           		POP	BC
 4856+1D05 24           		INC	H
 4857+1D06 14           		INC	D
 4858+1D07 10 F2        		DJNZ	l1cfb		; (-14)
 4859+1D09 F5           		PUSH	AF
 4860+1D0A D5           		PUSH	DE
 4861+1D0B EF           		RST	28H
 4862+1D0C 88 0E        		DW	o0E88
 4863+1D0E EB           		DB	$EB
 4864+1D0F E3           		EX	(SP),HL
 4865+1D10 EF           		RST	28H
 4866+1D11 88 0E        		DW	o0E88
 4867+1D13 EB           		DB	$EB
 4868+1D14 E3           		EX	(SP),HL
 4869+1D15 D1           		POP	DE
 4870+1D16 01 20 00     		LD	BC,$0020
 4871+1D19 ED B0        		LDIR
 4872+1D1B F1           		POP	AF
 4873+1D1C C1           		POP	BC
 4874+1D1D A7           		AND	A
 4875+1D1E 28 03        		JR	Z,l1d23		; (3)
 4876+1D20 04           		INC	B
 4877+1D21 18 01        		JR	l1d24		; (1)
 4878+1D23
 4879+1D23 05           l1d23:		DEC	B
 4880+1D24
 4881+1D24 0D           l1d24:		DEC	C
 4882+1D25 67           		LD	H,A
 4883+1D26 20 BB        		JR	NZ,l1ce3	; (-69)
 4884+1D28 D1           		POP	DE
 4885+1D29 43           		LD	B,E
 4886+1D2A
 4887+1D2A E1           l1d2a:		POP	HL
 4888+1D2B
 4889+1D2B CD C5 1D     l1d2b:		CALL	l1dc5		; swap editor/BASIC colours & P_FLAG
 4890+1D2E EB           		EX	DE,HL
 4891+1D2F 3A 3C 5C     		LD	A,(	$5C3C)
 4892+1D32 F5           		PUSH	AF
 4893+1D33 21 0D EC     		LD	HL,$EC0D
 4894+1D36 CB 76        		BIT	6,(HL)
 4895+1D38 CB 87        		res	0,A
 4896+1D3A 28 02        		JR	Z,l1d3e		; (2)
 4897+1D3C CB C7        		SET	0,A
 4898+1D3E
 4899+1D3E 32 3C 5C     l1d3e:		LD	(	$5C3C),A
 4900+1D41 0E 00        		LD	C,$00
 4901+1D43 CD 1D 19     		CALL	l191d
 4902+1D46 EB           		EX	DE,HL
 4903+1D47 06 20        		LD	B,$20
 4904+1D49
 4905+1D49 7E           l1d49:		LD	A,(HL)
 4906+1D4A A7           		AND	A
 4907+1D4B 20 02        		JR	NZ,l1d4f	; (2)
 4908+1D4D 3E 20        		LD	A,$20
 4909+1D4F
 4910+1D4F FE 90        l1d4f:		CP	$90
 4911+1D51 30 0F        		JR	NC,l1d62	; (15)
 4912+1D53 EF           		RST	28H
 4913+1D54 10 00        		DW	$0010
 4914+1D56
 4915+1D56 23           l1d56:		INC	HL
 4916+1D57 10 F0        		DJNZ	l1d49		; (-16)
 4917+1D59 F1           		POP	AF
 4918+1D5A 32 3C 5C     		LD	(	$5C3C),A
 4919+1D5D CD C5 1D     		CALL	l1dc5		; swap editor/BASIC colours & P_FLAG
 4920+1D60 37           		SCF
 4921+1D61 C9           		RET
 4922+1D62
 4923+1D62 CD A7 05     l1d62:		CALL	l05a7
 4924+1D65 D7           		RST	10H
 4925+1D66 CD CC 05     		CALL	l05cc
 4926+1D69 18 EB        		JR	l1d56		; (-21)
 4927+1D6B
 4928+1D6B              ; Subroutine to clear an area of screen to the editor's colours
 4929+1D6B              ; On entry, B=first line number and D=last line number (0...23)
 4930+1D6B
 4931+1D6B CD C5 1D     l1d6b:		CALL	l1dc5		; swap editor/BASIC colours & P_FLAG
 4932+1D6E 7A           		LD	A,D
 4933+1D6F 90           		SUB	B
 4934+1D70 3C           		INC	A
 4935+1D71 4F           		LD	C,A		; C=number of lines to clear
 4936+1D72 CD A5 1D     		CALL	l1da5		; convert line number as required by ROM 3
 4937+1D75 C5           l1d75:		PUSH	BC
 4938+1D76 EF           		RST	28H
 4939+1D77 9B 0E        		DW	o0E9B		; get HL=address of line B in display file
 4940+1D79 0E 08        		LD	C,$08		; 8 pixel lines per character
 4941+1D7B E5           l1d7b:		PUSH	HL
 4942+1D7C 06 20        		LD	B,$20		; 32 characters per line
 4943+1D7E AF           		XOR	A
 4944+1D7F 77           l1d7f:		LD	(HL),A		; clear a pixel line of a character
 4945+1D80 23           		INC	HL
 4946+1D81 10 FC        		DJNZ	l1d7f		; back for rest of line
 4947+1D83 E1           		POP	HL
 4948+1D84 24           		INC	H
 4949+1D85 0D           		DEC	C
 4950+1D86 20 F3        		JR	NZ,l1d7b	; back for rest of pixel lines
 4951+1D88 06 20        		LD	B,$20
 4952+1D8A C5           		PUSH	BC
 4953+1D8B EF           		RST	28H
 4954+1D8C 88 0E        		DW	o0E88		; get attribute address
 4955+1D8E EB           		EX	DE,HL
 4956+1D8F C1           		POP	BC
 4957+1D90 3A 8D 5C     		LD	A,(	$5C8D)
 4958+1D93 77           l1d93:		LD	(HL),A		; clear attributes to editor's ATTR_P
 4959+1D94 23           		INC	HL
 4960+1D95 10 FC        		DJNZ	l1d93		; for rest of line
 4961+1D97 C1           		POP	BC
 4962+1D98 05           		DEC	B		; next line
 4963+1D99 0D           		DEC	C		; decrement counter
 4964+1D9A 20 D9        		JR	NZ,l1d75	; back for more
 4965+1D9C CD C5 1D     		CALL	l1dc5		; swap editor/BASIC colours & P_FLAG
 4966+1D9F 37           		SCF
 4967+1DA0 C9           		RET
 4968+1DA1
 4969+1DA1              ; Subroutine to convert line numbers and column numbers as required
 4970+1DA1              ; by certain ROM 3 routines
 4971+1DA1
 4972+1DA1 3E 21        l1da1:		LD	A,$21
 4973+1DA3 91           		SUB	C
 4974+1DA4 4F           		LD	C,A		; C=33-oldC
 4975+1DA5 3E 18        l1da5:		LD	A,$18
 4976+1DA7 90           		SUB	B
 4977+1DA8 DD 96 01     		SUB	(IX+$01)
 4978+1DAB 47           		LD	B,A		; B=24-oldB-??
 4979+1DAC C9           		RET
 4980+1DAD
 4981+1DAD              ; Subroutine to get attribute address for line B, column C into HL
 4982+1DAD
 4983+1DAD C5           l1dad:		PUSH	BC
 4984+1DAE AF           		XOR	A
 4985+1DAF 50           		LD	D,B
 4986+1DB0 5F           		LD	E,A
 4987+1DB1 CB 1A        		RR	D
 4988+1DB3 CB 1B        		RR	E
 4989+1DB5 CB 1A        		RR	D
 4990+1DB7 CB 1B        		RR	E
 4991+1DB9 CB 1A        		RR	D
 4992+1DBB CB 1B        		RR	E		; DE=B*32
 4993+1DBD 21 00 58     		LD	HL,$5800	; start of attribs
 4994+1DC0 47           		LD	B,A
 4995+1DC1 09           		ADD	HL,BC
 4996+1DC2 19           		ADD	HL,DE		; form address
 4997+1DC3 C1           		POP	BC
 4998+1DC4 C9           		RET
 4999+1DC5
 5000+1DC5              ; Subroutine to swap some system variables with copies in page 7, allowing
 5001+1DC5              ; BASIC & the editor to use different values for colours etc
 5002+1DC5
 5003+1DC5 F5           l1dc5:		PUSH	AF		; save registers
 5004+1DC6 E5           		PUSH	HL
 5005+1DC7 D5           		PUSH	DE
 5006+1DC8 2A 8D 5C     		LD	HL,(	$5C8D)	; swap permanent & temporary colours with
 5007+1DCB ED 5B 8F 5C  		LD	DE,(	$5C8F)	; editor ones
 5008+1DCF D9           		EXX
 5009+1DD0 2A 0F EC     		LD	HL,($EC0F		)
 5010+1DD3 ED 5B 11 EC  		LD	DE,($EC11		)
 5011+1DD7 22 8D 5C     		LD	(	$5C8D),HL
 5012+1DDA ED 53 8F 5C  		LD	(	$5C8F),DE
 5013+1DDE D9           		EXX
 5014+1DDF 22 0F EC     		LD	($EC0F		),HL
 5015+1DE2 ED 53 11 EC  		LD	($EC11		),DE
 5016+1DE6 21 13 EC     		LD	HL,$EC13			; swap P_FLAG with editor one
 5017+1DE9 3A 91 5C     		LD	A,(	$5C91)
 5018+1DEC 56           		LD	D,(HL)
 5019+1DED 77           		LD	(HL),A
 5020+1DEE 7A           		LD	A,D
 5021+1DEF 32 91 5C     		LD	(	$5C91),A
 5022+1DF2 D1           		POP	DE		; restore registers
 5023+1DF3 E1           		POP	HL
 5024+1DF4 F1           		POP	AF
 5025+1DF5 C9           		RET
 5026+1DF6
 5027+1DF6 3E 01        l1df6:		LD	A,$01
 5028+1DF8 18 02        		JR	l1dfc		; (2)
 5029+1DFA
 5030+1DFA 3E 00        l1dfa:		LD	A,$00
 5031+1DFC
 5032+1DFC 32 B6 FD     l1dfc:		LD	($FDB6),A
 5033+1DFF 21 00 00     		LD	HL,$0000
 5034+1E02 22 B1 FD     		LD	($FDB1),HL
 5035+1E05 22 B3 FD     		LD	($FDB3),HL
 5036+1E08 39           		ADD	HL,SP
 5037+1E09 22 B7 FD     		LD	($FDB7),HL
 5038+1E0C CD E4 15     		CALL	l15e4
 5039+1E0F 3E 00        		LD	A,$00
 5040+1E11 32 B0 FD     		LD	($FDB0),A
 5041+1E14 21 A0 FD     		LD	HL,$FDA0
 5042+1E17 22 A9 FD     		LD	($FDA9),HL
 5043+1E1A CD A7 05     		CALL	l05a7
 5044+1E1D EF           		RST	28H
 5045+1E1E B0 16        		DW	o16B0
 5046+1E20 CD CC 05     		CALL	l05cc
 5047+1E23 3E 00        		LD	A,$00
 5048+1E25 32 AD FD     		LD	($FDAD),A
 5049+1E28 2A 59 5C     		LD	HL,(	$5C59)
 5050+1E2B 22 AE FD     		LD	($FDAE),HL
 5051+1E2E 21 00 00     		LD	HL,$0000
 5052+1E31 22 AB FD     		LD	($FDAB),HL
 5053+1E34
 5054+1E34 2A B1 FD     l1e34:		LD	HL,($FDB1)
 5055+1E37 23           		INC	HL
 5056+1E38 22 B1 FD     		LD	($FDB1),HL
 5057+1E3B CD 30 1F     		CALL	l1f30
 5058+1E3E 4F           		LD	C,A
 5059+1E3F 3A AD FD     		LD	A,($FDAD)
 5060+1E42 FE 00        		CP	$00
 5061+1E44 20 41        		JR	NZ,l1e87	; (65)
 5062+1E46
 5063+1E46 79           l1e46:		LD	A,C
 5064+1E47 E6 04        		AND	$04
 5065+1E49 28 35        		JR	Z,l1e80		; (53)
 5066+1E4B
 5067+1E4B CD 7C 1F     l1e4b:		CALL	l1f7c
 5068+1E4E 30 07        		JR	NC,l1e57	; (7)
 5069+1E50 3E 01        		LD	A,$01
 5070+1E52 32 AD FD     		LD	($FDAD),A
 5071+1E55 18 DD        		JR	l1e34		; (-35)
 5072+1E57
 5073+1E57 2A AB FD     l1e57:		LD	HL,($FDAB)
 5074+1E5A 7D           		LD	A,L
 5075+1E5B B4           		OR	H
 5076+1E5C C2 B1 1E     		JP	NZ,l1eb1
 5077+1E5F
 5078+1E5F C5           l1e5f:		PUSH	BC
 5079+1E60 CD 60 1F     		CALL	l1f60
 5080+1E63 C1           		POP	BC
 5081+1E64 3E 00        		LD	A,$00
 5082+1E66 32 AD FD     		LD	($FDAD),A
 5083+1E69
 5084+1E69 79           l1e69:		LD	A,C
 5085+1E6A E6 01        		AND	$01
 5086+1E6C 20 D8        		JR	NZ,l1e46	; (-40)
 5087+1E6E 78           		LD	A,B
 5088+1E6F CD A9 1F     		CALL	l1fa9
 5089+1E72 D0           		RET	NC
 5090+1E73 2A B1 FD     		LD	HL,($FDB1)
 5091+1E76 23           		INC	HL
 5092+1E77 22 B1 FD     		LD	($FDB1),HL
 5093+1E7A CD 30 1F     		CALL	l1f30
 5094+1E7D 4F           		LD	C,A
 5095+1E7E 18 E9        		JR	l1e69		; (-23)
 5096+1E80
 5097+1E80 78           l1e80:		LD	A,B
 5098+1E81 CD A9 1F     		CALL	l1fa9
 5099+1E84 D0           		RET	NC
 5100+1E85 18 AD        		JR	l1e34		; (-83)
 5101+1E87
 5102+1E87 FE 01        l1e87:		CP	$01
 5103+1E89 20 F5        		JR	NZ,l1e80	; (-11)
 5104+1E8B 79           		LD	A,C
 5105+1E8C E6 01        		AND	$01
 5106+1E8E 28 BB        		JR	Z,l1e4b		; (-69)
 5107+1E90 C5           		PUSH	BC
 5108+1E91
 5109+1E91 CD 13 21     l1e91:		CALL	l2113
 5110+1E94 C1           		POP	BC
 5111+1E95 38 79        		JR	C,l1f10		; (121)
 5112+1E97 2A AB FD     		LD	HL,($FDAB)
 5113+1E9A 7C           		LD	A,H
 5114+1E9B B5           		OR	L
 5115+1E9C 20 13        		JR	NZ,l1eb1	; (19)
 5116+1E9E 79           		LD	A,C
 5117+1E9F E6 02        		AND	$02
 5118+1EA1 28 BC        		JR	Z,l1e5f		; (-68)
 5119+1EA3 CD 7C 1F     		CALL	l1f7c
 5120+1EA6 30 AF        		JR	NC,l1e57	; (-81)
 5121+1EA8 2A A9 FD     		LD	HL,($FDA9)
 5122+1EAB 2B           		DEC	HL
 5123+1EAC 22 AB FD     		LD	($FDAB),HL
 5124+1EAF 18 83        		JR	l1e34		; (-125)
 5125+1EB1
 5126+1EB1 C5           l1eb1:		PUSH	BC
 5127+1EB2 21 A0 FD     		LD	HL,$FDA0
 5128+1EB5 ED 5B AB FD  		LD	DE,($FDAB)
 5129+1EB9 7A           		LD	A,D
 5130+1EBA BC           		CP	H
 5131+1EBB 20 05        		JR	NZ,l1ec2	; (5)
 5132+1EBD 7B           		LD	A,E
 5133+1EBE BD           		CP	L
 5134+1EBF 20 01        		JR	NZ,l1ec2	; (1)
 5135+1EC1 13           		INC	DE
 5136+1EC2
 5137+1EC2 1B           l1ec2:		DEC	DE
 5138+1EC3 18 01        		JR	l1ec6		; (1)
 5139+1EC5
 5140+1EC5 23           l1ec5:		INC	HL
 5141+1EC6
 5142+1EC6 7E           l1ec6:		LD	A,(HL)
 5143+1EC7 E6 7F        		AND	$7F
 5144+1EC9 E5           		PUSH	HL
 5145+1ECA D5           		PUSH	DE
 5146+1ECB CD A9 1F     		CALL	l1fa9
 5147+1ECE D1           		POP	DE
 5148+1ECF E1           		POP	HL
 5149+1ED0 7C           		LD	A,H
 5150+1ED1 BA           		CP	D
 5151+1ED2 20 F1        		JR	NZ,l1ec5	; (-15)
 5152+1ED4 7D           		LD	A,L
 5153+1ED5 BB           		CP	E
 5154+1ED6 20 ED        		JR	NZ,l1ec5	; (-19)
 5155+1ED8 ED 5B AB FD  		LD	DE,($FDAB)
 5156+1EDC 21 A0 FD     		LD	HL,$FDA0
 5157+1EDF 22 AB FD     		LD	($FDAB),HL
 5158+1EE2 ED 4B A9 FD  		LD	BC,($FDA9)
 5159+1EE6 0B           		DEC	BC
 5160+1EE7 7A           		LD	A,D
 5161+1EE8 BC           		CP	H
 5162+1EE9 20 18        		JR	NZ,l1f03	; (24)
 5163+1EEB 7B           		LD	A,E
 5164+1EEC BD           		CP	L
 5165+1EED 20 14        		JR	NZ,l1f03	; (20)
 5166+1EEF 13           		INC	DE
 5167+1EF0 E5           		PUSH	HL
 5168+1EF1 21 00 00     		LD	HL,$0000
 5169+1EF4 22 AB FD     		LD	($FDAB),HL
 5170+1EF7 E1           		POP	HL
 5171+1EF8 78           		LD	A,B
 5172+1EF9 BC           		CP	H
 5173+1EFA 20 07        		JR	NZ,l1f03	; (7)
 5174+1EFC 79           		LD	A,C
 5175+1EFD BD           		CP	L
 5176+1EFE 20 03        		JR	NZ,l1f03	; (3)
 5177+1F00 C1           		POP	BC
 5178+1F01 18 1F        		JR	l1f22		; (31)
 5179+1F03
 5180+1F03 1A           l1f03:		LD	A,(DE)
 5181+1F04 77           		LD	(HL),A
 5182+1F05 23           		INC	HL
 5183+1F06 13           		INC	DE
 5184+1F07 E6 80        		AND	$80
 5185+1F09 28 F8        		JR	Z,l1f03		; (-8)
 5186+1F0B 22 A9 FD     		LD	($FDA9),HL
 5187+1F0E 18 81        		JR	l1e91		; (-127)
 5188+1F10
 5189+1F10 C5           l1f10:		PUSH	BC
 5190+1F11 CD A9 1F     		CALL	l1fa9
 5191+1F14 C1           		POP	BC
 5192+1F15 21 00 00     		LD	HL,$0000
 5193+1F18 22 AB FD     		LD	($FDAB),HL
 5194+1F1B 3A AD FD     		LD	A,($FDAD)
 5195+1F1E FE 04        		CP	$04
 5196+1F20 28 05        		JR	Z,l1f27		; (5)
 5197+1F22
 5198+1F22 3E 00        l1f22:		LD	A,$00
 5199+1F24 32 AD FD     		LD	($FDAD),A
 5200+1F27
 5201+1F27 21 A0 FD     l1f27:		LD	HL,$FDA0
 5202+1F2A 22 A9 FD     		LD	($FDA9),HL
 5203+1F2D C3 46 1E     		JP	l1e46
 5204+1F30
 5205+1F30 CD 22 0E     l1f30:		CALL	l0e22
 5206+1F33 47           		LD	B,A
 5207+1F34 FE 3F        		CP	$3F
 5208+1F36 38 0A        		JR	C,l1f42		; (10)
 5209+1F38 F6 20        		OR	$20
 5210+1F3A CD 59 1F     		CALL	l1f59
 5211+1F3D 38 17        		JR	C,l1f56		; (23)
 5212+1F3F
 5213+1F3F 3E 01        l1f3f:		LD	A,$01
 5214+1F41 C9           		RET
 5215+1F42
 5216+1F42 FE 20        l1f42:		CP	$20
 5217+1F44 28 0D        		JR	Z,l1f53		; (13)
 5218+1F46 FE 23        		CP	$23
 5219+1F48 28 06        		JR	Z,l1f50		; (6)
 5220+1F4A 38 F3        		JR	C,l1f3f		; (-13)
 5221+1F4C FE 24        		CP	$24
 5222+1F4E 20 EF        		JR	NZ,l1f3f	; (-17)
 5223+1F50
 5224+1F50 3E 02        l1f50:		LD	A,$02
 5225+1F52 C9           		RET
 5226+1F53
 5227+1F53 3E 03        l1f53:		LD	A,$03
 5228+1F55 C9           		RET
 5229+1F56
 5230+1F56 3E 06        l1f56:		LD	A,$06
 5231+1F58 C9           		RET
 5232+1F59
 5233+1F59 FE 7B        l1f59:		CP	$7B
 5234+1F5B D0           		RET	NC
 5235+1F5C FE 61        		CP	$61
 5236+1F5E 3F           		CCF
 5237+1F5F C9           		RET
 5238+1F60
 5239+1F60 21 A0 FD     l1f60:		LD	HL,$FDA0
 5240+1F63 22 A9 FD     		LD	($FDA9),HL
 5241+1F66 97           		SUB	A
 5242+1F67 32 AB FD     		LD	($FDAB),A
 5243+1F6A 32 AC FD     		LD	($FDAC),A
 5244+1F6D
 5245+1F6D 7E           l1f6d:		LD	A,(HL)
 5246+1F6E E6 7F        		AND	$7F
 5247+1F70 E5           		PUSH	HL
 5248+1F71 CD A9 1F     		CALL	l1fa9
 5249+1F74 E1           		POP	HL
 5250+1F75 7E           		LD	A,(HL)
 5251+1F76 E6 80        		AND	$80
 5252+1F78 C0           		RET	NZ
 5253+1F79 23           		INC	HL
 5254+1F7A 18 F1        		JR	l1f6d		; (-15)
 5255+1F7C
 5256+1F7C 2A A9 FD     l1f7c:		LD	HL,($FDA9)
 5257+1F7F 11 A9 FD     		LD	DE,$FDA9
 5258+1F82 7A           		LD	A,D
 5259+1F83 BC           		CP	H
 5260+1F84 20 05        		JR	NZ,l1f8b	; (5)
 5261+1F86 7B           		LD	A,E
 5262+1F87 BD           		CP	L
 5263+1F88 CA A6 1F     		JP	Z,l1fa6
 5264+1F8B
 5265+1F8B 11 A0 FD     l1f8b:		LD	DE,$FDA0
 5266+1F8E 7A           		LD	A,D
 5267+1F8F BC           		CP	H
 5268+1F90 20 04        		JR	NZ,l1f96	; (4)
 5269+1F92 7B           		LD	A,E
 5270+1F93 BD           		CP	L
 5271+1F94 28 06        		JR	Z,l1f9c		; (6)
 5272+1F96
 5273+1F96 2B           l1f96:		DEC	HL
 5274+1F97 7E           		LD	A,(HL)
 5275+1F98 E6 7F        		AND	$7F
 5276+1F9A 77           		LD	(HL),A
 5277+1F9B 23           		INC	HL
 5278+1F9C
 5279+1F9C 78           l1f9c:		LD	A,B
 5280+1F9D F6 80        		OR	$80
 5281+1F9F 77           		LD	(HL),A
 5282+1FA0 23           		INC	HL
 5283+1FA1 22 A9 FD     		LD	($FDA9),HL
 5284+1FA4 37           		SCF
 5285+1FA5 C9           		RET
 5286+1FA6
 5287+1FA6 37           l1fa6:		SCF
 5288+1FA7 3F           		CCF
 5289+1FA8 C9           		RET
 5290+1FA9
 5291+1FA9 F5           l1fa9:		PUSH	AF
 5292+1FAA 3A B5 FD     		LD	A,($FDB5)
 5293+1FAD B7           		OR	A
 5294+1FAE 20 12        		JR	NZ,l1fc2	; (18)
 5295+1FB0 F1           		POP	AF
 5296+1FB1 FE 3E        		CP	$3E
 5297+1FB3 28 08        		JR	Z,l1fbd		; (8)
 5298+1FB5 FE 3C        		CP	$3C
 5299+1FB7 28 04        		JR	Z,l1fbd		; (4)
 5300+1FB9
 5301+1FB9 CD F7 1F     l1fb9:		CALL	l1ff7
 5302+1FBC C9           		RET
 5303+1FBD
 5304+1FBD 32 B5 FD     l1fbd:		LD	($FDB5),A
 5305+1FC0 37           		SCF
 5306+1FC1 C9           		RET
 5307+1FC2
 5308+1FC2 FE 3C        l1fc2:		CP	$3C
 5309+1FC4 3E 00        		LD	A,$00
 5310+1FC6 32 B5 FD     		LD	($FDB5),A
 5311+1FC9 20 1A        		JR	NZ,l1fe5	; (26)
 5312+1FCB F1           		POP	AF
 5313+1FCC FE 3E        		CP	$3E
 5314+1FCE 20 04        		JR	NZ,l1fd4	; (4)
 5315+1FD0 3E C9        		LD	A,$C9
 5316+1FD2 18 E5        		JR	l1fb9		; (-27)
 5317+1FD4
 5318+1FD4 FE 3D        l1fd4:		CP	$3D
 5319+1FD6 20 04        		JR	NZ,l1fdc	; (4)
 5320+1FD8 3E C7        		LD	A,$C7
 5321+1FDA 18 DD        		JR	l1fb9		; (-35)
 5322+1FDC
 5323+1FDC F5           l1fdc:		PUSH	AF
 5324+1FDD 3E 3C        		LD	A,$3C
 5325+1FDF CD F7 1F     		CALL	l1ff7
 5326+1FE2 F1           		POP	AF
 5327+1FE3 18 D4        		JR	l1fb9		; (-44)
 5328+1FE5
 5329+1FE5 F1           l1fe5:		POP	AF
 5330+1FE6 FE 3D        		CP	$3D
 5331+1FE8 20 04        		JR	NZ,l1fee	; (4)
 5332+1FEA 3E C8        		LD	A,$C8
 5333+1FEC 18 CB        		JR	l1fb9		; (-53)
 5334+1FEE
 5335+1FEE F5           l1fee:		PUSH	AF
 5336+1FEF 3E 3E        		LD	A,$3E
 5337+1FF1 CD F7 1F     		CALL	l1ff7
 5338+1FF4 F1           		POP	AF
 5339+1FF5 18 C2        		JR	l1fb9		; (-62)
 5340+1FF7
 5341+1FF7 FE 0D        l1ff7:		CP	$0D
 5342+1FF9 28 20        		JR	Z,l201b		; (32)
 5343+1FFB FE EA        		CP	$EA
 5344+1FFD 47           		LD	B,A
 5345+1FFE 20 07        		JR	NZ,l2007	; (7)
 5346+2000 3E 04        		LD	A,$04
 5347+2002 32 AD FD     		LD	($FDAD),A
 5348+2005 18 0E        		JR	l2015		; (14)
 5349+2007
 5350+2007 FE 22        l2007:		CP	$22
 5351+2009 20 0A        		JR	NZ,l2015	; (10)
 5352+200B 3A AD FD     		LD	A,($FDAD)
 5353+200E E6 FE        		AND	$FE
 5354+2010 EE 02        		XOR	$02
 5355+2012 32 AD FD     		LD	($FDAD),A
 5356+2015
 5357+2015 78           l2015:		LD	A,B
 5358+2016 CD 2F 20     		CALL	l202f
 5359+2019 37           		SCF
 5360+201A C9           		RET
 5361+201B
 5362+201B 3A B6 FD     l201b:		LD	A,($FDB6)
 5363+201E FE 00        		CP	$00
 5364+2020 28 0A        		JR	Z,l202c		; (10)
 5365+2022 ED 4B B1 FD  		LD	BC,($FDB1)
 5366+2026 2A B7 FD     		LD	HL,($FDB7)
 5367+2029 F9           		LD	SP,HL
 5368+202A 37           		SCF
 5369+202B C9           		RET
 5370+202C
 5371+202C 37           l202c:		SCF
 5372+202D 3F           		CCF
 5373+202E C9           		RET
 5374+202F
 5375+202F 5F           l202f:		LD	E,A
 5376+2030 3A B0 FD     		LD	A,($FDB0)
 5377+2033 57           		LD	D,A
 5378+2034 7B           		LD	A,E
 5379+2035 FE 20        		CP	$20
 5380+2037 20 20        		JR	NZ,l2059	; (32)
 5381+2039 7A           		LD	A,D
 5382+203A E6 01        		AND	$01
 5383+203C 20 14        		JR	NZ,l2052	; (20)
 5384+203E 7A           		LD	A,D
 5385+203F E6 02        		AND	$02
 5386+2041 20 07        		JR	NZ,l204a	; (7)
 5387+2043 7A           		LD	A,D
 5388+2044 F6 02        		OR	$02
 5389+2046 32 B0 FD     		LD	($FDB0),A
 5390+2049 C9           		RET
 5391+204A
 5392+204A 7B           l204a:		LD	A,E
 5393+204B CD 8E 20     		CALL	l208e
 5394+204E 3A B0 FD     		LD	A,($FDB0)
 5395+2051 C9           		RET
 5396+2052
 5397+2052 7A           l2052:		LD	A,D
 5398+2053 E6 FE        		AND	$FE
 5399+2055 32 B0 FD     		LD	($FDB0),A
 5400+2058 C9           		RET
 5401+2059
 5402+2059 FE A3        l2059:		CP	$A3
 5403+205B 30 24        		JR	NC,l2081	; (36)
 5404+205D 7A           		LD	A,D
 5405+205E E6 02        		AND	$02
 5406+2060 20 0B        		JR	NZ,l206d	; (11)
 5407+2062 7A           		LD	A,D
 5408+2063 E6 FE        		AND	$FE
 5409+2065 32 B0 FD     		LD	($FDB0),A
 5410+2068 7B           		LD	A,E
 5411+2069 CD 8E 20     		CALL	l208e
 5412+206C C9           		RET
 5413+206D
 5414+206D D5           l206d:		PUSH	DE
 5415+206E 3E 20        		LD	A,$20
 5416+2070 CD 8E 20     		CALL	l208e
 5417+2073 D1           		POP	DE
 5418+2074 7A           		LD	A,D
 5419+2075 E6 FE        		AND	$FE
 5420+2077 E6 FD        		AND	$FD
 5421+2079 32 B0 FD     		LD	($FDB0),A
 5422+207C 7B           		LD	A,E
 5423+207D CD 8E 20     		CALL	l208e
 5424+2080 C9           		RET
 5425+2081
 5426+2081 7A           l2081:		LD	A,D
 5427+2082 E6 FD        		AND	$FD
 5428+2084 F6 01        		OR	$01
 5429+2086 32 B0 FD     		LD	($FDB0),A
 5430+2089 7B           		LD	A,E
 5431+208A CD 8E 20     		CALL	l208e
 5432+208D C9           		RET
 5433+208E
 5434+208E 2A B3 FD     l208e:		LD	HL,($FDB3)
 5435+2091 23           		INC	HL
 5436+2092 22 B3 FD     		LD	($FDB3),HL
 5437+2095 2A AE FD     		LD	HL,($FDAE)
 5438+2098 47           		LD	B,A
 5439+2099 3A B6 FD     		LD	A,($FDB6)
 5440+209C FE 00        		CP	$00
 5441+209E 78           		LD	A,B
 5442+209F 28 25        		JR	Z,l20c6		; (37)
 5443+20A1 ED 5B 5F 5C  		LD	DE,(	$5C5F)
 5444+20A5 7C           		LD	A,H
 5445+20A6 BA           		CP	D
 5446+20A7 20 1A        		JR	NZ,l20c3	; (26)
 5447+20A9 7D           		LD	A,L
 5448+20AA BB           		CP	E
 5449+20AB 20 16        		JR	NZ,l20c3	; (22)
 5450+20AD ED 4B B1 FD  		LD	BC,($FDB1)
 5451+20B1 2A B3 FD     		LD	HL,($FDB3)
 5452+20B4 A7           		AND	A
 5453+20B5 00 00        		DB	0,0
 5454+20B7 30 04        		JR	NC,l20bd	; (4)
 5455+20B9 ED 4B B3 FD  		LD	BC,($FDB3)
 5456+20BD
 5457+20BD 2A B7 FD     l20bd:		LD	HL,($FDB7)
 5458+20C0 F9           		LD	SP,HL
 5459+20C1 37           		SCF
 5460+20C2 C9           		RET
 5461+20C3
 5462+20C3 37           l20c3:		SCF
 5463+20C4 18 02        		JR	l20c8		; (2)
 5464+20C6
 5465+20C6 37           l20c6:		SCF
 5466+20C7 3F           		CCF
 5467+20C8
 5468+20C8 CD A7 05     l20c8:		CALL	l05a7
 5469+20CB 30 0D        		JR	NC,l20da	; (13)
 5470+20CD 7E           		LD	A,(HL)
 5471+20CE EB           		EX	DE,HL
 5472+20CF FE 0E        		CP	$0E
 5473+20D1 20 1D        		JR	NZ,l20f0	; (29)
 5474+20D3 13           		INC	DE
 5475+20D4 13           		INC	DE
 5476+20D5 13           		INC	DE
 5477+20D6 13           		INC	DE
 5478+20D7 13           		INC	DE
 5479+20D8 18 16        		JR	l20f0		; (22)
 5480+20DA
 5481+20DA F5           l20da:		PUSH	AF
 5482+20DB 01 01 00     		LD	BC,$0001
 5483+20DE E5           		PUSH	HL
 5484+20DF D5           		PUSH	DE
 5485+20E0 CD F9 20     		CALL	l20f9
 5486+20E3 D1           		POP	DE
 5487+20E4 E1           		POP	HL
 5488+20E5 EF           		RST	28H
 5489+20E6 64 16        		DW	o1664
 5490+20E8 2A           		DB	$2A
 5491+20E9 65           		LD	H,L
 5492+20EA 5C           		LD	E,H
 5493+20EB EB           		EX	DE,HL
 5494+20EC ED B8        		LDDR
 5495+20EE F1           		POP	AF
 5496+20EF 12           		LD	(DE),A
 5497+20F0
 5498+20F0 13           l20f0:		INC	DE
 5499+20F1 CD CC 05     		CALL	l05cc
 5500+20F4 ED 53 AE FD  		LD	($FDAE),DE
 5501+20F8 C9           		RET
 5502+20F9
 5503+20F9 2A 65 5C     l20f9:		LD	HL,(	$5C65)
 5504+20FC 09           		ADD	HL,BC
 5505+20FD 38 0A        		JR	C,l2109		; (10)
 5506+20FF EB           		EX	DE,HL
 5507+2100 21 82 00     		LD	HL,$0082
 5508+2103 19           		ADD	HL,DE
 5509+2104 38 03        		JR	C,l2109		; (3)
 5510+2106 ED 72        		SBC	HL,SP
 5511+2108 D8           		RET	C
 5512+2109
 5513+2109 3E 03        l2109:		LD	A,$03
 5514+210B 32 3A 5C     		LD	(	$5C3A),A
 5515+210E CD 80 3E     		CALL	l3e80
 5516+2111 CB 25        		DW	m25cb
 5517+2113 CD 2D 14     l2113:		CALL	l142d
 5518+2116 CD 43 FD     		CALL	$FD43
 5519+2119 D8           		RET	C
 5520+211A 06 F9        		LD	B,$F9
 5521+211C 11 A0 FD     		LD	DE,$FDA0
 5522+211F 21 8E 16     		LD	HL,l168e
 5523+2122 CD 5C FD     		CALL	$FD5C
 5524+2125 D0           		RET	NC
 5525+2126 FE FF        		CP	$FF
 5526+2128 20 04        		JR	NZ,l212e	; (4)
 5527+212A 3E D4        		LD	A,$D4
 5528+212C 18 22        		JR	l2150		; (34)
 5529+212E
 5530+212E FE FE        l212e:		CP	$FE
 5531+2130 20 04        		JR	NZ,l2136	; (4)
 5532+2132 3E D3        		LD	A,$D3
 5533+2134 18 1A        		JR	l2150		; (26)
 5534+2136
 5535+2136 FE FD        l2136:		CP	$FD
 5536+2138 20 04        		JR	NZ,l213e	; (4)
 5537+213A 3E CE        		LD	A,$CE
 5538+213C 18 12        		JR	l2150		; (18)
 5539+213E
 5540+213E FE FC        l213e:		CP	$FC
 5541+2140 20 04        		JR	NZ,l2146	; (4)
 5542+2142 3E ED        		LD	A,$ED
 5543+2144 18 0A        		JR	l2150		; (10)
 5544+2146
 5545+2146 FE FB        l2146:		CP	$FB
 5546+2148 20 04        		JR	NZ,l214e	; (4)
 5547+214A 3E EC        		LD	A,$EC
 5548+214C 18 02        		JR	l2150		; (2)
 5549+214E
 5550+214E D6 56        l214e:		SUB	$56
 5551+2150
 5552+2150 37           l2150:		SCF
 5553+2151 C9           		RET
 5554+2152
 5555+2152              ; Subroutine to transfer a counted string (minus count) from (HL) to (DE)
 5556+2152
 5557+2152 46           l2152:		LD	B,(HL)		; get count
 5558+2153 23           		INC	HL
 5559+2154 7E           l2154:		LD	A,(HL)
 5560+2155 12           		LD	(DE),A		; transfer a byte
 5561+2156 13           		INC	DE
 5562+2157 23           		INC	HL
 5563+2158 10 FA        		DJNZ	l2154		; back for more
 5564+215A C9           		RET
 5565+215B
 5566+215B              ; Subroutine to check if char in A is a digit. If so, carry set & A=value
 5567+215B
 5568+215B FE 30        l215b:		CP	"0"
 5569+215D 3F           		CCF
 5570+215E D0           		RET	NC		; exit if less than "0"
 5571+215F FE 3A        		CP	":"
 5572+2161 D0           		RET	NC		; or if > "9"
 5573+2162 D6 30        		SUB	"0"		; convert to value
 5574+2164 37           		SCF			; success
 5575+2165 C9           		RET
 5576+2166
 5577+2166              ; Subroutine to perform a routine found with a table lookup
 5578+2166              ; The value to look for is in A, and the table address is in HL
 5579+2166              ; The table consists of:
 5580+2166              ;   a number of entries byte
 5581+2166              ;   for each entry: a value byte followed by a routine address
 5582+2166              ; When a match is found, the routine is called. A is tested for
 5583+2166              ; zero before returning, carry status is preserved and should be
 5584+2166              ; set by the routine if action succeeded.
 5585+2166              ; If no match is found, carry is reset.
 5586+2166
 5587+2166 C5           l2166:		PUSH	BC		; save registers
 5588+2167 D5           		PUSH	DE
 5589+2168 46           		LD	B,(HL)		; B=# entries in table
 5590+2169 23           		INC	HL
 5591+216A BE           l216a:		CP	(HL)		; check next entry
 5592+216B 23           		INC	HL
 5593+216C 5E           		LD	E,(HL)
 5594+216D 23           		INC	HL
 5595+216E 56           		LD	D,(HL)		; DE=address associated with current entry
 5596+216F 28 08        		JR	Z,l2179		; if match, move on
 5597+2171 23           		INC	HL
 5598+2172 10 F6        		DJNZ	l216a		; loop back for more
 5599+2174 37           		SCF
 5600+2175 3F           		CCF			; clear carry to signal "no match"
 5601+2176 D1           		POP	DE		; restore registers
 5602+2177 C1           		POP	BC
 5603+2178 C9           		RET
 5604+2179 EB           l2179:		EX	DE,HL		; HL=address
 5605+217A D1           		POP	DE		; restore registers
 5606+217B C1           		POP	BC
 5607+217C CD 86 21     		CALL	l2186		; call routine address in HL
 5608+217F 38 02        		JR	C,l2183		; if carry set, go to test A & set carry
 5609+2181 BF           		CP	A		; test A (& clear carry)
 5610+2182 C9           		RET
 5611+2183 BF           l2183:		CP	A		; test A
 5612+2184 37           		SCF			; set carry
 5613+2185 C9           		RET
 5614+2186 E9           l2186:		JP	(HL)
 5615+2187
 5616+2187 F5           l2187:		PUSH	AF
 5617+2188 E5           		PUSH	HL
 5618+2189 3A 8D 5C     		LD	A,(	$5C8D)
 5619+218C F5           		PUSH	AF
 5620+218D 3A 48 5C     		LD	A,(	$5C48)
 5621+2190 32 8D 5C     		LD	(	$5C8D),A
 5622+2193 EF           		RST	28H
 5623+2194 6E 0D        		DW	o0D6E
 5624+2196 3E FD        		LD	A,$FD
 5625+2198 EF           		RST	28H
 5626+2199 01 16        		DW	o1601
 5627+219B F1           		POP	AF
 5628+219C 32 8D 5C     		LD	(	$5C8D),A
 5629+219F E1           		POP	HL
 5630+21A0 7E           l21a0:		LD	A,(HL)
 5631+21A1 23           		INC	HL
 5632+21A2 FE FF        		CP	$FF
 5633+21A4 28 03        		JR	Z,l21a9
 5634+21A6 D7           		RST	10H
 5635+21A7 18 F7        		JR	l21a0
 5636+21A9 F1           l21a9:		POP	AF
 5637+21AA 28 0F        		JR	Z,l21bb
 5638+21AC CD 71 18     		CALL	l1871
 5639+21AF D5           l21af:		PUSH	DE
 5640+21B0 EF           		RST	28H
 5641+21B1 6E 0D        		DW	o0D6E
 5642+21B3 3E FE        		LD	A,$FE
 5643+21B5 EF           		RST	28H
 5644+21B6 01 16        		DW	o1601
 5645+21B8 D1           		POP	DE
 5646+21B9 7B           		LD	A,E
 5647+21BA C9           		RET
 5648+21BB CD 71 18     l21bb:		CALL	l1871
 5649+21BE E6 DF        		AND	$DF
 5650+21C0 1E 00        		LD	E,0
 5651+21C2 FE 43        		CP	$43
 5652+21C4 28 E9        		JR	Z,l21af
 5653+21C6 1C           		INC	E
 5654+21C7 FE 52        		CP	$52
 5655+21C9 28 E4        		JR	Z,l21af
 5656+21CB 1C           		INC	E
 5657+21CC FE 49        		CP	$49
 5658+21CE 28 DF        		JR	Z,l21af
 5659+21D0 18 E9        		JR	l21bb
 5660+21D2
 5661+21D2 62 25        		DW	$2562
 5662+21D4 F1 23        		DW	$23F1
 5663+21D6 BD 24        		DW	$24BD
 5664+21D8 E8 24        		DW	$24E8
 5665+21DA 4B 25        		DW	$254B
 5666+21DC 63 25        		DW	$2563
 5667+21DE 92 26        		DW	$2692
 5668+21E0 49 2A        		DW	o2A49
 5669+21E2 69 25        		DW	$2569
 5670+21E4 84 25        		DW	$2584
 5671+21E6 BE 25        		DW	o25BE
 5672+21E8 DB 25        		DW	o25DB
 5673+21EA EC 25        		DW	$25EC
 5674+21EC 16 2A        		DW	$2A16
 5675+21EE 9F 26        		DW	$269F
 5676+21F0 39 27        		DW	$2739
 5677+21F2 3F 27        		DW	$273F
 5678+21F4 4C 27        		DW	o274C
 5679+21F6 5C 27        		DW	$275C
 5680+21F8 67 27        		DW	$2767
 5681+21FA 72 27        		DW	$2772
 5682+21FC 7D 27        		DW	$277D
 5683+21FE 1C 26        		DW	$261C
 5684+2200 7C 26        		DW	$267C
 5685+2202 B9 2A        		DW	$2AB9
 5686+2204 88 27        		DW	o2788
 5687+2206 A3 26        		DW	$26A3
 5688+2208 93 27        		DW	$2793
 5689+220A AC 27        		DW	$27AC
 5690+220C B7 27        		DW	$27B7
 5691+220E 86 22        		DW	$2286
 5692+2210 96 22        		DW	$2296
 5693+2212 24 26        		DW	$2624
 5694+2214 49 24        		DW	$2449
 5695+2216 62 25        		DW	$2562
 5696+2218 BD 24        		DW	$24BD
 5697+221A E8 24        		DW	$24E8
 5698+221C 4B 25        		DW	$254B
 5699+221E 63 25        		DW	$2563
 5700+2220 62 25        		DW	$2562
 5701+2222 49 2A        		DW	o2A49
 5702+2224 62 25        		DW	$2562
 5703+2226 62 25        		DW	$2562
 5704+2228 BE 25        		DW	o25BE
 5705+222A DB 25        		DW	o25DB
 5706+222C 62 25        		DW	$2562
 5707+222E 23 24        		DW	$2423
 5708+2230 9F 26        		DW	$269F
 5709+2232 39 27        		DW	$2739
 5710+2234 DE 22        		DW	$22DE
 5711+2236 DE 22        		DW	$22DE
 5712+2238 DE 22        		DW	$22DE
 5713+223A DE 22        		DW	$22DE
 5714+223C DE 22        		DW	$22DE
 5715+223E DE 22        		DW	$22DE
 5716+2240 62 25        		DW	$2562
 5717+2242 62 25        		DW	$2562
 5718+2244 DE 22        		DW	$22DE
 5719+2246 62 25        		DW	$2562
 5720+2248 DE 22        		DW	$22DE
 5721+224A DE 22        		DW	$22DE
 5722+224C 62 25        		DW	$2562
 5723+224E DE 22        		DW	$22DE
 5724+2250 54 22        		DW	$2254
 5725+2252 62 25        		DW	$2562
 5726+2254 DD CB 1A FE  l2254:		SET	7, (IX+$1A)	; set freeze flag
 5727+2258 C9           		RET
 5728+2259 2A 51 5C     l2259:		LD	HL,(	$5C51)
 5729+225C 11 4D 00     		LD	DE,77
 5730+225F 19           		ADD	HL,DE
 5731+2260 C9           		RET
 5732+2261 CD 59 22     l2261:		CALL	l2259
 5733+2264 01 FF 00     		LD	BC,$00FF
 5734+2267 DD CB 1C 7E  		BIT	7, (IX+$1C)
 5735+226B C0           		RET	NZ
 5736+226C DD 7E 18     l226c:		LD	A,(IX+$18)
 5737+226F DD CB 1A 66  		BIT	4, (IX+$1A)
 5738+2273 28 02        		JR	Z,l2277
 5739+2275 CB 3F        		SRL	A
 5740+2277 4F           l2277:		LD	C,A
 5741+2278 0C           		INC	C
 5742+2279 C9           		RET
 5743+227A F5           l227a:		PUSH	AF
 5744+227B C5           		PUSH	BC
 5745+227C D5           		PUSH	DE
 5746+227D E5           		PUSH	HL
 5747+227E CD D0 27     		CALL	l27d0
 5748+2281 E1           		POP	HL
 5749+2282 D1           		POP	DE
 5750+2283 C1           		POP	BC
 5751+2284 F1           		POP	AF
 5752+2285 C9           		RET
 5753+2286 E6 03        l2286:		AND	$03
 5754+2288 FE 03        		CP	$03
 5755+228A C8           		RET	Z
 5756+228B 47           		LD	B,A
 5757+228C DD 7E 1C     		LD	A,(IX+$1C)
 5758+228F E6 FC        		AND	$FC
 5759+2291 B0           		OR	B
 5760+2292 DD 77 1C     		LD	(IX+$1C),A
 5761+2295 C9           		RET
 5762+2296 DD CB 1C BE  l2296:		res	7, (IX+$1C)
 5763+229A 1F           		RRA
 5764+229B D0           		RET	NC
 5765+229C DD CB 1C FE  		SET	7, (IX+$1C)
 5766+22A0 C9           		RET
 5767+22A1 DD 2A 51 5C  l22a1:		LD	IX,(	$5C51)
 5768+22A5 DD 77 23     		LD	(IX+$23),A
 5769+22A8 DD CB 1A 56  		BIT	2, (IX+$1A)
 5770+22AC 20 12        		JR	NZ,l22c0
 5771+22AE FE A5        		CP	$A5
 5772+22B0 38 0E        		JR	C,l22c0
 5773+22B2 D6 A5        		SUB	$A5
 5774+22B4 2A 5A 5B     l22b4:		LD	HL,(	$5B5A)
 5775+22B7 E5           		PUSH	HL
 5776+22B8 EF           		RST	28H
 5777+22B9 10 0C        		DW	o0C10
 5778+22BB E1           		POP	HL
 5779+22BC 22 5A 5B     		LD	(	$5B5A),HL
 5780+22BF C9           		RET
 5781+22C0 DD CB 1A 76  l22c0:		BIT	6, (IX+$1A)
 5782+22C4 DD CB 1A B6  		res	6, (IX+$1A)
 5783+22C8 20 2B        		JR	NZ,l22f5
 5784+22CA DD CB 1A 7E  		BIT	7, (IX+$1A)
 5785+22CE DD CB 1A BE  		res	7, (IX+$1A)
 5786+22D2 20 B2        		JR	NZ,l2286
 5787+22D4 FE 20        		CP	$20
 5788+22D6 30 11        		JR	NC,l22e9
 5789+22D8 21 14 22     		LD	HL,$2214
 5790+22DB C3 E4 27     		JP	l27e4
 5791+22DE DD CB 1C 7E  		BIT	7, (IX+$1C)
 5792+22E2 C8           		RET	Z
 5793+22E3 DD CB 1A F6  		SET	6, (IX+$1A)
 5794+22E7 18 0C        		JR	l22f5
 5795+22E9 FE 20        l22e9:		CP	$20
 5796+22EB 20 08        		JR	NZ,l22f5
 5797+22ED CD 68 24     		CALL	l2468
 5798+22F0 DD 7E 1E     		LD	A,(IX+$1E)
 5799+22F3 A7           		AND	A
 5800+22F4 C8           		RET	Z
 5801+22F5 CD 59 22     l22f5:		CALL	l2259
 5802+22F8 DD 5E 1D     		LD	E,(IX+$1D)
 5803+22FB 19           		ADD	HL,DE
 5804+22FC DD 7E 23     		LD	A,(IX+$23)
 5805+22FF 77           		LD	(HL),A
 5806+2300 DD 34 1D     		INC	(IX+$1D)
 5807+2303 CD 68 24     		CALL	l2468
 5808+2306 DD 7E 1D     		LD	A,(IX+$1D)
 5809+2309 FE FF        		CP	$FF
 5810+230B 28 07        		JR	Z,l2314
 5811+230D CD 6C 22     		CALL	l226c
 5812+2310 DD BE 1E     		CP	(IX+$1E)
 5813+2313 D0           		RET	NC
 5814+2314 CD 68 24     l2314:		CALL	l2468
 5815+2317 CD 6C 22     l2317:		CALL	l226c
 5816+231A DD BE 1E     		CP	(IX+$1E)
 5817+231D 30 3A        		JR	NC,l2359
 5818+231F DD BE 20     		CP	(IX+$20)
 5819+2322 38 14        		JR	C,l2338
 5820+2324 DD 7E 20     		LD	A,(IX+$20)
 5821+2327 FE 01        		CP	$01
 5822+2329 DD 7E 1F     		LD	A,(IX+$1F)
 5823+232C 28 03        		JR	Z,l2331
 5824+232E A7           		AND	A
 5825+232F 28 07        		JR	Z,l2338
 5826+2331 4F           l2331:		LD	C,A
 5827+2332 0C           		INC	C
 5828+2333 DD 46 20     		LD	B,(IX+$20)
 5829+2336 18 27        		JR	l235f
 5830+2338 CD 59 22     l2338:		CALL	l2259
 5831+233B 01 00 00     		LD	BC,0
 5832+233E 7E           l233e:		LD	A,(HL)
 5833+233F CD 7A 22     		CALL	l227a
 5834+2342 23           		INC	HL
 5835+2343 0C           		INC	C
 5836+2344 DD 7E 17     		LD	A,(IX+$17)
 5837+2347 DD CB 1A 66  		BIT	4, (IX+$1A)
 5838+234B 28 07        		JR	Z,l2354
 5839+234D 3C           		INC	A
 5840+234E DD BE 18     		CP	(IX+$18)
 5841+2351 28 7F        		JR	Z,l23d2
 5842+2353 3D           		DEC	A
 5843+2354 A7           l2354:		AND	A
 5844+2355 20 E7        		JR	NZ,l233e
 5845+2357 18 79        		JR	l23d2
 5846+2359 DD 4E 1D     l2359:		LD	C,(IX+$1D)
 5847+235C DD 46 1E     		LD	B,(IX+$1E)
 5848+235F 79           l235f:		LD	A,C
 5849+2360 A7           		AND	A
 5850+2361 C8           		RET	Z
 5851+2362 CD 59 22     		CALL	l2259
 5852+2365 DD 7E 1C     		LD	A,(IX+$1C)
 5853+2368 E6 03        		AND	$03
 5854+236A 28 2E        		JR	Z,l239a
 5855+236C C5           		PUSH	BC
 5856+236D CD 6C 22     		CALL	l226c
 5857+2370 C1           		POP	BC
 5858+2371 90           		SUB	B
 5859+2372 5F           		LD	E,A
 5860+2373 DD 7E 1C     		LD	A,(IX+$1C)
 5861+2376 E6 02        		AND	$02
 5862+2378 20 10        		JR	NZ,l238a
 5863+237A 7B           		LD	A,E
 5864+237B CB 3F        		SRL	A
 5865+237D A7           l237d:		AND	A
 5866+237E 28 1A        		JR	Z,l239a
 5867+2380 F5           		PUSH	AF
 5868+2381 3E 20        		LD	A,$20
 5869+2383 CD 7A 22     		CALL	l227a
 5870+2386 F1           		POP	AF
 5871+2387 3D           		DEC	A
 5872+2388 18 F3        		JR	l237d
 5873+238A C5           l238a:		PUSH	BC
 5874+238B E5           		PUSH	HL
 5875+238C 16 00        		LD	D,0
 5876+238E 7E           l238e:		LD	A,(HL)
 5877+238F 23           		INC	HL
 5878+2390 FE 20        		CP	$20
 5879+2392 20 01        		JR	NZ,l2395
 5880+2394 14           		INC	D
 5881+2395 0D           l2395:		DEC	C
 5882+2396 20 F6        		JR	NZ,l238e
 5883+2398 E1           l2398:		POP	HL
 5884+2399 C1           		POP	BC
 5885+239A 06 00        l239a:		LD	B,0
 5886+239C C5           		PUSH	BC
 5887+239D E5           		PUSH	HL
 5888+239E 7E           l239e:		LD	A,(HL)
 5889+239F CD 7A 22     		CALL	l227a
 5890+23A2 FE 20        		CP	$20
 5891+23A4 20 1F        		JR	NZ,l23c5
 5892+23A6 DD 7E 1C     		LD	A,(IX+$1C)
 5893+23A9 E6 02        		AND	$02
 5894+23AB 28 18        		JR	Z,l23c5
 5895+23AD 7B           		LD	A,E
 5896+23AE 06 00        		LD	B,0
 5897+23B0 92           l23b0:		SUB	D
 5898+23B1 38 03        		JR	C,l23b6
 5899+23B3 04           		INC	B
 5900+23B4 18 FA        		JR	l23b0
 5901+23B6 15           l23b6:		DEC	D
 5902+23B7 78           		LD	A,B
 5903+23B8 A7           		AND	A
 5904+23B9 28 0A        		JR	Z,l23c5
 5905+23BB 7B           		LD	A,E
 5906+23BC 90           		SUB	B
 5907+23BD 5F           		LD	E,A
 5908+23BE 3E 20        l23be:		LD	A,$20
 5909+23C0 CD 7A 22     		CALL	l227a
 5910+23C3 10 F9        		DJNZ	l23be
 5911+23C5 23           l23c5:		INC	HL
 5912+23C6 0D           		DEC	C
 5913+23C7 20 D5        		JR	NZ,l239e
 5914+23C9 DD 7E 17     		LD	A,(IX+$17)
 5915+23CC A7           		AND	A
 5916+23CD C4 16 2A     		CALL	NZ,l2a16
 5917+23D0 E1           		POP	HL
 5918+23D1 C1           		POP	BC
 5919+23D2 C5           l23d2:		PUSH	BC
 5920+23D3 CD 61 22     		CALL	l2261
 5921+23D6 EB           		EX	DE,HL
 5922+23D7 E1           		POP	HL
 5923+23D8 E5           		PUSH	HL
 5924+23D9 19           		ADD	HL,DE
 5925+23DA ED B0        		LDIR
 5926+23DC C1           		POP	BC
 5927+23DD DD 7E 1D     		LD	A,(IX+$1D)
 5928+23E0 91           		SUB	C
 5929+23E1 DD 77 1D     		LD	(IX+$1D),A
 5930+23E4 28 2F        		JR	Z,l2415
 5931+23E6 CD 59 22     		CALL	l2259
 5932+23E9 0E 01        		LD	C,1
 5933+23EB 7E           		LD	A,(HL)
 5934+23EC FE 20        		CP	$20
 5935+23EE 28 E2        		JR	Z,l23d2
 5936+23F0 C9           		RET
 5937+23F1 CD 61 22     l23f1:		CALL	l2261
 5938+23F4 C5           		PUSH	BC
 5939+23F5 CD B0 3F     		CALL	l3fb0
 5940+23F8 C1           		POP	BC
 5941+23F9 DD 6E 0B     		LD	L,(IX+$0B)
 5942+23FC DD 66 0C     		LD	H,(IX+$0C)
 5943+23FF 09           		ADD	HL,BC
 5944+2400 DD 75 0B     		LD	(IX+$0B),L
 5945+2403 DD 74 0C     		LD	(IX+$0C),H
 5946+2406 DD CB 1A B6  		res	6, (IX+$1A)
 5947+240A DD CB 1A BE  		res	7, (IX+$1A)
 5948+240E DD 7E 17     		LD	A,(IX+$17)
 5949+2411 A7           		AND	A
 5950+2412 C4 16 2A     		CALL	NZ,l2a16
 5951+2415 DD 36 1D 00  l2415:		LD	(IX+$1D),0
 5952+2419 21 A1 22     		LD	HL,l22a1
 5953+241C DD 75 05     l241c:		LD	(IX+$05),L
 5954+241F DD 74 06     		LD	(IX+$06),H
 5955+2422 C9           		RET
 5956+2423 CD 68 24     l2423:		CALL	l2468
 5957+2426 DD 7E 1D     		LD	A,(IX+$1D)
 5958+2429 F5           		PUSH	AF
 5959+242A DD 7E 1C     l242a:		LD	A,(IX+$1C)
 5960+242D F5           		PUSH	AF
 5961+242E DD CB 1C 8E  		res	1, (IX+$1C)
 5962+2432 CD 17 23     		CALL	l2317
 5963+2435 F1           		POP	AF
 5964+2436 DD 77 1C     		LD	(IX+$1C),A
 5965+2439 DD 7E 1D     		LD	A,(IX+$1D)
 5966+243C A7           		AND	A
 5967+243D 20 EB        		JR	NZ,l242a
 5968+243F F1           		POP	AF
 5969+2440 A7           		AND	A
 5970+2441 C0           		RET	NZ
 5971+2442 CD BE 25     		CALL	l25be
 5972+2445 D8           		RET	C
 5973+2446 C3 49 2A     		JP	l2a49
 5974+2449 CD 23 24     l2449:		CALL	l2423
 5975+244C CD 61 22     		CALL	l2261
 5976+244F C5           		PUSH	BC
 5977+2450 CD 78 3F     		CALL	l3f78
 5978+2453 C1           		POP	BC
 5979+2454 DD 6E 0B     		LD	L,(IX+$0B)
 5980+2457 DD 66 0C     		LD	H,(IX+$0C)
 5981+245A A7           		AND	A
 5982+245B ED 42        		SBC	HL,BC
 5983+245D DD 75 0B     		LD	(IX+$0B),L
 5984+2460 DD 74 0C     		LD	(IX+$0C),H
 5985+2463 21 D0 27     		LD	HL,l27d0
 5986+2466 18 B4        		JR	l241c
 5987+2468 CD 59 22     l2468:		CALL	l2259
 5988+246B 16 00        		LD	D,0
 5989+246D 5A           		LD	E,D
 5990+246E DD 72 1F     		LD	(IX+$1F),D
 5991+2471 4A           		LD	C,D
 5992+2472 DD 46 1D     		LD	B,(IX+$1D)
 5993+2475 78           		LD	A,B
 5994+2476 A7           		AND	A
 5995+2477 28 36        		JR	Z,l24af
 5996+2479 7E           l2479:		LD	A,(HL)
 5997+247A FE 20        		CP	$20
 5998+247C 38 38        		JR	C,l24b6
 5999+247E 20 06        		JR	NZ,l2486
 6000+2480 15           		DEC	D
 6001+2481 DD 72 1F     		LD	(IX+$1F),D
 6002+2484 14           		INC	D
 6003+2485 4B           		LD	C,E
 6004+2486 1C           l2486:		INC	E
 6005+2487 FE 21        		CP	$21
 6006+2489 28 14        		JR	Z,l249f
 6007+248B FE 2E        		CP	$2E
 6008+248D 28 10        		JR	Z,l249f
 6009+248F FE 2C        		CP	$2C
 6010+2491 28 0C        		JR	Z,l249f
 6011+2493 FE 3F        		CP	$3F
 6012+2495 28 08        		JR	Z,l249f
 6013+2497 FE 3A        		CP	$3A
 6014+2499 28 04        		JR	Z,l249f
 6015+249B FE 3B        		CP	$3B
 6016+249D 20 0C        		JR	NZ,l24ab
 6017+249F C5           l249f:		PUSH	BC
 6018+24A0 CD 6C 22     		CALL	l226c
 6019+24A3 C1           		POP	BC
 6020+24A4 BB           		CP	E
 6021+24A5 38 04        		JR	C,l24ab
 6022+24A7 DD 72 1F     		LD	(IX+$1F),D
 6023+24AA 4B           		LD	C,E
 6024+24AB 14           l24ab:		INC	D
 6025+24AC 23           		INC	HL
 6026+24AD 10 CA        		DJNZ	l2479
 6027+24AF DD 73 1E     l24af:		LD	(IX+$1E),E
 6028+24B2 DD 71 20     		LD	(IX+$20),C
 6029+24B5 C9           		RET
 6030+24B6 14           l24b6:		INC	D
 6031+24B7 23           		INC	HL
 6032+24B8 05           		DEC	B
 6033+24B9 28 F4        		JR	Z,l24af
 6034+24BB 18 EE        		JR	l24ab
 6035+24BD DD CB 1A 5E  l24bd:		BIT	3, (IX+$1A)
 6036+24C1 20 1F        		JR	NZ,l24e2
 6037+24C3 CD 2A 25     		CALL	l252a
 6038+24C6 2A 51 5C     		LD	HL,(	$5C51)
 6039+24C9 DD 5E 0B     		LD	E,(IX+$0B)
 6040+24CC DD 56 0C     		LD	D,(IX+$0C)
 6041+24CF 19           		ADD	HL,DE
 6042+24D0 C5           		PUSH	BC
 6043+24D1 D5           		PUSH	DE
 6044+24D2 CD B0 3F     		CALL	l3fb0
 6045+24D5 E1           		POP	HL
 6046+24D6 C1           		POP	BC
 6047+24D7 09           		ADD	HL,BC
 6048+24D8 DD 75 0B     		LD	(IX+$0B),L
 6049+24DB DD 74 0C     		LD	(IX+$0C),H
 6050+24DE DD CB 1A DE  		SET	3, (IX+$1A)
 6051+24E2 DD 36 24 02  l24e2:		LD	(IX+$24),2
 6052+24E6 18 09        		JR	l24f1
 6053+24E8 DD CB 1A 5E  l24e8:		BIT	3, (IX+$1A)
 6054+24EC C8           		RET	Z
 6055+24ED DD 36 24 01  		LD	(IX+$24),1
 6056+24F1 D9           l24f1:		EXX
 6057+24F2 E5           		PUSH	HL
 6058+24F3 D5           		PUSH	DE
 6059+24F4 2A 51 5C     		LD	HL,(	$5C51)
 6060+24F7 DD 5E 0B     		LD	E,(IX+$0B)
 6061+24FA DD 56 0C     		LD	D,(IX+$0C)
 6062+24FD 19           		ADD	HL,DE
 6063+24FE D9           		EXX
 6064+24FF CD AA 26     		CALL	l26aa
 6065+2502 D9           		EXX
 6066+2503 D1           		POP	DE
 6067+2504 E3           		EX	(SP),HL
 6068+2505 D9           		EXX
 6069+2506 E1           		POP	HL
 6070+2507 DD 7E 24     		LD	A,(IX+$24)
 6071+250A 3D           		DEC	A
 6072+250B C0           		RET	NZ
 6073+250C E5           		PUSH	HL
 6074+250D CD 2A 25     		CALL	l252a
 6075+2510 E1           		POP	HL
 6076+2511 C5           		PUSH	BC
 6077+2512 CD 78 3F     		CALL	l3f78
 6078+2515 DD 6E 0B     		LD	L,(IX+$0B)
 6079+2518 DD 66 0C     		LD	H,(IX+$0C)
 6080+251B C1           		POP	BC
 6081+251C A7           		AND	A
 6082+251D ED 42        		SBC	HL,BC
 6083+251F DD 75 0B     		LD	(IX+$0B),L
 6084+2522 DD 74 0C     		LD	(IX+$0C),H
 6085+2525 DD CB 1A 9E  		res	3, (IX+$1A)
 6086+2529 C9           		RET
 6087+252A DD 7E 0F     l252a:		LD	A,(IX+$0F)
 6088+252D DD 96 0D     		SUB	(IX+$0D)
 6089+2530 3C           		INC	A
 6090+2531 5F           		LD	E,A
 6091+2532 16 00        		LD	D,0
 6092+2534 DD 7E 10     		LD	A,(IX+$10)
 6093+2537 DD 96 0E     		SUB	(IX+$0E)
 6094+253A 3C           		INC	A
 6095+253B 21 00 00     		LD	HL,0
 6096+253E 19           l253e:		ADD	HL,DE
 6097+253F 3D           		DEC	A
 6098+2540 20 FC        		JR	NZ,l253e
 6099+2542 5D           		LD	E,L
 6100+2543 54           		LD	D,H
 6101+2544 29           		ADD	HL,HL
 6102+2545 29           		ADD	HL,HL
 6103+2546 29           		ADD	HL,HL
 6104+2547 19           		ADD	HL,DE
 6105+2548 E5           		PUSH	HL
 6106+2549 C1           		POP	BC
 6107+254A C9           		RET
 6108+254B DD 7E 0E     l254b:		LD	A,(IX+$0E)
 6109+254E 87           l254e:		ADD	A,A
 6110+254F 87           		ADD	A,A
 6111+2550 87           		ADD	A,A
 6112+2551 DD 77 12     		LD	(IX+$12),A
 6113+2554 DD 7E 0D     		LD	A,(IX+$0D)
 6114+2557 DD 77 11     		LD	(IX+$11),A
 6115+255A DD 36 16 00  		LD	(IX+$16),0
 6116+255E DD 36 17 00  		LD	(IX+$17),0
 6117+2562 C9           		RET
 6118+2563 DD 7E 10     l2563:		LD	A,(IX+$10)
 6119+2566 3C           		INC	A
 6120+2567 18 E5        		JR	l254e
 6121+2569 DD 7E 17     l2569:		LD	A,(IX+$17)
 6122+256C A7           		AND	A
 6123+256D C8           		RET	Z
 6124+256E DD 35 17     		DEC	(IX+$17)
 6125+2571 DD 7E 16     		LD	A,(IX+$16)
 6126+2574 DD 96 13     		SUB	(IX+$13)
 6127+2577 DD 77 16     		LD	(IX+$16),A
 6128+257A D0           		RET	NC
 6129+257B C6 08        		ADD	A,$08
 6130+257D DD 77 16     		LD	(IX+$16),A
 6131+2580 DD 35 11     		DEC	(IX+$11)
 6132+2583 C9           		RET
 6133+2584 DD 7E 17     l2584:		LD	A,(IX+$17)
 6134+2587 3C           		INC	A
 6135+2588 DD BE 18     		CP	(IX+$18)
 6136+258B D0           		RET	NC
 6137+258C DD 77 17     		LD	(IX+$17),A
 6138+258F DD 7E 16     		LD	A,(IX+$16)
 6139+2592 DD 86 13     		ADD	A,(IX+$13)
 6140+2595 DD 77 16     		LD	(IX+$16),A
 6141+2598 FE 08        		CP	$08
 6142+259A D8           		RET	C
 6143+259B D6 08        		SUB	$08
 6144+259D DD 77 16     		LD	(IX+$16),A
 6145+25A0 DD 34 11     		INC	(IX+$11)
 6146+25A3 C9           		RET
 6147+25A4 DD 7E 12     l25a4:		LD	A,(IX+$12)
 6148+25A7 C6 08        		ADD	A,$08
 6149+25A9 DD CB 1C 76  		BIT	6, (IX+$1C)
 6150+25AD C8           		RET	Z
 6151+25AE 3D           		DEC	A
 6152+25AF 3D           		DEC	A
 6153+25B0 C9           		RET
 6154+25B1 DD 7E 12     l25b1:		LD	A,(IX+$12)
 6155+25B4 D6 08        		SUB	$08
 6156+25B6 DD CB 1C 76  		BIT	6, (IX+$1C)
 6157+25BA C8           		RET	Z
 6158+25BB 3C           		INC	A
 6159+25BC 3C           		INC	A
 6160+25BD C9           		RET
 6161+25BE DD 7E 10     l25be:		LD	A,(IX+$10)
 6162+25C1 87           		ADD	A,A
 6163+25C2 87           		ADD	A,A
 6164+25C3 87           		ADD	A,A
 6165+25C4 3C           		INC	A
 6166+25C5 47           		LD	B,A
 6167+25C6 DD 7E 12     		LD	A,(IX+$12)
 6168+25C9 C6 08        		ADD	A,$08
 6169+25CB DD CB 1C 76  		BIT	6, (IX+$1C)
 6170+25CF 28 04        		JR	Z,l25d5
 6171+25D1 3D           		DEC	A
 6172+25D2 3D           		DEC	A
 6173+25D3 04           		INC	B
 6174+25D4 04           		INC	B
 6175+25D5 B8           l25d5:		CP	B
 6176+25D6 D0           		RET	NC
 6177+25D7 DD 77 12     		LD	(IX+$12),A
 6178+25DA C9           		RET
 6179+25DB DD 7E 0E     l25db:		LD	A,(IX+$0E)
 6180+25DE 87           		ADD	A,A
 6181+25DF 87           		ADD	A,A
 6182+25E0 87           		ADD	A,A
 6183+25E1 47           		LD	B,A
 6184+25E2 CD B1 25     		CALL	l25b1
 6185+25E5 D8           		RET	C
 6186+25E6 B8           		CP	B
 6187+25E7 D8           		RET	C
 6188+25E8 DD 77 12     		LD	(IX+$12),A
 6189+25EB C9           		RET
 6190+25EC DD 7E 0E     l25ec:		LD	A,(IX+$0E)
 6191+25EF 87           		ADD	A,A
 6192+25F0 87           		ADD	A,A
 6193+25F1 87           		ADD	A,A
 6194+25F2 47           		LD	B,A
 6195+25F3 DD 7E 12     		LD	A,(IX+$12)
 6196+25F6 90           		SUB	B
 6197+25F7 DD 77 21     		LD	(IX+$21),A
 6198+25FA DD 7E 17     		LD	A,(IX+$17)
 6199+25FD A7           		AND	A
 6200+25FE 20 0B        		JR	NZ,l260b
 6201+2600 CD B1 25     		CALL	l25b1
 6202+2603 90           		SUB	B
 6203+2604 D8           		RET	C
 6204+2605 DD 77 21     		LD	(IX+$21),A
 6205+2608 DD 7E 18     		LD	A,(IX+$18)
 6206+260B 3D           l260b:		DEC	A
 6207+260C F5           		PUSH	AF
 6208+260D DD 77 23     		LD	(IX+$23),A
 6209+2610 CD 24 26     		CALL	l2624
 6210+2613 CD 66 26     		CALL	l2666
 6211+2616 F1           		POP	AF
 6212+2617 DD 77 23     		LD	(IX+$23),A
 6213+261A 18 08        		JR	l2624
 6214+261C DD 77 21     l261c:		LD	(IX+$21),A
 6215+261F DD 36 1B 20  		LD	(IX+$1B),$20
 6216+2623 C9           		RET
 6217+2624 DD 7E 10     l2624:		LD	A,(IX+$10)
 6218+2627 DD 96 0E     		SUB	(IX+$0E)
 6219+262A 3C           		INC	A
 6220+262B 87           		ADD	A,A
 6221+262C 87           		ADD	A,A
 6222+262D 87           		ADD	A,A
 6223+262E 3D           		DEC	A
 6224+262F DD BE 21     		CP	(IX+$21)
 6225+2632 D8           		RET	C
 6226+2633 DD 7E 23     		LD	A,(IX+$23)
 6227+2636 DD BE 18     		CP	(IX+$18)
 6228+2639 D0           		RET	NC
 6229+263A DD 77 17     		LD	(IX+$17),A
 6230+263D 47           		LD	B,A
 6231+263E 04           		INC	B
 6232+263F DD 7E 0E     		LD	A,(IX+$0E)
 6233+2642 87           		ADD	A,A
 6234+2643 87           		ADD	A,A
 6235+2644 87           		ADD	A,A
 6236+2645 DD 86 21     		ADD	A,(IX+$21)
 6237+2648 DD 77 12     		LD	(IX+$12),A
 6238+264B DD 4E 0D     		LD	C,(IX+$0D)
 6239+264E 3E 00        		LD	A,0
 6240+2650 05           l2650:		DEC	B
 6241+2651 28 0C        		JR	Z,l265f
 6242+2653 DD 86 13     		ADD	A,(IX+$13)
 6243+2656 FE 08        		CP	$08
 6244+2658 38 F6        		JR	C,l2650
 6245+265A D6 08        		SUB	$08
 6246+265C 0C           		INC	C
 6247+265D 18 F1        		JR	l2650
 6248+265F DD 71 11     l265f:		LD	(IX+$11),C
 6249+2662 DD 77 16     		LD	(IX+$16),A
 6250+2665 C9           		RET
 6251+2666 F5           l2666:		PUSH	AF
 6252+2667 DD 36 23 20  		LD	(IX+$23),$20
 6253+266B DD 7E 1A     		LD	A,(IX+$1A)
 6254+266E F5           		PUSH	AF
 6255+266F DD CB 1A A6  		res	4, (IX+$1A)
 6256+2673 CD 00 28     		CALL	l2800
 6257+2676 F1           		POP	AF
 6258+2677 DD 77 1A     		LD	(IX+$1A),A
 6259+267A F1           		POP	AF
 6260+267B C9           		RET
 6261+267C DD 46 18     l267c:		LD	B,(IX+$18)
 6262+267F 90           l267f:		SUB	B
 6263+2680 30 FD        		JR	NC,l267f
 6264+2682 80           		ADD	A,B
 6265+2683 DD 4E 17     		LD	C,(IX+$17)
 6266+2686 91           		SUB	C
 6267+2687 30 01        		JR	NC,l268a
 6268+2689 80           		ADD	A,B
 6269+268A A7           l268a:		AND	A
 6270+268B C8           		RET	Z
 6271+268C CD 66 26     		CALL	l2666
 6272+268F 3D           		DEC	A
 6273+2690 18 F8        		JR	l268a
 6274+2692 DD 7E 18     l2692:		LD	A,(IX+$18)
 6275+2695 CB 3F        		SRL	A
 6276+2697 DD BE 17     		CP	(IX+$17)
 6277+269A 30 E0        		JR	NC,l267c
 6278+269C AF           		XOR	A
 6279+269D 18 DD        		JR	l267c
 6280+269F CD 4B 25     l269f:		CALL	l254b
 6281+26A2 AF           		XOR	A
 6282+26A3 32 E1 26     		LD	(l26e0+1),A
 6283+26A6 DD 36 24 00  		LD	(IX+$24),0
 6284+26AA DD 4E 0D     l26aa:		LD	C,(IX+$0D)
 6285+26AD DD 46 0E     		LD	B,(IX+$0E)
 6286+26B0 CD BD 2A     		CALL	l2abd
 6287+26B3 EB           		EX	DE,HL
 6288+26B4 DD 7E 10     		LD	A,(IX+$10)
 6289+26B7 DD 96 0E     		SUB	(IX+$0E)
 6290+26BA 3C           		INC	A
 6291+26BB 4F           		LD	C,A
 6292+26BC E5           l26bc:		PUSH	HL
 6293+26BD DD 7E 0F     		LD	A,(IX+$0F)
 6294+26C0 DD 96 0D     		SUB	(IX+$0D)
 6295+26C3 3C           		INC	A
 6296+26C4 47           		LD	B,A
 6297+26C5 C5           l26c5:		PUSH	BC
 6298+26C6 E5           		PUSH	HL
 6299+26C7 06 08        		LD	B,8
 6300+26C9 DD 7E 24     l26c9:		LD	A,(IX+$24)
 6301+26CC A7           		AND	A
 6302+26CD 28 11        		JR	Z,l26e0
 6303+26CF D9           		EXX
 6304+26D0 2B           		DEC	HL
 6305+26D1 3D           		DEC	A
 6306+26D2 28 07        		JR	Z,l26db
 6307+26D4 D9           		EXX
 6308+26D5 7E           		LD	A,(HL)
 6309+26D6 D9           		EXX
 6310+26D7 77           		LD	(HL),A
 6311+26D8 D9           		EXX
 6312+26D9 18 07        		JR	l26e2
 6313+26DB 7E           l26db:		LD	A,(HL)
 6314+26DC D9           		EXX
 6315+26DD 77           		LD	(HL),A
 6316+26DE 18 02        		JR	l26e2
 6317+26E0 36 00        l26e0:		LD	(HL),0
 6318+26E2 24           l26e2:		INC	H
 6319+26E3 10 E4        		DJNZ	l26c9
 6320+26E5 E1           		POP	HL
 6321+26E6 C1           		POP	BC
 6322+26E7 23           		INC	HL
 6323+26E8 10 DB        		DJNZ	l26c5
 6324+26EA E1           		POP	HL
 6325+26EB 7D           		LD	A,L
 6326+26EC C6 20        		ADD	A,$20
 6327+26EE 6F           		LD	L,A
 6328+26EF 30 04        		JR	NC,l26f5
 6329+26F1 7C           		LD	A,H
 6330+26F2 C6 08        		ADD	A,8
 6331+26F4 67           		LD	H,A
 6332+26F5 0D           l26f5:		DEC	C
 6333+26F6 20 C4        		JR	NZ,l26bc
 6334+26F8 DD 4E 0D     l26f8:		LD	C,(IX+$0D)
 6335+26FB DD 46 0E     		LD	B,(IX+$0E)
 6336+26FE CD BD 2A     		CALL	l2abd
 6337+2701 11 20 00     		LD	DE,32
 6338+2704 DD 7E 10     		LD	A,(IX+$10)
 6339+2707 DD 96 0E     		SUB	(IX+$0E)
 6340+270A 3C           		INC	A
 6341+270B 4F           		LD	C,A
 6342+270C E5           l270c:		PUSH	HL
 6343+270D DD 7E 0F     		LD	A,(IX+$0F)
 6344+2710 DD 96 0D     		SUB	(IX+$0D)
 6345+2713 3C           		INC	A
 6346+2714 47           		LD	B,A
 6347+2715 DD 7E 24     l2715:		LD	A,(IX+$24)
 6348+2718 A7           		AND	A
 6349+2719 28 11        		JR	Z,l272c
 6350+271B D9           		EXX
 6351+271C 2B           		DEC	HL
 6352+271D 3D           		DEC	A
 6353+271E 28 07        		JR	Z,l2727
 6354+2720 D9           		EXX
 6355+2721 7E           		LD	A,(HL)
 6356+2722 D9           		EXX
 6357+2723 77           		LD	(HL),A
 6358+2724 D9           		EXX
 6359+2725 18 09        		JR	l2730
 6360+2727 7E           l2727:		LD	A,(HL)
 6361+2728 D9           		EXX
 6362+2729 77           		LD	(HL),A
 6363+272A 18 04        		JR	l2730
 6364+272C DD 7E 19     l272c:		LD	A,(IX+$19)
 6365+272F 77           		LD	(HL),A
 6366+2730 23           l2730:		INC	HL
 6367+2731 10 E2        		DJNZ	l2715
 6368+2733 E1           		POP	HL
 6369+2734 19           		ADD	HL,DE
 6370+2735 0D           		DEC	C
 6371+2736 20 D4        		JR	NZ,l270c
 6372+2738 C9           		RET
 6373+2739 DD 36 24 00  l2739:		LD	(IX+$24),0
 6374+273D 18 B9        		JR	l26f8
 6375+273F E6 07        l273f:		AND	$07
 6376+2741 47           		LD	B,A
 6377+2742 DD 7E 19     		LD	A,(IX+$19)
 6378+2745 E6 F8        		AND	$F8
 6379+2747 B0           		OR	B
 6380+2748 DD 77 19     		LD	(IX+$19),A
 6381+274B C9           		RET
 6382+274C E6 07        l274c:		AND	$07
 6383+274E 87           		ADD	A,A
 6384+274F 87           		ADD	A,A
 6385+2750 87           		ADD	A,A
 6386+2751 47           		LD	B,A
 6387+2752 DD 7E 19     		LD	A,(IX+$19)
 6388+2755 E6 C7        		AND	$C7
 6389+2757 B0           		OR	B
 6390+2758 DD 77 19     		LD	(IX+$19),A
 6391+275B C9           		RET
 6392+275C DD CB 19 BE  l275c:		res	7, (IX+$19)
 6393+2760 1F           		RRA
 6394+2761 D0           		RET	NC
 6395+2762 DD CB 19 FE  		SET	7, (IX+$19)
 6396+2766 C9           		RET
 6397+2767 DD CB 19 B6  l2767:		res	6, (IX+$19)
 6398+276B 1F           		RRA
 6399+276C D0           		RET	NC
 6400+276D DD CB 19 F6  		SET	6, (IX+$19)
 6401+2771 C9           		RET
 6402+2772 DD CB 1A 86  l2772:		res	0,(IX+$1A)
 6403+2776 1F           		RRA
 6404+2777 D0           		RET	NC
 6405+2778 DD CB 1A C6  		SET	0,(IX+$1A)
 6406+277C C9           		RET
 6407+277D DD CB 1A 8E  l277d:		res	1, (IX+$1A)
 6408+2781 1F           		RRA
 6409+2782 D0           		RET	NC
 6410+2783 DD CB 1A CE  		SET	1, (IX+$1A)
 6411+2787 C9           		RET
 6412+2788 DD CB 1A 96  l2788:		res	2, (IX+$1A)
 6413+278C 1F           		RRA
 6414+278D D0           		RET	NC
 6415+278E DD CB 1A D6  		SET	2, (IX+$1A)
 6416+2792 C9           		RET
 6417+2793 CD 4B 25     l2793:		CALL	l254b
 6418+2796 DD 7E 10     		LD	A,(IX+$10)
 6419+2799 DD 96 0E     		SUB	(IX+$0E)
 6420+279C 3C           		INC	A
 6421+279D 4F           		LD	C,A
 6422+279E DD 46 18     l279e:		LD	B,(IX+$18)
 6423+27A1 C5           l27a1:		PUSH	BC
 6424+27A2 CD 00 28     		CALL	l2800
 6425+27A5 C1           		POP	BC
 6426+27A6 10 F9        		DJNZ	l27a1
 6427+27A8 0D           		DEC	C
 6428+27A9 20 F3        		JR	NZ,l279e
 6429+27AB C9           		RET
 6430+27AC DD CB 1A A6  l27ac:		res	4, (IX+$1A)
 6431+27B0 1F           		RRA
 6432+27B1 D0           		RET	NC
 6433+27B2 DD CB 1A E6  		SET	4, (IX+$1A)
 6434+27B6 C9           		RET
 6435+27B7 DD CB 1A AE  l27b7:		res	5, (IX+$1A)
 6436+27BB 1F           		RRA
 6437+27BC 30 04        		JR	NC,l27c2
 6438+27BE DD CB 1A EE  		SET	5, (IX+$1A)
 6439+27C2 DD CB 1C B6  l27c2:		res	6, (IX+$1C)
 6440+27C6 1F           		RRA
 6441+27C7 D0           		RET	NC
 6442+27C8 DD CB 1C F6  		SET	6, (IX+$1C)
 6443+27CC C9           		RET
 6444+27CD 00 00 00     		DB	0,0,0
 6445+27D0 DD 2A 51 5C  l27d0:		LD	IX,(	$5C51)
 6446+27D4 DD 77 23     		LD	(IX+$23),A
 6447+27D7 DD 7E 1B     		LD	A,(IX+$1B)
 6448+27DA A7           		AND	A
 6449+27DB 28 14        		JR	Z,l27f1
 6450+27DD DD 36 1B 00  		LD	(IX+$1B),0
 6451+27E1 21 D2 21     l27e1:		LD	HL,$21D2
 6452+27E4 5F           l27e4:		LD	E,A
 6453+27E5 16 00        		LD	D,0
 6454+27E7 19           		ADD	HL,DE
 6455+27E8 19           		ADD	HL,DE
 6456+27E9 5E           		LD	E,(HL)
 6457+27EA 23           		INC	HL
 6458+27EB 56           		LD	D,(HL)
 6459+27EC EB           		EX	DE,HL
 6460+27ED DD 7E 23     		LD	A,(IX+$23)
 6461+27F0 E9           		JP	(HL)
 6462+27F1 DD 7E 23     l27f1:		LD	A,(IX+$23)
 6463+27F4 FE 20        		CP	$20
 6464+27F6 30 08        		JR	NC,l2800
 6465+27F8 FE 10        		CP	$10
 6466+27FA 38 E5        		JR	C,l27e1
 6467+27FC DD 77 1B     		LD	(IX+$1B),A
 6468+27FF C9           		RET
 6469+2800 DD CB 1A 56  l2800:		BIT	2, (IX+$1A)
 6470+2804 20 08        		JR	NZ,l280e
 6471+2806 DD 7E 23     		LD	A,(IX+$23)
 6472+2809 D6 A5        		SUB	$A5
 6473+280B D2 B4 22     		JP	NC,l22b4
 6474+280E DD 7E 23     l280e:		LD	A,(IX+$23)
 6475+2811 26 00        		LD	H,0
 6476+2813 6F           		LD	L,A
 6477+2814 29           		ADD	HL,HL
 6478+2815 29           		ADD	HL,HL
 6479+2816 29           		ADD	HL,HL
 6480+2817 FE 80        		CP	$80
 6481+2819 38 2F        		JR	C,l284a
 6482+281B FE 90        		CP	$90
 6483+281D 30 1E        		JR	NC,l283d
 6484+281F 5F           		LD	E,A
 6485+2820 DD E5        		PUSH	IX
 6486+2822 E1           		POP	HL
 6487+2823 01 45 00     		LD	BC,69
 6488+2826 09           		ADD	HL,BC
 6489+2827 E5           		PUSH	HL
 6490+2828 DD 7E 13     		LD	A,(IX+$13)
 6491+282B 4F           		LD	C,A
 6492+282C CB 39        		SRL	C
 6493+282E 91           		SUB	C
 6494+282F 47           		LD	B,A
 6495+2830 05           		DEC	B
 6496+2831 0D           		DEC	C
 6497+2832 C5           		PUSH	BC
 6498+2833 CD EB 2A     		CALL	l2aeb
 6499+2836 C1           		POP	BC
 6500+2837 CD EB 2A     		CALL	l2aeb
 6501+283A E1           		POP	HL
 6502+283B 18 1F        		JR	l285c
 6503+283D ED 5B 7B 5C  l283d:		LD	DE,(	$5C7B)
 6504+2841 19           		ADD	HL,DE
 6505+2842 11 80 04     		LD	DE,$0480
 6506+2845 A7           		AND	A
 6507+2846 ED 52        		SBC	HL,DE
 6508+2848 18 12        		JR	l285c
 6509+284A DD 4E 14     l284a:		LD	C,(IX+$14)
 6510+284D DD 46 15     		LD	B,(IX+$15)
 6511+2850 78           		LD	A,B
 6512+2851 E6 C0        		AND	$C0
 6513+2853 20 06        		JR	NZ,l285b
 6514+2855 11 5C 28     		LD	DE,l285c
 6515+2858 D5           		PUSH	DE
 6516+2859 C5           		PUSH	BC
 6517+285A C9           		RET
 6518+285B 09           l285b:		ADD	HL,BC
 6519+285C DD 36 22 01  l285c:		LD	(IX+$22),1
 6520+2860 DD CB 1A 66  		BIT	4, (IX+$1A)
 6521+2864 28 7E        		JR	Z,l28e4
 6522+2866 EB           		EX	DE,HL
 6523+2867 DD E5        		PUSH	IX
 6524+2869 E1           		POP	HL
 6525+286A 01 25 00     		LD	BC,37
 6526+286D 09           		ADD	HL,BC
 6527+286E 06 08        		LD	B,8
 6528+2870 C5           l2870:		PUSH	BC
 6529+2871 DD 46 13     		LD	B,(IX+$13)
 6530+2874 CB 38        		SRL	B
 6531+2876 38 1B        		JR	C,l2893
 6532+2878 C5           		PUSH	BC
 6533+2879 36 01        		LD	(HL),1
 6534+287B 1A           		LD	A,(DE)
 6535+287C 17           l287c:		RLA
 6536+287D F5           		PUSH	AF
 6537+287E CB 16        		RL	(HL)
 6538+2880 F1           		POP	AF
 6539+2881 CB 16        		RL	(HL)
 6540+2883 10 F7        		DJNZ	l287c
 6541+2885 38 04        		JR	C,l288b
 6542+2887 CB 16        l2887:		RL	(HL)
 6543+2889 30 FC        		JR	NC,l2887
 6544+288B 01 08 00     l288b:		LD	BC,8
 6545+288E 09           		ADD	HL,BC
 6546+288F 36 01        		LD	(HL),1
 6547+2891 18 1C        		JR	l28af
 6548+2893 C5           l2893:		PUSH	BC
 6549+2894 36 01        		LD	(HL),1
 6550+2896 1A           		LD	A,(DE)
 6551+2897 17           l2897:		RLA
 6552+2898 F5           		PUSH	AF
 6553+2899 CB 16        		RL	(HL)
 6554+289B F1           		POP	AF
 6555+289C CB 16        		RL	(HL)
 6556+289E 10 F7        		DJNZ	l2897
 6557+28A0 17           		RLA
 6558+28A1 F5           		PUSH	AF
 6559+28A2 CB 16        l28a2:		RL	(HL)
 6560+28A4 30 FC        		JR	NC,l28a2
 6561+28A6 01 08 00     		LD	BC,8
 6562+28A9 09           		ADD	HL,BC
 6563+28AA 36 01        		LD	(HL),1
 6564+28AC F1           		POP	AF
 6565+28AD CB 16        		RL	(HL)
 6566+28AF C1           l28af:		POP	BC
 6567+28B0 17           l28b0:		RLA
 6568+28B1 F5           		PUSH	AF
 6569+28B2 CB 16        		RL	(HL)
 6570+28B4 F1           		POP	AF
 6571+28B5 CB 16        		RL	(HL)
 6572+28B7 10 F7        		DJNZ	l28b0
 6573+28B9 38 04        		JR	C,l28bf
 6574+28BB CB 16        l28bb:		RL	(HL)
 6575+28BD 30 FC        		JR	NC,l28bb
 6576+28BF 01 07 00     l28bf:		LD	BC,7
 6577+28C2 A7           		AND	A
 6578+28C3 ED 42        		SBC	HL,BC
 6579+28C5 13           		INC	DE
 6580+28C6 C1           		POP	BC
 6581+28C7 10 A7        		DJNZ	l2870
 6582+28C9 DD 7E 17     		LD	A,(IX+$17)
 6583+28CC 3C           		INC	A
 6584+28CD DD BE 18     		CP	(IX+$18)
 6585+28D0 CC 16 2A     		CALL	Z,l2a16
 6586+28D3 DD E5        		PUSH	IX
 6587+28D5 E1           		POP	HL
 6588+28D6 01 25 00     		LD	BC,37
 6589+28D9 09           		ADD	HL,BC
 6590+28DA CD E4 28     		CALL	l28e4
 6591+28DD DD E5        		PUSH	IX
 6592+28DF E1           		POP	HL
 6593+28E0 01 2D 00     		LD	BC,45
 6594+28E3 09           		ADD	HL,BC
 6595+28E4 DD CB 1A 6E  l28e4:		BIT	5, (IX+$1A)
 6596+28E8 28 4B        		JR	Z,l2935
 6597+28EA EB           		EX	DE,HL
 6598+28EB DD E5        		PUSH	IX
 6599+28ED E1           		POP	HL
 6600+28EE 01 35 00     		LD	BC,53
 6601+28F1 09           		ADD	HL,BC
 6602+28F2 06 08        		LD	B,8
 6603+28F4 1A           l28f4:		LD	A,(DE)
 6604+28F5 13           		INC	DE
 6605+28F6 77           		LD	(HL),A
 6606+28F7 23           		INC	HL
 6607+28F8 77           		LD	(HL),A
 6608+28F9 23           		INC	HL
 6609+28FA 10 F8        		DJNZ	l28f4
 6610+28FC DD E5        		PUSH	IX
 6611+28FE E1           		POP	HL
 6612+28FF 01 35 00     		LD	BC,53
 6613+2902 09           		ADD	HL,BC
 6614+2903 DD CB 1C 76  		BIT	6, (IX+$1C)
 6615+2907 28 01        		JR	Z,l290a
 6616+2909 23           		INC	HL
 6617+290A DD 36 22 00  l290a:		LD	(IX+$22),0
 6618+290E CD 35 29     		CALL	l2935
 6619+2911 DD E5        		PUSH	IX
 6620+2913 E1           		POP	HL
 6621+2914 01 3D 00     		LD	BC,61
 6622+2917 09           		ADD	HL,BC
 6623+2918 DD 7E 12     		LD	A,(IX+$12)
 6624+291B C6 08        		ADD	A,8
 6625+291D DD CB 1C 76  		BIT	6, (IX+$1C)
 6626+2921 28 03        		JR	Z,l2926
 6627+2923 3D           		DEC	A
 6628+2924 3D           		DEC	A
 6629+2925 2B           		DEC	HL
 6630+2926 DD 77 12     l2926:		LD	(IX+$12),A
 6631+2929 CD 35 29     		CALL	l2935
 6632+292C CD B1 25     		CALL	l25b1
 6633+292F DD 77 12     		LD	(IX+$12),A
 6634+2932 C3 FA 29     		JP	l29fa
 6635+2935 E5           l2935:		PUSH	HL
 6636+2936 DD 7E 10     		LD	A,(IX+$10)
 6637+2939 3C           		INC	A
 6638+293A 87           		ADD	A,A
 6639+293B 87           		ADD	A,A
 6640+293C 87           		ADD	A,A
 6641+293D 3C           		INC	A
 6642+293E 47           		LD	B,A
 6643+293F CD A4 25     		CALL	l25a4
 6644+2942 B8           		CP	B
 6645+2943 38 0B        		JR	C,l2950
 6646+2945 DD 7E 12     		LD	A,(IX+$12)
 6647+2948 D6 08        		SUB	8
 6648+294A DD 77 12     		LD	(IX+$12),A
 6649+294D CD 49 2A     		CALL	l2a49
 6650+2950 DD 4E 11     l2950:		LD	C,(IX+$11)
 6651+2953 DD 46 12     		LD	B,(IX+$12)
 6652+2956 CD C2 2A     		CALL	l2ac2
 6653+2959 DD 46 19     		LD	B,(IX+$19)
 6654+295C 70           		LD	(HL),B
 6655+295D DD 7E 16     		LD	A,(IX+$16)
 6656+2960 DD 86 13     		ADD	A,(IX+$13)
 6657+2963 FE 09        		CP	9
 6658+2965 38 03        		JR	C,l296a
 6659+2967 23           		INC	HL
 6660+2968 70           		LD	(HL),B
 6661+2969 2B           		DEC	HL
 6662+296A DD 7E 12     l296a:		LD	A,(IX+$12)
 6663+296D E6 07        		AND	7
 6664+296F 28 1D        		JR	Z,l298e
 6665+2971 DD CB 1C 76  		BIT	6, (IX+$1C)
 6666+2975 28 04        		JR	Z,l297b
 6667+2977 FE 03        		CP	3
 6668+2979 38 13        		JR	C,l298e
 6669+297B D5           l297b:		PUSH	DE
 6670+297C 11 20 00     		LD	DE,32
 6671+297F 19           		ADD	HL,DE
 6672+2980 D1           		POP	DE
 6673+2981 70           		LD	(HL),B
 6674+2982 DD 7E 16     		LD	A,(IX+$16)
 6675+2985 DD 86 13     		ADD	A,(IX+$13)
 6676+2988 FE 09        		CP	9
 6677+298A 38 02        		JR	C,l298e
 6678+298C 23           		INC	HL
 6679+298D 70           		LD	(HL),B
 6680+298E E1           l298e:		POP	HL
 6681+298F EB           		EX	DE,HL
 6682+2990 DD 46 13     		LD	B,(IX+$13)
 6683+2993 AF           		XOR	A
 6684+2994 37           l2994:		SCF
 6685+2995 1F           		RRA
 6686+2996 10 FC        		DJNZ	l2994
 6687+2998 47           		LD	B,A
 6688+2999 0E 08        		LD	C,8
 6689+299B DD CB 1C 76  		BIT	6, (IX+$1C)
 6690+299F 28 03        		JR	Z,l29a4
 6691+29A1 0D           		DEC	C
 6692+29A2 0D           		DEC	C
 6693+29A3 13           		INC	DE
 6694+29A4 C5           l29a4:		PUSH	BC
 6695+29A5 1A           		LD	A,(DE)
 6696+29A6 13           		INC	DE
 6697+29A7 D5           		PUSH	DE
 6698+29A8 DD CB 1A 46  		BIT	0,(IX+$1A)
 6699+29AC 28 01        		JR	Z,l29af
 6700+29AE 2F           		CPL
 6701+29AF A0           l29af:		AND	B
 6702+29B0 57           		LD	D,A
 6703+29B1 0E 00        		LD	C,0
 6704+29B3 59           		LD	E,C
 6705+29B4 DD 7E 16     		LD	A,(IX+$16)
 6706+29B7 A7           		AND	A
 6707+29B8 28 0B        		JR	Z,l29c5
 6708+29BA CB 18        l29ba:		RR	B
 6709+29BC CB 19        		RR	C
 6710+29BE CB 1A        		RR	D
 6711+29C0 CB 1B        		RR	E
 6712+29C2 3D           		DEC	A
 6713+29C3 20 F5        		JR	NZ,l29ba
 6714+29C5 DD CB 1A 4E  l29c5:		BIT	1, (IX+$1A)
 6715+29C9 28 09        		JR	Z,l29d4
 6716+29CB 7E           		LD	A,(HL)
 6717+29CC AA           		XOR	D
 6718+29CD 77           		LD	(HL),A
 6719+29CE 23           		INC	HL
 6720+29CF 7E           		LD	A,(HL)
 6721+29D0 AB           		XOR	E
 6722+29D1 77           		LD	(HL),A
 6723+29D2 18 0B        		JR	l29df
 6724+29D4 78           l29d4:		LD	A,B
 6725+29D5 2F           		CPL
 6726+29D6 A6           		AND	(HL)
 6727+29D7 B2           		OR	D
 6728+29D8 77           		LD	(HL),A
 6729+29D9 23           		INC	HL
 6730+29DA 79           		LD	A,C
 6731+29DB 2F           		CPL
 6732+29DC A6           		AND	(HL)
 6733+29DD B3           		OR	E
 6734+29DE 77           		LD	(HL),A
 6735+29DF 2B           l29df:		DEC	HL
 6736+29E0 24           		INC	H
 6737+29E1 7C           		LD	A,H
 6738+29E2 E6 07        		AND	7
 6739+29E4 20 0A        		JR	NZ,l29f0
 6740+29E6 7D           		LD	A,L
 6741+29E7 C6 20        		ADD	A,$20
 6742+29E9 6F           		LD	L,A
 6743+29EA 38 04        		JR	C,l29f0
 6744+29EC 7C           		LD	A,H
 6745+29ED D6 08        		SUB	8
 6746+29EF 67           		LD	H,A
 6747+29F0 D1           l29f0:		POP	DE
 6748+29F1 C1           		POP	BC
 6749+29F2 0D           		DEC	C
 6750+29F3 20 AF        		JR	NZ,l29a4
 6751+29F5 DD 7E 22     		LD	A,(IX+$22)
 6752+29F8 A7           		AND	A
 6753+29F9 C8           		RET	Z
 6754+29FA DD 34 17     l29fa:		INC	(IX+$17)
 6755+29FD DD 7E 16     		LD	A,(IX+$16)
 6756+2A00 DD 86 13     		ADD	A,(IX+$13)
 6757+2A03 FE 08        		CP	8
 6758+2A05 38 05        		JR	C,l2a0c
 6759+2A07 D6 08        		SUB	8
 6760+2A09 DD 34 11     		INC	(IX+$11)
 6761+2A0C DD 77 16     l2a0c:		LD	(IX+$16),A
 6762+2A0F DD 7E 17     		LD	A,(IX+$17)
 6763+2A12 DD BE 18     		CP	(IX+$18)
 6764+2A15 D8           		RET	C
 6765+2A16 CD 3B 2A     l2a16:		CALL	l2a3b
 6766+2A19 DD CB 1A 6E  		BIT	5, (IX+$1A)
 6767+2A1D C4 20 2A     		CALL	NZ,l2a20
 6768+2A20 CD A4 25     l2a20:		CALL	l25a4
 6769+2A23 DD 77 12     		LD	(IX+$12),A
 6770+2A26 DD 7E 10     		LD	A,(IX+$10)
 6771+2A29 3C           		INC	A
 6772+2A2A 87           		ADD	A,A
 6773+2A2B 87           		ADD	A,A
 6774+2A2C 87           		ADD	A,A
 6775+2A2D DD BE 12     		CP	(IX+$12)
 6776+2A30 D0           		RET	NC
 6777+2A31 DD 7E 12     		LD	A,(IX+$12)
 6778+2A34 D6 08        		SUB	8
 6779+2A36 DD 77 12     		LD	(IX+$12),A
 6780+2A39 18 0E        		JR	l2a49
 6781+2A3B AF           l2a3b:		XOR	A
 6782+2A3C DD 77 16     		LD	(IX+$16),A
 6783+2A3F DD 77 17     		LD	(IX+$17),A
 6784+2A42 DD 7E 0D     		LD	A,(IX+$0D)
 6785+2A45 DD 77 11     		LD	(IX+$11),A
 6786+2A48 C9           		RET
 6787+2A49 DD 4E 0D     l2a49:		LD	C,(IX+$0D)
 6788+2A4C DD 46 0E     		LD	B,(IX+$0E)
 6789+2A4F CD BD 2A     		CALL	l2abd
 6790+2A52 DD 7E 10     		LD	A,(IX+$10)
 6791+2A55 DD 96 0E     		SUB	(IX+$0E)
 6792+2A58 47           		LD	B,A
 6793+2A59 28 41        		JR	Z,l2a9c
 6794+2A5B C5           l2a5b:		PUSH	BC
 6795+2A5C D5           		PUSH	DE
 6796+2A5D E5           		PUSH	HL
 6797+2A5E DD 7E 0F     		LD	A,(IX+$0F)
 6798+2A61 DD 96 0D     		SUB	(IX+$0D)
 6799+2A64 47           		LD	B,A
 6800+2A65 04           		INC	B
 6801+2A66 C5           l2a66:		PUSH	BC
 6802+2A67 01 20 00     		LD	BC,32
 6803+2A6A 09           		ADD	HL,BC
 6804+2A6B 7E           		LD	A,(HL)
 6805+2A6C ED 42        		SBC	HL,BC
 6806+2A6E 77           		LD	(HL),A
 6807+2A6F D5           		PUSH	DE
 6808+2A70 06 08        		LD	B,8
 6809+2A72 D5           l2a72:		PUSH	DE
 6810+2A73 7B           		LD	A,E
 6811+2A74 C6 20        		ADD	A,$20
 6812+2A76 5F           		LD	E,A
 6813+2A77 30 04        		JR	NC,l2a7d
 6814+2A79 7A           		LD	A,D
 6815+2A7A C6 08        		ADD	A,8
 6816+2A7C 57           		LD	D,A
 6817+2A7D 1A           l2a7d:		LD	A,(DE)
 6818+2A7E D1           		POP	DE
 6819+2A7F 12           		LD	(DE),A
 6820+2A80 14           		INC	D
 6821+2A81 10 EF        		DJNZ	l2a72
 6822+2A83 D1           		POP	DE
 6823+2A84 13           		INC	DE
 6824+2A85 23           		INC	HL
 6825+2A86 C1           		POP	BC
 6826+2A87 10 DD        		DJNZ	l2a66
 6827+2A89 E1           		POP	HL
 6828+2A8A D1           		POP	DE
 6829+2A8B 01 20 00     		LD	BC,32
 6830+2A8E 09           		ADD	HL,BC
 6831+2A8F 7B           		LD	A,E
 6832+2A90 C6 20        		ADD	A,$20
 6833+2A92 5F           		LD	E,A
 6834+2A93 30 04        		JR	NC,l2a99
 6835+2A95 7A           		LD	A,D
 6836+2A96 C6 08        		ADD	A,8
 6837+2A98 57           		LD	D,A
 6838+2A99 C1           l2a99:		POP	BC
 6839+2A9A 10 BF        		DJNZ	l2a5b
 6840+2A9C EB           l2a9c:		EX	DE,HL
 6841+2A9D DD 7E 0F     		LD	A,(IX+$0F)
 6842+2AA0 DD 96 0D     		SUB	(IX+$0D)
 6843+2AA3 47           		LD	B,A
 6844+2AA4 04           		INC	B
 6845+2AA5 C5           l2aa5:		PUSH	BC
 6846+2AA6 DD 7E 19     		LD	A,(IX+$19)
 6847+2AA9 12           		LD	(DE),A
 6848+2AAA 06 08        		LD	B,8
 6849+2AAC E5           		PUSH	HL
 6850+2AAD 36 00        l2aad:		LD	(HL),0
 6851+2AAF 24           		INC	H
 6852+2AB0 10 FB        		DJNZ	l2aad
 6853+2AB2 E1           		POP	HL
 6854+2AB3 13           		INC	DE
 6855+2AB4 23           		INC	HL
 6856+2AB5 C1           		POP	BC
 6857+2AB6 10 ED        		DJNZ	l2aa5
 6858+2AB8 C9           		RET
 6859+2AB9 DD 77 19     l2ab9:		LD	(IX+$19),A
 6860+2ABC C9           		RET
 6861+2ABD 78           l2abd:		LD	A,B
 6862+2ABE 87           		ADD	A,A
 6863+2ABF 87           		ADD	A,A
 6864+2AC0 87           		ADD	A,A
 6865+2AC1 47           		LD	B,A
 6866+2AC2 78           l2ac2:		LD	A,B
 6867+2AC3 0F           		RRCA
 6868+2AC4 0F           		RRCA
 6869+2AC5 0F           		RRCA
 6870+2AC6 6F           		LD	L,A
 6871+2AC7 E6 18        		AND	$18
 6872+2AC9 F6 40        		OR	$40
 6873+2ACB 57           		LD	D,A
 6874+2ACC 78           		LD	A,B
 6875+2ACD E6 07        		AND	7
 6876+2ACF B2           		OR	D
 6877+2AD0 57           		LD	D,A
 6878+2AD1 78           		LD	A,B
 6879+2AD2 07           		RLCA
 6880+2AD3 07           		RLCA
 6881+2AD4 E6 E0        		AND	$E0
 6882+2AD6 B1           		OR	C
 6883+2AD7 5F           		LD	E,A
 6884+2AD8 7D           		LD	A,L
 6885+2AD9 E6 1F        		AND	$1F
 6886+2ADB 6F           		LD	L,A
 6887+2ADC 26 00        		LD	H,0
 6888+2ADE 29           		ADD	HL,HL
 6889+2ADF 29           		ADD	HL,HL
 6890+2AE0 29           		ADD	HL,HL
 6891+2AE1 29           		ADD	HL,HL
 6892+2AE2 29           		ADD	HL,HL
 6893+2AE3 06 00        		LD	B,0
 6894+2AE5 09           		ADD	HL,BC
 6895+2AE6 01 00 58     		LD	BC,$5800
 6896+2AE9 09           		ADD	HL,BC
 6897+2AEA C9           		RET
 6898+2AEB AF           l2aeb:		XOR	A
 6899+2AEC CB 3B        		SRL	E
 6900+2AEE 1F           		RRA
 6901+2AEF CB 2F        l2aef:		SRA	A
 6902+2AF1 0D           		DEC	C
 6903+2AF2 20 FB        		JR	NZ,l2aef
 6904+2AF4 CB 3B        		SRL	E
 6905+2AF6 1F           		RRA
 6906+2AF7 CB 2F        l2af7:		SRA	A
 6907+2AF9 10 FC        		DJNZ	l2af7
 6908+2AFB 06 04        		LD	B,4
 6909+2AFD 77           l2afd:		LD	(HL),A
 6910+2AFE 23           		INC	HL
 6911+2AFF 10 FC        		DJNZ	l2afd
 6912+2B01 C9           		RET
 6913+2B02
 6914+2B02              FREE_ROM0_3:	EQU	$
 6915+2B02
 6916+2B02              		;...
 6917+2B02              		;...
 6918+2B02
 6919+2B02              R0_FREE_3:	EQU	29-($-FREE_ROM0_3)
 6920+2B02 00 00 00...  ROM0_SPARE3:	DS	R0_FREE_3
 6921+2B1F
 6922+2B1F 01 00 3C     l2b1f:		LD	BC,$3C00
 6923+2B22 09           		ADD	HL,BC
 6924+2B23 EB           		EX	DE,HL
 6925+2B24 2A 5A 5B     		LD	HL,(	$5B5A)
 6926+2B27 E5           		PUSH	HL
 6927+2B28 21 45 00     		LD	HL,69
 6928+2B2B DD E5        		PUSH	IX
 6929+2B2D C1           		POP	BC
 6930+2B2E 09           		ADD	HL,BC
 6931+2B2F EB           		EX	DE,HL
 6932+2B30 D5           		PUSH	DE
 6933+2B31 01 08 00     		LD	BC,8
 6934+2B34 EF           		RST	28H
 6935+2B35 C3 33        		DW	$33C3
 6936+2B37 E1           		POP	HL
 6937+2B38 D1           		POP	DE
 6938+2B39 ED 53 5A 5B  		LD	(	$5B5A),DE
 6939+2B3D C9           		RET
 6940+2B3E CD 1F 2B     l2b3e:		CALL	l2b1f
 6941+2B41 DD CB 45 26  		SLA	(IX+$45)
 6942+2B45 DD CB 46 26  		SLA	(IX+$46)
 6943+2B49 DD CB 47 26  		SLA	(IX+$47)
 6944+2B4D DD CB 48 26  		SLA	(IX+$48)
 6945+2B51 DD CB 49 26  		SLA	(IX+$49)
 6946+2B55 DD CB 4A 26  		SLA	(IX+$4A)
 6947+2B59 DD CB 4B 26  		SLA	(IX+$4B)
 6948+2B5D DD CB 4C 26  		SLA	(IX+$4C)
 6949+2B61 C9           		RET
 6950+2B62 01 95 2A     l2b62:		LD	BC,l2b95-$100
 6951+2B65 09           		ADD	HL,BC
 6952+2B66 DD E5        		PUSH	IX
 6953+2B68 D1           		POP	DE
 6954+2B69 01 45 00     		LD	BC,69
 6955+2B6C EB           		EX	DE,HL
 6956+2B6D 09           		ADD	HL,BC
 6957+2B6E E5           		PUSH	HL
 6958+2B6F 06 08        		LD	B,8
 6959+2B71 1A           l2b71:		LD	A,(DE)
 6960+2B72 13           		INC	DE
 6961+2B73 E6 E0        		AND	$E0
 6962+2B75 77           		LD	(HL),A
 6963+2B76 23           		INC	HL
 6964+2B77 10 F8        		DJNZ	l2b71
 6965+2B79 E1           		POP	HL
 6966+2B7A C9           		RET
 6967+2B7B 01 95 2A     l2b7b:		LD	BC,l2b95-$100
 6968+2B7E 09           		ADD	HL,BC
 6969+2B7F DD E5        		PUSH	IX
 6970+2B81 D1           		POP	DE
 6971+2B82 01 45 00     		LD	BC,69
 6972+2B85 EB           		EX	DE,HL
 6973+2B86 09           		ADD	HL,BC
 6974+2B87 E5           		PUSH	HL
 6975+2B88 06 08        		LD	B,8
 6976+2B8A 1A           l2b8a:		LD	A,(DE)
 6977+2B8B 13           		INC	DE
 6978+2B8C 87           		ADD	A,A
 6979+2B8D 87           		ADD	A,A
 6980+2B8E 87           		ADD	A,A
 6981+2B8F 77           		LD	(HL),A
 6982+2B90 23           		INC	HL
 6983+2B91 10 F7        		DJNZ	l2b8a
 6984+2B93 E1           		POP	HL
 6985+2B94 C9           		RET
 6986+2B95
 6987+2B95 00           l2b95:		DB	%00000000
 6988+2B96 00           		DB	%00000000
 6989+2B97 00           		DB	%00000000
 6990+2B98 00           		DB	%00000000
 6991+2B99 00           		DB	%00000000
 6992+2B9A 00           		DB	%00000000
 6993+2B9B 00           		DB	%00000000
 6994+2B9C 00           		DB	%00000000
 6995+2B9D
 6996+2B9D 00           		DB	%00000000
 6997+2B9E 48           		DB	%01001000
 6998+2B9F 48           		DB	%01001000
 6999+2BA0 48           		DB	%01001000
 7000+2BA1 48           		DB	%01001000
 7001+2BA2 00           		DB	%00000000
 7002+2BA3 48           		DB	%01001000
 7003+2BA4 00           		DB	%00000000
 7004+2BA5
 7005+2BA5 00           		DB	%00000000
 7006+2BA6 AA           		DB	%10101010
 7007+2BA7 AA           		DB	%10101010
 7008+2BA8 00           		DB	%00000000
 7009+2BA9 00           		DB	%00000000
 7010+2BAA 00           		DB	%00000000
 7011+2BAB 00           		DB	%00000000
 7012+2BAC 00           		DB	%00000000
 7013+2BAD
 7014+2BAD 00           		DB	%00000000
 7015+2BAE AA           		DB	%10101010
 7016+2BAF FF           		DB	%11111111
 7017+2BB0 AA           		DB	%10101010
 7018+2BB1 AA           		DB	%10101010
 7019+2BB2 FF           		DB	%11111111
 7020+2BB3 AA           		DB	%10101010
 7021+2BB4 00           		DB	%00000000
 7022+2BB5
 7023+2BB5 00           		DB	%00000000
 7024+2BB6 44           		DB	%01000100
 7025+2BB7 FE           		DB	%11111110
 7026+2BB8 94           		DB	%10010100
 7027+2BB9 FE           		DB	%11111110
 7028+2BBA 26           		DB	%00100110
 7029+2BBB FE           		DB	%11111110
 7030+2BBC 44           		DB	%01000100
 7031+2BBD
 7032+2BBD 00           		DB	%00000000
 7033+2BBE 92           		DB	%10010010
 7034+2BBF 82           		DB	%10000010
 7035+2BC0 24           		DB	%00100100
 7036+2BC1 48           		DB	%01001000
 7037+2BC2 90           		DB	%10010000
 7038+2BC3 32           		DB	%00110010
 7039+2BC4 20           		DB	%00100000
 7040+2BC5
 7041+2BC5 00 48 B4 48  		DB	$00,$48,$B4,$48,$DD,$B2,$FD,$00
 7041+2BC9 DD B2 FD 00
 7042+2BCD 00 44 88 00  		DB	$00,$44,$88,$00,$00,$00,$00,$00
 7042+2BD1 00 00 00 00
 7043+2BD5 00 42 84 84  		DB	$00,$42,$84,$84,$84,$84,$42,$00
 7043+2BD9 84 84 42 00
 7044+2BDD 00 88 44 44  		DB	$00,$88,$44,$44,$44,$44,$88,$00
 7044+2BE1 44 44 88 00
 7045+2BE5 00 00 AA 44  		DB	$00,$00,$AA,$44,$EE,$44,$AA,$00
 7045+2BE9 EE 44 AA 00
 7046+2BED 00 00 44 44  		DB	$00,$00,$44,$44,$EE,$44,$44,$00
 7046+2BF1 EE 44 44 00
 7047+2BF5 00 00 00 00  		DB	$00,$00,$00,$00,$00,$44,$44,$88
 7047+2BF9 00 44 44 88
 7048+2BFD 00 00 00 00  		DB	$00,$00,$00,$00,$EE,$00,$00,$00
 7048+2C01 EE 00 00 00
 7049+2C05 00 00 00 00  		DB	$00,$00,$00,$00,$00,$CC,$CC,$00
 7049+2C09 00 CC CC 00
 7050+2C0D 00 20 22 42  		DB	$00,$20,$22,$42,$44,$88,$88,$00
 7050+2C11 44 88 88 00
 7051+2C15 00 EC B2 B2  		DB	$00,$EC,$B2,$B2,$B2,$B2,$EC,$00
 7051+2C19 B2 B2 EC 00
 7052+2C1D 00 4C C4 44  		DB	$00,$4C,$C4,$44,$44,$44,$EE,$00
 7052+2C21 44 44 EE 00
 7053+2C25 00 4C B2 22  		DB	$00,$4C,$B2,$22,$4C,$90,$FE,$00
 7053+2C29 4C 90 FE 00
 7054+2C2D 00 CC 32 C4  		DB	$00,$CC,$32,$C4,$22,$32,$CC,$00
 7054+2C31 22 32 CC 00
 7055+2C35 00 24 64 AC  		DB	$00,$24,$64,$AC,$B4,$FE,$24,$00
 7055+2C39 B4 FE 24 00
 7056+2C3D 00 FE 90 DC  		DB	$00,$FE,$90,$DC,$22,$32,$CC,$00
 7056+2C41 22 32 CC 00
 7057+2C45 00 6C 90 DC  		DB	$00,$6C,$90,$DC,$B2,$B2,$4C,$00
 7057+2C49 B2 B2 4C 00
 7058+2C4D 00 FE 22 44  		DB	$00,$FE,$22,$44,$48,$88,$88,$00
 7058+2C51 48 88 88 00
 7059+2C55 00 EC B2 4C  		DB	$00,$EC,$B2,$4C,$B2,$B2,$EC,$00
 7059+2C59 B2 B2 EC 00
 7060+2C5D 00 4C B2 B2  		DB	$00,$4C,$B2,$B2,$6E,$22,$CC,$00
 7060+2C61 6E 22 CC 00
 7061+2C65 00 00 00 48  		DB	$00,$00,$00,$48,$00,$00,$48,$00
 7061+2C69 00 00 48 00
 7062+2C6D 00 00 44 00  		DB	$00,$00,$44,$00,$00,$44,$44,$88
 7062+2C71 00 44 44 88
 7063+2C75 00 00 22 44  		DB	$00,$00,$22,$44,$88,$44,$22,$00
 7063+2C79 88 44 22 00
 7064+2C7D 00 00 00 EE  		DB	$00,$00,$00,$EE,$00,$EE,$00,$00
 7064+2C81 00 EE 00 00
 7065+2C85 00 00 88 44  		DB	$00,$00,$88,$44,$22,$44,$88,$00
 7065+2C89 22 44 88 00
 7066+2C8D 00 4C B2 22  		DB	$00,$4C,$B2,$22,$44,$00,$44,$00
 7066+2C91 44 00 44 00
 7067+2C95 00 5E FE FA  		DB	$00,$5E,$FE,$FA,$FE,$90,$EE,$00
 7067+2C99 FE 90 EE 00
 7068+2C9D 00 4C B2 B2  		DB	$00,$4C,$B2,$B2,$FE,$B2,$B2,$00
 7068+2CA1 FE B2 B2 00
 7069+2CA5 00 DC B2 DC  		DB	$00,$DC,$B2,$DC,$B2,$B2,$DC,$00
 7069+2CA9 B2 B2 DC 00
 7070+2CAD 00 4C B2 90  		DB	$00,$4C,$B2,$90,$90,$B2,$4C,$00
 7070+2CB1 90 B2 4C 00
 7071+2CB5 00 DC B2 B2  		DB	$00,$DC,$B2,$B2,$B2,$B2,$DC,$00
 7071+2CB9 B2 B2 DC 00
 7072+2CBD 00 FE 90 DC  		DB	$00,$FE,$90,$DC,$90,$90,$FE,$00
 7072+2CC1 90 90 FE 00
 7073+2CC5 00 FE 90 FC  		DB	$00,$FE,$90,$FC,$90,$90,$90,$00
 7073+2CC9 90 90 90 00
 7074+2CCD 00 4C B2 90  		DB	$00,$4C,$B2,$90,$F6,$B2,$4E,$00
 7074+2CD1 F6 B2 4E 00
 7075+2CD5 00 B2 B2 FE  		DB	$00,$B2,$B2,$FE,$B2,$B2,$B2,$00
 7075+2CD9 B2 B2 B2 00
 7076+2CDD 00 EE 44 44  		DB	$00,$EE,$44,$44,$44,$44,$EE,$00
 7076+2CE1 44 44 EE 00
 7077+2CE5 00 22 22 22  		DB	$00,$22,$22,$22,$A2,$B2,$4C,$00
 7077+2CE9 A2 B2 4C 00
 7078+2CED 00 B2 B4 D8  		DB	$00,$B2,$B4,$D8,$D4,$B2,$B2,$00
 7078+2CF1 D4 B2 B2 00
 7079+2CF5 00 90 90 90  		DB	$00,$90,$90,$90,$90,$90,$FE,$00
 7079+2CF9 90 90 FE 00
 7080+2CFD 00 B2 FE FE  		DB	$00,$B2,$FE,$FE,$F2,$B2,$B2,$00
 7080+2D01 F2 B2 B2 00
 7081+2D05 00 F2 BA BA  		DB	$00,$F2,$BA,$BA,$B6,$B6,$B2,$00
 7081+2D09 B6 B6 B2 00
 7082+2D0D 00 4C B2 B2  		DB	$00,$4C,$B2,$B2,$B2,$B2,$4C,$00
 7082+2D11 B2 B2 4C 00
 7083+2D15 00 DC B2 B2  		DB	$00,$DC,$B2,$B2,$DC,$90,$90,$00
 7083+2D19 DC 90 90 00
 7084+2D1D 00 EC B2 B2  		DB	$00,$EC,$B2,$B2,$B6,$F6,$EE,$20
 7084+2D21 B6 F6 EE 20
 7085+2D25 00 FC B2 B2  		DB	$00,$FC,$B2,$B2,$DC,$D2,$B2,$00
 7085+2D29 DC D2 B2 00
 7086+2D2D 00 6E 90 4C  		DB	$00,$6E,$90,$4C,$22,$32,$CC,$00
 7086+2D31 22 32 CC 00
 7087+2D35 00 EE 44 44  		DB	$00,$EE,$44,$44,$44,$44,$44,$00
 7087+2D39 44 44 44 00
 7088+2D3D 00 B2 B2 B2  		DB	$00,$B2,$B2,$B2,$B2,$B2,$EC,$00
 7088+2D41 B2 B2 EC 00
 7089+2D45 00 AA AA AA  		DB	$00,$AA,$AA,$AA,$AA,$AA,$44,$00
 7089+2D49 AA AA 44 00
 7090+2D4D 00 B2 F2 F2  		DB	$00,$B2,$F2,$F2,$FE,$FE,$52,$00
 7090+2D51 FE FE 52 00
 7091+2D55 00 AA AA 44  		DB	$00,$AA,$AA,$44,$44,$AA,$AA,$00
 7091+2D59 44 AA AA 00
 7092+2D5D 00 AA AA AA  		DB	$00,$AA,$AA,$AA,$44,$44,$44,$00
 7092+2D61 44 44 44 00
 7093+2D65 00 FE 22 44  		DB	$00,$FE,$22,$44,$48,$90,$FE,$00
 7093+2D69 48 90 FE 00
 7094+2D6D 00 66 44 44  		DB	$00,$66,$44,$44,$44,$44,$66,$00
 7094+2D71 44 44 66 00
 7095+2D75 00 00 88 C8  		DB	$00,$00,$88,$C8,$44,$62,$22,$00
 7095+2D79 44 62 22 00
 7096+2D7D 00 CC 44 44  		DB	$00,$CC,$44,$44,$44,$44,$CC,$00
 7096+2D81 44 44 CC 00
 7097+2D85 00 44 EE 44  		DB	$00,$44,$EE,$44,$44,$44,$44,$00
 7097+2D89 44 44 44 00
 7098+2D8D 00 00 00 00  		DB	$00,$00,$00,$00,$00,$00,$00,$FF
 7098+2D91 00 00 00 FF
 7099+2D95 00 4E B0 9C  		DB	$00,$4E,$B0,$9C,$F0,$90,$FE,$00
 7099+2D99 F0 90 FE 00
 7100+2D9D 00 00 CC 22  		DB	$00,$00,$CC,$22,$EE,$B2,$EE,$00
 7100+2DA1 EE B2 EE 00
 7101+2DA5 00 90 90 DC  		DB	$00,$90,$90,$DC,$B2,$B2,$DC,$00
 7101+2DA9 B2 B2 DC 00
 7102+2DAD 00 00 6E 90  		DB	$00,$00,$6E,$90,$90,$90,$6E,$00
 7102+2DB1 90 90 6E 00
 7103+2DB5 00 22 22 6E  		DB	$00,$22,$22,$6E,$B2,$B2,$6E,$00
 7103+2DB9 B2 B2 6E 00
 7104+2DBD 00 00 4C B2  		DB	$00,$00,$4C,$B2,$DC,$90,$6E,$00
 7104+2DC1 DC 90 6E 00
 7105+2DC5 00 6C 90 D8  		DB	$00,$6C,$90,$D8,$90,$90,$90,$00
 7105+2DC9 90 90 90 00
 7106+2DCD 00 00 6E B2  		DB	$00,$00,$6E,$B2,$B2,$6E,$22,$CC
 7106+2DD1 B2 6E 22 CC
 7107+2DD5 00 90 90 DC  		DB	$00,$90,$90,$DC,$B2,$B2,$B2,$00
 7107+2DD9 B2 B2 B2 00
 7108+2DDD 00 44 00 4C  		DB	$00,$44,$00,$4C,$44,$44,$4E,$00
 7108+2DE1 44 44 4E 00
 7109+2DE5 00 22 00 22  		DB	$00,$22,$00,$22,$22,$22,$B2,$4C
 7109+2DE9 22 22 B2 4C
 7110+2DED 00 90 B4 D8  		DB	$00,$90,$B4,$D8,$D8,$B4,$B2,$00
 7110+2DF1 D8 B4 B2 00
 7111+2DF5 00 48 48 48  		DB	$00,$48,$48,$48,$48,$48,$46,$00
 7111+2DF9 48 48 46 00
 7112+2DFD 00 00 BA F5  		DB	$00,$00,$BA,$F5,$F5,$F5,$B5,$00
 7112+2E01 F5 F5 B5 00
 7113+2E05 00 00 DC B2  		DB	$00,$00,$DC,$B2,$B2,$B2,$B2,$00
 7113+2E09 B2 B2 B2 00
 7114+2E0D 00 00 4C B2  		DB	$00,$00,$4C,$B2,$B2,$B2,$4C,$00
 7114+2E11 B2 B2 4C 00
 7115+2E15 00 00 DC B2  		DB	$00,$00,$DC,$B2,$B2,$DC,$90,$90
 7115+2E19 B2 DC 90 90
 7116+2E1D 00 00 6E B2  		DB	$00,$00,$6E,$B2,$B2,$6E,$22,$22
 7116+2E21 B2 6E 22 22
 7117+2E25 00 00 6E 90  		DB	$00,$00,$6E,$90,$90,$90,$90,$00
 7117+2E29 90 90 90 00
 7118+2E2D 00 00 6E 90  		DB	$00,$00,$6E,$90,$4E,$22,$DC,$00
 7118+2E31 4E 22 DC 00
 7119+2E35 00 48 FC 48  		DB	$00,$48,$FC,$48,$48,$48,$46,$00
 7119+2E39 48 48 46 00
 7120+2E3D 00 00 B2 B2  		DB	$00,$00,$B2,$B2,$B2,$B2,$EC,$00
 7120+2E41 B2 B2 EC 00
 7121+2E45 00 00 AA AA  		DB	$00,$00,$AA,$AA,$AA,$AA,$44,$00
 7121+2E49 AA AA 44 00
 7122+2E4D 00 00 B1 F5  		DB	$00,$00,$B1,$F5,$F5,$F5,$4A,$00
 7122+2E51 F5 F5 4A 00
 7123+2E55 00 00 AA AA  		DB	$00,$00,$AA,$AA,$44,$AA,$AA,$00
 7123+2E59 44 AA AA 00
 7124+2E5D 00 00 B2 B2  		DB	$00,$00,$B2,$B2,$B2,$6E,$22,$CC
 7124+2E61 B2 6E 22 CC
 7125+2E65 00 00 FE 22  		DB	$00,$00,$FE,$22,$44,$88,$FE,$00
 7125+2E69 44 88 FE 00
 7126+2E6D 00 66 44 88  		DB	$00,$66,$44,$88,$44,$44,$66,$00
 7126+2E71 44 44 66 00
 7127+2E75 00 44 44 44  		DB	$00,$44,$44,$44,$44,$44,$44,$00
 7127+2E79 44 44 44 00
 7128+2E7D 00 CC 44 22  		DB	$00,$CC,$44,$22,$44,$44,$CC,$00
 7128+2E81 44 44 CC 00
 7129+2E85 00 4A B4 00  		DB	$00,$4A,$B4,$00,$00,$00,$00,$00
 7129+2E89 00 00 00 00
 7130+2E8D EE B1 F7 B5  		DB	$EE,$B1,$F7,$B5,$F5,$B7,$B1,$EE
 7130+2E91 F5 B7 B1 EE
 7131+2E95 00 00 00...  		DS	$36BA-$
 7132+36BA
 7133+36BA 74           l36ba:		LD	(HL),H
 7134+36BB DF           		RST	18H
 7135+36BC DE 55        		SBC	A,$55
 7136+36BE 10 52        		DJNZ	l3719-7		; (82)
 7137+36C0 C9           		RET
 7138+36C1 9E           		SBC	A,(HL)
 7139+36C2 9E           		SBC	A,(HL)
 7140+36C3 BD           		CP	L
 7141+36C4 62           		LD	H,D
 7142+36C5 C5           		PUSH	BC
 7143+36C6 C0           		RET	NZ
 7144+36C7 55           		LD	D,L
 7145+36C8 C2 44 10     		JP	NZ,$1044
 7146+36CB 17           		RLA
 7147+36CC
 7148+36CC FE 5F        l36cc:		CP	$5F
 7149+36CE 90           		SUB	B
 7150+36CF FE D1        		CP	$D1
 7151+36D1 DD           		DB	$DD
 7152+36D2 D5           		PUSH	DE
 7153+36D3
 7154+36D3 17           l36d3:		RLA
 7155+36D4 90           		SUB	B
 7156+36D5 F7           		RST	30H
 7157+36D6 DF           		RST	18H
 7158+36D7 DF           		RST	18H
 7159+36D8 D4 C7 D9     		CALL	NC,$D9C7
 7160+36DB DE C3        		SBC	A,$C3
 7161+36DD BD           		CP	L
 7162+36DE F3           		DI
 7163+36DF DC 59 D6     		CALL	C,$D659
 7164+36E2 56           		LD	D,(HL)
 7165+36E3 10 17        		DJNZ	l36f8+4		; (23)
 7166+36E5 64           		LD	H,H
 7167+36E6
 7168+36E6 47           l36e6:		LD	B,A
 7169+36E7 5F           		LD	E,A
 7170+36E8 90           		SUB	B
 7171+36E9
 7172+36E9 60           l36e9:		LD	H,B
 7173+36EA DF           		RST	18H
 7174+36EB 40           		LD	B,B
 7175+36EC
 7176+36EC 43           l36ec:		LD	B,E
 7177+36ED 97           		SUB	A
 7178+36EE 10 FC        		DJNZ	l36ec		; (-4)
 7179+36F0
 7180+36F0 51           l36f0:		LD	D,C
 7181+36F1 C7           		RST	$0
 7182+36F2 43           		LD	B,E
 7183+36F3 5F           		LD	E,A
 7184+36F4 DE BD        		SBC	A,$BD
 7185+36F6 66           		LD	H,(HL)
 7186+36F7 D9           		EXX
 7187+36F8
 7188+36F8 5B           l36f8:		LD	E,E
 7189+36F9 90           		SUB	B
 7190+36FA 17           		RLA
 7191+36FB E2 D5 54     		JP	po,$54D5
 7192+36FE 10 F8        		DJNZ	l36f8		; (-8)
 7193+3700 55           		LD	D,L
 7194+3701 42           		LD	B,D
 7195+3702 42           		LD	B,D
 7196+3703
 7197+3703 59           l3703:		LD	E,C
 7198+3704 DE 57        		SBC	A,$57
 7199+3706 17           		RLA
 7200+3707 90           		SUB	B
 7201+3708 7F           		LD	A,A
 7202+3709
 7203+3709 5C           l3709:		LD	E,H
 7204+370A 5C           		LD	E,H
 7205+370B D9           		EXX
 7206+370C C6 55        		ADD	A,$55
 7207+370E C2 90 51     		JP	NZ,$5190
 7208+3711 DE BD        		SBC	A,$BD
 7209+3713 E4 D8 D5     		CALL	po,$D5D8
 7210+3716 90           		SUB	B
 7211+3717 74           		LD	(HL),H
 7212+3718 5F           		LD	E,A
 7213+3719
 7214+3719 C2 5B 59     l3719:		JP	NZ,$595B
 7215+371C 5E           		LD	E,(HL)
 7216+371D D7           		RST	10H
 7217+371E 90           		SUB	B
 7218+371F 7D           		LD	A,L
 7219+3720 5F           		LD	E,A
 7220+3721 D2 BD 64     		JP	NC,$64BD
 7221+3724 58           		LD	E,B
 7222+3725 D1           		POP	DE
 7223+3726
 7224+3726 5E           l3726:		LD	E,(HL)
 7225+3727 DB C3        		IN	A,($C3)
 7226+3729 10 C4        		DJNZ	l36f0-1		; (-60)
 7227+372B 5F           		LD	E,A
 7228+372C 1E 1E        		LD	E,$1E
 7229+372E BD           		CP	L
 7230+372F 64           		LD	H,H
 7231+3730 D8           		RET	C
 7232+3731 D5           		PUSH	DE
 7233+3732 10 F2        		DJNZ	l3726		; (-14)
 7234+3734 42           		LD	B,D
 7235+3735 D5           		PUSH	DE
 7236+3736 47           		LD	B,A
 7237+3737 D5           		PUSH	DE
 7238+3738 42           		LD	B,D
 7239+3739 C9           		RET
 7240+373A 90           		SUB	B
 7241+373B E4 D1 C0     		CALL	po,$C0D1
 7242+373E 90           		SUB	B
 7243+373F 18           		DB	$18
 7244+3740 58           		DB	88
 7245+3741 D9           		EXX
 7246+3742 D3 19        		OUT	($19),A
 7247+3744 BD           		CP	L
 7248+3745 E2 5F DC     		JP	po,$DC5F
 7249+3748
 7250+3748 51           l3748:		LD	D,C
 7251+3749 DE 54        		SBC	A,$54
 7252+374B 1C           		INC	E
 7253+374C 90           		SUB	B
 7254+374D 62           		LD	H,D
 7255+374E D9           		EXX
 7256+374F D3 58        		OUT	($58),A
 7257+3751 51           		LD	D,C
 7258+3752 C2 54 90     		JP	NZ,$9054
 7259+3755 55           		LD	D,L
 7260+3756 44           		LD	B,H
 7261+3757 90           		SUB	B
 7262+3758 D1           		POP	DE
 7263+3759 5C           		LD	E,H
 7264+375A BD           		CP	L
 7265+375B 51           		LD	D,C
 7266+375C 5E           		LD	E,(HL)
 7267+375D 54           		LD	D,H
 7268+375E 90           		SUB	B
 7269+375F F9           		LD	SP,HL
 7270+3760 C6 DF        		ADD	A,$DF
 7271+3762 42           		LD	B,D
 7272+3763 10 98        		DJNZ	l36f8+5		; (-104)
 7273+3765 C7           		RST	$0
 7274+3766 D8           		RET	C
 7275+3767 49           		LD	C,C
 7276+3768 10 DE        		DJNZ	l3748		; (-34)
 7277+376A 5F           		LD	E,A
 7278+376B
 7279+376B C4 19 BD     l376b:		CALL	NZ,$BD19
 7280+376E 67           		LD	H,A
 7281+376F 42           		LD	B,D
 7282+3770 D9           		EXX
 7283+3771 44           		LD	B,H
 7284+3772 C4 D5 5E     		CALL	NZ,$5ED5
 7285+3775 90           		SUB	B
 7286+3776 DF           		RST	18H
 7287+3777 5E           		LD	E,(HL)
 7288+3778 90           		SUB	B
 7289+3779 60           		LD	H,B
 7290+377A F3           		DI
 7291+377B 67           		LD	H,A
 7292+377C 90           		SUB	B
 7293+377D 88           		ADC	A,B
 7294+377E 05           		DEC	B
 7295+377F 81           		ADD	A,C
 7296+3780 02           		LD	(BC),A
 7297+3781 43           		LD	B,E
 7298+3782 1C           		INC	E
 7299+3783 10 45        		DJNZ	l37ca		; (69)
 7300+3785 43           		LD	B,E
 7301+3786 D9           		EXX
 7302+3787 5E           		LD	E,(HL)
 7303+3788 BD           		CP	L
 7304+3789 FD           		DB	$FD
 7305+378A 08           		EX	AF,AF'
 7306+378B 00           		NOP
 7307+378C 90           		SUB	B
 7308+378D 51           		LD	D,C
 7309+378E DE D4        l378e:		SBC	A,$D4
 7310+3790 10 FC        		DJNZ	l378e		; (-4)
 7311+3792 08           		EX	AF,AF'
 7312+3793 00           		NOP
 7313+3794 10 45        		DJNZ	l37db		; (69)
 7314+3796 5E           		LD	E,(HL)
 7315+3797 D4 55 C2     		CALL	NC,$C255
 7316+379A 10 F3        		DJNZ	l378e+1		; (-13)
 7317+379C 60           		LD	H,B
 7318+379D 9F           		SBC	A,A
 7319+379E FD           		DB	$FD
 7320+379F 9B           		SBC	A,E
 7321+37A0 BD           		CP	L
 7322+37A1 BD           		CP	L
 7323+37A2 C3 90 C4     		JP	$C490
 7324+37A5 DF           		RST	18H
 7325+37A6 1E 9E        		LD	E,$9E
 7326+37A8 BD           		CP	L
 7327+37A9 64           		LD	H,H
 7328+37AA D8           		RET	C
 7329+37AB 55           		LD	D,L
 7330+37AC 10 BD        		DJNZ	l376b		; (-67)
 7331+37AE
 7332+37AE 00 00 00...  		DS	$1C
 7333+37CA
 7334+37CA 00 00 00...  l37ca:		DS	$11
 7335+37DB
 7336+37DB              l37db:
 7337+37DB
 7338+37DB 00 00 00...  		DS	$10
 7339+37EB 16 00 00     		DB	$16,$00,$00
 7340+37EE 10 00 11 07  m14e5:		DB	$10,$00,$11,$07,$13,$00
 7340+37F2 13 00
 7341+37F4 49 6E 73 65  		DB	"Insert tape and press PLAY", 13
 7341+37F8 72 74 20 74
 7341+37FC 61 70 65 20
 7341+3800 61 6E 64 20
 7341+3804 70 72 65 73
 7341+3808 73 20 50 4C
 7341+380C 41 59 0D
 7342+380F 54 6F 20 63  		DB	"To cancel - press BREAK twic", "e"+$80
 7342+3813 61 6E 63 65
 7342+3817 6C 20 2D 20
 7342+381B 70 72 65 73
 7342+381F 73 20 42 52
 7342+3823 45 41 4B 20
 7342+3827 74 77 69 63
 7342+382B E5
 7343+382C 00 00 00 00  		DB	0,0,0,0,0,0,0,0
 7343+3830 00 00 00 00
 7344+3834
 7345+3834              		IF 1
 7346+3834 7F 31 39 38  l3834:			DB	$7F, "1982, 1986, 1987 Amstrad Plc.", 13 + $80
 7346+3838 32 2C 20 31
 7346+383C 39 38 36 2C
 7346+3840 20 31 39 38
 7346+3844 37 20 41 6D
 7346+3848 73 74 72 61
 7346+384C 64 20 50 6C
 7346+3850 63 2E 8D
 7347+3853 20 20 20 20  			DB	"                                "
 7347+3857 20 20 20 20
 7347+385B 20 20 20 20
 7347+385F 20 20 20 20
 7347+3863 20 20 20 20
 7347+3867 20 20 20 20
 7347+386B 20 20 20 20
 7347+386F 20 20 20 20
 7348+3873              		ELSE
 7349+3873 ~            l3834:			DB	$7F, "1982, 1986, 1987 Amstrad Plc.", 13
 7350+3873 ~            			DB	$7F, "2000-2009 Garry Lancaster v"
 7351+3873 ~            			DB	$30+VMAYOR,"."
 7352+3873 ~            			DB	$30+VMINOR,$30+VPATCH+$80
 7353+3873              		ENDIF
 7354+3873
 7355+3873 D0           l3873:		RET	NC
 7356+3874 CD DA 15     		CALL	l15da
 7357+3877 D8           		RET	C
 7358+3878 78           		LD	A,B
 7359+3879 B1           		OR	C
 7360+387A 37           		SCF
 7361+387B C8           		RET	Z
 7362+387C C3 04 16     		JP	l1604
 7363+387F EB           l387f:		EX	DE,HL
 7364+3880 A7           		AND	A
 7365+3881 ED 52        		SBC	HL,DE
 7366+3883 4D           		LD	C,L
 7367+3884 47           		LD	B,A
 7368+3885 13           		INC	DE
 7369+3886 13           		INC	DE
 7370+3887 13           		INC	DE
 7371+3888 13           		INC	DE
 7372+3889 1A           		LD	A,(DE)
 7373+388A FE 50        		CP	$50
 7374+388C 28 14        		JR	Z,l38a2
 7375+388E 13           		INC	DE
 7376+388F 0D           		DEC	C
 7377+3890 28 09        		JR	Z,l389b
 7378+3892 13           		INC	DE
 7379+3893 13           		INC	DE
 7380+3894 EB           		EX	DE,HL
 7381+3895 5E           		LD	E,(HL)
 7382+3896 23           		INC	HL
 7383+3897 66           		LD	H,(HL)
 7384+3898 6B           		LD	L,E
 7385+3899 18 10        		JR	l38ab
 7386+389B EB           l389b:		EX	DE,HL
 7387+389C 5E           		LD	E,(HL)
 7388+389D 23           		INC	HL
 7389+389E 66           		LD	H,(HL)
 7390+389F 6B           		LD	L,E
 7391+38A0 18 65        		JR	l3907
 7392+38A2 21 21 39     l38a2:		LD	HL,l3921
 7393+38A5 0D           		DEC	C
 7394+38A6 28 5F        		JR	Z,l3907
 7395+38A8 21 27 39     		LD	HL,l3927
 7396+38AB FD CB 02 9E  l38ab:		res	3, (IY+$02)
 7397+38AF E5           		PUSH	HL
 7398+38B0 2A 3D 5C     		LD	HL,(	$5C3D)
 7399+38B3 5E           		LD	E,(HL)
 7400+38B4 23           		INC	HL
 7401+38B5 56           		LD	D,(HL)
 7402+38B6 A7           		AND	A
 7403+38B7 21 7F 10     		LD	HL,o107F
 7404+38BA ED 52        		SBC	HL,DE
 7405+38BC E1           		POP	HL
 7406+38BD 20 39        		JR	NZ,l38f8
 7407+38BF ED 7B 3D 5C  		LD	SP,(	$5C3D)
 7408+38C3 D1           		POP	DE
 7409+38C4 D1           		POP	DE
 7410+38C5 ED 53 3D 5C  		LD	(	$5C3D),DE
 7411+38C9 DD E5        		PUSH	IX
 7412+38CB E5           l38cb:		PUSH	HL
 7413+38CC 11 D1 38     		LD	DE,l38d1
 7414+38CF D5           		PUSH	DE
 7415+38D0 E9           		JP	(HL)
 7416+38D1 38 09        l38d1:		JR	C,l38dc
 7417+38D3 28 04        		JR	Z,l38d9
 7418+38D5 3E 07        l38d5:		LD	A,7
 7419+38D7 18 3E        		JR	l3917
 7420+38D9 E1           l38d9:		POP	HL
 7421+38DA 18 EF        		JR	l38cb
 7422+38DC FE 0D        l38dc:		CP	13
 7423+38DE 28 0E        		JR	Z,l38ee
 7424+38E0 2A 5A 5B     		LD	HL,(	$5B5A)
 7425+38E3 E5           		PUSH	HL
 7426+38E4 EF           		RST	28H
 7427+38E5 85 0F        		DW	$0F85
 7428+38E7 E1           		POP	HL
 7429+38E8 22 5A 5B     		LD	(	$5B5A),HL
 7430+38EB E1           		POP	HL
 7431+38EC 18 DD        		JR	l38cb
 7432+38EE E1           l38ee:		POP	HL
 7433+38EF DD E1        		POP	IX
 7434+38F1 21 FE 15     		LD	HL,l15fe
 7435+38F4 E5           		PUSH	HL
 7436+38F5 C3 00 5B     		JP	$5B00
 7437+38F8 11 FE 15     l38f8:		LD	DE,l15fe
 7438+38FB D5           		PUSH	DE
 7439+38FC CD 16 39     		CALL	l3916
 7440+38FF DA 00 5B     		JP	C,$5B00
 7441+3902 CA 00 5B     		JP	Z,$5B00
 7442+3905 18 CE        		JR	l38d5
 7443+3907 11 FE 15     l3907:		LD	DE,l15fe
 7444+390A D5           		PUSH	DE
 7445+390B 78           		LD	A,B
 7446+390C DD E5        		PUSH	IX
 7447+390E CD 16 39     		CALL	l3916
 7448+3911 DD E1        		POP	IX
 7449+3913 C3 00 5B     		JP	$5B00
 7450+3916 E9           l3916:		JP	(HL)
 7451+3917 2A 5D 5C     l3917:		LD	HL,(	$5C5D)
 7452+391A 22 5F 5C     		LD	(	$5C5F),HL
 7453+391D 6F           		LD	L,A
 7454+391E EF           		RST	28H
 7455+391F 55 00        		DW	o0055
 7456+3921 CD 80 3E     l3921:		CALL	l3e80
 7457+3924 6E           		LD	L,(HL)
 7458+3925 1F           		RRA
 7459+3926 C9           		RET
 7460+3927 CD 80 3E     l3927:		CALL	l3e80
 7461+392A 70           		LD	(HL),B
 7462+392B 1E C9        		LD	E,$C9
 7463+392D 2A 51 5C     l392d:		LD	HL,(	$5C51)
 7464+3930 7E           		LD	A,(HL)
 7465+3931 FE 00        		CP	0
 7466+3933 20 32        		JR	NZ,l3967
 7467+3935 23           		INC	HL
 7468+3936 7E           		LD	A,(HL)
 7469+3937 2B           		DEC	HL
 7470+3938 FE 5B        		CP	$5B
 7471+393A 20 2B        		JR	NZ,l3967
 7472+393C 23           		INC	HL
 7473+393D 23           		INC	HL
 7474+393E 23           		INC	HL
 7475+393F 23           		INC	HL
 7476+3940 7E           		LD	A,(HL)
 7477+3941 23           		INC	HL
 7478+3942 FE 50        		CP	$50
 7479+3944 20 0F        		JR	NZ,l3955
 7480+3946 7B           		LD	A,E
 7481+3947 FE 04        		CP	4
 7482+3949 28 51        		JR	Z,l399c
 7483+394B FE 02        		CP	2
 7484+394D CA 27 39     		JP	Z,l3927
 7485+3950 D9           		EXX
 7486+3951 79           		LD	A,C
 7487+3952 C3 21 39     		JP	l3921
 7488+3955 7B           l3955:		LD	A,E
 7489+3956 19           		ADD	HL,DE
 7490+3957 5E           		LD	E,(HL)
 7491+3958 23           		INC	HL
 7492+3959 56           		LD	D,(HL)
 7493+395A D5           		PUSH	DE
 7494+395B FE 02        		CP	2
 7495+395D 28 03        		JR	Z,l3962
 7496+395F D9           		EXX
 7497+3960 79           		LD	A,C
 7498+3961 C9           		RET
 7499+3962 21 96 39     l3962:		LD	HL,l3996
 7500+3965 E3           		EX	(SP),HL
 7501+3966 E9           		JP	(HL)
 7502+3967 7B           l3967:		LD	A,E
 7503+3968 FE 04        		CP	4
 7504+396A 28 30        		JR	Z,l399c
 7505+396C 19           		ADD	HL,DE
 7506+396D 5E           		LD	E,(HL)
 7507+396E 23           		INC	HL
 7508+396F 56           		LD	D,(HL)
 7509+3970 2A 5A 5B     		LD	HL,(	$5B5A)
 7510+3973 E5           		PUSH	HL
 7511+3974 FE 02        		CP	2
 7512+3976 28 11        		JR	Z,l3989
 7513+3978 21 85 39     		LD	HL,l3985
 7514+397B 22 5A 5B     		LD	(	$5B5A),HL
 7515+397E EB           		EX	DE,HL
 7516+397F D9           		EXX
 7517+3980 79           		LD	A,C
 7518+3981 D9           		EXX
 7519+3982 C3 AE 00     		JP	l00ae
 7520+3985 22 5A 5B     l3985:		LD	(	$5B5A),HL
 7521+3988 C9           		RET
 7522+3989 21 93 39     l3989:		LD	HL,l3993
 7523+398C 22 5A 5B     		LD	(	$5B5A),HL
 7524+398F EB           		EX	DE,HL
 7525+3990 C3 AE 00     		JP	l00ae
 7526+3993 22 5A 5B     l3993:		LD	(	$5B5A),HL
 7527+3996 D8           l3996:		RET	C
 7528+3997 11 02 00     		LD	DE,2
 7529+399A 18 91        		JR	l392d
 7530+399C 3E 12        l399c:		LD	A,$12
 7531+399E C3 17 39     		JP	l3917
 7532+39A1 2A 51 5C     l39a1:		LD	HL,(	$5C51)
 7533+39A4 11 0D 00     		LD	DE,13
 7534+39A7 19           		ADD	HL,DE
 7535+39A8 7E           		LD	A,(HL)
 7536+39A9 E5           		PUSH	HL
 7537+39AA 2A 4B 5C     		LD	HL,(	$5C4B)
 7538+39AD 4F           		LD	C,A
 7539+39AE 7E           l39ae:		LD	A,(HL)
 7540+39AF FE 80        		CP	$80
 7541+39B1 28 E9        		JR	Z,l399c
 7542+39B3 B9           		CP	C
 7543+39B4 28 08        		JR	Z,l39be
 7544+39B6 C5           		PUSH	BC
 7545+39B7 EF           		RST	28H
 7546+39B8 B8 19        		DW	o19B8
 7547+39BA C1           		POP	BC
 7548+39BB EB           		EX	DE,HL
 7549+39BC 18 F0        		JR	l39ae
 7550+39BE 23           l39be:		INC	HL
 7551+39BF 23           		INC	HL
 7552+39C0 23           		INC	HL
 7553+39C1 7E           		LD	A,(HL)
 7554+39C2 23           		INC	HL
 7555+39C3 3D           		DEC	A
 7556+39C4 20 D6        		JR	NZ,l399c
 7557+39C6 4E           		LD	C,(HL)
 7558+39C7 23           		INC	HL
 7559+39C8 46           		LD	B,(HL)
 7560+39C9 23           		INC	HL
 7561+39CA EB           		EX	DE,HL
 7562+39CB E1           		POP	HL
 7563+39CC 23           		INC	HL
 7564+39CD 7E           		LD	A,(HL)
 7565+39CE 23           		INC	HL
 7566+39CF 66           		LD	H,(HL)
 7567+39D0 6F           		LD	L,A
 7568+39D1 E5           		PUSH	HL
 7569+39D2 A7           		AND	A
 7570+39D3 ED 42        		SBC	HL,BC
 7571+39D5 E1           		POP	HL
 7572+39D6 C9           		RET
 7573+39D7 CD A1 39     l39d7:		CALL	l39a1
 7574+39DA D2 D5 38     		JP	NC,l38d5
 7575+39DD 19           		ADD	HL,DE
 7576+39DE 7E           		LD	A,(HL)
 7577+39DF 2A 51 5C     l39df:		LD	HL,(	$5C51)
 7578+39E2 11 0E 00     		LD	DE,14
 7579+39E5 19           		ADD	HL,DE
 7580+39E6 5E           		LD	E,(HL)
 7581+39E7 23           		INC	HL
 7582+39E8 56           		LD	D,(HL)
 7583+39E9 13           		INC	DE
 7584+39EA 72           		LD	(HL),D
 7585+39EB 2B           		DEC	HL
 7586+39EC 73           		LD	(HL),E
 7587+39ED 37           		SCF
 7588+39EE C9           		RET
 7589+39EF F5           l39ef:		PUSH	AF
 7590+39F0 CD A1 39     		CALL	l39a1
 7591+39F3 D2 D5 38     		JP	NC,l38d5
 7592+39F6 19           		ADD	HL,DE
 7593+39F7 F1           		POP	AF
 7594+39F8 77           		LD	(HL),A
 7595+39F9 18 E4        		JR	l39df
 7596+39FB E5           l39fb:		PUSH	HL
 7597+39FC D5           		PUSH	DE
 7598+39FD 78           		LD	A,B
 7599+39FE F5           		PUSH	AF
 7600+39FF CD A1 39     		CALL	l39a1
 7601+3A02 F1           		POP	AF
 7602+3A03 A7           		AND	A
 7603+3A04 20 06        		JR	NZ,l3a0c
 7604+3A06 C1           		POP	BC
 7605+3A07 C1           		POP	BC
 7606+3A08 11 00 00     		LD	DE,0
 7607+3A0B C9           		RET
 7608+3A0C 3D           l3a0c:		DEC	A
 7609+3A0D 20 1A        		JR	NZ,l3a29
 7610+3A0F E1           		POP	HL
 7611+3A10 7C           		LD	A,H
 7612+3A11 B5           		OR	L
 7613+3A12 C2 D5 38     		JP	NZ,l38d5
 7614+3A15 E1           		POP	HL
 7615+3A16 A7           		AND	A
 7616+3A17 ED 42        		SBC	HL,BC
 7617+3A19 D2 D5 38     		JP	NC,l38d5
 7618+3A1C 09           		ADD	HL,BC
 7619+3A1D EB           		EX	DE,HL
 7620+3A1E 2A 51 5C     		LD	HL,(	$5C51)
 7621+3A21 01 0E 00     		LD	BC,14
 7622+3A24 09           		ADD	HL,BC
 7623+3A25 73           		LD	(HL),E
 7624+3A26 23           		INC	HL
 7625+3A27 72           		LD	(HL),D
 7626+3A28 C9           		RET
 7627+3A29 E1           l3a29:		POP	HL
 7628+3A2A E1           		POP	HL
 7629+3A2B 60           		LD	H,B
 7630+3A2C 69           		LD	L,C
 7631+3A2D 11 00 00     		LD	DE,0
 7632+3A30 C9           		RET
 7633+3A31
 7634+3A31              FREE_ROM0_4:	EQU	$
 7635+3A31
 7636+3A31              		;HAY ACA COMO 940 BYTES LIBRES... ¡aprovéchalos bien!
 7637+3A31              		;...
 7638+3A31              		;...
 7639+3A31
 7640+3A31              R0_FREE_4:	EQU	$03CF-($-FREE_ROM0_4)
 7641+3A31 00 00 00...  ROM0_SPARE4:	DS	R0_FREE_4
 7642+3E00
 7643+3E00 22 52 5B     		LD	(	$5B52),HL
 7644+3E03 F5           		PUSH	AF
 7645+3E04 E1           		POP	HL
 7646+3E05
 7647+3E05 22 56 5B     l3e05:		LD	(	$5B56),HL
 7648+3E08 E3           		EX	(SP),HL
 7649+3E09 4E           		LD	C,(HL)
 7650+3E0A 23           		INC	HL
 7651+3E0B 46           		LD	B,(HL)
 7652+3E0C 23           		INC	HL
 7653+3E0D E3           		EX	(SP),HL
 7654+3E0E C5           		PUSH	BC
 7655+3E0F E1           		POP	HL
 7656+3E10 3A 67 5B     		LD	A,(	$5B67)
 7657+3E13 01 FD 1F     		LD	BC,PBANK678
 7658+3E16 CB 97        		res	2,A
 7659+3E18 F3           		DI
 7660+3E19 32 67 5B     		LD	(	$5B67),A
 7661+3E1C ED 79        		OUT	(C),A
 7662+3E1E FB           		EI
 7663+3E1F 01 2D 3E     		LD	BC,$3E2D
 7664+3E22 C5           		PUSH	BC
 7665+3E23 E5           		PUSH	HL
 7666+3E24 2A 56 5B     		LD	HL,(	$5B56)
 7667+3E27 E5           		PUSH	HL
 7668+3E28 F1           		POP	AF
 7669+3E29 2A 52 5B     		LD	HL,(	$5B52)
 7670+3E2C C9           		RET
 7671+3E2D C5           		PUSH	BC
 7672+3E2E F5           		PUSH	AF
 7673+3E2F 3A 67 5B     		LD	A,(	$5B67)
 7674+3E32 01 FD 1F     		LD	BC,PBANK678
 7675+3E35 CB D7        		SET	2,A
 7676+3E37 F3           		DI
 7677+3E38 32 67 5B     		LD	(	$5B67),A
 7678+3E3B ED 79        		OUT	(C),A
 7679+3E3D FB           		EI
 7680+3E3E F1           		POP	AF
 7681+3E3F C1           		POP	BC
 7682+3E40 C9           		RET
 7683+3E41
 7684+3E41 2A 51 5C     l3e41:		LD	HL,(	$5C51)	; get address of current channel information
 7685+3E44 11 0D 00     		LD	DE,13
 7686+3E47 19           		ADD	HL,DE
 7687+3E48 46           		LD	B,(HL)
 7688+3E49 E1           		POP	HL
 7689+3E4A CD CC 05     		CALL	l05cc
 7690+3E4D E9           		JP	(HL)
 7691+3E4E D9           l3e4e:		EXX
 7692+3E4F CD 41 3E     		CALL	l3e41
 7693+3E52 C5           		PUSH	BC
 7694+3E53 D9           		EXX
 7695+3E54 78           		LD	A,B
 7696+3E55 C1           		POP	BC
 7697+3E56 A7           		AND	A
 7698+3E57 28 0A        		JR	Z,l3e63
 7699+3E59 3D           		DEC	A
 7700+3E5A 28 10        		JR	Z,l3e6c
 7701+3E5C CD C9 3E     		CALL	l3ec9
 7702+3E5F 39           		ADD	HL,SP
 7703+3E60 01 18 05     		LD	BC,$0518
 7704+3E63 CD C9 3E     l3e63:		CALL	l3ec9
 7705+3E66 33           		INC	SP
 7706+3E67 01 16 00     		LD	BC,22
 7707+3E6A 18 7D        		JR	l3ee9
 7708+3E6C CD C9 3E     l3e6c:		CALL	l3ec9
 7709+3E6F 36 01        		LD	(HL),1
 7710+3E71 18 76        		JR	l3ee9
 7711+3E73 CD 41 3E     		CALL	l3e41
 7712+3E76 CD C9 3E     		CALL	l3ec9
 7713+3E79 18 01        		JR	l3e7c
 7714+3E7B 79           l3e7b:		LD	A,C
 7715+3E7C 18 6B        l3e7c:		JR	l3ee9
 7716+3E7E 00 00        		DS	2
 7717+3E80
 7718+3E80              ; Subroutine to call a subroutine in ROM 1
 7719+3E80              ; The address to call is stored inline after the call to this routine
 7720+3E80
 7721+3E80 22 52 5B     l3e80:		LD	(	$5B52),HL	; save HL in OLDHL
 7722+3E83 ED 43 54 5B  		LD	(	$5B54),BC	; save BC in OLDBC
 7723+3E87 F5           		PUSH	AF
 7724+3E88 E1           		POP	HL
 7725+3E89 22 56 5B     		LD	(	$5B56),HL	; save AF in OLDAF
 7726+3E8C E3           		EX	(SP),HL		; HL=return address
 7727+3E8D 4E           		LD	C,(HL)
 7728+3E8E 23           		INC	HL
 7729+3E8F 46           		LD	B,(HL)		; BC=inline address for ROM 1
 7730+3E90 23           		INC	HL
 7731+3E91 E3           		EX	(SP),HL		; restore proper return address
 7732+3E92 C5           		PUSH	BC
 7733+3E93 E1           		POP	HL		; HL=address in ROM 1 to call
 7734+3E94 3A 5C 5B     		LD	A,(	$5B5C)
 7735+3E97 F6 10        		OR	$10
 7736+3E99 F3           		DI
 7737+3E9A 32 5C 5B     		LD	(	$5B5C),A
 7738+3E9D 01 FD 7F     		LD	BC,PBANKM
 7739+3EA0 ED 79        		OUT	(C),A		; page in ROM 1
 7740+3EA2
 7741+3EA2              ; The rest of the routine continues at $3EA2 in ROM 1
 7742+3EA2              ; The following is a continuation of a mirrored routine in ROM 1 for
 7743+3EA2              ; returning to this ROM
 7744+3EA2
 7745+3EA2 FB           l3ea2:		EI
 7746+3EA3 01 B5 3E     		LD	BC,$3EB5
 7747+3EA6 C5           		PUSH	BC		; stack return add to swap back ROMS
 7748+3EA7 E5           		PUSH	HL		; stack address of routine to call
 7749+3EA8 2A 56 5B     		LD	HL,(	$5B56)
 7750+3EAB E5           		PUSH	HL
 7751+3EAC F1           		POP	AF		; restore AF
 7752+3EAD ED 4B 54 5B  		LD	BC,(	$5B54)	; restore BC
 7753+3EB1 2A 52 5B     		LD	HL,(	$5B52)	; restore HL
 7754+3EB4 C9           		RET			; exit to routine in this ROM
 7755+3EB5
 7756+3EB5              ; This is the routine which returns control to the calling routine in ROM 1
 7757+3EB5
 7758+3EB5 F5           l3eb5:		PUSH	AF		; save AF & BC
 7759+3EB6 C5           		PUSH	BC
 7760+3EB7 3A 5C 5B     		LD	A,(	$5B5C)
 7761+3EBA F6 10        		OR	$10
 7762+3EBC F3           		DI
 7763+3EBD 32 5C 5B     		LD	(	$5B5C),A
 7764+3EC0 01 FD 7F     		LD	BC,PBANKM
 7765+3EC3 ED 79        		OUT	(C),A		; page back ROM 1
 7766+3EC5
 7767+3EC5              ; The rest of the routine continues at $3EC5 in ROM 1
 7768+3EC5              ; The following is a continuation of a mirrored routine in ROM 1 for
 7769+3EC5              ; returning to this ROM
 7770+3EC5
 7771+3EC5 FB           l3ec5:		EI
 7772+3EC6 C1           		POP	BC
 7773+3EC7 F1           		POP	AF
 7774+3EC8 C9           		RET
 7775+3EC9
 7776+3EC9 22 52 5B     l3ec9:		LD	(	$5B52),HL	; save HL in OLDHL
 7777+3ECC ED 43 54 5B  		LD	(	$5B54),BC	; save BC in OLDBC
 7778+3ED0 F5           		PUSH	AF
 7779+3ED1 E1           		POP	HL
 7780+3ED2 22 56 5B     		LD	(	$5B56),HL	; save AF in OLDAF
 7781+3ED5 E3           		EX	(SP),HL		; HL=return address
 7782+3ED6 4E           		LD	C,(HL)
 7783+3ED7 23           		INC	HL
 7784+3ED8 46           		LD	B,(HL)		; BC=inline address for ROM 1
 7785+3ED9 23           		INC	HL
 7786+3EDA E3           		EX	(SP),HL		; restore proper return address
 7787+3EDB 21 63 3F     		LD	HL,l3f63
 7788+3EDE 18 35        		JR	l3f15
 7789+3EE0 4F           l3ee0:		LD	C,A
 7790+3EE1 CD 41 3E     		CALL	l3e41
 7791+3EE4 CD C9 3E     		CALL	l3ec9
 7792+3EE7 1B           		DEC	DE
 7793+3EE8 01           		DB	1		; ld bc, xxxx
 7794+3EE9 CD A7 05     l3ee9:		CALL	l05a7
 7795+3EEC D8           		RET	C
 7796+3EED 3E 12        		LD	A,$12
 7797+3EEF C3 17 39     		JP	l3917
 7798+3EF2 00 00 00...  		DS	14
 7799+3F00
 7800+3F00              ; Subroutine to call a subroutine in ROM 2, with inline address
 7801+3F00              ; This routine is not used in this ROM, but is a duplicate of a
 7802+3F00              ; routine in ROM 1, which takes over during ROM switching to ROM 2
 7803+3F00              ; via this ROM, and back again at the end.
 7804+3F00
 7805+3F00 22 52 5B     l3f00:		LD	(	$5B52),HL	; save HL, BC and AF
 7806+3F03 ED 43 54 5B  		LD	(	$5B54),BC
 7807+3F07 F5           		PUSH	AF
 7808+3F08 E1           		POP	HL
 7809+3F09 22 56 5B     		LD	(	$5B56),HL
 7810+3F0C E3           		EX	(SP),HL
 7811+3F0D 4E           		LD	C,(HL)
 7812+3F0E 23           		INC	HL
 7813+3F0F 46           		LD	B,(HL)		; BC=inline address
 7814+3F10 23           		INC	HL
 7815+3F11 E3           		EX	(SP),HL		; restack updated return address
 7816+3F12
 7817+3F12 21 42 3F     		LD	HL,l3f42
 7818+3F15 E5           l3f15:		PUSH	HL
 7819+3F16 C5           		PUSH	BC
 7820+3F17 E1           		POP	HL
 7821+3F18 3A 5C 5B     		LD	A,(	$5B5C)
 7822+3F1B E6 EF        		AND	$EF
 7823+3F1D F3           		DI
 7824+3F1E 32 5C 5B     		LD	(	$5B5C),A
 7825+3F21 01 FD 7F     		LD	BC,PBANKM
 7826+3F24 ED 79        		OUT	(C),A		; switch in ROM 0
 7827+3F26 3A 67 5B     		LD	A,(	$5B67)
 7828+3F29 F6 04        		OR	$04
 7829+3F2B 32 67 5B     		LD	(	$5B67),A
 7830+3F2E 01 FD 1F     		LD	BC,PBANK678
 7831+3F31 ED 79        		OUT	(C),A		; switch in ROM 2
 7832+3F33 FB           		EI
 7833+3F34 E5           		PUSH	HL		; stack routine address to call in ROM 2
 7834+3F35 2A 56 5B     		LD	HL,(	$5B56)	; restore registers
 7835+3F38 E5           		PUSH	HL
 7836+3F39 F1           		POP	AF
 7837+3F3A ED 4B 54 5B  		LD	BC,(	$5B54)
 7838+3F3E 2A 52 5B     		LD	HL,(	$5B52)
 7839+3F41 C9           		RET			; exit to routine
 7840+3F42
 7841+3F42              ; This part of the routine then returns control to ROM 1
 7842+3F42
 7843+3F42 C5           l3f42:		PUSH	BC		; save registers
 7844+3F43 F5           		PUSH	AF
 7845+3F44 3A 67 5B     		LD	A,(	$5B67)
 7846+3F47 E6 FB        		AND	$FB
 7847+3F49 F3           		DI
 7848+3F4A 32 67 5B     		LD	(	$5B67),A
 7849+3F4D 01 FD 1F     		LD	BC,PBANK678
 7850+3F50 ED 79        		OUT	(C),A		; page in ROM 0
 7851+3F52 3A 5C 5B     		LD	A,(	$5B5C)
 7852+3F55 F6 10        		OR	$10
 7853+3F57 32 5C 5B     		LD	(	$5B5C),A
 7854+3F5A 01 FD 7F     		LD	BC,PBANKM
 7855+3F5D ED 79        		OUT	(C),A		; page in ROM 1
 7856+3F5F FB           		EI
 7857+3F60 F1           		POP	AF		; restore registers
 7858+3F61 C1           		POP	BC
 7859+3F62 C9           		RET			; done!
 7860+3F63
 7861+3F63 C5           l3f63:		PUSH	BC
 7862+3F64 F5           		PUSH	AF
 7863+3F65 3A 67 5B     		LD	A,(	$5B67)
 7864+3F68 E6 FB        		AND	$FB
 7865+3F6A F3           		DI
 7866+3F6B 32 67 5B     		LD	(	$5B67),A
 7867+3F6E 01 FD 1F     		LD	BC,$1FFD
 7868+3F71 ED 79        		OUT	(C),A
 7869+3F73 FB           		EI
 7870+3F74 F1           		POP	AF
 7871+3F75 C1           		POP	BC
 7872+3F76 C9           		RET
 7873+3F77 D9           l3f77:		EXX
 7874+3F78 E5           l3f78:		PUSH	HL
 7875+3F79 C5           		PUSH	BC
 7876+3F7A E5           		PUSH	HL
 7877+3F7B 2A 5A 5B     		LD	HL,(	$5B5A)
 7878+3F7E E3           		EX	(SP),HL
 7879+3F7F EF           		RST	28H
 7880+3F80 E8 19        		DW	o19E8
 7881+3F82 E1           		POP	HL
 7882+3F83 22 5A 5B     		LD	(	$5B5A),HL
 7883+3F86 C1           		POP	BC
 7884+3F87 E1           		POP	HL
 7885+3F88 ED 5B 4F 5C  		LD	DE,(	$5C4F)
 7886+3F8C A7           		AND	A
 7887+3F8D ED 52        		SBC	HL,DE
 7888+3F8F E5           		PUSH	HL
 7889+3F90 3E 13        		LD	A,$13
 7890+3F92 21 10 5C     		LD	HL,	$5C10
 7891+3F95 5E           l3f95:		LD	E,(HL)
 7892+3F96 23           		INC	HL
 7893+3F97 56           		LD	D,(HL)
 7894+3F98 E3           		EX	(SP),HL
 7895+3F99 A7           		AND	A
 7896+3F9A ED 52        		SBC	HL,DE
 7897+3F9C 19           		ADD	HL,DE
 7898+3F9D 30 05        		JR	NC,l3fa4
 7899+3F9F EB           		EX	DE,HL
 7900+3FA0 A7           		AND	A
 7901+3FA1 ED 42        		SBC	HL,BC
 7902+3FA3 EB           		EX	DE,HL
 7903+3FA4 E3           l3fa4:		EX	(SP),HL
 7904+3FA5 2B           		DEC	HL
 7905+3FA6 73           		LD	(HL),E
 7906+3FA7 23           		INC	HL
 7907+3FA8 72           		LD	(HL),D
 7908+3FA9 23           		INC	HL
 7909+3FAA 3D           		DEC	A
 7910+3FAB 20 E8        		JR	NZ,l3f95
 7911+3FAD E1           		POP	HL
 7912+3FAE C9           		RET
 7913+3FAF D9           l3faf:		EXX
 7914+3FB0 E5           l3fb0:		PUSH	HL
 7915+3FB1 C5           		PUSH	BC
 7916+3FB2 E5           		PUSH	HL
 7917+3FB3 2A 5A 5B     		LD	HL,(	$5B5A)
 7918+3FB6 E3           		EX	(SP),HL
 7919+3FB7 EF           		RST	28H
 7920+3FB8 55 16        		DW	o1655
 7921+3FBA E1           		POP	HL
 7922+3FBB 22 5A 5B     		LD	(	$5B5A),HL
 7923+3FBE 2A 57 5C     		LD	HL,(	$5C57)
 7924+3FC1 ED 5B 53 5C  		LD	DE,(	$5C53)
 7925+3FC5 1B           		DEC	DE
 7926+3FC6 A7           		AND	A
 7927+3FC7 ED 52        		SBC	HL,DE
 7928+3FC9 30 04        		JR	NC,l3fcf
 7929+3FCB ED 53 57 5C  		LD	(	$5C57),DE
 7930+3FCF C1           l3fcf:		POP	BC
 7931+3FD0 E1           		POP	HL
 7932+3FD1 ED 5B 4F 5C  		LD	DE,(	$5C4F)
 7933+3FD5 A7           		AND	A
 7934+3FD6 ED 52        		SBC	HL,DE
 7935+3FD8 E5           		PUSH	HL
 7936+3FD9 3E 13        		LD	A,$13
 7937+3FDB 21 10 5C     		LD	HL,	$5C10
 7938+3FDE 5E           l3fde:		LD	E,(HL)
 7939+3FDF 23           		INC	HL
 7940+3FE0 56           		LD	D,(HL)
 7941+3FE1 E3           		EX	(SP),HL
 7942+3FE2 A7           		AND	A
 7943+3FE3 ED 52        		SBC	HL,DE
 7944+3FE5 19           		ADD	HL,DE
 7945+3FE6 30 04        		JR	NC,l3fec
 7946+3FE8 EB           		EX	DE,HL
 7947+3FE9 A7           		AND	A
 7948+3FEA 09           		ADD	HL,BC
 7949+3FEB EB           		EX	DE,HL
 7950+3FEC E3           l3fec:		EX	(SP),HL
 7951+3FED 2B           		DEC	HL
 7952+3FEE 73           		LD	(HL),E
 7953+3FEF 23           		INC	HL
 7954+3FF0 72           		LD	(HL),D
 7955+3FF1 23           		INC	HL
 7956+3FF2 3D           		DEC	A
 7957+3FF3 20 E9        		JR	NZ,l3fde
 7958+3FF5 E1           		POP	HL
 7959+3FF6 C9           		RET
 7960+3FF7
 7961+3FF7              ; This routine is called from ROM 2 to display error messages, and
 7962+3FF7              ; optionally get a response
 7963+3FF7
 7964+3FF7 C3 87 21     l3ff0:		JP	l2187		; go to the routine
 7965+3FFA
 7966+3FFA 00 00 00 00  		DB	0,0,0,0,0,0
 7966+3FFE 00 00
 7967+4000
# file closed: plus3ROM0.asm
  121 4000              	INCLUDE	"plus3ROM1.asm"			; ROM DEL SYNTAX ROM
# file opened: plus3ROM1.asm
    1+4000              		OUTPUT	"p3t_rom1.rom"
    2+4000
    3+4000              		ORG	$0000
    4+0000
    5+0000              ; **************************************************
    6+0000              ; *** SPECTRUM +3 ROM 1 DISASSEMBLY (SYNTAX ROM) ***
    7+0000              ; **************************************************
    8+0000
    9+0000              ; The Spectrum ROMs are copyright Amstrad, who have kindly given permission
   10+0000              ; to reverse engineer and publish Spectrum ROM disassemblies.
   11+0000
   12+0000
   13+0000              ; =====
   14+0000              ; NOTES
   15+0000              ; =====
   16+0000
   17+0000              ; ------------------------
   18+0000              ; Disassembly Contributors
   19+0000              ; ------------------------
   20+0000              ; Garry Lancaster
   21+0000              ;
   22+0000              ; The ROM disassembly was created with the aid of dZ80 V1.10, and incorporates work from
   23+0000              ; "The canonical list of +3 oddities" by Ian Collier.
   24+0000
   25+0000              ; -----------------
   26+0000              ; Assembler Details
   27+0000              ; -----------------
   28+0000
   29+0000              ; This file can be assembled to produce a binary image of the ROM
   30+0000              ; with Interlogic's Z80ASM assembler (available for Z88, QL, DOS and Linux).
   31+0000              ; Note that the defs directive is used and this causes a block of $00 bytes to be created.
   32+0000
   33+0000              ;**************************************************
   34+0000
   35+0000              ; +3DOS routine addresses
   36+0000
   37+0000              		DEFINE	DOS_INITIALISE $0100
   38+0000              		DEFINE	DOS_VERSION $0103
   39+0000              		DEFINE	DOS_OPEN $0106
   40+0000              		DEFINE	DOS_CLOSE $0109
   41+0000              		DEFINE	DOS_ABANDON $010C
   42+0000              		DEFINE	DOS_REF_HEAD $010F
   43+0000              		DEFINE	DOS_READ $0112
   44+0000              		DEFINE	DOS_WRITE $0115
   45+0000              		DEFINE	DOS_BYTE_READ $0118
   46+0000              		DEFINE	DOS_BYTE_WRITE $011B
   47+0000              		DEFINE	DOS_CATALOG $011E
   48+0000              		DEFINE	DOS_FREE_SPACE $0121
   49+0000              		DEFINE	DOS_DELETE $0124
   50+0000              		DEFINE	DOS_RENAME $0127
   51+0000              		DEFINE	DOS_BOOT $012A
   52+0000              		DEFINE	DOS_SET_DRIVE $012D
   53+0000              		DEFINE	DOS_SET_USER $0130
   54+0000              		DEFINE	DOS_GET_POSITION $0133
   55+0000              		DEFINE	DOS_SET_POSITION $0136
   56+0000              		DEFINE	DOS_GET_EOF $0139
   57+0000              		DEFINE	DOS_GET_1346 $013C
   58+0000              		DEFINE	DOS_SET_1346 $013F
   59+0000              		DEFINE	DOS_FLUSH $0142
   60+0000              		DEFINE	DOS_SET_ACCESS $0145
   61+0000              		DEFINE	DOS_SET_ATTRIBUTES $0148
   62+0000              		DEFINE	DOS_OPENDRIVE $014B
   63+0000              		DEFINE	DOS_SET_MESSAGE $014E
   64+0000              		DEFINE	DOS_REF_XDPB $0151
   65+0000              		DEFINE	DOS_MAP_B $0154
   66+0000
   67+0000              		DEFINE	DD_INTERFACE $0157
   68+0000              		DEFINE	DD_INIT $015A
   69+0000              		DEFINE	DD_SETUP $015D
   70+0000              		DEFINE	DD_SET_RETRY $0160
   71+0000              		DEFINE	DD_READ_SECTOR $0163
   72+0000              		DEFINE	DD_WRITE_SECTOR $0166
   73+0000              		DEFINE	DD_CHECK_SECTOR $0169
   74+0000              		DEFINE	DD_FORMAT $016C
   75+0000              		DEFINE	DD_READ_ID $016F
   76+0000              		DEFINE	DD_TEST_UNSUITABLE $0172
   77+0000              		DEFINE	DD_LOGIN $0175
   78+0000              		DEFINE	DD_SEL_FORMAT $0178
   79+0000              		DEFINE	DD_ASK_1 $017B
   80+0000              		DEFINE	DD_DRIVE_STATUS $017E
   81+0000              		DEFINE	DD_EQUIPMENT $0181
   82+0000              		DEFINE	DD_ENCODE $0184
   83+0000              		DEFINE	DD_L_XDPB $0187
   84+0000              		DEFINE	DD_L_DPB $018A
   85+0000              		DEFINE	DD_L_SEEK $018D
   86+0000              		DEFINE	DD_L_READ $0190
   87+0000              		DEFINE	DD_L_WRITE $0193
   88+0000              		DEFINE	DD_L_ON_MOTOR $0196
   89+0000              		DEFINE	DD_L_T_OFF_MOTOR $0199
   90+0000              		DEFINE	DD_L_OFF_MOTOR $019C
   91+0000
   92+0000              ; +3DOS Error codes
   93+0000
   94+0000              		DEFINE	rc_ready $00
   95+0000              		DEFINE	rc_wp $01
   96+0000              		DEFINE	rc_seek $02
   97+0000              		DEFINE	rc_crc $03
   98+0000              		DEFINE	rc_nodata $04
   99+0000              		DEFINE	rc_mark $05
  100+0000              		DEFINE	rc_unrecog $06
  101+0000              		DEFINE	rc_unknown $07
  102+0000              		DEFINE	rc_diskchg $08
  103+0000              		DEFINE	rc_unsuit $09
  104+0000
  105+0000              		DEFINE	rc_badname $14
  106+0000              		DEFINE	rc_badparam $15
  107+0000              		DEFINE	rc_nodrive $16
  108+0000              		DEFINE	rc_nofile $17
  109+0000              		DEFINE	rc_exists $18
  110+0000              		DEFINE	rc_eof $19
  111+0000              		DEFINE	rc_diskfull $1A
  112+0000              		DEFINE	rc_dirfull $1B
  113+0000              		DEFINE	rc_ro $1C
  114+0000              		DEFINE	rc_number $1D
  115+0000              		DEFINE	rc_denied $1E
  116+0000              		DEFINE	rc_norename $1F
  117+0000              		DEFINE	rc_extent $20
  118+0000              		DEFINE	rc_uncached $21
  119+0000              		DEFINE	rc_toobig $22
  120+0000              		DEFINE	rc_notboot $23
  121+0000              		DEFINE	rc_inuse $24
  122+0000              ;--------------------------------------------------
  123+0000
  124+0000              ; The floating-point calculator commands
  125+0000
  126+0000              ;        include "fpcalc.def"
  127+0000              		DEFINE	jump_true $00
  128+0000              		DEFINE	EXchange $01
  129+0000              		DEFINE	delete $02
  130+0000              		DEFINE	SUBtract $03
  131+0000              		DEFINE	multiply $04
  132+0000              		DEFINE	DIvision $05
  133+0000              		DEFINE	to_power $06
  134+0000              		DEFINE	logic_or $07
  135+0000              		DEFINE	no_and_no $08
  136+0000              		DEFINE	no_l_eql $09
  137+0000              		DEFINE	no_gr_eq $0A
  138+0000              		DEFINE	nos_neql $0B
  139+0000              		DEFINE	no_grtr $0C
  140+0000              		DEFINE	no_less $0D
  141+0000              		DEFINE	nos_eql $0E
  142+0000              		DEFINE	ADDition $0F
  143+0000              		DEFINE	strandno $10
  144+0000              		DEFINE	str_l_eql $11
  145+0000              		DEFINE	str_gr_eq $12
  146+0000              		DEFINE	strs_neql $13
  147+0000              		DEFINE	str_grtr $14
  148+0000              		DEFINE	str_less $15
  149+0000              		DEFINE	strs_eql $16
  150+0000              		DEFINE	strs_add $17
  151+0000              		DEFINE	val_str $18
  152+0000              		DEFINE	usr_str $19
  153+0000              		DEFINE	read_in $1A
  154+0000              		DEFINE	NEGate $1B
  155+0000              		DEFINE	code $1C
  156+0000              		DEFINE	val $1D
  157+0000              		DEFINE	len $1E
  158+0000              		DEFINE	sin $1F
  159+0000              		DEFINE	cos $20
  160+0000              		DEFINE	tan $21
  161+0000              		DEFINE	asn $22
  162+0000              		DEFINE	acs $23
  163+0000              		DEFINE	atn $24
  164+0000              		DEFINE	ln $25
  165+0000              		DEFINE	EXp $26
  166+0000              		DEFINE	INt $27
  167+0000              		DEFINE	sqr $28
  168+0000              		DEFINE	sgn $29
  169+0000              		DEFINE	abs $2A
  170+0000              		DEFINE	peek $2B
  171+0000              		DEFINE	IN_port $2C
  172+0000              		DEFINE	usr_no $2D
  173+0000              		DEFINE	str_str $2E
  174+0000              		DEFINE	chr_str $2F
  175+0000              		DEFINE	not $30
  176+0000              		DEFINE	duplicate $31
  177+0000              		DEFINE	n_mod_m $32
  178+0000              		DEFINE	jump $33
  179+0000              		DEFINE	stk_data $34
  180+0000              		DEFINE	DEC_jr_nz $35
  181+0000              		DEFINE	less_0 $36
  182+0000              		DEFINE	greater_0 $37
  183+0000              		DEFINE	end_calc $38
  184+0000              		DEFINE	get_argt $39
  185+0000              		DEFINE	truncate $3A
  186+0000              		DEFINE	fp_calc_2 $3B
  187+0000              		DEFINE	e_to_fp $3C
  188+0000              		DEFINE	re_stack $3D
  189+0000              		DEFINE	series_06 $86
  190+0000              		DEFINE	series_08 $88
  191+0000              		DEFINE	series_0c $8C
  192+0000              		DEFINE	stk_zero $A0
  193+0000              		DEFINE	stk_one $A1
  194+0000              		DEFINE	stk_half $A2
  195+0000              		DEFINE	stk_pi_2 $A3
  196+0000              		DEFINE	stk_ten $A4
  197+0000              		DEFINE	st_mem_0 $C0
  198+0000              		DEFINE	st_mem_1 $C1
  199+0000              		DEFINE	st_mem_2 $C2
  200+0000              		DEFINE	st_mem_3 $C3
  201+0000              		DEFINE	st_mem_4 $C4
  202+0000              		DEFINE	st_mem_5 $C5
  203+0000              		DEFINE	get_mem_0 $E0
  204+0000              		DEFINE	get_mem_1 $E1
  205+0000              		DEFINE	get_mem_2 $E2
  206+0000              		DEFINE	get_mem_3 $E3
  207+0000              		DEFINE	get_mem_4 $E4
  208+0000              		DEFINE	get_mem_5 $E5
  209+0000              ;--------------------------------------------------
  210+0000
  211+0000              		.org	$0000
  212+0000
  213+0000              ; ROM 1 Header
  214+0000
  215+0000 53 79 6E 74  m0000:		DM	"Syntax"
  215+0004 61 78
  216+0006 00 00        		DS	2
  217+0008
  218+0008              ; RST $08 - The "Error" restart
  219+0008
  220+0008 C3 DA 2A     m0008:		JP	m2ada		; jump to error handler
  221+000B
  222+000B 00 00 00...  		DS	5
  223+0010
  224+0010              ; RST $10 - The "Print a character restart"
  225+0010
  226+0010 EF           m0010:		RST	28H
  227+0011 10 00        		DW	$0010		; call RST $10 in ROM 3
  228+0013 C9           		RET
  229+0014
  230+0014 00 00 00 00  		DS	4
  231+0018
  232+0018              ; RST $18 - The "Collect character" restart
  233+0018
  234+0018 EF           m0018:		RST	28H
  235+0019 18 00        		DW	$0018		; call RST $18 in ROM 3
  236+001B C9           		RET
  237+001C
  238+001C 00 00 00 00  		DS	4
  239+0020
  240+0020              ; RST $20 - The "Collect next character" restart
  241+0020
  242+0020 EF           m0020:		RST	28H
  243+0021 20 00        		DW	$0020		; call RST $20 in ROM 3
  244+0023 C9           		RET
  245+0024
  246+0024 00 00 00 00  		DS	4
  247+0028
  248+0028              ; RST $28 : Call a routine in ROM 3, then return to ROM 1
  249+0028              ; The address following the RST 28 instruction is called, then control
  250+0028              ; is returned to the instruction following the address
  251+0028
  252+0028 E3           m0028:		EX	(SP),HL		; save HL, get return address
  253+0029 F5           		PUSH	AF		; save AF
  254+002A 7E           		LD	A,(HL)		; A=low byte of address to call
  255+002B 23           		INC	HL
  256+002C 23           		INC	HL		; HL=address of instruction to return to
  257+002D 22 5A 5B     		LD	(	$5B5A),HL	; save
  258+0030 2B           m0030:		DEC	HL
  259+0031 66           		LD	H,(HL)
  260+0032 6F           		LD	L,A		; HL=address to call in ROM 3
  261+0033 F1           		POP	AF		; restore AF
  262+0034 C3 AA 00     		JP	m00aa		; jump on
  263+0037
  264+0037 00           		NOP
  265+0038
  266+0038              ; The maskable interrupt routine
  267+0038
  268+0038 F5           m0038:		PUSH	AF		; save registers
  269+0039 E5           		PUSH	HL
  270+003A 2A 78 5C     		LD	HL,(	$5C78)	; increment FRAMES
  271+003D 23           		INC	HL
  272+003E 22 78 5C     		LD	(	$5C78),HL
  273+0041 7C           		LD	A,H
  274+0042 B5           		OR	L
  275+0043 20 03        		JR	NZ,m0048
  276+0045 FD 34 40     		INC	(IY+$40)
  277+0048 C5           m0048:		PUSH	BC
  278+0049 D5           		PUSH	DE
  279+004A CD 76 01     		CALL	m0176		; scan keyboard
  280+004D CD 74 00     		CALL	m0074		; call disk motor timeout routine
  281+0050 D1           		POP	DE		; restore registers
  282+0051 C1           		POP	BC
  283+0052 E1           		POP	HL
  284+0053 F1           		POP	AF
  285+0054 FB           		EI			; re-enable interrupts & exit
  286+0055 C9           		RET
  287+0056
  288+0056 53 74 61 72  m0056:		DM	"Start: ", 0
  288+005A 74 3A 20 00
  289+005E 73 79 73 74  m005e:		DM	"system", 0, 0
  289+0062 65 6D 00 00
  290+0066
  291+0066              ; The NMI routine
  292+0066
  293+0066 F5           m0066:		PUSH	AF		; save registers
  294+0067 E5           		PUSH	HL
  295+0068 2A B0 5C     		LD	HL,(	$5CB0	)	; get routine address
  296+006B 7C           		LD	A,H
  297+006C B5           		OR	L
  298+006D 28 01        		JR	Z,m0070
  299+006F E9           		JP	(HL)		; execute if non-zero address
  300+0070 E1           m0070:		POP	HL		; restore registers & exit
  301+0071 F1           		POP	AF
  302+0072 ED 45        		RETN
  303+0074
  304+0074              ; The disk motor timeout routine
  305+0074
  306+0074 01 FD 7F     m0074:		LD	BC,PBANKM
  307+0077 3A 5C 5B     		LD	A,(	$5B5C)
  308+007A F6 07        		OR	$07
  309+007C ED 79        		OUT	(C),A		; page in page 7
  310+007E 3A 00 E6     		LD	A,(	$E600		)
  311+0081 B7           		OR	A
  312+0082 28 1D        		JR	Z,m00a1		; move on if already off
  313+0084 3A 78 5C     		LD	A,(	$5C78)
  314+0087 CB 47        		BIT	0,A
  315+0089 20 16        		JR	NZ,m00a1	; only decrement counter every other frame
  316+008B 3A 00 E6     		LD	A,(	$E600		)
  317+008E 3D           		DEC	A		; decrement timeout counter
  318+008F 32 00 E6     		LD	(	$E600		),A
  319+0092 20 0D        		JR	NZ,m00a1	; move on if non-zero
  320+0094 01 FD 1F     		LD	BC,PBANK678
  321+0097 3A 67 5B     		LD	A,(	$5B67)
  322+009A E6 F7        		AND	$F7
  323+009C 32 67 5B     		LD	(	$5B67),A
  324+009F ED 79        		OUT	(C),A		; turn motor off
  325+00A1 01 FD 7F     m00a1:		LD	BC,PBANKM
  326+00A4 3A 5C 5B     		LD	A,(	$5B5C)
  327+00A7 ED 79        		OUT	(C),A		; page in last memory configuration
  328+00A9 C9           		RET
  329+00AA
  330+00AA              ; Continuation of RST 28: call a routine in ROM 3
  331+00AA
  332+00AA 22 58 5B     m00aa:		LD	(	$5B58),HL	; save ROM 3 address in TARGET
  333+00AD 21 2A 5B     		LD	HL,	$5B2A
  334+00B0 E3           		EX	(SP),HL		; stack REGNUOY address beneath TOS
  335+00B1 E5           		PUSH	HL
  336+00B2 2A 58 5B     		LD	HL,(	$5B58)	; get HL=target address in ROM 3
  337+00B5 E3           		EX	(SP),HL		; restore HL & save target address on stack
  338+00B6 F5           		PUSH	AF		; stack AF & BC
  339+00B7 C5           		PUSH	BC
  340+00B8 F3           		DI			; disable interrupts
  341+00B9 C3 10 5B     		JP		$5B10		; jump to STOO - pages in ROM 3, returns to
  342+00BC              					; target routine which returns to REGNUOY
  343+00BC              					; where ROM 1 is paged back and jump made
  344+00BC              					; back to RETADDR
  345+00BC
  346+00BC              ; These are copies of the key tables from ROM 3
  347+00BC
  348+00BC              ; The L-mode keytable with CAPS-SHIFT
  349+00BC
  350+00BC 42 48 59 36  m00bc:		DM	"BHY65TGV"
  350+00C0 35 54 47 56
  351+00C4 4E 4A 55 37  		DM	"NJU74RFC"
  351+00C8 34 52 46 43
  352+00CC 4D 4B 49 38  		DM	"MKI83EDX"
  352+00D0 33 45 44 58
  353+00D4 0E 4C 4F 39  		DM	$0E, "LO92WSZ"
  353+00D8 32 57 53 5A
  354+00DC 20 0D 50 30  		DM	" ", $0D, "P01QA"
  354+00E0 31 51 41
  355+00E3
  356+00E3              ; The extended-mode keytable (unshifted letters)
  357+00E3
  358+00E3 E3 C4 E0 E4  m00e3:		DB	$E3,$C4,$E0,$E4
  359+00E7 B4 BC BD BB  		DB	$B4,$BC,$BD,$BB
  360+00EB AF B0 B1 C0  		DB	$AF,$B0,$B1,$C0
  361+00EF A7 A6 BE AD  		DB	$A7,$A6,$BE,$AD
  362+00F3 B2 BA E5 A5  		DB	$B2,$BA,$E5,$A5
  363+00F7 C2 E1 B3 B9  		DB	$C2,$E1,$B3,$B9
  364+00FB C1 B8        		DB	$C1,$B8
  365+00FD
  366+00FD              ; The extended mode keytable (shifted letters)
  367+00FD
  368+00FD 7E DC DA 5C  m00fd:		DB	$7E,$DC,$DA,$5C
  369+0101 B7 7B 7D D8  		DB	$B7,$7B,$7D,$D8
  370+0105 BF AE AA AB  		DB	$BF,$AE,$AA,$AB
  371+0109 DD DE DF 7F  		DB	$DD,$DE,$DF,$7F
  372+010D B5 D6 7C D5  		DB	$B5,$D6,$7C,$D5
  373+0111 5D DB B6 D9  		DB	$5D,$DB,$B6,$D9
  374+0115 5B D7        		DB	$5B,$D7
  375+0117
  376+0117              ; The control code keytable (CAPS-SHIFTed digits)
  377+0117
  378+0117 0C 07 06 04  m0117:		DB	$0C,$07,$06,$04
  379+011B 05 08 0A 0B  		DB	$05,$08,$0A,$0B
  380+011F 09 0F        		DB	$09,$0F
  381+0121
  382+0121              ; The symbol code keytable (letters with symbol shift)
  383+0121
  384+0121 E2 2A 3F CD  m0121:		DB	$E2,$2A,$3F,$CD
  385+0125 C8 CC CB 5E  		DB	$C8,$CC,$CB,$5E
  386+0129 AC 2D 2B 3D  		DB	$AC,$2D,$2B,$3D
  387+012D 2E 2C 3B 22  		DB	$2E,$2C,$3B,$22
  388+0131 C7 3C C3 3E  		DB	$C7,$3C,$C3,$3E
  389+0135 C5 2F C9 60  		DB	$C5,$2F,$C9,$60
  390+0139 C6 3A        		DB	$C6,$3A
  391+013B
  392+013B              ; The extended mode keytable (SYM-SHIFTed digits)
  393+013B
  394+013B D0 CE A8 CA  m013b:		DB	$D0,$CE,$A8,$CA
  395+013F D3 D4 D1 D2  		DB	$D3,$D4,$D1,$D2
  396+0143 A9 CF        		DB	$A9,$CF
  397+0145
  398+0145              ; This is a copy of the "keyboard scanning" subroutine from
  399+0145              ; o028E in ROM 3
  400+0145
  401+0145 2E 2F        m0145:		LD	L,$2F
  402+0147 11 FF FF     		LD	DE,$FFFF
  403+014A 01 FE FE     		LD	BC,$FEFE
  404+014D ED 78        m014d:		IN	A,(C)
  405+014F 2F           		CPL
  406+0150 E6 1F        		AND	$1F
  407+0152 28 0E        		JR	Z,m0162
  408+0154 67           		LD	H,A
  409+0155 7D           		LD	A,L
  410+0156 14           m0156:		INC	D
  411+0157 C0           		RET	NZ
  412+0158 D6 08        m0158:		SUB	$08
  413+015A CB 3C        		SRL	H
  414+015C 30 FA        		JR	NC,m0158
  415+015E 53           		LD	D,E
  416+015F 5F           		LD	E,A
  417+0160 20 F4        		JR	NZ,m0156
  418+0162 2D           m0162:		DEC	L
  419+0163 CB 00        		RLC	B
  420+0165 38 E6        		JR	C,m014d
  421+0167 7A           		LD	A,D
  422+0168 3C           		INC	A
  423+0169 C8           		RET	Z
  424+016A FE 28        		CP	$28
  425+016C C8           		RET	Z
  426+016D FE 19        		CP	$19
  427+016F C8           		RET	Z
  428+0170 7B           		LD	A,E
  429+0171 5A           		LD	E,D
  430+0172 57           		LD	D,A
  431+0173 FE 18        		CP	$18
  432+0175 C9           		RET
  433+0176
  434+0176              ; This is a copy of the "keyboard" subroutines from o02BF in ROM 3
  435+0176
  436+0176 CD 45 01     m0176:		CALL	m0145
  437+0179 C0           		RET	NZ
  438+017A 21 00 5C     		LD	HL,	$5C00
  439+017D CB 7E        m017d:		BIT	7,(HL)
  440+017F 20 07        		JR	NZ,m0188
  441+0181 23           		INC	HL
  442+0182 35           		DEC	(HL)
  443+0183 2B           		DEC	HL
  444+0184 20 02        		JR	NZ,m0188
  445+0186 36 FF        		LD	(HL),$FF
  446+0188 7D           m0188:		LD	A,L
  447+0189 21 04 5C     		LD	HL,	$5C00+$04
  448+018C BD           		CP	L
  449+018D 20 EE        		JR	NZ,m017d
  450+018F CD D5 01     		CALL	m01d5
  451+0192 D0           		RET	NC
  452+0193 21 00 5C     		LD	HL,	$5C00
  453+0196 BE           		CP	(HL)
  454+0197 28 2E        		JR	Z,m01c7
  455+0199 EB           		EX	DE,HL
  456+019A 21 04 5C     		LD	HL,	$5C00+$04
  457+019D BE           		CP	(HL)
  458+019E 28 27        		JR	Z,m01c7
  459+01A0 CB 7E        		BIT	7,(HL)
  460+01A2 20 04        		JR	NZ,m01a8
  461+01A4 EB           		EX	DE,HL
  462+01A5 CB 7E        		BIT	7,(HL)
  463+01A7 C8           		RET	Z
  464+01A8 5F           m01a8:		LD	E,A
  465+01A9 77           		LD	(HL),A
  466+01AA 23           		INC	HL
  467+01AB 36 05        		LD	(HL),$05
  468+01AD 23           		INC	HL
  469+01AE 3A 09 5C     		LD	A,(	$5C09)
  470+01B1 77           		LD	(HL),A
  471+01B2 23           		INC	HL
  472+01B3 FD 4E 07     		LD	C,(IY+$07)
  473+01B6 FD 56 01     		LD	D,(IY+$01)
  474+01B9 E5           		PUSH	HL
  475+01BA CD EA 01     		CALL	m01ea
  476+01BD E1           		POP	HL
  477+01BE 77           		LD	(HL),A
  478+01BF 32 08 5C     m01bf:		LD	(	$5C08),A
  479+01C2 FD CB 01 EE  		SET	5,(IY+$01)
  480+01C6 C9           		RET
  481+01C7 23           m01c7:		INC	HL
  482+01C8 36 05        		LD	(HL),$05
  483+01CA 23           		INC	HL
  484+01CB 35           		DEC	(HL)
  485+01CC C0           		RET	NZ
  486+01CD 3A 0A 5C     		LD	A,(	$5C0A)
  487+01D0 77           		LD	(HL),A
  488+01D1 23           		INC	HL
  489+01D2 7E           		LD	A,(HL)
  490+01D3 18 EA        		JR	m01bf
  491+01D5
  492+01D5              ; This is a copy of the "K-Test" subroutine from o031E in ROM 3
  493+01D5
  494+01D5 42           m01d5:		LD	B,D
  495+01D6 16 00        		LD	D,$00
  496+01D8 7B           		LD	A,E
  497+01D9 FE 27        		CP	$27
  498+01DB D0           		RET	NC
  499+01DC FE 18        		CP	$18
  500+01DE 20 03        		JR	NZ,m01e3
  501+01E0 CB 78        		BIT	7,B
  502+01E2 C0           		RET	NZ
  503+01E3 21 BC 00     m01e3:		LD	HL,m00bc	; the main keytable
  504+01E6 19           		ADD	HL,DE
  505+01E7 7E           		LD	A,(HL)
  506+01E8 37           		SCF
  507+01E9 C9           		RET
  508+01EA
  509+01EA              ; This is a copy of the "Keyboard decoding" subroutine from o0333 in
  510+01EA              ; ROM 3
  511+01EA
  512+01EA 7B           m01ea:		LD	A,E
  513+01EB FE 3A        		CP	$3A
  514+01ED 38 2F        		JR	C,m021e
  515+01EF 0D           		DEC	C
  516+01F0 FA 06 02     		JP	m,m0206
  517+01F3 28 03        		JR	Z,m01f8
  518+01F5 C6 4F        		ADD	A,$4F
  519+01F7 C9           		RET
  520+01F8 21 A2 00     m01f8:		LD	HL,m00e3-"A"
  521+01FB 04           		INC	B
  522+01FC 28 03        		JR	Z,m0201
  523+01FE 21 BC 00     		LD	HL,m00fd-"A"
  524+0201 16 00        m0201:		LD	D,$00
  525+0203 19           		ADD	HL,DE
  526+0204 7E           		LD	A,(HL)
  527+0205 C9           		RET
  528+0206 21 E0 00     m0206:		LD	HL,m0121-"A"
  529+0209 CB 40        		BIT	0,B
  530+020B 28 F4        		JR	Z,m0201
  531+020D CB 5A        		BIT	3,D
  532+020F 28 0A        		JR	Z,m021b
  533+0211 FD CB 30 5E  		BIT	3,(IY+$30)
  534+0215 C0           		RET	NZ
  535+0216 04           		INC	B
  536+0217 C0           		RET	NZ
  537+0218 C6 20        		ADD	A,$20
  538+021A C9           		RET
  539+021B C6 A5        m021b:		ADD	A,$A5
  540+021D C9           		RET
  541+021E FE 30        m021e:		CP	$30
  542+0220 D8           		RET	C
  543+0221 0D           		DEC	C
  544+0222 FA 54 02     		JP	m,m0254
  545+0225 20 19        		JR	NZ,m0240
  546+0227 21 0B 01     		LD	HL,m013b-"0"
  547+022A CB 68        		BIT	5,B
  548+022C 28 D3        		JR	Z,m0201
  549+022E FE 38        		CP	$38
  550+0230 30 07        		JR	NC,m0239
  551+0232 D6 20        		SUB	$20
  552+0234 04           		INC	B
  553+0235 C8           		RET	Z
  554+0236 C6 08        		ADD	A,$08
  555+0238 C9           		RET
  556+0239 D6 36        m0239:		SUB	$36
  557+023B 04           		INC	B
  558+023C C8           		RET	Z
  559+023D C6 FE        		ADD	A,$FE
  560+023F C9           		RET
  561+0240 21 E7 00     m0240:		LD	HL,m0117-"0"
  562+0243 FE 39        		CP	$39
  563+0245 28 BA        		JR	Z,m0201
  564+0247 FE 30        		CP	$30
  565+0249 28 B6        		JR	Z,m0201
  566+024B E6 07        		AND	$07
  567+024D C6 80        		ADD	A,$80
  568+024F 04           		INC	B
  569+0250 C8           		RET	Z
  570+0251 EE 0F        		XOR	$0F
  571+0253 C9           		RET
  572+0254 04           m0254:		INC	B
  573+0255 C8           		RET	Z
  574+0256 CB 68        		BIT	5,B
  575+0258 21 E7 00     		LD	HL,m0117-"0"
  576+025B 20 A4        		JR	NZ,m0201
  577+025D D6 10        		SUB	$10
  578+025F FE 22        		CP	$22
  579+0261 28 06        		JR	Z,m0269
  580+0263 FE 20        		CP	$20
  581+0265 C0           		RET	NZ
  582+0266 3E 5F        		LD	A,$5F
  583+0268 C9           		RET
  584+0269 3E 40        m0269:		LD	A,$40
  585+026B C9           		RET
  586+026C
  587+026C              ; The FORMAT command
  588+026C
  589+026C EF           m026c:		RST	28H
  590+026D 18 00        		DW	$0018		; get character after FORMAT
  591+026F FE E0        m026f:		CP	$E0
  592+0271 CA E3 03     		JP	Z,m03e3		; move on if LPRINT
  593+0274 FE CA        		CP	$CA
  594+0276 CA 02 1E     		JP	Z,m1e02		; move on if not LINE
  595+0279 FE CC        		CP	$CC
  596+027B CA D9 1D     		JP	Z,m1dd9
  597+027E EF           m027e:		RST	28H
  598+027F 8C 1C        		DW	o1C8C		; get a string expression
  599+0281 CD B1 10     		CALL	m10b1		; check for end-of-statement
  600+0284 EF           		RST	28H
  601+0285 F1 2B        		DW	o2BF1		; get string from stack
  602+0287 79           		LD	A,C
  603+0288 3D           		DEC	A
  604+0289 3D           		DEC	A
  605+028A B0           		OR	B
  606+028B 28 04        		JR	Z,m0291		; move on if length is 2
  607+028D CD DA 2A     m028d:		CALL	m2ada
  608+0290 4E           		DB	$4E		; else error "Invalid drive"
  609+0291 13           m0291:		INC	DE
  610+0292 1A           		LD	A,(DE)		; check 2nd char
  611+0293 1B           		DEC	DE
  612+0294 FE 3A        		CP	":"
  613+0296 28 04        		JR	Z,m029c
  614+0298 CD DA 2A     		CALL	m2ada
  615+029B 4E           		DB	$4E		; error "Invalid drive" if not colon
  616+029C 1A           m029c:		LD	A,(DE)
  617+029D E6 DF        		AND	$DF		; get capitalised drive letter
  618+029F FE 41        		CP	"A"
  619+02A1 28 08        		JR	Z,m02ab		; move on if A:
  620+02A3 FE 42        		CP	"B"
  621+02A5 28 04        		JR	Z,m02ab		; or B:
  622+02A7 CD DA 2A     		CALL	m2ada
  623+02AA 4E           		DB	$4E		; else error "Invalid drive"
  624+02AB CD 89 2B     m02ab:		CALL	m2b89		; page in DOS workspace
  625+02AE D6 41        		SUB	"A"
  626+02B0 F5           		PUSH	AF		; save unit number to format
  627+02B1 21 66 5B     		LD	HL,	$5B66
  628+02B4 CB 66        		BIT	4,(HL)
  629+02B6 20 07        		JR	NZ,m02bf	; move on if disk interface present
  630+02B8 CD 64 2B     		CALL	m2b64		; page in normal memory
  631+02BB CD DA 2A     		CALL	m2ada
  632+02BE 4C           		DB	$4C		; else error "Format not supported on +2A"
  633+02BF F1           m02bf:		POP	AF
  634+02C0 B7           		OR	A
  635+02C1 28 10        		JR	Z,m02d3		; move on for unit 0
  636+02C3 F5           		PUSH	AF
  637+02C4 21 66 5B     		LD	HL,	$5B66
  638+02C7 CB 6E        		BIT	5,(HL)
  639+02C9 20 07        		JR	NZ,m02d2	; move on if drive B: present
  640+02CB CD 64 2B     		CALL	m2b64		; page in normal memory
  641+02CE CD DA 2A     		CALL	m2ada
  642+02D1 4B           		DB	$4B		; else error "Drive B: not present"
  643+02D2 F1           m02d2:		POP	AF		; get unit
  644+02D3 F5           m02d3:		PUSH	AF
  645+02D4 4F           		LD	C,A
  646+02D5 C5           		PUSH	BC
  647+02D6 C6 41        		ADD	A,"A"
  648+02D8 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
  649+02DB CD 00 3F     		CALL	m3f00
  650+02DE 51 01        		DW	$0151	; point IX at XDPB
  651+02E0 CD EE 32     		CALL	m32ee		; restore TSTACK
  652+02E3 38 07        		JR	C,m02ec		; move on if no error
  653+02E5 CD 64 2B     		CALL	m2b64		; page in DOS memory
  654+02E8 CD 9A 0E     		CALL	m0e9a		; cause DOS error
  655+02EB FF           		DB	$FF
  656+02EC C1           m02ec:		POP	BC
  657+02ED CD B6 32     		CALL	m32b6		; save TSTACK in page 7
  658+02F0 CD 00 3F     		CALL	m3f00
  659+02F3 75 01        		DW	$0175	; login disk
  660+02F5 CD EE 32     		CALL	m32ee		; restore TSTACK
  661+02F8 30 0C        		JR	NC,m0306	; move on if error
  662+02FA B7           		OR	A
  663+02FB 20 18        		JR	NZ,m0315	; move on if disk isn't +3 format
  664+02FD CD 81 03     		CALL	m0381		; ask if wish to abandon
  665+0300 20 13        		JR	NZ,m0315	; move on if not
  666+0302 CD 64 2B     		CALL	m2b64		; page in normal memory
  667+0305 C9           		RET			; exit
  668+0306 FE 05        m0306:		CP	$05
  669+0308 28 0B        		JR	Z,m0315		; move on if error was "missing address mark"
  670+030A FE 09        		CP	$09
  671+030C 28 07        		JR	Z,m0315		; or "unsuitable media"
  672+030E CD 64 2B     		CALL	m2b64		; page in normal memory
  673+0311 CD 9A 0E     		CALL	m0e9a		; cause DOS error
  674+0314 FF           		DB	$FF
  675+0315 F1           m0315:		POP	AF		; get unit number
  676+0316 F5           		PUSH	AF
  677+0317 C6 41        		ADD	A,"A"
  678+0319 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
  679+031C CD 00 3F     		CALL	m3f00
  680+031F 51 01        		DW	$0151	; point IX to XDPB
  681+0321 CD EE 32     		CALL	m32ee		; restore TSTACK
  682+0324 38 07        		JR	C,m032d
  683+0326 CD 64 2B     		CALL	m2b64		; page in normal memory
  684+0329 CD 9A 0E     		CALL	m0e9a		; cause any DOS error
  685+032C FF           		DB	$FF
  686+032D AF           m032d:		XOR	A
  687+032E CD B6 32     		CALL	m32b6		; save TSTACK in page 7
  688+0331 CD 00 3F     		CALL	m3f00
  689+0334 78 01        		DW	$0178	; select +3 format
  690+0336 CD EE 32     		CALL	m32ee		; restore TSTACK
  691+0339 38 07        		JR	C,m0342
  692+033B CD 64 2B     		CALL	m2b64		; page in normal memory
  693+033E CD 9A 0E     		CALL	m0e9a		; cause any DOS error
  694+0341 FF           		DB	$FF
  695+0342 F1           m0342:		POP	AF
  696+0343 4F           		LD	C,A		; C=unit number
  697+0344 AF           		XOR	A		; start at track 0
  698+0345 57           m0345:		LD	D,A
  699+0346 CD 6F 03     		CALL	m036f		; fill format buffer
  700+0349 1E E5        		LD	E,$E5		; filler byte
  701+034B 06 07        		LD	B,$07		; page 7
  702+034D 21 11 ED     		LD	HL,$ED11			; buffer address
  703+0350 F5           		PUSH	AF
  704+0351 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
  705+0354 CD 00 3F     		CALL	m3f00
  706+0357 6C 01        		DW	$016C	; format a track
  707+0359 CD EE 32     		CALL	m32ee		; restore TSTACK
  708+035C 38 07        		JR	C,m0365
  709+035E CD 64 2B     		CALL	m2b64		; page in normal memory
  710+0361 CD 9A 0E     		CALL	m0e9a		; cause any DOS error
  711+0364 FF           		DB	$FF
  712+0365 F1           m0365:		POP	AF
  713+0366 3C           		INC	A		; increment track
  714+0367 FE 28        		CP	$28
  715+0369 20 DA        		JR	NZ,m0345	; back if more to do
  716+036B CD 64 2B     		CALL	m2b64		; page in normal memory
  717+036E C9           		RET			; done
  718+036F
  719+036F              ; Subroutine to fill scratch area with format buffer details
  720+036F
  721+036F 06 09        m036f:		LD	B,$09		; 9 sectors
  722+0371 21 34 ED     		LD	HL,$ED11		+$23	; end of scratch area
  723+0374 36 02        m0374:		LD	(HL),$02	; 512-byte sectors
  724+0376 2B           		DEC	HL
  725+0377 70           		LD	(HL),B		; sector number
  726+0378 2B           		DEC	HL
  727+0379 36 00        		LD	(HL),$00	; head 0
  728+037B 2B           		DEC	HL
  729+037C 72           		LD	(HL),D		; track number
  730+037D 2B           		DEC	HL
  731+037E 10 F4        		DJNZ	m0374
  732+0380 C9           		RET
  733+0381
  734+0381              ; Subroutine to display "disk already formatted message",
  735+0381              ; and get a key, exiting with Z set if user wishes to abandon
  736+0381
  737+0381 21 A7 03     m0381:		LD	HL,m03a7
  738+0384 7E           m0384:		LD	A,(HL)		; get next char
  739+0385 B7           		OR	A
  740+0386 28 06        		JR	Z,m038e		; move on if null
  741+0388 EF           		RST	28H
  742+0389 10 00        		DW	$0010		; output char
  743+038B 23           m038b:		INC	HL
  744+038C 18 F6        		JR	m0384		; loop back
  745+038E FD CB 01 AE  m038e:		RES	5,(IY+$01)	; signal "no key"
  746+0392 FD CB 01 6E  m0392:		BIT	5,(IY+$01)
  747+0396 28 FA        		JR	Z,m0392		; wait for key
  748+0398 3A 08 5C     		LD	A,(	$5C08)	; get key
  749+039B E6 DF        		AND	$DF		; capitalise
  750+039D FE 41        		CP	"A"		; is it "A"?
  751+039F F5           		PUSH	AF
  752+03A0 E5           		PUSH	HL
  753+03A1 EF           		RST	28H
  754+03A2 6E 0D        		DW	o0D6E		; clear lower screen
  755+03A4 E1           		POP	HL
  756+03A5 F1           		POP	AF
  757+03A6 C9           		RET			; exit with Z set if abandon requested
  758+03A7
  759+03A7              ; Formatting message
  760+03A7
  761+03A7 44 69 73 6B  m03a7:		DM	"Disk is already formatted.", $0D
  761+03AB 20 69 73 20
  761+03AF 61 6C 72 65
  761+03B3 61 64 79 20
  761+03B7 66 6F 72 6D
  761+03BB 61 74 74 65
  761+03BF 64 2E 0D
  762+03C2 41 20 74 6F  		DM	"A to abandon, other key continue", 0
  762+03C6 20 61 62 61
  762+03CA 6E 64 6F 6E
  762+03CE 2C 20 6F 74
  762+03D2 68 65 72 20
  762+03D6 6B 65 79 20
  762+03DA 63 6F 6E 74
  762+03DE 69 6E 75 65
  762+03E2 00
  763+03E3
  764+03E3              ; The FORMAT LPRINT command
  765+03E3
  766+03E3 EF           m03e3:		RST	28H
  767+03E4 20 00        		DW	$0020		; get next char
  768+03E6 EF           m03e6:		RST	28H
  769+03E7 8C 1C        		DW	o1C8C		; get string expression
  770+03E9 EF           		RST	28H
  771+03EA 18 00        		DW	$0018		; get next char
  772+03EC FE 3B        m03ec:		CP	$3B
  773+03EE C4 B1 10     		CALL	NZ,m10b1	; check for end-of-statement if not $3B
  774+03F1 20 29        		JR	NZ,m041c	; move on if not $3B
  775+03F3 EF           		RST	28H
  776+03F4 20 00        		DW	$0020		; get next char
  777+03F6 EF           m03f6:		RST	28H
  778+03F7 8C 1C        		DW	o1C8C		; get string expression
  779+03F9 CD B1 10     		CALL	m10b1		; check for end-of-statement
  780+03FC EF           		RST	28H
  781+03FD F1 2B        		DW	o2BF1		; get 2nd string from stack
  782+03FF 79           		LD	A,C
  783+0400 3D           		DEC	A
  784+0401 B0           		OR	B		; check length
  785+0402 28 03        		JR	Z,m0407
  786+0404 C3 8D 02     		JP	m028d		; "Invalid drive" error if not 1
  787+0407 1A           m0407:		LD	A,(DE)
  788+0408 E6 DF        		AND	$DF		; capitalise 2nd string character
  789+040A 21 66 5B     		LD	HL,	$5B66	; prepare to change FLAGS3
  790+040D FE 45        		CP	"E"
  791+040F 20 04        		JR	NZ,m0415
  792+0411 CB D6        m0411:		SET	2,(HL)		; if 2nd string "E", set "expand tokens" flag
  793+0413 18 07        		JR	m041c
  794+0415 FE 55        m0415:		CP	"U"
  795+0417 C2 8D 02     		JP	NZ,m028d	; if 2nd string not "U", error
  796+041A CB 96        		RES	2,(HL)		; if "U", reset "expand tokens" flag
  797+041C EF           m041c:		RST	28H
  798+041D F1 2B        		DW	o2BF1		; get first string from stack
  799+041F 79           		LD	A,C
  800+0420 3D           		DEC	A
  801+0421 B0           		OR	B		; check length
  802+0422 28 03        		JR	Z,m0427
  803+0424 C3 8D 02     		JP	m028d		; "Invalid drive" error if not 1
  804+0427
  805+0427 1A           m0427:		LD	A,(DE)
  806+0428 E6 DF        		AND	$DF		; capitalise 1st string character
  807+042A 21 66 5B     		LD	HL,	$5B66	; prepare to change FLAGS3
  808+042D FE 52        		CP	"R"
  809+042F 20 03        		JR	NZ,m0434
  810+0431 CB DE        		SET	3,(HL)		; if "R", set print to RS232 flag
  811+0433 C9           		RET
  812+0434 FE 43        m0434:		CP	"C"
  813+0436 20 03        		JR	NZ,m043b
  814+0438 CB 9E        		RES	3,(HL)		; if "C", reset print to RS232 flag
  815+043A C9           		RET
  816+043B FE 45        m043b:		CP	"E"
  817+043D 20 03        		JR	NZ,m0442
  818+043F CB D6        		SET	2,(HL)		; if "E", set "expand tokens" flag
  819+0441 C9           		RET
  820+0442 FE 55        m0442:		CP	"U"
  821+0444 C2 8D 02     		JP	NZ,m028d	; if not "U", error
  822+0447 CB 96        		RES	2,(HL)		; if "U", reset "expand tokens" flag
  823+0449 C9           		RET
  824+044A
  825+044A              ; The ERASE command
  826+044A              ; *BUG* No channel is opened before outputting the "Erase (Y/N)?" message,
  827+044A              ;       so this is output to the last used stream.
  828+044A              ; *BUG* The lower screen is not cleared if "N" is pressed
  829+044A
  830+044A EF           m044a:		RST	28H
  831+044B F1 2B        		DW	o2BF1		; get string from stack
  832+044D 78           		LD	A,B
  833+044E B1           		OR	C		; check length
  834+044F 20 04        		JR	NZ,m0455
  835+0451 CD DA 2A     		CALL	m2ada
  836+0454 2C           		DB	$2C		; bad filename error if zero
  837+0455 C5           m0455:		PUSH	BC		; save addresses
  838+0456 D5           		PUSH	DE
  839+0457 D5           		PUSH	DE
  840+0458 E1           		POP	HL		; HL=address of filename
  841+0459 C5           		PUSH	BC
  842+045A 3E 2A        		LD	A,"*"
  843+045C ED B1        		CPIR
  844+045E C1           		POP	BC
  845+045F 28 0C        		JR	Z,m046d		; move on if * wildcard present
  846+0461 D5           		PUSH	DE
  847+0462 E1           		POP	HL
  848+0463 C5           		PUSH	BC
  849+0464 3E 3F        		LD	A,"?"
  850+0466 ED B1        		CPIR
  851+0468 C1           		POP	BC
  852+0469 28 02        		JR	Z,m046d		; move on if ? wildcard present
  853+046B 18 2C        		JR	m0499		; move on for a single file
  854+046D
  855+046D 21 C9 3F     m046d:		LD	HL,merase
  856+0470 CD C1 04     		CALL	m04c1		; output "Erase "
  857+0473 CD CA 04     		CALL	m04ca		; output filespec
  858+0476 21 D0 3F     		LD	HL,myn
  859+0479 CD C1 04     		CALL	m04c1		; output "? (Y/N"
  860+047C 21 3B 5C     m047c:		LD	HL,	$5C3B
  861+047F CB AE        		RES	5,(HL)		; signal "no key available"
  862+0481 CB 6E        m0481:		BIT	5,(HL)
  863+0483 28 FC        		JR	Z,m0481		; loop until keypress
  864+0485 CB AE        		RES	5,(HL)		; signal "no key available"
  865+0487 3A 08 5C     		LD	A,(	$5C08)	; get key
  866+048A E6 DF        		AND	$DF		; make uppercase
  867+048C FE 4E        		CP	"N"
  868+048E 20 03        		JR	NZ,m0493	; move on if not "N"
  869+0490 D1           		POP	DE		; exit without doing anything
  870+0491 C1           		POP	BC		; (lower screen should have been cleared)
  871+0492 C9           		RET
  872+0493 FE 59        m0493:		CP	"Y"
  873+0495 28 02        		JR	Z,m0499
  874+0497 18 E3        		JR	m047c		; loop back for another key if not "Y"
  875+0499 EF           m0499:		RST	28H
  876+049A 6E 0D        		DW	o0D6E		; clear lower screen
  877+049C D1           		POP	DE
  878+049D C1           		POP	BC
  879+049E 21 01 ED     		LD	HL,$ED01
  880+04A1 EB           		EX	DE,HL
  881+04A2 CD 63 3F     		CALL	m3f63		; copy filespec into page 7
  882+04A5 CD 89 2B     		CALL	m2b89		; page in DOS workspace
  883+04A8 3E FF        		LD	A,$FF
  884+04AA 12           		LD	(DE),A		; add terminator
  885+04AB 21 01 ED     		LD	HL,$ED01
  886+04AE CD B6 32     		CALL	m32b6		; save TSTACK in page 7
  887+04B1 CD 00 3F     		CALL	m3f00
  888+04B4 24 01        		DW	$0124	; delete filespec
  889+04B6 CD EE 32     		CALL	m32ee		; restore TSTACK
  890+04B9 CD 64 2B     		CALL	m2b64		; page in normal memory
  891+04BC D8           		RET	C		; exit if ok
  892+04BD CD 9A 0E     		CALL	m0e9a		; cause DOS error
  893+04C0 FF           		DB	$FF
  894+04C1
  895+04C1              ; Subroutine to output a null-terminated string
  896+04C1
  897+04C1 7E           m04c1:		LD	A,(HL)		; get next char
  898+04C2 B7           		OR	A
  899+04C3 C8           		RET	Z		; exit if null
  900+04C4 23           		INC	HL
  901+04C5 EF           		RST	28H
  902+04C6 10 00        		DW	$0010		; output char
  903+04C8 18 F7        m04c8:		JR	m04c1		; loop back
  904+04CA
  905+04CA              ; Subroutine to output a filespec at DE, length BC
  906+04CA
  907+04CA 1A           m04ca:		LD	A,(DE)		; get next char
  908+04CB EF           		RST	28H
  909+04CC 10 00        		DW	$0010		; output char
  910+04CE 13           m04ce:		INC	DE
  911+04CF 0B           		DEC	BC
  912+04D0 78           		LD	A,B
  913+04D1 B1           		OR	C
  914+04D2 20 F6        		JR	NZ,m04ca	; back for more
  915+04D4 C9           		RET
  916+04D5
  917+04D5              ; Erase messages
  918+04D5 EF           m04d5:		RST	28H
  919+04D6 01 C1        		DW	$C101
  920+04D8 02           		LD	(BC),A
  921+04D9 34           		INC	(HL)
  922+04DA 40           		LD	B,B
  923+04DB 41           		LD	B,C
  924+04DC 00           		NOP
  925+04DD 00           		NOP
  926+04DE 32 E1 38     		LD	($38E1),A
  927+04E1 C9           		RET
  928+04E2 00 00 00     		DB	0,0,0
  929+04E5
  930+04E5              ; The MOVE command
  931+04E5
  932+04E5 EF           m04e5:		RST	28H
  933+04E6 F1 2B        		DW	o2BF1		; get 2nd string
  934+04E8 78           		LD	A,B
  935+04E9 B1           		OR	C		; check length
  936+04EA 20 04        		JR	NZ,m04f0
  937+04EC CD DA 2A     		CALL	m2ada
  938+04EF 2C           		DB	$2C		; bad filename error if zero
  939+04F0 1A           m04f0:		LD	A,(DE)
  940+04F1 FE 2B        		CP	'+'
  941+04F3 CA 41 05     		JP	Z,m0541		; move on if changing attributes
  942+04F6 FE 2D        		CP	'-'
  943+04F8 CA 41 05     		JP	Z,m0541		; move on if changing attributes
  944+04FB 21 01 ED     		LD	HL,$ED01
  945+04FE EB           		EX	DE,HL
  946+04FF CD 63 3F     		CALL	m3f63		; copy filename to page 7
  947+0502 CD 89 2B     		CALL	m2b89		; page in DOS workspace
  948+0505 3E FF        		LD	A,$FF
  949+0507 12           		LD	(DE),A		; add terminator
  950+0508 13           m0508:		INC	DE
  951+0509 CD 64 2B     		CALL	m2b64		; page in normal memory
  952+050C D5           		PUSH	DE		; save pointer for source filename
  953+050D EF           		RST	28H
  954+050E F1 2B        		DW	o2BF1		; get 1st string
  955+0510 78           		LD	A,B
  956+0511 B1           		OR	C		; check length
  957+0512 20 04        		JR	NZ,m0518
  958+0514 CD DA 2A     		CALL	m2ada
  959+0517 2C           		DB	$2C		; bad filename error if zero
  960+0518 E1           m0518:		POP	HL		; HL=address to place source filename
  961+0519 E5           		PUSH	HL
  962+051A EB           		EX	DE,HL
  963+051B CD 63 3F     		CALL	m3f63		; copy source filename to page 7
  964+051E CD 89 2B     		CALL	m2b89		; page in DOS workspace
  965+0521 3E FF        		LD	A,$FF
  966+0523 12           		LD	(DE),A		; add terminator
  967+0524 CD 64 2B     		CALL	m2b64		; page in normal memory
  968+0527 E1           		POP	HL
  969+0528 11 01 ED     		LD	DE,$ED01
  970+052B CD 89 2B     		CALL	m2b89		; page in DOS workspace
  971+052E CD B6 32     		CALL	m32b6		; save TSTACK in page 7
  972+0531 CD 00 3F     		CALL	m3f00
  973+0534 27 01        		DW	$0127	; do rename
  974+0536 CD EE 32     		CALL	m32ee		; restore TSTACK
  975+0539 CD 64 2B     		CALL	m2b64		; page in normal memory
  976+053C D8           		RET	C		; exit if done ok
  977+053D CD 9A 0E     		CALL	m0e9a		; cause DOS error
  978+0540 FF           		DB	$FF
  979+0541
  980+0541              ; Here we use MOVE to alter attributes of a file
  981+0541
  982+0541 79           m0541:		LD	A,C
  983+0542 3D           		DEC	A
  984+0543 3D           		DEC	A
  985+0544 B0           		OR	B
  986+0545 28 04        		JR	Z,m054b		; move on if 2nd string length=2
  987+0547 CD DA 2A     		CALL	m2ada
  988+054A 47           		DB	$47		; invalid attribute error
  989+054B 1A           m054b:		LD	A,(DE)
  990+054C 47           		LD	B,A		; B='+' or '-'
  991+054D 13           		INC	DE
  992+054E 1A           		LD	A,(DE)
  993+054F E6 DF        		AND	$DF		; A=uppercase attribute
  994+0551 FE 50        		CP	"P"		; check attribute letter
  995+0553 28 0C        		JR	Z,m0561
  996+0555 FE 53        		CP	"S"
  997+0557 28 08        		JR	Z,m0561
  998+0559 FE 41        		CP	"A"
  999+055B 28 04        		JR	Z,m0561
 1000+055D CD DA 2A     		CALL	m2ada
 1001+0560 47           		DB	$47		; invalid attribute error
 1002+0561 C5           m0561:		PUSH	BC		; save attribute flags
 1003+0562 F5           		PUSH	AF
 1004+0563 EF           		RST	28H
 1005+0564 F1 2B        		DW	o2BF1		; get 1st string
 1006+0566 78           		LD	A,B
 1007+0567 B1           		OR	C		; check length
 1008+0568 20 04        		JR	NZ,m056e
 1009+056A CD DA 2A     		CALL	m2ada
 1010+056D 2C           		DB	$2C		; bad filename error if zero
 1011+056E 21 01 ED     m056e:		LD	HL,$ED01
 1012+0571 EB           		EX	DE,HL
 1013+0572 CD 63 3F     		CALL	m3f63		; copy to page 7
 1014+0575 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1015+0578 3E FF        		LD	A,$FF
 1016+057A 12           		LD	(DE),A		; add terminator
 1017+057B CD 64 2B     		CALL	m2b64		; page in normal memory
 1018+057E 11 00 00     		LD	DE,$0000	; don't set or clear anything yet
 1019+0581 0E 00        		LD	C,$00		; attribute byte to set/clear
 1020+0583 F1           		POP	AF		; get attribute letter
 1021+0584 FE 50        		CP	"P"
 1022+0586 20 04        		JR	NZ,m058c
 1023+0588 CB D1        		SET	2,C		; bit 2 for P
 1024+058A 18 0A        		JR	m0596
 1025+058C FE 53        m058c:		CP	"S"
 1026+058E 20 04        		JR	NZ,m0594
 1027+0590 CB C9        		SET	1,C		; bit 1 for S
 1028+0592 18 02        		JR	m0596
 1029+0594 CB C1        m0594:		SET	0,C		; bit 0 for A
 1030+0596 F1           m0596:		POP	AF		; get '+' or '-'
 1031+0597 FE 2B        		CP	'+'
 1032+0599 20 03        		JR	NZ,m059e
 1033+059B 51           		LD	D,C		; if +, we're setting attributes
 1034+059C 18 01        		JR	m059f
 1035+059E 59           m059e:		LD	E,C		; if -, we're clearing attributes
 1036+059F 21 01 ED     m059f:		LD	HL,$ED01
 1037+05A2 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1038+05A5 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 1039+05A8 CD 00 3F     		CALL	m3f00
 1040+05AB 48 01        		DW	$0148	; set the attributes
 1041+05AD CD EE 32     		CALL	m32ee		; restore TSTACK
 1042+05B0 CD 64 2B     		CALL	m2b64		; page in normal memory
 1043+05B3 D8           		RET	C		; exit if done ok
 1044+05B4 CD 9A 0E     		CALL	m0e9a		; else cause DOS error
 1045+05B7 FF           		DB	$FF
 1046+05B8
 1047+05B8              ; The CAT command
 1048+05B8              ; *BUG* Only one buffer of entries is ever considered (64 entries), as a
 1049+05B8              ;       SUB $40 is used (should be SUB $3F)
 1050+05B8
 1051+05B8 21 66 5B     m05b8:		LD	HL,	$5B66
 1052+05BB CB B6        		RES	6,(HL)		; signal "standard catalog"
 1053+05BD EF           		RST	28H
 1054+05BE 70 20        		DW	o2070		; consider stream information
 1055+05C0 38 1B        		JR	C,m05dd		; move on if default stream to be used
 1056+05C2 2A 5D 5C     		LD	HL,(	$5C5D)
 1057+05C5 7E           		LD	A,(HL)		; get next char
 1058+05C6 FE 2C        		CP	","
 1059+05C8 28 10        		JR	Z,m05da		; move on if comma to get filespec
 1060+05CA FE 0D        		CP	$0D
 1061+05CC 28 5D        		JR	Z,m062b		; move on if end-of-line
 1062+05CE FE 3A        		CP	":"
 1063+05D0 28 59        		JR	Z,m062b		; or if end-of-statement
 1064+05D2 FE B9        		CP	$B9
 1065+05D4 28 55        		JR	Z,m062b		; or if EXP
 1066+05D6 C3 40 3B     		JP	m3b48
 1067+05D9 00           		NOP
 1068+05DA E7           m05da:		RST	20H		; get next char
 1069+05DB 18 1B        		JR	m05f8
 1070+05DD 3E 02        m05dd:		LD	A,$02		; use stream 2
 1071+05DF FD CB 01 7E  		BIT	7,(IY+$01)
 1072+05E3 28 03        		JR	Z,m05e8		; move on if only syntax-checking
 1073+05E5 EF           		RST	28H
 1074+05E6 01 16        		DW	o1601		; else open channel to stream
 1075+05E8 2A 5D 5C     m05e8:		LD	HL,(	$5C5D)
 1076+05EB 7E           		LD	A,(HL)		; check next char
 1077+05EC FE 0D        		CP	$0D
 1078+05EE 28 3B        		JR	Z,m062b		; move on if end-of-line
 1079+05F0 FE 3A        		CP	":"
 1080+05F2 28 37        		JR	Z,m062b		; or if end-of-statement
 1081+05F4 C3 4D 3B     		JP	n3b4d
 1082+05F7 00           		NOP
 1083+05F8 EF           m05f8:		RST	28H
 1084+05F9 8C 1C        		DW	o1C8C		; get string expression
 1085+05FB EF           		RST	28H
 1086+05FC 18 00        		DW	$0018		; get next char
 1087+05FE FE B9        m05fe:		CP	$B9
 1088+0600 20 08        		JR	NZ,m060a	; move on if not EXP
 1089+0602 21 66 5B     		LD	HL,	$5B66
 1090+0605 CB F6        		SET	6,(HL)		; signal "expanded catalog"
 1091+0607 EF           		RST	28H
 1092+0608 20 00        		DW	$0020		; get next char
 1093+060A CD B1 10     m060a:		CALL	m10b1		; check for end-of-statement
 1094+060D EF           		RST	28H
 1095+060E F1 2B        		DW	o2BF1		; get string value from stack
 1096+0610 C5           		PUSH	BC
 1097+0611 D5           		PUSH	DE
 1098+0612 E1           		POP	HL		; HL=string address
 1099+0613 3E 3A        		LD	A,":"		; check for drive specification
 1100+0615 ED B1        		CPIR
 1101+0617 20 0A        		JR	NZ,m0623	; move on if not found
 1102+0619 2B           		DEC	HL
 1103+061A 2B           		DEC	HL
 1104+061B 7E           		LD	A,(HL)
 1105+061C E6 DF        		AND	$DF
 1106+061E 32 0B 5C     		LD	(	$5C0B),A	; else save capitalised drive letter
 1107+0621 18 05        		JR	m0628		; move on
 1108+0623 3E 00        m0623:		LD	A,$00
 1109+0625 32 0B 5C     		LD	(	$5C0B),A	; signal "use default drive"
 1110+0628 C1           m0628:		POP	BC
 1111+0629 18 1A        		JR	m0645		; move on
 1112+062B EF           m062b:		RST	28H
 1113+062C 18 00        		DW	$0018		; get next char
 1114+062E FE B9        m062e:		CP	$B9
 1115+0630 20 08        		JR	NZ,m063a	; move on if not EXP
 1116+0632 21 66 5B     		LD	HL,	$5B66
 1117+0635 CB F6        		SET	6,(HL)		; signal "expanded catalog"
 1118+0637 EF           		RST	28H
 1119+0638 20 00        		DW	$0020		; get next char
 1120+063A CD B1 10     m063a:		CALL	m10b1		; check for end-of-statement
 1121+063D 01 00 00     		LD	BC,$0000	; filespec length=0
 1122+0640 3E 00        		LD	A,$00
 1123+0642 32 0B 5C     		LD	(	$5C0B),A	; signal "use default drive"
 1124+0645 79           m0645:		LD	A,C
 1125+0646 3D           		DEC	A
 1126+0647 3D           		DEC	A
 1127+0648 B0           		OR	B
 1128+0649 20 11        		JR	NZ,m065c	; move on unless just 2 chars specified
 1129+064B 13           		INC	DE
 1130+064C 1A           		LD	A,(DE)
 1131+064D 1B           		DEC	DE
 1132+064E FE 3A        		CP	":"
 1133+0650 20 0A        		JR	NZ,m065c	; move on if not drive specifier
 1134+0652 1A           		LD	A,(DE)
 1135+0653 E6 DF        		AND	$DF		; get drive letter capitalised
 1136+0655 FE 54        		CP	"T"
 1137+0657 20 03        		JR	NZ,m065c
 1138+0659 C3 C6 34     		JP	m34c6		; move on to catalog tape
 1139+065C 21 01 ED     m065c:		LD	HL,$ED01
 1140+065F EB           		EX	DE,HL
 1141+0660 C5           		PUSH	BC
 1142+0661 78           		LD	A,B
 1143+0662 B1           		OR	C
 1144+0663 28 03        		JR	Z,m0668		; move on if no filespec
 1145+0665 CD 63 3F     		CALL	m3f63		; copy to page 7 (entry 0)
 1146+0668 C1           m0668:		POP	BC
 1147+0669 21 01 ED     		LD	HL,$ED01
 1148+066C 09           		ADD	HL,BC
 1149+066D CD 89 2B     		CALL	m2b89
 1150+0670 36 FF        		LD	(HL),$FF	; add terminator
 1151+0672 21 11 ED     		LD	HL,$ED11
 1152+0675 11 12 ED     		LD	DE,$ED11		+1
 1153+0678 01 0B 00     		LD	BC,$000B
 1154+067B 36 00        		LD	(HL),$00
 1155+067D ED B0        		LDIR			; zero entry 0
 1156+067F 06 40        m067f:		LD	B,$40		; 64 entries in buffer
 1157+0681 0E 00        		LD	C,$00		; C=0 for standard catalog
 1158+0683 21 66 5B     		LD	HL,	$5B66
 1159+0686 CB 76        		BIT	6,(HL)
 1160+0688 28 02        		JR	Z,m068c
 1161+068A 0E 01        		LD	C,$01		; C=1 for expanded catalog (inc system files)
 1162+068C 11 11 ED     m068c:		LD	DE,$ED11
 1163+068F 21 01 ED     		LD	HL,$ED01
 1164+0692 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 1165+0695 CD 00 3F     		CALL	m3f00
 1166+0698 1E 01        		DW	$011E	; get next lot of entries
 1167+069A CD EE 32     		CALL	m32ee		; restore TSTACK
 1168+069D D2 AB 06     		JP	NC,m06ab	; move on if error
 1169+06A0 21 1E ED     		LD	HL,$ED11		+$0D	; address of first returned entry
 1170+06A3 05           		DEC	B		; B=# entries found (discard preloaded one)
 1171+06A4 78           		LD	A,B
 1172+06A5 B7           		OR	A
 1173+06A6 20 0F        		JR	NZ,m06b7	; move on if entries to display
 1174+06A8 C3 BC 07     		JP	m07ba		; move on if catalog finished
 1175+06AB FE 17        m06ab:		CP	$17
 1176+06AD CA BC 07     		JP	Z,m07ba		; move on if error "file not found"
 1177+06B0 CD 64 2B     		CALL	m2b64		; page in normal memory
 1178+06B3 CD 9A 0E     		CALL	m0e9a		; cause DOS error
 1179+06B6 FF           		DB	$FF
 1180+06B7 C5           m06b7:		PUSH	BC		; save number of entries to do
 1181+06B8 F5           m06b8:		PUSH	AF
 1182+06B9 06 08        		LD	B,$08		; 8 bytes in first half of filename
 1183+06BB 7E           m06bb:		LD	A,(HL)
 1184+06BC E6 7F        		AND	$7F		; get byte and mask bit
 1185+06BE CD 64 2B     		CALL	m2b64		; page in normal memory
 1186+06C1 EF           		RST	28H
 1187+06C2 10 00        		DW	$0010		; output char
 1188+06C4 CD 89 2B     m06c4:		CALL	m2b89		; page in DOS workspace
 1189+06C7 23           		INC	HL
 1190+06C8 10 F1        		DJNZ	m06bb		; loop back for rest of filename
 1191+06CA CD 64 2B     		CALL	m2b64		; page in normal memory
 1192+06CD 3E 2E        		LD	A,'.'
 1193+06CF EF           		RST	28H
 1194+06D0 10 00        		DW	$0010		; output "."
 1195+06D2 AF           m06d2:		XOR	A
 1196+06D3 32 5E 5B     		LD	(	$5B5E),A	; zeroise attributes
 1197+06D6 06 03        		LD	B,$03
 1198+06D8 CD 89 2B     m06d8:		CALL	m2b89		; page in DOS workspace
 1199+06DB 7E           		LD	A,(HL)		; get next byte
 1200+06DC CB 7F        		BIT	7,A
 1201+06DE 28 1C        		JR	Z,m06fc		; move on if bit 7 not set
 1202+06E0 F5           		PUSH	AF
 1203+06E1 E5           		PUSH	HL
 1204+06E2 21 5E 5B     		LD	HL,	$5B5E
 1205+06E5 78           		LD	A,B
 1206+06E6 FE 03        		CP	$03
 1207+06E8 20 04        		JR	NZ,m06ee
 1208+06EA CB DE        		SET	3,(HL)		; set bit 3 if first extension byte
 1209+06EC 18 0A        		JR	m06f8
 1210+06EE FE 02        m06ee:		CP	$02
 1211+06F0 20 04        		JR	NZ,m06f6
 1212+06F2 CB D6        		SET	2,(HL)		; set bit 2 if second extension byte
 1213+06F4 18 02        		JR	m06f8
 1214+06F6 CB CE        m06f6:		SET	1,(HL)		; set bit 1 if third extension byte
 1215+06F8 E1           m06f8:		POP	HL		; restore values
 1216+06F9 F1           		POP	AF
 1217+06FA E6 7F        		AND	$7F		; mask bit 7
 1218+06FC CD 64 2B     m06fc:		CALL	m2b64		; page in normal memory
 1219+06FF EF           		RST	28H
 1220+0700 10 00        		DW	$0010		; output char
 1221+0702 23           m0702:		INC	HL
 1222+0703 10 D3        		DJNZ	m06d8		; loop back for more extension
 1223+0705 E5           		PUSH	HL
 1224+0706 21 66 5B     		LD	HL,	$5B66
 1225+0709 CB 76        		BIT	6,(HL)		; test if want expanded catalog
 1226+070B E1           		POP	HL
 1227+070C 28 30        		JR	Z,m073e		; if not, move on
 1228+070E 3A 5E 5B     m070e:		LD	A,(	$5B5E)	; get attributes
 1229+0711 E5           		PUSH	HL
 1230+0712 21 18 08     		LD	HL,m0812	; blank message
 1231+0715 CB 5F        		BIT	3,A
 1232+0717 28 03        		JR	Z,m071c
 1233+0719 21 1E 08     		LD	HL,m0818	; if bit 3 set, PROT message
 1234+071C F5           m071c:		PUSH	AF
 1235+071D CD E7 07     		CALL	m07e2		; output message
 1236+0720 F1           		POP	AF
 1237+0721 21 18 08     		LD	HL,m0813	; blank message
 1238+0724 CB 57        		BIT	2,A
 1239+0726 28 03        		JR	Z,m072b
 1240+0728 21 23 08     		LD	HL,m081e	; if bit 2 set, SYS message
 1241+072B F5           m072b:		PUSH	AF
 1242+072C CD E7 07     		CALL	m07e2		; output message
 1243+072F F1           		POP	AF
 1244+0730 21 18 08     		LD	HL,m0813	; blank message
 1245+0733 CB 4F        		BIT	1,A
 1246+0735 28 03        		JR	Z,m073a
 1247+0737 21 28 08     		LD	HL,m0823	; if bit 1 set, ARC message
 1248+073A CD E7 07     m073a:		CALL	m07e2		; output message
 1249+073D E1           		POP	HL
 1250+073E 3E 20        m073e:		LD	A," "
 1251+0740 EF           		RST	28H
 1252+0741 10 00        		DW	$0010		; output space
 1253+0743 E5           m0743:		PUSH	HL
 1254+0744 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1255+0747 7E           		LD	A,(HL)
 1256+0748 23           		INC	HL
 1257+0749 66           		LD	H,(HL)
 1258+074A 23           		INC	HL		; HA=filesize in K
 1259+074B CD 64 2B     		CALL	m2b64		; page in normal memory
 1260+074E 6F           		LD	L,A
 1261+074F 1E 20        		LD	E," "
 1262+0751 CD F6 07     		CALL	m07f1
 1263+0754 E1           		POP	HL
 1264+0755 23           		INC	HL
 1265+0756 23           		INC	HL		; move to next file entry
 1266+0757 3E 4B        		LD	A,"K"
 1267+0759 EF           		RST	28H
 1268+075A 10 00        		DW	$0010		; output "K"
 1269+075C CD F0 07     m075c:		CALL	m07eb		; output CR
 1270+075F CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1271+0762 F1           		POP	AF
 1272+0763 3D           		DEC	A
 1273+0764 C2 B8 06     		JP	NZ,m06b8	; move back for more files in buffer
 1274+0767 C1           		POP	BC
 1275+0768 78           		LD	A,B
 1276+0769 D6 3F        		SUB	$3F
 1277+076B 38 10        		JR	C,m077b		; if not, move on
 1278+076D 21 44 F0     		LD	HL,$F044
 1279+0770 11 11 ED     		LD	DE,$ED11
 1280+0773 01 0B 00     		LD	BC,11
 1281+0776 ED B0        		LDIR			; if so, copy last entry to first
 1282+0778 EB           		EX	DE,HL
 1283+0779 72           		LD	(HL),D
 1284+077A C3 7F 06     		JP	m067f		; and back for more
 1285+077D
 1286+077D CD 64 2B     m077b:		CALL	m2b64		; page in normal memory
 1287+0780
 1288+0780 CD F0 07     m077e:		CALL	m07eb		; output CR
 1289+0783 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1290+0786 3A 0B 5C     m0784:		LD	A,(	$5C0B)	; get drive letter
 1291+0789 B7           		OR	A
 1292+078A 20 10        		JR	NZ,m079a	; move on if not default
 1293+078C 3E FF        		LD	A,$FF
 1294+078E CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 1295+0791 CD 00 3F     		CALL	m3f00
 1296+0794 2D 01        		DW	$012D	; get default drive
 1297+0796 CD EE 32     		CALL	m32ee		; restore TSTACK
 1298+0799 D2 AB 06     		JP	NC,m06ab	; go if error
 1299+079C CD B6 32     m079a:		CALL	m32b6		; save TSTACK in page 7
 1300+079F CD 00 3F     		CALL	m3f00
 1301+07A2 21 01        		DW	$0121	; get free space on drive
 1302+07A4 CD EE 32     		CALL	m32ee		; restore TSTACK
 1303+07A7 D2 AB 06     		JP	NC,m06ab	; go if error
 1304+07AA CD 64 2B     		CALL	m2b64		; page in normal memory
 1305+07AD 1E FF        		LD	E,$FF
 1306+07AF CD F6 07     		CALL	m07f1
 1307+07B2 21 B1 3F     		LD	HL,m07c9
 1308+07B5 CD E7 07     		CALL	m07e2		; output "K free" message
 1309+07B8 CD F0 07     		CALL	m07eb		; output CR
 1310+07BB C9           		RET			; done
 1311+07BC
 1312+07BC 3A 1C ED     m07ba:		LD	A,($ED1C)
 1313+07BF A7           		AND	A
 1314+07C0 CD 64 2B     		CALL	m2b64		; page in normal memory
 1315+07C3 21 B9 3F     		LD	HL,m07d1
 1316+07C6 CC E7 07     		CALL	Z,m07e2
 1317+07C9 C3 80 07     		JP	m077e
 1318+07CC 00 00 00     		DB	0,0,0
 1319+07CF CD 64 2B     m07cf:		CALL	m2b64
 1320+07D2 D7           		RST	10H
 1321+07D3 CD 89 2B     m07d3:		CALL	m2b89
 1322+07D6 C9           		RET
 1323+07D7 CD 64 2B     m07d7:		CALL	m2b64
 1324+07DA CD E7 07     		CALL	m07e2
 1325+07DD 18 F4        		JR	m07d3
 1326+07DF CD 64 2B     m07df:		CALL	m2b64
 1327+07E2 CD F6 07     		CALL	m07f1
 1328+07E5 18 EC        		JR	m07d3
 1329+07E7
 1330+07E7              ; Subroutine to output a null-terminated message
 1331+07E7
 1332+07E7 7E           m07e2:		LD	A,(HL)		; get next char
 1333+07E8 B7           		OR	A
 1334+07E9 C8           		RET	Z		; exit if null
 1335+07EA EF           		RST	28H
 1336+07EB 10 00        		DW	$0010		; output char
 1337+07ED 23           m07e8:		INC	HL
 1338+07EE 18 F7        		JR	m07e2		; loop back
 1339+07F0
 1340+07F0              ; Subroutine to output a CR char
 1341+07F0
 1342+07F0 3E 0D        m07eb:		LD	A,$0D
 1343+07F2 EF           		RST	28H
 1344+07F3 10 00        		DW	$0010		; output CR
 1345+07F5 C9           m07f0:		RET
 1346+07F6
 1347+07F6
 1348+07F6              ; Subroutine to output a number up to 65535 (in HL)
 1349+07F6
 1350+07F6 E5           m07f1:		PUSH	HL
 1351+07F7 01 F0 D8     		LD	BC,$D8F0	; -10000
 1352+07FA EF           		RST	28H
 1353+07FB 2A 19        		DW	o192A		; output 10000s
 1354+07FD 01 18 FC     		LD	BC,$FC18	; -1000
 1355+0800 EF           		RST	28H
 1356+0801 2A 19        		DW	o192A		; output 1000s
 1357+0803 18 01        		JR	m0801
 1358+0805
 1359+0805              ; Subroutine to output a number up to 999 (in HL)
 1360+0805
 1361+0805 E5           m0800:		PUSH	HL
 1362+0806 01 9C FF     m0801:		LD	BC,$FF9C	; -100
 1363+0809 EF           		RST	28H
 1364+080A 2A 19        		DW	o192A		; output 100s
 1365+080C 0E F6        		LD	C,$F6		; -10
 1366+080E EF           		RST	28H
 1367+080F 2A 19        		DW	o192A		; output 10s
 1368+0811 7D           		LD	A,L		; units
 1369+0812 EF           		RST	28H
 1370+0813 EF 15        		DW	o15EF		; output units
 1371+0815 E1           		POP	HL		; restore number
 1372+0816 C9           		RET
 1373+0817
 1374+0817              ; Catalog attribute messages
 1375+0817
 1376+0817 00           		DB	0
 1377+0818              m0812:
 1378+0818 20 20 20 20  m0813:		DM	"    ", 0
 1378+081C 00
 1379+081D 00           		DB	0
 1380+081E 20 50 52 54  m0818:		DM	" PRT", 0
 1380+0822 00
 1381+0823 20 53 59 53  m081e:		DM	" SYS", 0
 1381+0827 00
 1382+0828 20 41 52 43  m0823:		DM	" ARC", 0
 1382+082C 00
 1383+082D
 1384+082D              ; Subroutine to save a block to tape
 1385+082D
 1386+082D 21 35 08     m0828:		LD	HL,m0830
 1387+0830 E5           		PUSH	HL		; stack SA-RET routine address (why??)
 1388+0831 EF           		RST	28H
 1389+0832 C6 04        		DW	$04C6		; save bytes
 1390+0834 C9           		RET
 1391+0835 EF           m0830:		RST	28H
 1392+0836 3F 05        		DW	o053F		; SA-RET
 1393+0838 C9           		RET
 1394+0839
 1395+0839              ; Subroutine to LOAD/VERIFY a block of data, from tape or disk
 1396+0839              ; On entry, IX=start, DE=length, A=type (usually $FF), carry set for LOAD
 1397+0839              ; or reset for VERIFY
 1398+0839              ; File 0 will be open for disk operations, which should be closed before exit
 1399+0839              ; On exit, carry is set if okay, reset if error
 1400+0839
 1401+0839 F5           m0834:		PUSH	AF
 1402+083A 3A 5E 5B     		LD	A,(	$5B5E)
 1403+083D FE 54        		CP	"T"
 1404+083F CA 88 08     		JP	Z,m0883		; move on for tape operations
 1405+0842 F1           		POP	AF
 1406+0843 30 3A        		JR	NC,m087a	; go to exit for disk verify (won't get here)
 1407+0845 E5           		PUSH	HL		; save registers
 1408+0846 D5           		PUSH	DE
 1409+0847 C5           		PUSH	BC
 1410+0848 06 00        		LD	B,$00		; file 0
 1411+084A 0E 00        		LD	C,$00		; page 0
 1412+084C DD E5        		PUSH	IX
 1413+084E E1           		POP	HL		; HL=address
 1414+084F CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1415+0852 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 1416+0855 CD 00 3F     		CALL	m3f00
 1417+0858 12 01        		DW	$0112	; read the block
 1418+085A CD EE 32     		CALL	m32ee		; restore TSTACK
 1419+085D CD 64 2B     		CALL	m2b64		; page in normal memory
 1420+0860 38 08        		JR	C,m0865		; move on to exit if okay
 1421+0862 FE 19        		CP	$19
 1422+0864 20 1E        		JR	NZ,m087f	; move on if error not end-of-file
 1423+0866 CD 9A 0E     		CALL	m0e9a		; cause error
 1424+0869 31           		DB	$31
 1425+086A 06 00        m0865:		LD	B,$00
 1426+086C CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1427+086F CD B6 32     m086a:		CALL	m32b6		; save TSTACK in page 7
 1428+0872 CD 00 3F     		CALL	m3f00
 1429+0875 09 01        		DW	$0109	; close file
 1430+0877 CD EE 32     		CALL	m32ee		; restore TSTACK
 1431+087A CD 64 2B     		CALL	m2b64		; page in normal memory
 1432+087D 30 05        		JR	NC,m087f	; move on if error
 1433+087F 37           m087a:		SCF
 1434+0880 C1           		POP	BC		; restore registers
 1435+0881 D1           		POP	DE
 1436+0882 E1           		POP	HL
 1437+0883 C9           		RET
 1438+0884 CD 9A 0E     m087f:		CALL	m0e9a		; cause DOS error
 1439+0887 FF           		DB	$FF
 1440+0888 F1           m0883:		POP	AF		; if tape,restore flags and enter next routine
 1441+0889
 1442+0889              ; Subroutine to call LD-BYTES subroutine in ROM 3
 1443+0889
 1444+0889 EF           m0884:		RST	28H
 1445+088A 56 05        		DW	o0556		; call it
 1446+088C C9           		RET
 1447+088D
 1448+088D              ; The SAVE/LOAD/VERIFY/MERGE commands
 1449+088D
 1450+088D              ; section 1 - initialisation
 1451+088D
 1452+088D F1           m0888:		POP	AF		; discard return address of scan-loop
 1453+088E 3A 74 5C     		LD	A,(	$5C74)
 1454+0891 D6 83        		SUB	m0f83 and $FF	; store command code (0=SAVE,1=LOAD,
 1455+0893 32 74 5C     		LD	(	$5C74),A	; 2=VERIFY,3=MERGE)
 1456+0896 CD 29 11     		CALL	m1129		; get a string expression
 1457+0899 FD CB 01 7E  		BIT	7,(IY+$01)
 1458+089D CA C6 09     		JP	Z,m09ba		; move on if syntax-checking
 1459+08A0 01 11 00     		LD	BC,$0011	; 17 bytes required for LOAD
 1460+08A3 3A 74 5C     		LD	A,(	$5C74)
 1461+08A6 A7           		AND	A
 1462+08A7 28 02        		JR	Z,m08a6
 1463+08A9 0E 22        		LD	C,$22		; but 34 for others
 1464+08AB EF           m08a6:		RST	28H
 1465+08AC 30 00        		DW	$0030		; make space
 1466+08AE D5           		PUSH	DE
 1467+08AF DD E1        		POP	IX		; IX points to space
 1468+08B1 06 0B        		LD	B,$0B
 1469+08B3 3E 20        		LD	A," "
 1470+08B5 12           m08b0:		LD	(DE),A		; fill 11-byte name with spaces
 1471+08B6 13           		INC	DE
 1472+08B7 10 FC        		DJNZ	m08b0
 1473+08B9 DD 36 01 FF  		LD	(IX+$01),$FF	; place terminator in 2nd byte
 1474+08BD EF           		RST	28H
 1475+08BE F1 2B        		DW	o2BF1		; get string value from stack
 1476+08C0 D5           		PUSH	DE
 1477+08C1 C5           		PUSH	BC
 1478+08C2
 1479+08C2              ; section 2 - booting a disk
 1480+08C2
 1481+08C2 79           		LD	A,C
 1482+08C3 3D           		DEC	A
 1483+08C4 B0           		OR	B		; check length
 1484+08C5 20 22        		JR	NZ,m08e4	; move on if not 1
 1485+08C7 1A           		LD	A,(DE)
 1486+08C8 FE 2A        		CP	"*"
 1487+08CA 20 1D        		JR	NZ,m08e4	; or if not "*"
 1488+08CC CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1489+08CF CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 1490+08D2 CD 00 3F     		CALL	m3f00
 1491+08D5 2A 01        		DW	$012A	; boot a disk
 1492+08D7 CD EE 32     		CALL	m32ee		; restore TSTACK
 1493+08DA CD 64 2B     		CALL	m2b64		; page in normal memory
 1494+08DD FE 23        		CP	$23
 1495+08DF 20 04        		JR	NZ,m08e0	; if error isn't "disk not bootable", move on
 1496+08E1 CD 9A 0E     		CALL	m0e9a		; cause error
 1497+08E4 3B           		DB	$3B
 1498+08E5 CD 9A 0E     m08e0:		CALL	m0e9a		; cause DOS error
 1499+08E8 FF           		DB	$FF
 1500+08E9
 1501+08E9              ; section 3 - setting drive for operation in RAMERR
 1502+08E9
 1503+08E9 13           m08e4:		INC	DE
 1504+08EA 1A           		LD	A,(DE)
 1505+08EB 1B           		DEC	DE
 1506+08EC FE 3A        		CP	":"
 1507+08EE 20 0F        		JR	NZ,m08fe	; move on if no drive specified
 1508+08F0 1A           		LD	A,(DE)
 1509+08F1 E6 DF        		AND	$DF		; get capitalised drive letter
 1510+08F3 FE 54        		CP	"T"		; check for valid drives
 1511+08F5 28 19        		JR	Z,m090f		; moving on if found
 1512+08F7 FE 41        		CP	"A"		; check for valid drives
 1513+08F9 38 04        		JR	C,m08fe		; moving on if found
 1514+08FB FE 51        		CP	"Q"		; check for valid drives
 1515+08FD 38 11        		JR	C,m090f		; moving on if found
 1516+08FF 3A 74 5C     m08fe:		LD	A,(	$5C74)
 1517+0902 B7           		OR	A
 1518+0903 3A 7A 5B     		LD	A,(	$5B7A)	; use SAVDRV as drive for SAVE
 1519+0906 28 03        		JR	Z,m090a
 1520+0908 3A 79 5B     		LD	A,(	$5B79)	; or LODDRV otherwise
 1521+090B 32 5E 5B     m090a:		LD	(	$5B5E),A	; store drive in RAMERR
 1522+090E 18 68        		JR	m096c		; move on
 1523+0910
 1524+0910              ; section 4 - changing default drives for LOAD "A:" etc
 1525+0910
 1526+0910 32 5E 5B     m090f:		LD	(	$5B5E),A
 1527+0913 79           		LD	A,C
 1528+0914 3D           		DEC	A
 1529+0915 3D           		DEC	A
 1530+0916 B0           		OR	B		; check string length
 1531+0917 20 50        		JR	NZ,m0969	; move on if not 2
 1532+0919 3A 5E 5B     		LD	A,(	$5B5E)
 1533+091C
 1534+091C FE 54        m0942:		CP	"T"
 1535+091E 28 17        		JR	Z,m095d		; move on for T:
 1536+0920 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1537+0923 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 1538+0926 CD 00 3F     		CALL	m3f00
 1539+0929 2D 01        		DW	$012D	; set default drive
 1540+092B CD EE 32     		CALL	m32ee		; restore TSTACK
 1541+092E CD 64 2B     		CALL	m2b64		; page in normal memory
 1542+0931 38 04        		JR	C,m095d		; move on if no error
 1543+0933 CD 9A 0E     		CALL	m0e9a
 1544+0936 FF           		DB	$FF		; cause DOS error
 1545+0937
 1546+0937 3A 74 5C     m095d:		LD	A,(	$5C74)
 1547+093A B7           		OR	A
 1548+093B 3A 5E 5B     		LD	A,(	$5B5E)
 1549+093E 28 05        		JR	Z,m0945
 1550+0940 32 79 5B     		LD	(	$5B79),A
 1551+0943 18 03        		JR	m0948
 1552+0945 32 7A 5B     m0945:		LD	(	$5B7A),A
 1553+0948 57           m0948:		LD	D,A
 1554+0949 1E 10        		LD	E,$10
 1555+094B DF           		RST	18H
 1556+094C FE B5        		CP	$B5
 1557+094E 20 16        		JR	NZ,m0966
 1558+0950 E7           		RST	20H
 1559+0951 EB           		EX	DE,HL
 1560+0952 AF           		XOR	A
 1561+0953 47           		LD	B,A
 1562+0954 4F           		LD	C,A
 1563+0955 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1564+0958 CD B6 32     		CALL	m32b6
 1565+095B CD 00 3F     		CALL	m3f00
 1566+095E D6 00        		DW	$00D6
 1567+0960 CD EE 32     		CALL	m32ee
 1568+0963 CD 64 2B     		CALL	m2b64
 1569+0966 C1           m0966:		POP	BC
 1570+0967 D1           		POP	DE
 1571+0968 C9           		RET
 1572+0969 3A 5E 5B     m0969:		LD	A,(	$5B5E)
 1573+096C FE 54        		CP	$54
 1574+096E 20 08        		JR	NZ,m096c
 1575+0970 C1           m0970:		POP	BC
 1576+0971 D1           		POP	DE
 1577+0972 13           		INC	DE
 1578+0973 13           		INC	DE
 1579+0974 0B           		DEC	BC
 1580+0975 0B           		DEC	BC
 1581+0976 18 2E        		JR	m099a
 1582+0978
 1583+0978              ; section 5 - copying filename to page 7 (disk operations only)
 1584+0978
 1585+0978 FE 54        m096c:		CP	"T"
 1586+097A 28 28        		JR	Z,m0998		; move on for tape operations
 1587+097C 3A 74 5C     		LD	A,(	$5C74)
 1588+097F FE 02        		CP	$02
 1589+0981 20 03        		JR	NZ,m097a	; move on if not VERIFY
 1590+0983 E1           		POP	HL		; for VERIFY on disk, just exit
 1591+0984 E1           		POP	HL
 1592+0985 C9           		RET
 1593+0986 78           m097a:		LD	A,B
 1594+0987 B1           		OR	C		; test length of string
 1595+0988 20 04        		JR	NZ,m0982
 1596+098A CD 9A 0E     		CALL	m0e9a
 1597+098D 0E           		DB	$0E		; invalid filename error if zero
 1598+098E 21 01 ED     m0982:		LD	HL,$ED01
 1599+0991 EB           		EX	DE,HL
 1600+0992 CD 63 3F     		CALL	m3f63		; copy filename to page 7
 1601+0995 C1           		POP	BC
 1602+0996 01 0A 00     		LD	BC,$000A
 1603+0999 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1604+099C 3E FF        		LD	A,$FF
 1605+099E 12           		LD	(DE),A		; add terminator
 1606+099F CD 64 2B     		CALL	m2b64		; page in normal memory
 1607+09A2 18 01        		JR	m0999		; move on with disk operations
 1608+09A4
 1609+09A4              ; section 6 - copying filename into 1st header
 1610+09A4              ; *BUG* If filename was specified as "T:name", the "T:" is never stripped
 1611+09A4
 1612+09A4 C1           m0998:		POP	BC		; restore length & add of filename
 1613+09A5 D1           m0999:		POP	DE
 1614+09A6 21 F6 FF     m099a:		LD	HL,$FFF6
 1615+09A9 0B           		DEC	BC
 1616+09AA 09           		ADD	HL,BC
 1617+09AB 03           		INC	BC
 1618+09AC 30 11        		JR	NC,m09b3	; move on if filename 10 letters or less
 1619+09AE 3A 74 5C     		LD	A,(	$5C74)
 1620+09B1 A7           		AND	A
 1621+09B2 20 04        		JR	NZ,m09ac
 1622+09B4 CD 9A 0E     		CALL	m0e9a
 1623+09B7 0E           		DB	$0E		; bad filename error if SAVEing
 1624+09B8 78           m09ac:		LD	A,B
 1625+09B9 B1           		OR	C
 1626+09BA 28 0A        		JR	Z,m09ba		; move on if no filename
 1627+09BC 01 0A 00     		LD	BC,$000A	; copy 10 chars
 1628+09BF DD E5        m09b3:		PUSH	IX
 1629+09C1 E1           		POP	HL
 1630+09C2 23           		INC	HL
 1631+09C3 EB           		EX	DE,HL
 1632+09C4 ED B0        		LDIR			; copy filename to header+1 in workspace
 1633+09C6
 1634+09C6              ; At this point, syntax-checking rejoins the routines
 1635+09C6              ; Each of the following sections fills in the remaining header information
 1636+09C6              ; for their filetype & ensures syntax is correct to end-of-statement.
 1637+09C6              ; At run-time the sections recombine at section 11, with HL=address
 1638+09C6              ; to load/verify/merge/save at
 1639+09C6
 1640+09C6              ; section 7 - DATA operations
 1641+09C6 DF           m09ba:		RST	18H
 1642+09C7 FE E4        		CP	$E4
 1643+09C9 20 4C        		JR	NZ,m0a11	; move on if not DATA
 1644+09CB 3A 74 5C     		LD	A,(	$5C74)
 1645+09CE FE 03        		CP	$03
 1646+09D0 CA 25 11     		JP	Z,m1125		; error if used with MERGE
 1647+09D3 E7           		RST	20H
 1648+09D4
 1649+09D4 EF           m09cc:		RST	28H
 1650+09D5 B2 28        		DW	o28B2		; search for variable
 1651+09D7 CB F9        		SET	7,C		; set bit 7 of array's name
 1652+09D9 30 0D        		JR	NC,m09e0	; jump if handling existing array
 1653+09DB 21 00 00     		LD	HL,$0000
 1654+09DE 3A 74 5C     		LD	A,(	$5C74)
 1655+09E1 3D           		DEC	A
 1656+09E2 28 18        		JR	Z,m09f4
 1657+09E4 CD 9A 0E     		CALL	m0e9a
 1658+09E7 01           		DB	$01		; error 2 if trying to SAVE/VERIFY new array
 1659+09E8 C2 25 11     m09e0:		JP	NZ,m1125	; error if just a numeric variable
 1660+09EB FD CB 01 7E  		BIT	7,(IY+$01)
 1661+09EF 28 18        		JR	Z,m0a01		; move on if checking syntax
 1662+09F1 23           		INC	HL
 1663+09F2 7E           		LD	A,(HL)
 1664+09F3 DD 77 0B     		LD	(IX+$0B),A	; copy array length into workspace header
 1665+09F6 23           		INC	HL
 1666+09F7 7E           		LD	A,(HL)
 1667+09F8 DD 77 0C     		LD	(IX+$0C),A
 1668+09FB 23           		INC	HL
 1669+09FC DD 71 0E     m09f4:		LD	(IX+$0E),C	; copy array name into workspace header
 1670+09FF 3E 01        		LD	A,$01		; type 1
 1671+0A01 CB 71        		BIT	6,C
 1672+0A03 28 01        		JR	Z,m09fe		; move on if numeric array
 1673+0A05 3C           		INC	A		; else type 2
 1674+0A06 DD 77 00     m09fe:		LD	(IX+$00),A	; copy type into workspace header
 1675+0A09 EB           m0a01:		EX	DE,HL
 1676+0A0A E7           		RST	20H
 1677+0A0B FE 29        		CP	")"
 1678+0A0D 20 D9        		JR	NZ,m09e0	; error if not ")"
 1679+0A0F E7           		RST	20H
 1680+0A10 CD B1 10     		CALL	m10b1		; check for end-of-statement
 1681+0A13 EB           m0a0d:		EX	DE,HL
 1682+0A14 C3 D5 0A     		JP	m0ad5		; jump on
 1683+0A17
 1684+0A17              ; section 8 - SCREEN$ operations
 1685+0A17
 1686+0A17 FE AA        m0a11:		CP	$AA		; check for SCREEN$
 1687+0A19 20 1F        		JR	NZ,m0a36	; move on if not
 1688+0A1B 3A 74 5C     		LD	A,(	$5C74)
 1689+0A1E FE 03        		CP	$03
 1690+0A20 CA 25 11     		JP	Z,m1125		; error if trying to MERGE
 1691+0A23 E7           		RST	20H
 1692+0A24 CD B1 10     		CALL	m10b1		; check for end-of-statement
 1693+0A27 DD 36 0B 00  		LD	(IX+$0B),$00	; store screen length
 1694+0A2B DD 36 0C 1B  		LD	(IX+$0C),$1B
 1695+0A2F 21 00 40     		LD	HL,$4000
 1696+0A32 DD 75 0D     		LD	(IX+$0D),L	; and start
 1697+0A35 DD 74 0E     		LD	(IX+$0E),H
 1698+0A38 18 4F        		JR	m0a89		; jump on
 1699+0A3A
 1700+0A3A              ; section 9 - CODE operations
 1701+0A3A
 1702+0A3A FE AF        m0a36:		CP	$AF		; check for CODE
 1703+0A3C 20 51        		JR	NZ,m0a8f	; move on if not
 1704+0A3E 3A 74 5C     		LD	A,(	$5C74)
 1705+0A41 FE 03        		CP	$03
 1706+0A43 CA 25 11     		JP	Z,m1125		; error if trying to MERGE
 1707+0A46 E7           		RST	20H
 1708+0A47
 1709+0A47 CD 94 0E     m0a45:		CALL	m0e94
 1710+0A4A 20 0C        		JR	NZ,m0a56	; move on if not end-of-statement
 1711+0A4C 3A 74 5C     		LD	A,(	$5C74)
 1712+0A4F A7           		AND	A
 1713+0A50 CA 25 11     		JP	Z,m1125		; error if trying to SAVE with no parameters
 1714+0A53 EF           		RST	28H
 1715+0A54 E6 1C        		DW	o1CE6		; get zero to calculator stack
 1716+0A56 18 0F        		JR	m0a67		; move on
 1717+0A58 CD 21 11     m0a56:		CALL	m1121		; get numeric expression
 1718+0A5B DF           		RST	18H
 1719+0A5C FE 2C        		CP	","
 1720+0A5E 28 0C        		JR	Z,m0a6c		; move on if comma
 1721+0A60 3A 74 5C     		LD	A,(	$5C74)
 1722+0A63 A7           		AND	A
 1723+0A64 CA 25 11     		JP	Z,m1125		; error if trying to SAVE with 1 parameter
 1724+0A67 EF           m0a67:		RST	28H
 1725+0A68 E6 1C        		DW	o1CE6		; get zero to calculator stack
 1726+0A6A 18 06        		JR	m0a72		; move on
 1727+0A6C EF           m0a6c:		RST	28H
 1728+0A6D 20 00        		DW	$0020		; get next char
 1729+0A6F CD 21 11     m0a6f:		CALL	m1121		; get numeric expression
 1730+0A72 CD B1 10     m0a72:		CALL	m10b1		; check for end-of-statement
 1731+0A75 EF           		RST	28H
 1732+0A76 99 1E        		DW	o1E99		; get length to BC
 1733+0A78 DD 71 0B     		LD	(IX+$0B),C	; store in workspace header
 1734+0A7B DD 70 0C     		LD	(IX+$0C),B
 1735+0A7E EF           		RST	28H
 1736+0A7F 99 1E        		DW	o1E99		; get address to BC
 1737+0A81 DD 71 0D     		LD	(IX+$0D),C	; store in workspace header
 1738+0A84 DD 70 0E     		LD	(IX+$0E),B
 1739+0A87 60           		LD	H,B		; HL=address
 1740+0A88 69           		LD	L,C
 1741+0A89 DD 36 00 03  m0a89:		LD	(IX+$00),$03	; type 3 to workspace header
 1742+0A8D 18 46        		JR	m0ad5		; move on
 1743+0A8F
 1744+0A8F              ; section 10 - BASIC operations
 1745+0A8F
 1746+0A8F FE CA        m0a8f:		CP	$CA		; check for LINE
 1747+0A91 28 09        		JR	Z,m0a9c		; move on if present
 1748+0A93 C3 C7 24     		JP	n24c7		; check for end-of-statement
 1749+0A96
 1750+0A96 DD 36 0E 80  m0a96:		LD	(IX+$0E),$80	; no auto-run
 1751+0A9A 18 19        		JR	m0ab5		; move on
 1752+0A9C 3A 74 5C     m0a9c:		LD	A,(	$5C74)
 1753+0A9F A7           		AND	A
 1754+0AA0 C2 25 11     		JP	NZ,m1125	; error unless SAVE with LINE
 1755+0AA3 EF           		RST	28H
 1756+0AA4 20 00        		DW	$0020		; get next char
 1757+0AA6 CD 21 11     m0aa6:		CALL	m1121		; get numeric expression
 1758+0AA9 CD B1 10     		CALL	m10b1		; check for end-of-line
 1759+0AAC EF           		RST	28H
 1760+0AAD 99 1E        		DW	o1E99		; get line to BC
 1761+0AAF DD 71 0D     		LD	(IX+$0D),C	; store in workspace header
 1762+0AB2 DD 70 0E     		LD	(IX+$0E),B
 1763+0AB5 DD 36 00 00  m0ab5:		LD	(IX+$00),$00	; type 0
 1764+0AB9 2A 59 5C     		LD	HL,(	$5C59)
 1765+0ABC ED 5B 53 5C  		LD	DE,(	$5C53)
 1766+0AC0 37           		SCF
 1767+0AC1 ED 52        		SBC	HL,DE		; HL=program+vars length
 1768+0AC3 DD 75 0B     		LD	(IX+$0B),L	; store in workspace header
 1769+0AC6 DD 74 0C     		LD	(IX+$0C),H
 1770+0AC9 2A 4B 5C     		LD	HL,(	$5C4B)
 1771+0ACC ED 52        		SBC	HL,DE		; HL=program only length
 1772+0ACE DD 75 0F     		LD	(IX+$0F),L	; store in workspace header
 1773+0AD1 DD 74 10     		LD	(IX+$10),H
 1774+0AD4 EB           		EX	DE,HL
 1775+0AD5
 1776+0AD5              ; section 11 - LOAD/VERIFY/MERGE tape operations
 1777+0AD5
 1778+0AD5 3A 74 5C     m0ad5:		LD	A,(	$5C74)
 1779+0AD8 A7           		AND	A
 1780+0AD9 CA 6E 0D     		JP	Z,m0d6e		; move on if saving
 1781+0ADC E5           		PUSH	HL
 1782+0ADD 01 11 00     		LD	BC,$0011
 1783+0AE0 DD 09        		ADD	IX,BC		; IX points to 2nd header
 1784+0AE2 3A 5E 5B     		LD	A,(	$5B5E)
 1785+0AE5 FE 54        		CP	"T"
 1786+0AE7 20 58        		JR	NZ,m0b41	; move on if disk operation
 1787+0AE9 DD E5        m0ae9:		PUSH	IX
 1788+0AEB 11 11 00     		LD	DE,$0011
 1789+0AEE AF           		XOR	A
 1790+0AEF 37           		SCF
 1791+0AF0 CD 89 08     		CALL	m0884		; load header from tape to 2nd header area
 1792+0AF3 DD E1        		POP	IX
 1793+0AF5 30 F2        		JR	NC,m0ae9	; loop back if error
 1794+0AF7 3E FE        		LD	A,$FE
 1795+0AF9 EF           		RST	28H
 1796+0AFA 01 16        		DW	o1601		; open channel to stream -2
 1797+0AFC FD 36 52 03  		LD	(IY+$52),$03	; set scroll count
 1798+0B00 0E 80        		LD	C,$80		; signal "names don't match"
 1799+0B02 DD 7E 00     		LD	A,(IX+$00)
 1800+0B05 DD BE EF     		CP	(IX-$11)	; compare types
 1801+0B08 20 02        		JR	NZ,m0b0c	; jump if no match
 1802+0B0A 0E F6        		LD	C,$F6		; C must be incremented 10 times to match
 1803+0B0C FE 04        m0b0c:		CP	$04
 1804+0B0E 30 D9        		JR	NC,m0ae9	; error for types 4+
 1805+0B10 11 C0 09     		LD	DE,o09C0	; address of message block in ROM 3
 1806+0B13 C5           		PUSH	BC
 1807+0B14 EF           		RST	28H
 1808+0B15 0A 0C        		DW	o0C0A		; print filetype message
 1809+0B17 C1           		POP	BC
 1810+0B18 DD E5        		PUSH	IX
 1811+0B1A D1           		POP	DE		; DE points to filename to check for
 1812+0B1B 21 F0 FF     		LD	HL,$FFF0
 1813+0B1E 19           		ADD	HL,DE		; HL points to loaded filename
 1814+0B1F 06 0A        		LD	B,$0A		; check 10 chars
 1815+0B21 7E           		LD	A,(HL)		; get next char
 1816+0B22 3C           		INC	A
 1817+0B23 20 03        		JR	NZ,m0b28	; move on if name to check not null
 1818+0B25 79           		LD	A,C		; if null, signal "10 chars match"
 1819+0B26 80           		ADD	A,B
 1820+0B27 4F           		LD	C,A
 1821+0B28 13           m0b28:		INC	DE
 1822+0B29 1A           		LD	A,(DE)
 1823+0B2A BE           		CP	(HL)		; compare names
 1824+0B2B 23           		INC	HL
 1825+0B2C 20 01        		JR	NZ,m0b2f
 1826+0B2E 0C           		INC	C		; increment C if chars match
 1827+0B2F EF           m0b2f:		RST	28H
 1828+0B30 10 00        		DW	$0010		; output char
 1829+0B32 10 F4        		DJNZ	m0b28		; loop back
 1830+0B34 CB 79        		BIT	7,C
 1831+0B36 20 B1        		JR	NZ,m0ae9	; loop back if no match
 1832+0B38 3E 0D        		LD	A,$0D
 1833+0B3A EF           		RST	28H
 1834+0B3B 10 00        		DW	$0010		; output CR
 1835+0B3D E1           		POP	HL
 1836+0B3E C3 A6 0B     		JP	m0ba6		; move on
 1837+0B41
 1838+0B41              ; section 12 - LOAD/MERGE disk operations
 1839+0B41
 1840+0B41 3A 74 5C     m0b41:		LD	A,(	$5C74)
 1841+0B44 FE 02        		CP	$02
 1842+0B46 28 5E        		JR	Z,m0ba6		; move on if VERIFY (can't be here if so!)
 1843+0B48 DD E5        		PUSH	IX
 1844+0B4A 06 00        		LD	B,$00		; file 0
 1845+0B4C 0E 01        		LD	C,$01		; exclusive-read
 1846+0B4E 16 00        		LD	D,$00
 1847+0B50 1E 01        		LD	E,$01
 1848+0B52 21 01 ED     		LD	HL,$ED01
 1849+0B55 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1850+0B58 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 1851+0B5B CD 00 3F     		CALL	m3f00
 1852+0B5E 06 01        		DW	$0106	; open file
 1853+0B60 CD EE 32     		CALL	m32ee		; restore TSTACK
 1854+0B63 CD 64 2B     		CALL	m2b64		; page in normal memory
 1855+0B66 38 04        		JR	C,m0b6c
 1856+0B68 CD 9A 0E     		CALL	m0e9a		; cause any DOS error
 1857+0B6B FF           		DB	$FF
 1858+0B6C 06 00        m0b6c:		LD	B,$00
 1859+0B6E CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1860+0B71 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 1861+0B74 CD 00 3F     		CALL	m3f00
 1862+0B77 0F 01        		DW	$010F	; IX to header
 1863+0B79 CD EE 32     		CALL	m32ee		; restore TSTACK
 1864+0B7C CD 64 2B     		CALL	m2b64		; page in normal memory
 1865+0B7F DD E3        		EX	(SP),IX
 1866+0B81 E1           		POP	HL
 1867+0B82 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 1868+0B85 7E           		LD	A,(HL)
 1869+0B86 CD 64 2B     		CALL	m2b64		; page in normal memory
 1870+0B89 DD BE EF     		CP	(IX-$11)	; compare types
 1871+0B8C 28 04        		JR	Z,m0b92
 1872+0B8E CD 9A 0E     		CALL	m0e9a
 1873+0B91 1D           		DB	$1D		; error if different
 1874+0B92 DD 77 00     m0b92:		LD	(IX+$00),A	; store in 2nd header area
 1875+0B95 DD E5        		PUSH	IX
 1876+0B97 D1           		POP	DE
 1877+0B98 EB           		EX	DE,HL
 1878+0B99 01 0B 00     		LD	BC,$000B
 1879+0B9C 09           		ADD	HL,BC
 1880+0B9D EB           		EX	DE,HL
 1881+0B9E 23           		INC	HL
 1882+0B9F 01 06 00     		LD	BC,$0006
 1883+0BA2 CD 8A 3F     		CALL	m3f8a		; copy parameters from page 7 into 2nd header
 1884+0BA5 E1           		POP	HL
 1885+0BA6
 1886+0BA6              ; section 13 - Perform tape/disk VERIFY (any type) or LOAD (CODE only)
 1887+0BA6
 1888+0BA6 DD 7E 00     m0ba6:		LD	A,(IX+$00)
 1889+0BA9 FE 03        		CP	$03
 1890+0BAB 28 0C        		JR	Z,m0bb9		; move on for type 3
 1891+0BAD 3A 74 5C     		LD	A,(	$5C74)
 1892+0BB0 3D           		DEC	A
 1893+0BB1 CA 04 0C     		JP	Z,m0c04		; move on if LOADing
 1894+0BB4 FE 02        		CP	$02
 1895+0BB6 CA B2 0C     		JP	Z,m0cb2		; move on if MERGEing
 1896+0BB9 E5           m0bb9:		PUSH	HL		; save address to LOAD/VERIFY at
 1897+0BBA DD 6E FA     		LD	L,(IX-$06)
 1898+0BBD DD 66 FB     		LD	H,(IX-$05)	; HL=length from 1st header
 1899+0BC0 DD 5E 0B     		LD	E,(IX+$0B)
 1900+0BC3 DD 56 0C     		LD	D,(IX+$0C)	; DE=length from 2nd header
 1901+0BC6 7C           		LD	A,H
 1902+0BC7 B5           		OR	L
 1903+0BC8 28 0D        		JR	Z,m0bd7		; move on if length not specified (CODE only)
 1904+0BCA ED 52        		SBC	HL,DE
 1905+0BCC 38 32        		JR	C,m0c00		; error if block larger than requested
 1906+0BCE 28 07        		JR	Z,m0bd7
 1907+0BD0 DD 7E 00     		LD	A,(IX+$00)
 1908+0BD3 FE 03        		CP	$03
 1909+0BD5 20 25        		JR	NZ,m0bfc	; error for uneven lengths except in CODE
 1910+0BD7 E1           m0bd7:		POP	HL		; restore address
 1911+0BD8 7C           		LD	A,H
 1912+0BD9 B5           		OR	L
 1913+0BDA 20 06        		JR	NZ,m0be2
 1914+0BDC DD 6E 0D     		LD	L,(IX+$0D)
 1915+0BDF DD 66 0E     		LD	H,(IX+$0E)	; if zero, use start address of 2nd header
 1916+0BE2 E5           m0be2:		PUSH	HL
 1917+0BE3 DD E1        		POP	IX		; IX=address to load
 1918+0BE5 3A 74 5C     		LD	A,(	$5C74)
 1919+0BE8 FE 02        		CP	$02
 1920+0BEA 37           		SCF			; set carry for LOAD
 1921+0BEB 20 09        		JR	NZ,m0bf6
 1922+0BED A7           		AND	A		; reset carry for VERIFY
 1923+0BEE 3A 5E 5B     		LD	A,(	$5B5E)
 1924+0BF1 FE 54        		CP	"T"
 1925+0BF3 28 01        		JR	Z,m0bf6
 1926+0BF5 C9           		RET			; exit if VERIFY with disk (won't get here!)
 1927+0BF6 3E FF        m0bf6:		LD	A,$FF		; data block
 1928+0BF8 CD 39 08     m0bf8:		CALL	m0834		; load/verify block from tape/disk
 1929+0BFB D8           		RET	C		; exit if okay
 1930+0BFC CD 9A 0E     m0bfc:		CALL	m0e9a		; error R - tape loading error
 1931+0BFF 1A           		DB	$1A
 1932+0C00 CD 9A 0E     m0c00:		CALL	m0e9a		; error ???
 1933+0C03 4F           		DB	$4F
 1934+0C04
 1935+0C04              ; section 14 - Perform tape/disk LOAD (types 0-2)
 1936+0C04
 1937+0C04 DD 5E 0B     m0c04:		LD	E,(IX+$0B)
 1938+0C07 DD 56 0C     		LD	D,(IX+$0C)	; DE=length from 2nd header
 1939+0C0A E5           m0c0a:		PUSH	HL
 1940+0C0B 7C           		LD	A,H
 1941+0C0C B5           		OR	L		; test start=0 (previously undeclared array)
 1942+0C0D 20 06        		JR	NZ,m0c15	; move on if not
 1943+0C0F 13           		INC	DE
 1944+0C10 13           		INC	DE
 1945+0C11 13           		INC	DE		; add 3 bytes for name (1) & length (2)
 1946+0C12 EB           		EX	DE,HL
 1947+0C13 18 0C        		JR	m0c21		; move on
 1948+0C15 DD 6E FA     m0c15:		LD	L,(IX-$06)
 1949+0C18 DD 66 FB     		LD	H,(IX-$05)	; HL=size of existing prog+vars or array
 1950+0C1B EB           		EX	DE,HL
 1951+0C1C 37           		SCF
 1952+0C1D ED 52        		SBC	HL,DE
 1953+0C1F 38 09        		JR	C,m0c2a		; move on if no extra space required
 1954+0C21 11 05 00     m0c21:		LD	DE,$0005	; allow for 5-byte overhead
 1955+0C24 19           		ADD	HL,DE
 1956+0C25 44           		LD	B,H
 1957+0C26 4D           		LD	C,L
 1958+0C27 EF           		RST	28H
 1959+0C28 05 1F        		DW	o1F05		; test if space available
 1960+0C2A E1           m0c2a:		POP	HL		; restore destination address
 1961+0C2B DD 7E 00     		LD	A,(IX+$00)
 1962+0C2E A7           		AND	A
 1963+0C2F 28 3E        		JR	Z,m0c6f		; move on for BASIC programs
 1964+0C31 7C           		LD	A,H
 1965+0C32 B5           		OR	L
 1966+0C33 28 13        		JR	Z,m0c48		; move on if loading new array
 1967+0C35 2B           		DEC	HL
 1968+0C36 46           		LD	B,(HL)
 1969+0C37 2B           		DEC	HL
 1970+0C38 4E           		LD	C,(HL)		; get existing array length from vars area
 1971+0C39 2B           		DEC	HL
 1972+0C3A 03           		INC	BC
 1973+0C3B 03           		INC	BC
 1974+0C3C 03           		INC	BC		; add 3 for name & length
 1975+0C3D DD 22 5F 5C  		LD	(	$5C5F),IX	; save IX
 1976+0C41 EF           		RST	28H
 1977+0C42 E8 19        		DW	o19E8		; reclaim space
 1978+0C44 DD 2A 5F 5C  		LD	IX,(	$5C5F)	; restore IX
 1979+0C48 2A 59 5C     m0c48:		LD	HL,(	$5C59)
 1980+0C4B 2B           		DEC	HL		; HL points to $80 at end of vars
 1981+0C4C DD 4E 0B     		LD	C,(IX+$0B)
 1982+0C4F DD 46 0C     		LD	B,(IX+$0C)	; get length of new array
 1983+0C52 C5           		PUSH	BC		; save
 1984+0C53 03           		INC	BC
 1985+0C54 03           		INC	BC
 1986+0C55 03           		INC	BC		; add 3 for name & length
 1987+0C56 DD 7E FD     		LD	A,(IX-$03)
 1988+0C59 F5           		PUSH	AF		; save array name (from old header)
 1989+0C5A EF           		RST	28H
 1990+0C5B 55 16        		DW	o1655		; make the room
 1991+0C5D 23           		DB	$23
 1992+0C5E F1           		POP	AF
 1993+0C5F 77           		LD	(HL),A		; store name
 1994+0C60 D1           		POP	DE
 1995+0C61 23           		INC	HL
 1996+0C62 73           		LD	(HL),E
 1997+0C63 23           		INC	HL
 1998+0C64 72           		LD	(HL),D		; and length
 1999+0C65 23           		INC	HL
 2000+0C66 E5           		PUSH	HL
 2001+0C67 DD E1        		POP	IX		; IX points to array start
 2002+0C69 37           		SCF			; set carry for LOAD
 2003+0C6A 3E FF        		LD	A,$FF		; data block
 2004+0C6C C3 F8 0B     		JP	m0bf8		; go to load it
 2005+0C6F EB           m0c6f:		EX	DE,HL		; save DE=destination
 2006+0C70 2A 59 5C     		LD	HL,(	$5C59)
 2007+0C73 2B           		DEC	HL		; end of vars
 2008+0C74 DD 22 5F 5C  		LD	(	$5C5F),IX	; save IX
 2009+0C78 DD 4E 0B     		LD	C,(IX+$0B)
 2010+0C7B DD 46 0C     		LD	B,(IX+$0C)	; get length of new data block
 2011+0C7E C5           		PUSH	BC
 2012+0C7F EF           		RST	28H
 2013+0C80 E5 19        		DW	o19E5		; reclaim entire prog+vars
 2014+0C82 C1           		POP	BC
 2015+0C83 E5           		PUSH	HL
 2016+0C84 C5           		PUSH	BC
 2017+0C85 EF           		RST	28H
 2018+0C86 55 16        		DW	o1655		; make room for new block
 2019+0C88 DD 2A 5F 5C  		LD	IX,(	$5C5F)	; restore IX
 2020+0C8C 23           		INC	HL
 2021+0C8D DD 4E 0F     		LD	C,(IX+$0F)
 2022+0C90 DD 46 10     		LD	B,(IX+$10)	; BC=length of program only
 2023+0C93 09           		ADD	HL,BC
 2024+0C94 22 4B 5C     		LD	(	$5C4B),HL	; set new start of vars
 2025+0C97 DD 66 0E     		LD	H,(IX+$0E)
 2026+0C9A 7C           		LD	A,H
 2027+0C9B E6 C0        		AND	$C0
 2028+0C9D 20 0A        		JR	NZ,m0ca9	; move on if no auto-run number
 2029+0C9F DD 6E 0D     		LD	L,(IX+$0D)
 2030+0CA2 22 42 5C     		LD	(	$5C42),HL	; set new line & statement
 2031+0CA5 FD 36 0A 00  		LD	(IY+$0A),$00
 2032+0CA9 D1           m0ca9:		POP	DE		; restore length & start
 2033+0CAA DD E1        		POP	IX
 2034+0CAC 37           		SCF			; set carry for LOAD
 2035+0CAD 3E FF        		LD	A,$FF		; data block
 2036+0CAF C3 F8 0B     		JP	m0bf8		; go to load it
 2037+0CB2
 2038+0CB2              ; section 15 - Perform tape/disk MERGE
 2039+0CB2
 2040+0CB2 DD 4E 0B     m0cb2:		LD	C,(IX+$0B)
 2041+0CB5 DD 46 0C     		LD	B,(IX+$0C)	; fetch length of new block
 2042+0CB8 C5           		PUSH	BC
 2043+0CB9 03           		INC	BC
 2044+0CBA EF           		RST	28H
 2045+0CBB 30 00        		DW	$0030		; make length+1 bytes in workspace
 2046+0CBD 36 80        m0cbd:		LD	(HL),$80	; terminate with an end-marker
 2047+0CBF EB           		EX	DE,HL		; HL=start
 2048+0CC0 D1           		POP	DE		; DE=length
 2049+0CC1 E5           		PUSH	HL		; save start
 2050+0CC2 E5           		PUSH	HL
 2051+0CC3 DD E1        		POP	IX		; IX=start
 2052+0CC5 37           		SCF			; set carry for LOAD
 2053+0CC6 3E FF        		LD	A,$FF		; data block
 2054+0CC8 CD F8 0B     		CALL	m0bf8		; load the block
 2055+0CCB E1           		POP	HL		; HL=start of new prog
 2056+0CCC ED 5B 53 5C  		LD	DE,(	$5C53)	; DE=start of old prog
 2057+0CD0 7E           m0cd0:		LD	A,(HL)
 2058+0CD1 E6 C0        		AND	$C0
 2059+0CD3 20 19        		JR	NZ,m0cee	; move on if all lines done
 2060+0CD5 1A           m0cd5:		LD	A,(DE)
 2061+0CD6 13           		INC	DE
 2062+0CD7 BE           		CP	(HL)		; compare high bytes of line number
 2063+0CD8 23           		INC	HL
 2064+0CD9 20 02        		JR	NZ,m0cdd	; skip next test if no match
 2065+0CDB 1A           		LD	A,(DE)
 2066+0CDC BE           		CP	(HL)		; compare low bytes of line number
 2067+0CDD 1B           m0cdd:		DEC	DE
 2068+0CDE 2B           		DEC	HL
 2069+0CDF 30 08        		JR	NC,m0ce9	; move on if can place line here
 2070+0CE1 E5           		PUSH	HL
 2071+0CE2 EB           		EX	DE,HL
 2072+0CE3 EF           		RST	28H
 2073+0CE4 B8 19        		DW	o19B8		; get address of next line in old prog
 2074+0CE6 E1           		POP	HL
 2075+0CE7 18 EC        		JR	m0cd5		; loop back
 2076+0CE9 CD 2A 0D     m0ce9:		CALL	m0d2a		; enter the new line
 2077+0CEC 18 E2        		JR	m0cd0		; loop back
 2078+0CEE 7E           m0cee:		LD	A,(HL)		; get var name from workspace
 2079+0CEF 4F           		LD	C,A
 2080+0CF0 FE 80        		CP	$80
 2081+0CF2 C8           		RET	Z		; exit if all done
 2082+0CF3 E5           		PUSH	HL
 2083+0CF4 2A 4B 5C     		LD	HL,(	$5C4B)	; fetch start of vars
 2084+0CF7 7E           m0cf7:		LD	A,(HL)
 2085+0CF8 FE 80        		CP	$80
 2086+0CFA 28 25        		JR	Z,m0d21		; move on if reached end
 2087+0CFC B9           		CP	C
 2088+0CFD 28 08        		JR	Z,m0d07		; move on if found match
 2089+0CFF C5           m0cff:		PUSH	BC
 2090+0D00 EF           		RST	28H
 2091+0D01 B8 19        		DW	o19B8		; get to next var
 2092+0D03 C1           		POP	BC
 2093+0D04 EB           		EX	DE,HL
 2094+0D05 18 F0        		JR	m0cf7		; loop back
 2095+0D07 E6 E0        m0d07:		AND	$E0
 2096+0D09 FE A0        		CP	$A0
 2097+0D0B 20 12        		JR	NZ,m0d1f	; move on if not long-named var
 2098+0D0D D1           		POP	DE
 2099+0D0E D5           		PUSH	DE
 2100+0D0F E5           		PUSH	HL
 2101+0D10 23           m0d10:		INC	HL
 2102+0D11 13           		INC	DE
 2103+0D12 1A           		LD	A,(DE)
 2104+0D13 BE           		CP	(HL)		; compare long names
 2105+0D14 20 06        		JR	NZ,m0d1c	; move on if mismatch
 2106+0D16 17           		RLA
 2107+0D17 30 F7        		JR	NC,m0d10	; loop back
 2108+0D19 E1           		POP	HL
 2109+0D1A 18 03        		JR	m0d1f
 2110+0D1C E1           m0d1c:		POP	HL
 2111+0D1D 18 E0        		JR	m0cff		; go back if unsuccessful
 2112+0D1F 3E FF        m0d1f:		LD	A,$FF		; signal "replace variable"
 2113+0D21 D1           m0d21:		POP	DE
 2114+0D22 EB           		EX	DE,HL
 2115+0D23 3C           		INC	A
 2116+0D24 37           		SCF			; signal "variables"
 2117+0D25 CD 2A 0D     		CALL	m0d2a		; merge in the variable
 2118+0D28 18 C4        		JR	m0cee		; loop back
 2119+0D2A
 2120+0D2A              ; Subroutine to merge a line or variable (part of section 15)
 2121+0D2A
 2122+0D2A 20 10        m0d2a:		JR	NZ,m0d3c	; move on if not replacing a line/variable
 2123+0D2C 08           		EX	AF,AF'		; save flags
 2124+0D2D 22 5F 5C     		LD	(	$5C5F),HL	; save pointer in new program/vars
 2125+0D30 EB           		EX	DE,HL
 2126+0D31 EF           		RST	28H
 2127+0D32 B8 19        		DW	o19B8
 2128+0D34 EF           		RST	28H
 2129+0D35 E8 19        		DW	o19E8		; reclaim old line/var
 2130+0D37 EB           		EX	DE,HL
 2131+0D38 2A 5F 5C     		LD	HL,(	$5C5F)	; restore
 2132+0D3B 08           		EX	AF,AF'
 2133+0D3C 08           m0d3c:		EX	AF,AF'		; save flags
 2134+0D3D D5           		PUSH	DE
 2135+0D3E EF           		RST	28H
 2136+0D3F B8 19        		DW	o19B8		; find length of new line/var
 2137+0D41 22 5F 5C     		LD	(	$5C5F),HL	; save pointer in new program/vars
 2138+0D44 2A 53 5C     		LD	HL,(	$5C53)
 2139+0D47 E3           		EX	(SP),HL		; save PROG to avoid corruption
 2140+0D48 C5           		PUSH	BC
 2141+0D49 08           		EX	AF,AF'
 2142+0D4A 38 07        		JR	C,m0d53		; move on if adding a variable
 2143+0D4C 2B           		DEC	HL
 2144+0D4D EF           		RST	28H
 2145+0D4E 55 16        		DW	o1655		; make room for new line
 2146+0D50 23           		INC	HL
 2147+0D51 18 03        		JR	m0d56
 2148+0D53 EF           m0d53:		RST	28H
 2149+0D54 55 16        		DW	o1655		; make room for new var
 2150+0D56 23           m0d56:		INC	HL		; point to first new location
 2151+0D57 C1           		POP	BC
 2152+0D58 D1           		POP	DE
 2153+0D59 ED 53 53 5C  		LD	(	$5C53),DE	; restore PROG
 2154+0D5D ED 5B 5F 5C  		LD	DE,(	$5C5F)	; retrieve new pointer
 2155+0D61 C5           		PUSH	BC
 2156+0D62 D5           		PUSH	DE
 2157+0D63 EB           		EX	DE,HL
 2158+0D64 ED B0        		LDIR			; copy new var/line into space made
 2159+0D66 E1           		POP	HL
 2160+0D67 C1           		POP	BC
 2161+0D68 D5           		PUSH	DE
 2162+0D69 EF           		RST	28H
 2163+0D6A E8 19        		DW	o19E8		; reclaim workspace holding new var/line
 2164+0D6C D1           		POP	DE
 2165+0D6D C9           		RET
 2166+0D6E
 2167+0D6E              ; section 16 - Perform disk SAVE
 2168+0D6E
 2169+0D6E 3A 5E 5B     m0d6e:		LD	A,(	$5B5E)
 2170+0D71 FE 54        		CP	"T"
 2171+0D73 CA 10 0E     		JP	Z,m0e10		; move on for tape operations
 2172+0D76 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 2173+0D79 E5           		PUSH	HL
 2174+0D7A 06 00        		LD	B,$00		; file 0
 2175+0D7C 0E 03        		LD	C,$03		; exclusive read-write
 2176+0D7E 16 01        		LD	D,$01
 2177+0D80 1E 03        		LD	E,$03
 2178+0D82 21 01 ED     		LD	HL,$ED01
 2179+0D85 DD E5        		PUSH	IX
 2180+0D87 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 2181+0D8A CD 00 3F     		CALL	m3f00
 2182+0D8D 06 01        		DW	$0106	; create the file
 2183+0D8F CD EE 32     		CALL	m32ee		; restore TSTACK
 2184+0D92 38 07        		JR	C,m0d9b		; move on unless error
 2185+0D94 CD 64 2B     		CALL	m2b64		; page in normal memory
 2186+0D97 CD 9A 0E     		CALL	m0e9a		; cause DOS error
 2187+0D9A FF           		DB	$FF
 2188+0D9B 06 00        m0d9b:		LD	B,$00
 2189+0D9D CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 2190+0DA0 CD 00 3F     		CALL	m3f00
 2191+0DA3 0F 01        		DW	$010F	; get IX=header data
 2192+0DA5 CD EE 32     		CALL	m32ee		; restore TSTACK
 2193+0DA8 38 07        		JR	C,m0db1
 2194+0DAA CD 64 2B     		CALL	m2b64		; page in normal memory
 2195+0DAD CD 9A 0E     		CALL	m0e9a		; cause DOS error
 2196+0DB0 FF           		DB	$FF
 2197+0DB1 DD E3        m0db1:		EX	(SP),IX		; IX=pointer to header in normal memory
 2198+0DB3 E1           		POP	HL		; HL=pointer to header in page 7
 2199+0DB4 CD 64 2B     		CALL	m2b64		; page in normal memory
 2200+0DB7 DD 7E 00     		LD	A,(IX+$00)
 2201+0DBA CD 89 2B     		CALL	m2b89		; page in DOS workspace
 2202+0DBD 77           		LD	(HL),A		; transfer type
 2203+0DBE 23           		INC	HL
 2204+0DBF DD E5        		PUSH	IX
 2205+0DC1 D1           		POP	DE
 2206+0DC2 EB           		EX	DE,HL		; DE=DOS header address+1
 2207+0DC3 01 0B 00     		LD	BC,$000B
 2208+0DC6 09           		ADD	HL,BC		; HL=page 0 header parameters
 2209+0DC7 01 06 00     		LD	BC,$0006
 2210+0DCA CD 64 2B     		CALL	m2b64		; page in normal memory
 2211+0DCD CD 63 3F     		CALL	m3f63		; copy parameters to DOS header
 2212+0DD0 06 00        		LD	B,$00		; file 0
 2213+0DD2 0E 00        		LD	C,$00
 2214+0DD4 DD 5E 0B     		LD	E,(IX+$0B)
 2215+0DD7 DD 56 0C     		LD	D,(IX+$0C)	; DE=length
 2216+0DDA 7A           		LD	A,D
 2217+0DDB B3           		OR	E
 2218+0DDC CD 89 2B     		CALL	m2b89		; page in DOS workspace
 2219+0DDF 28 15        		JR	Z,m0df6		; move on if zero length
 2220+0DE1 E1           		POP	HL		; restore start address
 2221+0DE2 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 2222+0DE5 CD 00 3F     		CALL	m3f00
 2223+0DE8 15 01        		DW	$0115	; write block to file
 2224+0DEA CD EE 32     		CALL	m32ee		; restore TSTACK
 2225+0DED 38 07        		JR	C,m0df6
 2226+0DEF CD 64 2B     		CALL	m2b64		; page in normal memory
 2227+0DF2 CD 9A 0E     		CALL	m0e9a		; cause any DOS error
 2228+0DF5 FF           		DB	$FF
 2229+0DF6 06 00        m0df6:		LD	B,$00
 2230+0DF8 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 2231+0DFB CD 00 3F     		CALL	m3f00
 2232+0DFE 09 01        		DW	$0109	; close file
 2233+0E00 CD EE 32     		CALL	m32ee		; restore TSTACK
 2234+0E03 38 07        		JR	C,m0e0c
 2235+0E05 CD 64 2B     		CALL	m2b64
 2236+0E08 CD 9A 0E     		CALL	m0e9a		; cause any DOS error
 2237+0E0B FF           		DB	$FF
 2238+0E0C CD 64 2B     m0e0c:		CALL	m2b64		; page in normal memory
 2239+0E0F C9           		RET			; done
 2240+0E10
 2241+0E10              ; section 17 - Perform tape SAVE
 2242+0E10
 2243+0E10 E5           m0e10:		PUSH	HL
 2244+0E11 3E FD        		LD	A,$FD
 2245+0E13 EF           		RST	28H
 2246+0E14 01 16        		DW	o1601		; open channel to stream -3
 2247+0E16 AF           		XOR	A
 2248+0E17 11 A1 09     		LD	DE,o09A1
 2249+0E1A EF           		RST	28H
 2250+0E1B 0A 0C        		DW	o0C0A		; output ROM 3's start tape message
 2251+0E1D FD CB 02 EE  		SET	5,(IY+$02)	; signal "screen needs clearing"
 2252+0E21 EF           		RST	28H
 2253+0E22 D4 15        		DW	o15D4		; wait for a key
 2254+0E24 DD E5        		PUSH	IX		; save header address
 2255+0E26 11 11 00     		LD	DE,$0011
 2256+0E29 AF           		XOR	A		; header block
 2257+0E2A CD 2D 08     		CALL	m0828		; save header
 2258+0E2D DD E1        		POP	IX
 2259+0E2F 06 32        		LD	B,$32
 2260+0E31 76           m0e31:		HALT
 2261+0E32 10 FD        		DJNZ	m0e31
 2262+0E34 DD 5E 0B     		LD	E,(IX+$0B)
 2263+0E37 DD 56 0C     		LD	D,(IX+$0C)	; DE=length
 2264+0E3A 3E FF        		LD	A,$FF		; data block
 2265+0E3C DD E1        		POP	IX		; IX=start
 2266+0E3E C3 2D 08     		JP	m0828		; save & exit
 2267+0E41
 2268+0E41              ; Looks like these bits aren't used
 2269+0E41 16 00 00 10  msg18:		DB	$16,0,0,$10,0,$11,$07,$13,0
 2269+0E45 00 11 07 13
 2269+0E49 00
 2270+0E4A 49 6E 73 65  		DM	"Insert tape and press PLAY", 13
 2270+0E4E 72 74 20 74
 2270+0E52 61 70 65 20
 2270+0E56 61 6E 64 20
 2270+0E5A 70 72 65 73
 2270+0E5E 73 20 50 4C
 2270+0E62 41 59 0D
 2271+0E65 54 6F 20 63  		DM	"To cancel - press BREAK twice", $FF
 2271+0E69 61 6E 63 65
 2271+0E6D 6C 20 2D 20
 2271+0E71 70 72 65 73
 2271+0E75 73 20 42 52
 2271+0E79 45 41 4B 20
 2271+0E7D 74 77 69 63
 2271+0E81 65 FF
 2272+0E83 00 00 00 00  		DB	0,0,0,0,0,0,0,0
 2272+0E87 00 00 00 00
 2273+0E8B 00 00 00 00  		DB	0,0,0,0,0,0,0,0,0
 2273+0E8F 00 00 00 00
 2273+0E93 00
 2274+0E94
 2275+0E94              ; Subroutine to check if char in A is a statement terminator
 2276+0E94
 2277+0E94 FE 0D        m0e94:		CP	$0D
 2278+0E96 C8           		RET	Z
 2279+0E97 FE 3A        		CP	":"
 2280+0E99 C9           		RET
 2281+0E9A
 2282+0E9A              ; Subroutine to cause a +3DOS error
 2283+0E9A              ; Routine will attempt to close file 0 before causing error
 2284+0E9A              ; On entry, A=+3DOS error code and byte following call is $FF
 2285+0E9A              ; or, byte following call is +3 BASIC error
 2286+0E9A
 2287+0E9A F5           m0e9a:		PUSH	AF		; save error code
 2288+0E9B 3A 5E 5B     m0e9b:		LD	A,(	$5B5E)
 2289+0E9E FE 54        		CP	$54
 2290+0EA0 28 28        		JR	Z,m0eca		; move on if SAVE/LOAD was using drive T:
 2291+0EA2 06 00        		LD	B,$00
 2292+0EA4 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 2293+0EA7 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 2294+0EAA CD 00 3F     		CALL	m3f00
 2295+0EAD 09 01        		DW	$0109	; close file 0
 2296+0EAF CD EE 32     		CALL	m32ee		; restore TSTACK
 2297+0EB2 CD 64 2B     		CALL	m2b64		; page in normal memory
 2298+0EB5 38 13        		JR	C,m0eca		; move on if no error
 2299+0EB7 06 00        		LD	B,$00
 2300+0EB9 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 2301+0EBC CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 2302+0EBF CD 00 3F     		CALL	m3f00
 2303+0EC2 0C 01        		DW	$010C	; else abandon file 0
 2304+0EC4 CD EE 32     		CALL	m32ee		; restore TSTACK
 2305+0EC7 CD 64 2B     		CALL	m2b64		; page in normal memory
 2306+0ECA F1           m0eca:		POP	AF		; restore error code
 2307+0ECB E1           m0ecb:		POP	HL		; get return address
 2308+0ECC 5E           		LD	E,(HL)		; get inline code
 2309+0ECD CB 7B        		BIT	7,E
 2310+0ECF 28 0B        		JR	Z,m0edc		; use it as error code if not $FF
 2311+0ED1 FE 0A        		CP	$0A		; convert DOS error code to +3 BASIC error
 2312+0ED3 30 04        		JR	NC,m0ed9
 2313+0ED5 C6 3D        m0ed5:		ADD	A,$3D
 2314+0ED7 18 02        		JR	m0edb
 2315+0ED9 C6 18        m0ed9:		ADD	A,$18
 2316+0EDB 5F           m0edb:		LD	E,A
 2317+0EDC 63           m0edc:		LD	H,E		; place code CALL m2ada, DEFB error
 2318+0EDD 2E 2A        		LD	L,m2ada/$100	; on stack
 2319+0EDF E5           		PUSH	HL
 2320+0EE0 2E CD        		LD	L,$CD
 2321+0EE2 26 DA        		LD	H,m2ada and $FF
 2322+0EE4 E5           		PUSH	HL
 2323+0EE5 AF           		XOR	A
 2324+0EE6 21 00 00     		LD	HL,$0000
 2325+0EE9 39           		ADD	HL,SP
 2326+0EEA E9           		JP	(HL)		; jump to execute code on stack & cause error
 2327+0EEB
 2328+0EEB              ; The parameter offset table
 2329+0EEB              ; This contains offsets from each entry's position into the following
 2330+0EEB              ; parameter table
 2331+0EEB
 2332+0EEB B1           m0eeb:		DB	m0f9c-$		; DEF FN
 2333+0EEC CA           		DB	m0fb6-$		; CAT
 2334+0EED BC           		DB	m0fa9-$		; FORMAT
 2335+0EEE BE           		DB	m0fac-$		; MOVE
 2336+0EEF C3           		DB	m0fb2-$		; ERASE
 2337+0EF0 AF           		DB	m0f9f-$		; OPEN#
 2338+0EF1 B4           		DB	m0fa5-$		; CLOSE#
 2339+0EF2 93           		DB	m0f85-$		; MERGE
 2340+0EF3 91           		DB	m0f84-$		; VERIFY
 2341+0EF4 92           		DB	m0f86-$		; BEEP
 2342+0EF5 95           		DB	m0f8a-$		; CIRCLE
 2343+0EF6 98           		DB	m0f8e-$		; INK
 2344+0EF7 98           		DB	m0f8f-$		; PAPER
 2345+0EF8 98           		DB	m0f90-$		; FLASH
 2346+0EF9 98           		DB	m0f91-$		; BRIGHT
 2347+0EFA 98           		DB	m0f92-$		; INVERSE
 2348+0EFB 98           		DB	m0f93-$		; OVER
 2349+0EFC 98           		DB	m0f94-$		; OUT
 2350+0EFD 7F           		DB	m0f7c-$		; LPRINT
 2351+0EFE 81           		DB	m0f7f-$		; LLIST
 2352+0EFF 2E           		DB	m0f2d-$		; STOP
 2353+0F00 6C           		DB	m0f6c-$		; READ
 2354+0F01 6E           		DB	m0f6f-$		; DATA
 2355+0F02 70           		DB	m0f72-$		; RESTORE
 2356+0F03 48           		DB	m0f4b-$		; NEW
 2357+0F04 94           		DB	m0f98-$		; BORDER
 2358+0F05 56           		DB	m0f5b-$		; CONTINUE
 2359+0F06 3F           		DB	m0f45-$		; DIM
 2360+0F07 41           		DB	m0f48-$		; REM
 2361+0F08 2B           		DB	m0f33-$		; FOR
 2362+0F09 17           		DB	m0f20-$		; GOTO
 2363+0F0A 1F           		DB	m0f29-$		; GOSUB
 2364+0F0B 37           		DB	m0f42-$		; INPUT
 2365+0F0C 77           		DB	m0f83-$		; LOAD
 2366+0F0D 44           		DB	m0f51-$		; LIST
 2367+0F0E 0F           		DB	m0f1d-$		; LET
 2368+0F0F 59           		DB	m0f68-$		; PAUSE
 2369+0F10 2B           		DB	m0f3b-$		; NEXT
 2370+0F11 43           		DB	m0f54-$		; POKE
 2371+0F12 2D           		DB	m0f3f-$		; PRINT
 2372+0F13 51           		DB	m0f64-$		; PLOT
 2373+0F14 3A           		DB	m0f4e-$		; RUN
 2374+0F15 6D           		DB	m0f82-$		; SAVE
 2375+0F16 42           		DB	m0f58-$		; RANDOMIZE
 2376+0F17 0D           		DB	m0f24-$		; IF
 2377+0F18 49           		DB	m0f61-$		; CLS
 2378+0F19 5C           		DB	m0f75-$		; DRAW
 2379+0F1A 44           		DB	m0f5e-$		; CLEAR
 2380+0F1B 15           		DB	m0f30-$		; RETURN
 2381+0F1C 5D           		DB	m0f79-$		; COPY
 2382+0F1D
 2383+0F1D              ; The parameter table for the BASIC commands
 2384+0F1D              ; These comprise command classes ($00-$0E), separators and
 2385+0F1D              ; where appropriate, command addresses
 2386+0F1D              ; The classes are:
 2387+0F1D              ;       00      No further operands
 2388+0F1D              ;       01      Used in LET: a variable is required
 2389+0F1D              ;       02      Used in LET: an expression (numeric or string) must follow
 2390+0F1D              ;       03      A numeric expression may follow (default=0)
 2391+0F1D              ;       04      A single character variable must follow
 2392+0F1D              ;       05      A set of items may be given
 2393+0F1D              ;       06      A numeric expression must follow
 2394+0F1D              ;       07      Handles colour items
 2395+0F1D              ;       08      Two numeric expressions separated by a comma must follow
 2396+0F1D              ;       09      As 08, but colour items may precede the expressions
 2397+0F1D              ;       0a      A string expression must follow
 2398+0F1D              ;       0b      Handles cassette/disk routines
 2399+0F1D              ;       0c      As 00, but handled in ROM 1 not ROM 3
 2400+0F1D              ;       0d      As 03, but handled in ROM 1 not ROM 3
 2401+0F1D              ;       0e      As 05, but handled in ROM 1 not ROM 3
 2402+0F1D
 2403+0F1D 01 3D 02     m0f1d:		DB	$01,"=",$02	; LET
 2404+0F20 0E           m0f20:		DB	$0E
 2405+0F21 E1 35        		DW	$35E1		; GOTO
 2406+0F23 00           		DB	$00
 2407+0F24 06 CB 0E     m0f24:		DB	$06,$CB,$0E
 2408+0F27 5E 11        		DW	m115e		; IF
 2409+0F29 06 0C        m0f29:		DB	$06,$0C
 2410+0F2B 4A 12        		DW	m124a		; GOSUB
 2411+0F2D 00           m0f2d:		DB	$00
 2412+0F2E EE 1C        		DW	o1CEE		; STOP
 2413+0F30 0E           m0f30:		DB	$0E
 2414+0F31 09 2B        		DW	m2b09
 2415+0F33 04 3D 06     m0f33:		DB	$04,"=",$06
 2416+0F36 CC 06 0E     		DB	$CC,$06,$0E
 2417+0F39 78 11        		DW	m1178		; FOR
 2418+0F3B 0E           m0f3b:		DB	$0E
 2419+0F3C 06 15        		DW	$1506		; NEXT
 2420+0F3E 00           		DB	$00
 2421+0F3F 0E           m0f3f:		DB	$0E
 2422+0F40 7B 21        		DW	m217b		; PRINT
 2423+0F42 0E           m0f42:		DB	$0E
 2424+0F43 8F 21        		DW	m218f		; INPUT
 2425+0F45 0E           m0f45:		DB	$0E
 2426+0F46 E2 14        		DW	m14e2		; DIM
 2427+0F48 0E           m0f48:		DB	$0E
 2428+0F49 72 10        		DW	m1072		; REM
 2429+0F4B 0E           m0f4b:		DB	$0E
 2430+0F4C 77 38        		DW	$3877		; NEW
 2431+0F4E 0D           m0f4e:		DB	$0D
 2432+0F4F F9 11        		DW	m11f9		; RUN
 2433+0F51 0E           m0f51:		DB	$0E
 2434+0F52 39 15        		DW	m1539		; LIST
 2435+0F54 08 00        m0f54:		DB	$08,$00
 2436+0F56 80 1E        		DW	o1E80		; POKE
 2437+0F58 03           m0f58:		DB	$03
 2438+0F59 4F 1E        		DW	o1E4F		; RANDOMIZE
 2439+0F5B 00           m0f5b:		DB	$00
 2440+0F5C 5F 1E        		DW	o1E5F		; CONTINUE
 2441+0F5E 0D           m0f5e:		DB	$0D
 2442+0F5F 04 12        		DW	m1204		; CLEAR
 2443+0F61 00           m0f61:		DB	$00
 2444+0F62 6B 0D        		DW	o0D6B		; CLS
 2445+0F64 09 00        m0f64:		DB	$09,$00
 2446+0F66 DC 22        		DW	o22DC		; PLOT
 2447+0F68 06 00        m0f68:		DB	$06,$00
 2448+0F6A 3A 1F        		DW	o1F3A		; PAUSE
 2449+0F6C 0E           m0f6c:		DB	$0E
 2450+0F6D A2 11        		DW	m11a2		; READ
 2451+0F6F 0E           m0f6f:		DB	$0E
 2452+0F70 E2 11        		DW	m11e2		; DATA
 2453+0F72 03           m0f72:		DB	$03
 2454+0F73 42 1E        		DW	o1E42		; RESTORE
 2455+0F75 09 0E        m0f75:		DB	$09,$0E
 2456+0F77 96 22        		DW	m2296		; DRAW
 2457+0F79 0E           m0f79:		DB	$0E
 2458+0F7A AA 21        		DW	m21aa		; COPY
 2459+0F7C 0E           m0f7c:		DB	$0E
 2460+0F7D 77 21        		DW	m2177		; LPRINT
 2461+0F7F 0E           m0f7f:		DB	$0E
 2462+0F80 35 15        		DW	m1535		; LLIST
 2463+0F82 0B           m0f82:		DB	$0B		; SAVE
 2464+0F83 0B           m0f83:		DB	$0B		; LOAD
 2465+0F84 0B           m0f84:		DB	$0B		; VERIFY
 2466+0F85 0B           m0f85:		DB	$0B		; MERGE
 2467+0F86 08 00        m0f86:		DB	$08,$00
 2468+0F88 F8 03        		DW	o03F8		; BEEP
 2469+0F8A 09 0E        m0f8a:		DB	$09,$0E
 2470+0F8C 86 22        		DW	m2286		; CIRCLE
 2471+0F8E 07           m0f8e:		DB	$07		; INK
 2472+0F8F 07           m0f8f:		DB	$07		; PAPER
 2473+0F90 07           m0f90:		DB	$07		; FLASH
 2474+0F91 07           m0f91:		DB	$07		; BRIGHT
 2475+0F92 07           m0f92:		DB	$07		; INVERSE
 2476+0F93 07           m0f93:		DB	$07		; OVER
 2477+0F94 08 00        m0f94:		DB	$08,$00
 2478+0F96 7A 1E        		DW	o1E7A		; OUT
 2479+0F98 06 00        m0f98:		DB	$06,$00
 2480+0F9A 94 22        		DW	o2294		; BORDER
 2481+0F9C 0E           m0f9c:		DB	$0E
 2482+0F9D 83 12        		DW	m1283		; DEF FN
 2483+0F9F 06 2C 0A 0C  m0f9f:		DB	$06,",",$0A,$0C
 2484+0FA3 C4 35        		DW	$35C4		; OPEN#
 2485+0FA5 06 0C        m0fa5:		DB	$06,$0C
 2486+0FA7 D7 35        		DW	$35D7		; CLOSE#
 2487+0FA9 0E           m0fa9:		DB	$0E
 2488+0FAA 6C 02        		DW	m026c		; FORMAT
 2489+0FAC 0A 0E        m0fac:		DB	$0A,$0E
 2490+0FAE B3 39        		DW	$39B3		; MOVE
 2491+0FB0 00 00        		DB	0,0
 2492+0FB2 0A 0C        m0fb2:		DB	$0A,$0C
 2493+0FB4 4A 04        		DW	m044a		; ERASE
 2494+0FB6 0E           m0fb6:		DB	$0E
 2495+0FB7 B8 05        		DW	m05b8		; CAT
 2496+0FB9 0E           m0fb9:		DB	$0E
 2497+0FBA A7 3A        		DW	cmdspec		; SPECTRUM
 2498+0FBC 0E           m0fbc:		DB	$0E
 2499+0FBD F1 23        		DW	m23f1		; PLAY
 2500+0FBF
 2501+0FBF              ; The main parser entry point
 2502+0FBF              ; Enter here for syntax checking
 2503+0FBF
 2504+0FBF FD CB 01 BE  m0fbf:		RES	7,(IY+$01)	; signal "syntax checking"
 2505+0FC3 EF           		RST	28H
 2506+0FC4 FB 19        		DW	o19FB		; point to the first code after any line no
 2507+0FC6 AF           		XOR	A
 2508+0FC7 32 47 5C     		LD	(	$5C47),A	; initialise SUBPPC to zero statements
 2509+0FCA 3D           		DEC	A
 2510+0FCB 32 3A 5C     		LD	(	$5C3A),A	; signal "OK" error code
 2511+0FCE 18 01        		JR	m0fd1		; jump to start checking
 2512+0FD0
 2513+0FD0              ; The statement loop
 2514+0FD0
 2515+0FD0 E7           m0fd0:		RST	20H		; advance CH_ADD
 2516+0FD1 EF           m0fd1:		RST	28H
 2517+0FD2 BF 16        		DW	o16BF		; clear workspace
 2518+0FD4 FD 34 0D     		INC	(IY+$0D)	; increment SUBPPC on each statement
 2519+0FD7 FA 25 11     		JP	m,m1125		; error if more than 127 statements on line
 2520+0FDA DF           		RST	18H		; fetch character
 2521+0FDB 06 00        		LD	B,$00
 2522+0FDD FE 0D        		CP	$0D
 2523+0FDF CA 73 10     		JP	Z,m1073		; move on if end-of-line
 2524+0FE2 FE 3A        		CP	":"
 2525+0FE4 28 EA        		JR	Z,m0fd0		; loop back if end-of-statement
 2526+0FE6 21 31 10     		LD	HL,m1031
 2527+0FE9 E5           		PUSH	HL		; load stack with return address to STMT-RET
 2528+0FEA 4F           		LD	C,A		; save command code
 2529+0FEB E7           		RST	20H		; advance CH_ADD
 2530+0FEC 79           		LD	A,C
 2531+0FED D6 CE        		SUB	$CE		; put command code in range $00..$31
 2532+0FEF 30 13        		JR	NC,m1004	; move on if valid keyword
 2533+0FF1 C6 CE        		ADD	A,$CE		; else reform character
 2534+0FF3 21 B9 0F     		LD	HL,m0fb9	; address of SPECTRUM parameter entries
 2535+0FF6 FE A3        		CP	$A3
 2536+0FF8 28 16        		JR	Z,m1010		; move on if SPECTRUM command
 2537+0FFA 21 BC 0F     		LD	HL,m0fbc	; address of PLAY parameter entries
 2538+0FFD FE A4        		CP	$A4
 2539+0FFF 28 0F        		JR	Z,m1010		; move on if PLAY command
 2540+1001 C3 25 11     		JP	m1125		; else give Nonsense in BASIC
 2541+1004 4F           m1004:		LD	C,A
 2542+1005 21 EB 0E     		LD	HL,m0eeb	; syntax offset table start
 2543+1008 09           		ADD	HL,BC
 2544+1009 4E           		LD	C,(HL)
 2545+100A 09           		ADD	HL,BC		; get start of entries in parameter table
 2546+100B 18 03        		JR	m1010		; move on
 2547+100D 2A 74 5C     m100d:		LD	HL,(	$5C74)	; get pointer into parameter table
 2548+1010 7E           m1010:		LD	A,(HL)		; get next parameter type
 2549+1011 23           		INC	HL
 2550+1012 22 74 5C     		LD	(	$5C74),HL	; save pointer
 2551+1015 01 0D 10     		LD	BC,m100d
 2552+1018 C5           		PUSH	BC		; stack return address back into this loop
 2553+1019 4F           		LD	C,A
 2554+101A FE 20        		CP	$20
 2555+101C 30 0C        		JR	NC,m102a	; move on if entry is a separator
 2556+101E 21 C5 10     		LD	HL,m10c5	; base of command class table
 2557+1021 06 00        		LD	B,$00
 2558+1023 09           		ADD	HL,BC
 2559+1024 4E           		LD	C,(HL)		; get offset
 2560+1025 09           		ADD	HL,BC
 2561+1026 E5           		PUSH	HL		; stack computed command class routine address
 2562+1027 DF           		RST	18H		; get next char to A
 2563+1028 05           		DEC	B		; B=$FF
 2564+1029 C9           		RET			; call command class routine
 2565+102A DF           m102a:		RST	18H		; get next char
 2566+102B B9           		CP	C
 2567+102C C2 25 11     		JP	NZ,m1125	; nonsense in BASIC if not required separator
 2568+102F E7           		RST	20H		; get next character
 2569+1030 C9           		RET			; back into loop at m100d
 2570+1031
 2571+1031              ; The "STMT-RET" routine. A return is made here after correct interpretation
 2572+1031              ; of a statement
 2573+1031
 2574+1031 CD F9 2A     m1031:		CALL	m2af9		; test BREAK key
 2575+1034 38 04        		JR	C,m103a		; move on if not pressed
 2576+1036 CD DA 2A     		CALL	m2ada
 2577+1039 14           		DB	$14		; error L - BREAK into program
 2578+103A FD CB 0A 7E  m103a:		BIT	7,(IY+$0A)
 2579+103E C2 B8 10     		JP	NZ,m10b8	; move on if a jump is not being made
 2580+1041 2A 42 5C     		LD	HL,(	$5C42)	; get new line number
 2581+1044 CB 7C        		BIT	7,H		; check if running line in edit area
 2582+1046 28 14        		JR	Z,m105c		; move on if not
 2583+1048
 2584+1048              ; Enter here if running a line in the edit area
 2585+1048
 2586+1048 21 FE FF     m1048:		LD	HL,$FFFE
 2587+104B 22 45 5C     		LD	(	$5C45),HL	; this is line "-2"
 2588+104E 2A 61 5C     		LD	HL,(	$5C61)
 2589+1051 2B           		DEC	HL		; HL points to end of edit area
 2590+1052 ED 5B 59 5C  		LD	DE,(	$5C59)
 2591+1056 1B           		DEC	DE		; DE points to location before edit area
 2592+1057 3A 44 5C     		LD	A,(	$5C44 )	; fetch number of next statement to handle
 2593+105A 18 36        		JR	m1092		; move on
 2594+105C
 2595+105C              ; Perform a jump in the program
 2596+105C
 2597+105C EF           m105c:		RST	28H
 2598+105D 6E 19        		DW	o196E		; get start address of line to jump to
 2599+105F 3A 44 5C     		LD	A,(	$5C44 )	; get statement number
 2600+1062 28 1C        		JR	Z,m1080		; move on if correct line was found
 2601+1064 A7           		AND	A		; else check statement number
 2602+1065 20 46        		JR	NZ,m10ad	; if not zero, N - statement lost error
 2603+1067 47           		LD	B,A
 2604+1068 7E           		LD	A,(HL)
 2605+1069 E6 C0        		AND	$C0		; check for end of program
 2606+106B 78           		LD	A,B
 2607+106C 28 12        		JR	Z,m1080		; move on if not
 2608+106E CD DA 2A     		CALL	m2ada
 2609+1071 FF           		DB	$FF		; else end with 0 - OK error
 2610+1072
 2611+1072 C1           m1072:		POP	BC		; REM command - drop STMT-RET address to
 2612+1073              					; ignore rest of command
 2613+1073
 2614+1073              ; The Line-end routine
 2615+1073
 2616+1073 FD CB 01 7E  m1073:		BIT	7,(IY+$01)
 2617+1077 C8           		RET	Z		; exit if syntax-checking
 2618+1078 2A 55 5C     		LD	HL,(	$5C55)	; get address of NXTLIN
 2619+107B 3E C0        		LD	A,$C0
 2620+107D A6           		AND	(HL)
 2621+107E C0           		RET	NZ		; exit if end of program
 2622+107F AF           		XOR	A		; use statement zero
 2623+1080
 2624+1080              ; The line-use routine
 2625+1080
 2626+1080 FE 01        m1080:		CP	$01
 2627+1082 CE 00        		ADC	A,$00		; change statement zero to 1
 2628+1084 56           		LD	D,(HL)
 2629+1085 23           		INC	HL
 2630+1086 5E           		LD	E,(HL)
 2631+1087 ED 53 45 5C  		LD	(	$5C45),DE	; store line number in PPC
 2632+108B 23           		INC	HL
 2633+108C 5E           		LD	E,(HL)
 2634+108D 23           		INC	HL
 2635+108E 56           		LD	D,(HL)
 2636+108F EB           		EX	DE,HL		; DE holds start of line
 2637+1090 19           		ADD	HL,DE
 2638+1091 23           		INC	HL		; HL holds start of next line
 2639+1092 22 55 5C     m1092:		LD	(	$5C55),HL	; store next line address
 2640+1095 EB           		EX	DE,HL
 2641+1096 22 5D 5C     		LD	(	$5C5D),HL	; update CH_ADD to current line start
 2642+1099 57           		LD	D,A
 2643+109A 1E 00        		LD	E,$00
 2644+109C FD 36 0A FF  		LD	(IY+$0A),$FF	; signal "no jump"
 2645+10A0 15           		DEC	D
 2646+10A1 FD 72 0D     		LD	(IY+$0D),D	; statement number-1 to SUBPPC
 2647+10A4 CA D0 0F     		JP	Z,m0fd0		; enter loop if want first statement
 2648+10A7 14           		INC	D
 2649+10A8 EF           		RST	28H
 2650+10A9 8B 19        		DW	o198B		; else find required statement
 2651+10AB 28 0B        		JR	Z,m10b8		; move on if found
 2652+10AD CD DA 2A     m10ad:		CALL	m2ada
 2653+10B0 16           		DB	$16		; report N - statement lost
 2654+10B1
 2655+10B1
 2656+10B1              ; The "Check-end" subroutine. During syntax-checking, it ensures that
 2657+10B1              ; the end of the statement has been reached, generating an error if not.
 2658+10B1
 2659+10B1 FD CB 01 7E  m10b1:		BIT	7,(IY+$01)	; check bit 7 of FLAGS
 2660+10B5 C0           		RET	NZ		; return if run-time
 2661+10B6 C1           		POP	BC		; drop return address of statement routine
 2662+10B7 C1           		POP	BC		; drop return address of scan-loop routine
 2663+10B8 DF           m10b8:		RST	18H		; get next character
 2664+10B9 FE 0D        		CP	$0D
 2665+10BB 28 B6        		JR	Z,m1073		; move back if end-of-line
 2666+10BD FE 3A        		CP	$3A
 2667+10BF CA D0 0F     		JP	Z,m0fd0		; move back if end-of-statement
 2668+10C2 C3 25 11     		JP	m1125		; else Nonsense in BASIC error
 2669+10C5
 2670+10C5
 2671+10C5              ; The command class offset table
 2672+10C5              ; This contains offsets from the entry in the table to the
 2673+10C5              ; actual command class routines following
 2674+10C5
 2675+10C5 24           m10c5:		DB	m10e9-$
 2676+10C6 46           		DB	m110c-$
 2677+10C7 49           		DB	m1110-$
 2678+10C8 1E           		DB	m10e6-$
 2679+10C9 4F           		DB	m1118-$
 2680+10CA 20           		DB	m10ea-$
 2681+10CB 56           		DB	m1121-$
 2682+10CC 61           		DB	m112d-$
 2683+10CD 50           		DB	m111d-$
 2684+10CE 89           		DB	m1157-$
 2685+10CF 5A           		DB	m1129-$
 2686+10D0 8B           		DB	m115b-$
 2687+10D1 06           		DB	m10d7-$
 2688+10D2 02           		DB	m10d4-$
 2689+10D3 05           		DB	m10d8-$
 2690+10D4
 2691+10D4              ; Class $0C,$0D,$0E routines
 2692+10D4              ; Enter at m10d4 for $0D, m10d7 for $0C and m10d8 for $0E
 2693+10D4
 2694+10D4 EF           m10d4:		RST	28H
 2695+10D5 DE 1C        		DW	o1CDE		; fetch a number (or 0 if none)
 2696+10D7 BF           m10d7:		CP	A		; set zero flag for classes $0C & $0D
 2697+10D8 C1           m10d8:		POP	BC		; drop the scan-loop return address
 2698+10D9 CC B1 10     		CALL	Z,m10b1		; for classes $0C,$0D check for statement end
 2699+10DC EB           		EX	DE,HL		; save line pointer in DE
 2700+10DD 2A 74 5C     		LD	HL,(	$5C74)	; get address in parameter table
 2701+10E0 4E           		LD	C,(HL)
 2702+10E1 23           		INC	HL
 2703+10E2 46           		LD	B,(HL)		; BC=command address
 2704+10E3 EB           		EX	DE,HL		; restore line pointer in HL
 2705+10E4 C5           		PUSH	BC		; stack command address
 2706+10E5 C9           		RET			; and "return" to it
 2707+10E6
 2708+10E6              ; Class $00,$03,$05 routines
 2709+10E6              ; Enter at m10e6 for $03, m10e9 for $00 and m10ea for $05
 2710+10E6
 2711+10E6 EF           m10e6:		RST	28H
 2712+10E7 DE 1C        		DW	o1CDE		; fetch a number (or 0 if none)
 2713+10E9 BF           m10e9:		CP	A		; set zero flag for classes $00 & $03
 2714+10EA C1           m10ea:		POP	BC		; drop the scan-loop return address
 2715+10EB CC B1 10     		CALL	Z,m10b1		; for classes $00,$03 check for statement end
 2716+10EE EB           		EX	DE,HL		; save line pointer in DE
 2717+10EF 2A 74 5C     		LD	HL,(	$5C74)	; get address in parameter table
 2718+10F2 4E           		LD	C,(HL)
 2719+10F3 23           		INC	HL
 2720+10F4 46           		LD	B,(HL)		; BC=command address in ROM 3
 2721+10F5 EB           		EX	DE,HL		; restore line pointer
 2722+10F6 E5           		PUSH	HL		; and stack it
 2723+10F7 21 0B 11     		LD	HL,m110b	; place ROM 1 return address in RETADDR
 2724+10FA 22 5A 5B     		LD	(	$5B5A),HL
 2725+10FD 21 2A 5B     		LD	HL,	$5B2A
 2726+1100 E3           		EX	(SP),HL		; place REGNUOY routine as return address
 2727+1101 E5           		PUSH	HL
 2728+1102 60           		LD	H,B
 2729+1103 69           		LD	L,C
 2730+1104 E3           		EX	(SP),HL		; stack ROM 3 address, restore line pointer
 2731+1105 F5           		PUSH	AF		; stack registers
 2732+1106 C5           		PUSH	BC
 2733+1107 F3           		DI			; disable interrupts
 2734+1108 C3 10 5B     		JP		$5B10		; call ROM 3 routine
 2735+110B C9           m110b:		RET
 2736+110C
 2737+110C              ; Class $01 routine
 2738+110C
 2739+110C EF           m110c:		RST	28H
 2740+110D 1F 1C        		DW	o1C1F		; use ROM 3 to deal with class $01
 2741+110F C9           		RET
 2742+1110
 2743+1110              ; Class $02 routine
 2744+1110
 2745+1110 C1           m1110:		POP	BC		; drop scan-loop return address
 2746+1111 EF           		RST	28H
 2747+1112 56 1C        		DW	o1C56		; fetch a value
 2748+1114 CD B1 10     		CALL	m10b1		; check for end of statement
 2749+1117 C9           		RET
 2750+1118
 2751+1118              ; Class $04 routine
 2752+1118
 2753+1118 EF           m1118:		RST	28H
 2754+1119 6C 1C        		DW	o1C6C		; use ROM 3 to deal with class $04
 2755+111B C9           		RET
 2756+111C
 2757+111C              ; Class $08 routine
 2758+111C
 2759+111C E7           m111c:		RST	20H
 2760+111D EF           m111d:		RST	28H		; use ROM 3 to deal with class $08
 2761+111E 7A 1C        		DW	o1C7A
 2762+1120 C9           		RET
 2763+1121
 2764+1121              ; Class $06 routine
 2765+1121
 2766+1121 EF           m1121:		RST	28H
 2767+1122 82 1C        		DW	o1C82		; use ROM 3 to deal with class $06
 2768+1124 C9           		RET
 2769+1125
 2770+1125              ; Generate C - Nonsense in BASIC error
 2771+1125
 2772+1125 CD DA 2A     m1125:		CALL	m2ada
 2773+1128 0B           		DB	$0B		; error C
 2774+1129
 2775+1129              ; Class $0A routine
 2776+1129
 2777+1129 EF           m1129:		RST	28H
 2778+112A 8C 1C        		DW	o1C8C		; use ROM 3 to deal with class $0A
 2779+112C C9           		RET
 2780+112D
 2781+112D              ; Class $07 routine
 2782+112D
 2783+112D FD CB 01 7E  m112d:		BIT	7,(IY+$01)	; are we running or checking syntax?
 2784+1131 FD CB 02 86  		RES	0,(IY+$02)	; signal "main screen"
 2785+1135 28 03        		JR	Z,m113a
 2786+1137 EF           		RST	28H
 2787+1138 4D 0D        		DW	o0D4D		; if running, make sure temp colours are used
 2788+113A F1           m113a:		POP	AF		; drop scan-loop return address
 2789+113B 3A 74 5C     		LD	A,(	$5C74)
 2790+113E D6 B6        		SUB	(m0f8e and $FF)+$28	; form token code INK to OVER
 2791+1140 EF           		RST	28H
 2792+1141 FC 21        		DW	o21FC		; change temporary colours as directed
 2793+1143 CD B1 10     		CALL	m10b1		; check for statement end
 2794+1146 2A 8F 5C     		LD	HL,(	$5C8F)
 2795+1149 22 8D 5C     		LD	(	$5C8D),HL	; make temporary colours permanent
 2796+114C 21 91 5C     		LD	HL,	$5C91	; now copy even bits of P_FLAG to odd bits
 2797+114F 7E           		LD	A,(HL)
 2798+1150 07           		RLCA
 2799+1151 AE           		XOR	(HL)
 2800+1152 E6 AA        		AND	$AA
 2801+1154 AE           		XOR	(HL)
 2802+1155 77           		LD	(HL),A
 2803+1156 C9           		RET
 2804+1157
 2805+1157              ; Class $09 routine
 2806+1157
 2807+1157 EF           m1157:		RST	28H
 2808+1158 BE 1C        		DW	o1CBE		; use ROM 3 to handle class $09
 2809+115A C9           		RET
 2810+115B
 2811+115B              ; Class $0B routine
 2812+115B
 2813+115B C3 8D 08     m115b:		JP	m0888		; jump to cassette/disk handling routines
 2814+115E
 2815+115E
 2816+115E              ; The IF command
 2817+115E
 2818+115E C1           m115e:		POP	BC		; drop return address to STMT-RET
 2819+115F FD CB 01 7E  		BIT	7,(IY+$01)
 2820+1163 28 10        		JR	Z,m1175		; move on if syntax-checking
 2821+1165 2A 65 5C     		LD	HL,(	$5C65)	; "delete" item on calculator stack
 2822+1168 11 FB FF     		LD	DE,$FFFB
 2823+116B 19           		ADD	HL,DE
 2824+116C 22 65 5C     		LD	(	$5C65),HL
 2825+116F EF           		RST	28H
 2826+1170 E9 34        		DW	o34E9		; call "test zero" with HL holding add of value
 2827+1172 DA 73 10     		JP	C,m1073		; if false, go to next line
 2828+1175 C3 D1 0F     m1175:		JP	m0fd1		; if true or syntax-checking, do next statement
 2829+1178
 2830+1178              ; The FOR command
 2831+1178
 2832+1178 FE CD        m1178:		CP	$CD
 2833+117A 20 09        		JR	NZ,m1185	; move on if no STEP
 2834+117C E7           		RST	20H		; advance CH_ADD
 2835+117D CD 21 11     		CALL	m1121		; fetch step value
 2836+1180 CD B1 10     		CALL	m10b1		; check end of statement if syntax-checking
 2837+1183 18 18        		JR	m119d		; else move on
 2838+1185 CD B1 10     m1185:		CALL	m10b1		; if no STEP, check end of statement
 2839+1188 2A 65 5C     		LD	HL,(	$5C65)	; and stack value "1"
 2840+118B 36 00        		LD	(HL),$00
 2841+118D 23           		INC	HL
 2842+118E 36 00        		LD	(HL),$00
 2843+1190 23           		INC	HL
 2844+1191 36 01        		LD	(HL),$01
 2845+1193 23           		INC	HL
 2846+1194 36 00        		LD	(HL),$00
 2847+1196 23           		INC	HL
 2848+1197 36 00        		LD	(HL),$00
 2849+1199 23           		INC	HL
 2850+119A 22 65 5C     		LD	(	$5C65),HL
 2851+119D EF           m119d:		RST	28H
 2852+119E 16 1D        		DW	o1D16		; use ROM 3 to perform command
 2853+11A0 C9           		RET
 2854+11A1
 2855+11A1
 2856+11A1              ; The READ command (enter at m11a2)
 2857+11A1
 2858+11A1 E7           m11a1:		RST	20H		; move along statement
 2859+11A2 CD 0C 11     m11a2:		CALL	m110c		; check for existing variable
 2860+11A5 FD CB 01 7E  		BIT	7,(IY+$01)
 2861+11A9 28 2E        		JR	Z,m11d9		; move on if syntax-checking
 2862+11AB DF           		RST	18H		; save current CH_ADD in X_PTR
 2863+11AC 22 5F 5C     		LD	(	$5C5F),HL
 2864+11AF 2A 57 5C     		LD	HL,(	$5C57)	; fetch data list pointer
 2865+11B2 7E           		LD	A,(HL)
 2866+11B3 FE 2C        		CP	","
 2867+11B5 28 0B        		JR	Z,m11c2		; move on unless new statement must be found
 2868+11B7 1E E4        		LD	E,$E4
 2869+11B9 EF           		RST	28H
 2870+11BA 86 1D        		DW	o1D86		; search for "DATA" statement
 2871+11BC 30 04        		JR	NC,m11c2
 2872+11BE CD DA 2A     		CALL	m2ada
 2873+11C1 0D           		DB	$0D		; error E - out of data if not found
 2874+11C2 23           m11c2:		INC	HL		; advance pointer
 2875+11C3 22 5D 5C     		LD	(	$5C5D),HL
 2876+11C6 7E           		LD	A,(HL)
 2877+11C7 EF           		RST	28H
 2878+11C8 56 1C        		DW	o1C56		; assign value to variable
 2879+11CA DF           		RST	18H
 2880+11CB 22 57 5C     		LD	(	$5C57),HL	; store CH_ADD as data pointer
 2881+11CE 2A 5F 5C     		LD	HL,(	$5C5F)	; get pointer to READ statement
 2882+11D1 FD 36 26 00  		LD	(IY+$26),$00	; clear high byte of X_PTR
 2883+11D5 22 5D 5C     		LD	(	$5C5D),HL
 2884+11D8 7E           		LD	A,(HL)		; get next READ statement character
 2885+11D9 DF           m11d9:		RST	18H
 2886+11DA FE 2C        		CP	","
 2887+11DC 28 C3        		JR	Z,m11a1		; loop back if more items
 2888+11DE CD B1 10     		CALL	m10b1		; check for statement end
 2889+11E1 C9           		RET
 2890+11E2
 2891+11E2              ; The DATA command
 2892+11E2
 2893+11E2 FD CB 01 7E  m11e2:		BIT	7,(IY+$01)
 2894+11E6 20 0B        		JR	NZ,m11f3	; move on if not syntax-checking
 2895+11E8 EF           m11e8:		RST	28H
 2896+11E9 FB 24        		DW	o24FB		; scan next expression
 2897+11EB FE 2C        		CP	","
 2898+11ED C4 B1 10     		CALL	NZ,m10b1	; if no more items, check for statement end
 2899+11F0 E7           		RST	20H
 2900+11F1 18 F5        		JR	m11e8		; loop back for more
 2901+11F3 3E E4        m11f3:		LD	A,$E4		; we're passing by a DATA statement
 2902+11F5
 2903+11F5              ; Subroutine to pass by a DEF FN or DATA statement during run-time
 2904+11F5
 2905+11F5 EF           m11f5:		RST	28H
 2906+11F6 39 1E        		DW	o1E39		; use ROM 3 routine
 2907+11F8 C9           		RET
 2908+11F9
 2909+11F9              ; The RUN command
 2910+11F9
 2911+11F9 EF           m11f9:		RST	28H
 2912+11FA 67 1E        		DW	o1E67		; set NEWPPC as required
 2913+11FC 01 00 00     		LD	BC,$0000
 2914+11FF EF           		RST	28H
 2915+1200 45 1E        		DW	o1E45		; do a RESTORE 0
 2916+1202 18 03        		JR	m1207		; exit via CLEAR command
 2917+1204
 2918+1204              ; The CLEAR command
 2919+1204
 2920+1204 EF           m1204:		RST	28H
 2921+1205 99 1E        		DW	o1E99		; get operand, use 0 as default
 2922+1207 78           m1207:		LD	A,B
 2923+1208 B1           		OR	C
 2924+1209 20 04        		JR	NZ,m120f	; move on if non-zero
 2925+120B ED 4B B2 5C  		LD	BC,(	$5CB2)	; use existing RAMTOP if zero
 2926+120F C5           m120f:		PUSH	BC
 2927+1210 ED 5B 4B 5C  		LD	DE,(	$5C4B)
 2928+1214 2A 59 5C     		LD	HL,(	$5C59)
 2929+1217 2B           		DEC	HL
 2930+1218 EF           		RST	28H
 2931+1219 E5 19        		DW	o19E5		; reclaim whole variables area
 2932+121B EF           		RST	28H
 2933+121C 6B 0D        		DW	o0D6B		; cls
 2934+121E 2A 65 5C     		LD	HL,(	$5C65)
 2935+1221 11 32 00     		LD	DE,$0032
 2936+1224 19           		ADD	HL,DE
 2937+1225 D1           		POP	DE
 2938+1226 ED 52        		SBC	HL,DE
 2939+1228 30 08        		JR	NC,m1232	; move on if ramtop value too low
 2940+122A 2A B4 5C     		LD	HL,(	$5CB4)
 2941+122D A7           		AND	A
 2942+122E ED 52        		SBC	HL,DE
 2943+1230 30 04        		JR	NC,m1236	; move on if ramtop value not too high
 2944+1232 CD DA 2A     m1232:		CALL	m2ada
 2945+1235 15           		DB	$15		; error M - RAMTOP no good
 2946+1236 ED 53 B2 5C  m1236:		LD	(	$5CB2),DE	; store new RAMTOP
 2947+123A D1           		POP	DE
 2948+123B E1           		POP	HL
 2949+123C C1           		POP	BC
 2950+123D ED 7B B2 5C  		LD	SP,(	$5CB2)	; reset SP
 2951+1241 33           		INC	SP
 2952+1242 C5           		PUSH	BC
 2953+1243 E5           		PUSH	HL
 2954+1244 ED 73 3D 5C  		LD	(	$5C3D),SP	; reset ERR_SP
 2955+1248 D5           		PUSH	DE
 2956+1249 C9           		RET
 2957+124A
 2958+124A              ; The GOSUB command
 2959+124A
 2960+124A D1           m124a:		POP	DE		; save STMT_RET address
 2961+124B FD 66 0D     		LD	H,(IY+$0D)
 2962+124E 24           		INC	H		; increment SUBPPC statement number
 2963+124F E3           		EX	(SP),HL		; exchange error address with statement number
 2964+1250 33           		INC	SP		; reclaim a location
 2965+1251 ED 4B 45 5C  		LD	BC,(	$5C45)
 2966+1255 C5           		PUSH	BC		; save line number
 2967+1256 E5           		PUSH	HL		; restack error address
 2968+1257 ED 73 3D 5C  		LD	(	$5C3D),SP	; reset ERR_SP to error address
 2969+125B D5           		PUSH	DE		; restack STMT_RET address
 2970+125C EF           		RST	28H
 2971+125D 67 1E        		DW	o1E67		; set NEWPPC & NSPPC to required values
 2972+125F 01 14 00     		LD	BC,$0014
 2973+1262 EF           		RST	28H
 2974+1263 05 1F        		DW	o1F05		; test for room before making jump
 2975+1265 C9           		RET
 2976+1266
 2977+1266              ; The RETURN command
 2978+1266
 2979+1266 C1           m1266:		POP	BC		; get STMT_RET address
 2980+1267 E1           		POP	HL		; get error address
 2981+1268 D1           		POP	DE		; get next stack entry
 2982+1269 7A           		LD	A,D
 2983+126A FE 3E        		CP	$3E
 2984+126C 28 0F        		JR	Z,m127d		; move on if end of GOSUB stack
 2985+126E 3B           		DEC	SP		; full entry only uses 3 bytes
 2986+126F E3           		EX	(SP),HL		; exchange error address with statement no
 2987+1270 EB           		EX	DE,HL
 2988+1271 ED 73 3D 5C  		LD	(	$5C3D),SP	; reset ERR_SP
 2989+1275 C5           		PUSH	BC		; restack STMT_RET
 2990+1276 22 42 5C     		LD	(	$5C42),HL	; store new line
 2991+1279 FD 72 0A     		LD	(IY+$0A),D	; and statement
 2992+127C C9           		RET
 2993+127D D5           m127d:		PUSH	DE		; reform stack
 2994+127E E5           		PUSH	HL
 2995+127F CD DA 2A     		CALL	m2ada
 2996+1282 06           		DB	$06		; error 7 - RETURN without GOSUB
 2997+1283
 2998+1283              ; The DEF FN command
 2999+1283
 3000+1283 FD CB 01 7E  m1283:		BIT	7,(IY+$01)
 3001+1287 28 05        		JR	Z,m128e		; move on if checking syntax
 3002+1289 3E CE        		LD	A,$CE
 3003+128B C3 F5 11     		JP	m11f5		; else go to skip DEF FN
 3004+128E FD CB 01 F6  m128e:		SET	6,(IY+$01)	; signal "numeric variable" in FLAGS
 3005+1292 EF           		RST	28H
 3006+1293 8D 2C        		DW	o2C8D		; check present code is a letter
 3007+1295 30 16        		JR	NC,m12ad	; error C if not
 3008+1297 E7           		RST	20H		; get next char
 3009+1298 FE 24        		CP	"$"
 3010+129A 20 05        		JR	NZ,m12a1	; move on if not a string
 3011+129C FD CB 01 B6  		RES	6,(IY+$01)	; signal "string variable" in FLAGS
 3012+12A0 E7           		RST	20H		; get next char
 3013+12A1 FE 28        m12a1:		CP	"("
 3014+12A3 20 3C        		JR	NZ,m12e1	; error if not (
 3015+12A5 E7           		RST	20H
 3016+12A6 FE 29        		CP	")"
 3017+12A8 28 20        		JR	Z,m12ca		; move on if no parameters
 3018+12AA EF           m12aa:		RST	28H
 3019+12AB 8D 2C        		DW	o2C8D		; check present code is letter
 3020+12AD D2 25 11     m12ad:		JP	NC,m1125	; error if not
 3021+12B0 EB           		EX	DE,HL
 3022+12B1 E7           		RST	20H
 3023+12B2 FE 24        		CP	"$"
 3024+12B4 20 02        		JR	NZ,m12b8	; move on if not string
 3025+12B6 EB           		EX	DE,HL
 3026+12B7 E7           		RST	20H
 3027+12B8 EB           m12b8:		EX	DE,HL
 3028+12B9 01 06 00     		LD	BC,$0006
 3029+12BC EF           		RST	28H
 3030+12BD 55 16        		DW	o1655		; make 6 bytes of room after parameter name
 3031+12BF 23           		INC	HL
 3032+12C0 23           		INC	HL
 3033+12C1 36 0E        		LD	(HL),$0E	; store a number marker in first location
 3034+12C3 FE 2C        		CP	","
 3035+12C5 20 03        		JR	NZ,m12ca	; move on if end of parameters
 3036+12C7 E7           		RST	20H
 3037+12C8 18 E0        		JR	m12aa		; loop back
 3038+12CA FE 29        m12ca:		CP	")"
 3039+12CC 20 13        		JR	NZ,m12e1	; error if no )
 3040+12CE E7           		RST	20H
 3041+12CF FE 3D        		CP	"="
 3042+12D1 20 0E        		JR	NZ,m12e1	; error if no =
 3043+12D3 E7           		RST	20H
 3044+12D4 3A 3B 5C     		LD	A,(	$5C3B)
 3045+12D7 F5           		PUSH	AF		; save nature (number/string) of variable
 3046+12D8 EF           		RST	28H
 3047+12D9 FB 24        		DW	o24FB		; scan the expression
 3048+12DB F1           		POP	AF
 3049+12DC FD AE 01     		XOR	(IY+$01)
 3050+12DF E6 40        		AND	$40
 3051+12E1 C2 25 11     m12e1:		JP	NZ,m1125	; error if expression not correct type
 3052+12E4 CD B1 10     		CALL	m10b1		; check for end of statement
 3053+12E7 C9           		RET
 3054+12E8
 3055+12E8
 3056+12E8              ; The Loader routine, called from ROM 0
 3057+12E8
 3058+12E8 CD 89 2B     m12e8:		CALL	m2b89		; page in DOS workspace
 3059+12EB 21 0E EC     		LD	HL,	$EC0E
 3060+12EE 36 FF        		LD	(HL),$FF	; signal "current process is Loader"
 3061+12F0 3A 79 5B     		LD	A,(	$5B79)
 3062+12F3 FE 54        		CP	$54
 3063+12F5 CA C6 13     		JP	Z,m13c6		; move on if no disk interface present
 3064+12F8 AF           		XOR	A
 3065+12F9 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 3066+12FC CD 00 3F     		CALL	m3f00
 3067+12FF 4E 01        		DW	$014E	; disable ALERT routine
 3068+1301 CD EE 32     		CALL	m32ee		; restore TSTACK
 3069+1304 E5           		PUSH	HL
 3070+1305 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 3071+1308 CD 00 3F     		CALL	m3f00
 3072+130B 2A 01        		DW	$012A	; attempt to boot a disk from the boot sector
 3073+130D CD EE 32     		CALL	m32ee		; restore TSTACK
 3074+1310 CD 64 2B     		CALL	m2b64		; page in normal memory
 3075+1313 EF           		RST	28H
 3076+1314 B0 16        		DW	o16B0		; clear editing workspaces
 3077+1316 2A 59 5C     		LD	HL,(	$5C59)
 3078+1319 01 07 00     		LD	BC,$0007
 3079+131C EF           		RST	28H
 3080+131D 55 16        		DW	o1655		; create 7 bytes of space at E_LINE
 3081+131F 21 2E 15     		LD	HL,m152e
 3082+1322 ED 5B 59 5C  		LD	DE,(	$5C59)
 3083+1326 01 07 00     		LD	BC,$0007
 3084+1329 ED B0        		LDIR			; copy LOAD "disk" into E_LINE
 3085+132B 2A 59 5C     		LD	HL,(	$5C59)
 3086+132E 22 5D 5C     		LD	(	$5C5D),HL	; set CH_ADD
 3087+1331 CD C7 22     		CALL	m22c7		; clear whole display if necessary
 3088+1334 FD CB 02 76  		BIT	6,(IY+$02)
 3089+1338 20 03        		JR	NZ,m133d	; move on if shouldn't clear lower screen
 3090+133A EF           		RST	28H
 3091+133B 6E 0D        		DW	o0D6E		; clear lower screen
 3092+133D FD CB 02 B6  m133d:		RES	6,(IY+$02)	; signal "lower screen can be cleared"
 3093+1341 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 3094+1344 21 0D EC     		LD	HL,$EC0D
 3095+1347 CB 76        		BIT	6,(HL)
 3096+1349 20 0B        		JR	NZ,m1356	; ???
 3097+134B 23           		INC	HL
 3098+134C 7E           		LD	A,(HL)
 3099+134D FE 00        		CP	$00
 3100+134F 20 05        		JR	NZ,m1356	; ???
 3101+1351 CD 80 3E     		CALL	m3e80
 3102+1354 8E 1A        		DW	l1a8e
 3103+1356 CD 64 2B     m1356:		CALL	m2b64		; page in normal memory
 3104+1359 21 3C 5C     		LD	HL,	$5C3C
 3105+135C CB 9E        		RES	3,(HL)		; signal "mode unchanged"
 3106+135E 3E 19        		LD	A,$19
 3107+1360 FD 96 4F     		SUB	(IY+$4F)
 3108+1363 32 8C 5C     		LD	(	$5C8C),A	; set scroll count according to current line
 3109+1366 FD CB 01 FE  		SET	7,(IY+$01)	; signal "execution mode"
 3110+136A FD 36 0A 01  		LD	(IY+$0A),$01	; statement 1
 3111+136E 21 00 3E     		LD	HL,n3e00
 3112+1371 E5           		PUSH	HL
 3113+1372 21 3A 5B     		LD	HL,	$5B3A
 3114+1375 E5           		PUSH	HL
 3115+1376 ED 73 3D 5C  		LD	(	$5C3D),SP	; set up error stack
 3116+137A 21 83 13     		LD	HL,m1383
 3117+137D 22 6C 5B     		LD	(	$5B6C),HL	; error return address
 3118+1380 C3 48 10     		JP	m1048		; execute the edit line, returning here on error
 3119+1383 CD 89 2B     m1383:		CALL	m2b89		; page in DOS workspace
 3120+1386 E1           		POP	HL		; retrieve old ALERT address
 3121+1387 3E FF        		LD	A,$FF
 3122+1389 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 3123+138C CD 00 3F     		CALL	m3f00
 3124+138F 4E 01        		DW	$014E	; re-enable ALERT routine
 3125+1391 CD EE 32     		CALL	m32ee		; restore TSTACK
 3126+1394 CD 64 2B     		CALL	m2b64		; page in normal memory
 3127+1397 3A 3A 5C     		LD	A,(	$5C3A)	; get error code
 3128+139A CB 7F        		BIT	7,A
 3129+139C C2 CB 25     		JP	NZ,m25cb	; if OK, exit via standard syntax return
 3130+139F 2A 45 5C     		LD	HL,(	$5C45)
 3131+13A2 11 FE FF     		LD	DE,$FFFE
 3132+13A5 AF           		XOR	A
 3133+13A6 ED 52        		SBC	HL,DE
 3134+13A8 7C           		LD	A,H
 3135+13A9 B5           		OR	L
 3136+13AA C2 CB 25     		JP	NZ,m25cb	; or if error occurred in program
 3137+13AD 3E 54        		LD	A,"T"
 3138+13AF 32 79 5B     		LD	(	$5B79),A	; set default load drive to cassette
 3139+13B2 21 3C 5C     		LD	HL,	$5C3C
 3140+13B5 CB C6        		SET	0,(HL)		; signal "using lower screen"
 3141+13B7 21 41 0E     		LD	HL,msg18
 3142+13BA CD 24 15     		CALL	m1524		; output cassette loader message
 3143+13BD 21 3C 5C     		LD	HL,	$5C3C
 3144+13C0 CB 86        		RES	0,(HL)		; signal "using main screen"
 3145+13C2 CB F6        		SET	6,(HL)		; signal "don't clear lower screen"
 3146+13C4 18 03        		JR	m13c9
 3147+13C6 CD 64 2B     m13c6:		CALL	m2b64		; page in normal memory
 3148+13C9 EF           m13c9:		RST	28H
 3149+13CA B0 16        		DW	o16B0		; clear editing workspaces
 3150+13CC 2A 59 5C     		LD	HL,(	$5C59)
 3151+13CF 01 03 00     		LD	BC,$0003
 3152+13D2 EF           		RST	28H
 3153+13D3 55 16        		DW	o1655		; make 3 bytes space at E_LINE
 3154+13D5 21 DF 14     		LD	HL,m14df
 3155+13D8 ED 5B 59 5C  		LD	DE,(	$5C59)
 3156+13DC 01 03 00     		LD	BC,$0003
 3157+13DF ED B0        		LDIR			; copy LOAD "" command into E_LINE
 3158+13E1 2A 59 5C     		LD	HL,(	$5C59)
 3159+13E4 22 5D 5C     		LD	(	$5C5D),HL	; set interpretation address
 3160+13E7 CD C7 22     		CALL	m22c7		; clear whole screen if necessary
 3161+13EA FD CB 02 76  		BIT	6,(IY+$02)
 3162+13EE 20 03        		JR	NZ,m13f3
 3163+13F0 EF           		RST	28H
 3164+13F1 6E 0D        		DW	o0D6E		; clear lower screen if necessary
 3165+13F3 FD CB 02 B6  m13f3:		RES	6,(IY+$02)	; signal "lower screen can be cleared"
 3166+13F7 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 3167+13FA 21 0D EC     		LD	HL,$EC0D
 3168+13FD CB 76        		BIT	6,(HL)
 3169+13FF 20 0B        		JR	NZ,m140c	; ???
 3170+1401 23           		INC	HL
 3171+1402 7E           		LD	A,(HL)
 3172+1403 FE 00        		CP	$00
 3173+1405 20 05        		JR	NZ,m140c	; ???
 3174+1407 CD 80 3E     		CALL	m3e80
 3175+140A 8E 1A        		DW	l1a8e
 3176+140C CD 64 2B     m140c:		CALL	m2b64		; page in normal memory
 3177+140F 21 3C 5C     		LD	HL,	$5C3C
 3178+1412 CB 9E        		RES	3,(HL)		; signal "mode unchanged"
 3179+1414 3E 19        		LD	A,$19
 3180+1416 FD 96 4F     		SUB	(IY+$4F)
 3181+1419 32 8C 5C     		LD	(	$5C8C),A	; set scroll count according to current line
 3182+141C FD CB 01 FE  		SET	7,(IY+$01)	; signal "execution mode"
 3183+1420 FD 36 0A 01  		LD	(IY+$0A),$01	; set statement 1
 3184+1424 21 00 3E     		LD	HL,n3e00
 3185+1427 E5           		PUSH	HL
 3186+1428 21 3A 5B     		LD	HL,	$5B3A
 3187+142B E5           		PUSH	HL
 3188+142C ED 73 3D 5C  		LD	(	$5C3D),SP	; set up error stack
 3189+1430 21 39 14     		LD	HL,m1439
 3190+1433 22 6C 5B     		LD	(	$5B6C),HL	; set error return address
 3191+1436 C3 48 10     		JP	m1048		; execute line in editing area
 3192+1439 3A 3A 5C     m1439:		LD	A,(	$5C3A)	; get error code
 3193+143C CB 7F        		BIT	7,A
 3194+143E C2 CB 25     		JP	NZ,m25cb	; exit via standard error return if OK
 3195+1441 21 66 5B     		LD	HL,	$5B66
 3196+1444 CB 66        		BIT	4,(HL)
 3197+1446 CA CB 25     		JP	Z,m25cb		; or if no disk interface present
 3198+1449 3E 41        		LD	A,"A"
 3199+144B 32 79 5B     		LD	(	$5B79),A	; else set default load drive to A:
 3200+144E C3 CB 25     		JP	m25cb		; and exit
 3201+1451
 3202+1451              ; The Print option, called from ROM 0
 3203+1451
 3204+1451 EF           m1451:		RST	28H
 3205+1452 B0 16        		DW	o16B0		; clear E_LINE, WORKSP, STKBOT etc
 3206+1454 2A 59 5C     		LD	HL,(	$5C59)
 3207+1457 01 01 00     		LD	BC,$0001
 3208+145A EF           		RST	28H
 3209+145B 55 16        		DW	o1655		; make a byte of space at E_LINE
 3210+145D 2A 59 5C     		LD	HL,(	$5C59)
 3211+1460 36 E1        		LD	(HL),$E1	; insert LLIST command
 3212+1462 CD F0 24     		CALL	m24f0		; execute it
 3213+1465
 3214+1465              ; The SPECTRUM command
 3215+1465
 3216+1465 CD C4 14     m1465:		CALL	m14c4		; set "P" channel to use screen
 3217+1468 ED 7B 3D 5C  		LD	SP,(	$5C3D)
 3218+146C E1           		POP	HL		; discard current error return address
 3219+146D 21 03 13     		LD	HL,o1303
 3220+1470 E5           		PUSH	HL		; address to enter ROM 3 at, in main loop
 3221+1471 21 13 00     		LD	HL,$0013	; "AF"
 3222+1474 E5           		PUSH	HL
 3223+1475 21 08 00     		LD	HL,$0008	; "BC"
 3224+1478 E5           		PUSH	HL
 3225+1479 3E 20        		LD	A,$20
 3226+147B 32 5C 5B     		LD	(	$5B5C),A	; page 0, paging disabled
 3227+147E F5           		PUSH	AF
 3228+147F C5           		PUSH	BC
 3229+1480 F3           		DI
 3230+1481 FD CB 01 A6  		RES	4,(IY+$01)	; signal "48K BASIC" mode
 3231+1485 C3 10 5B     		JP		$5B10		; enter 48K ROM
 3232+1488
 3233+1488              ; The routine to enter 48K BASIC, called from ROM 0
 3234+1488
 3235+1488 21 00 60     m1488:		LD	HL,$6000
 3236+148B E5           		PUSH	HL		; stack address to return to (in RAM)
 3237+148C 11 00 60     		LD	DE,$6000
 3238+148F 21 B5 14     		LD	HL,m14b5
 3239+1492 01 0F 00     		LD	BC,$000F
 3240+1495 ED B0        		LDIR			; copy following routine into RAM
 3241+1497 3A 67 5B     		LD	A,(	$5B67)
 3242+149A CB 9F        		RES	3,A		; turn off disk motor
 3243+149C 01 FD 1F     		LD	BC,PBANK678
 3244+149F F3           		DI
 3245+14A0 32 67 5B     		LD	(	$5B67),A
 3246+14A3 ED 79        		OUT	(C),A
 3247+14A5 FB           		EI
 3248+14A6 3E 30        		LD	A,$30		; select ROM 3 with paging disabled
 3249+14A8 F3           		DI
 3250+14A9 FD CB 01 A6  		RES	4,(IY+$01)	; signal "48K BASIC" mode
 3251+14AD 32 5C 5B     		LD	(	$5B5C),A
 3252+14B0 F5           		PUSH	AF
 3253+14B1 C5           		PUSH	BC
 3254+14B2 C3 10 5B     		JP		$5B10		; page in ROM 3 & jump to following routine
 3255+14B5
 3256+14B5 3E 30        m14b5:		LD	A,$30
 3257+14B7 01 FD 7F     		LD	BC,PBANKM
 3258+14BA F3           		DI
 3259+14BB ED 79        		OUT	(C),A		; page in ROM 3 & disable paging
 3260+14BD FB           		EI
 3261+14BE C3 00 00     		JP	$0000		; reset machine with 48K ROM locked in
 3262+14C1
 3263+14C1              ; Cliff J Lawson's initials
 3264+14C1
 3265+14C1 43 4A 4C     		DM	"CJL"
 3266+14C4
 3267+14C4              ; Subroutine to copy screen channel addresses over printer channel addresses
 3268+14C4
 3269+14C4 2A 4F 5C     m14c4:		LD	HL,(	$5C4F)
 3270+14C7 11 05 00     		LD	DE,$0005
 3271+14CA 19           		ADD	HL,DE		; HL=channel info for "S"
 3272+14CB 11 0A 00     		LD	DE,$000A
 3273+14CE EB           		EX	DE,HL
 3274+14CF 19           		ADD	HL,DE
 3275+14D0 EB           		EX	DE,HL		; DE=channel info for "P"
 3276+14D1 01 04 00     		LD	BC,$0004
 3277+14D4 ED B0        		LDIR			; overwrite it
 3278+14D6 FD CB 30 9E  		RES	3,(IY+$30)	; set caps lock off
 3279+14DA FD CB 01 A6  		RES	4,(IY+$01)	; signal "48K BASIC" mode
 3280+14DE C9           		RET
 3281+14DF
 3282+14DF              ; LOAD "" command
 3283+14DF
 3284+14DF EF 22 22     m14df:		DB	$EF,$22,$22
 3285+14E2
 3286+14E2              ; The Loader message
 3287+14E2
 3288+14E2 DF           m14e2:		RST	18H
 3289+14E3 FE 23        		CP	"#"
 3290+14E5 C2 AD 22     		JP	NZ,m22ad
 3291+14E8 CD 35 2B     		CALL	m2b35
 3292+14EB 06 02        		LD	B,2
 3293+14ED C3 19 2B     		JP	m2b19
 3294+14F0 78           m14f0:		LD	A,B
 3295+14F1 2F           		CPL
 3296+14F2 67           		LD	H,A
 3297+14F3 79           		LD	A,C
 3298+14F4 2F           		CPL
 3299+14F5 6F           		LD	L,A
 3300+14F6 23           		INC	HL
 3301+14F7 39           		ADD	HL,SP
 3302+14F8 F9           		LD	SP,HL
 3303+14F9 C5           		PUSH	BC
 3304+14FA E5           		PUSH	HL
 3305+14FB EB           		EX	DE,HL
 3306+14FC ED B0        		LDIR
 3307+14FE E1           		POP	HL
 3308+14FF EF           		RST	28H
 3309+1500 0E 25        		DW	$250E
 3310+1502 E1           		POP	HL
 3311+1503 39           		ADD	HL,SP
 3312+1504 F9           		LD	SP,HL
 3313+1505 C9           		RET
 3314+1506 DF           m1506:		RST	18H
 3315+1507 FE 23        		CP	"#"
 3316+1509 28 0A        		JR	Z,m1515
 3317+150B EF           		RST	28H
 3318+150C 6C 1C        		DW	o1C6C
 3319+150E CD B1 10     		CALL	m10b1
 3320+1511 EF           		RST	28H
 3321+1512 AB 1D        		DW	o1DAB
 3322+1514 C9           		RET
 3323+1515 CD 35 2B     m1515:		CALL	m2b35
 3324+1518 CD 00 3F     		CALL	m3f00
 3325+151B 5C 00        		DW	$005C
 3326+151D EF           		RST	28H
 3327+151E 28 2D        		DW	o2D28
 3328+1520 EF           		RST	28H
 3329+1521 FF 2A        		DW	o2AFF
 3330+1523 C9           		RET
 3331+1524
 3332+1524              ; Subroutine to output a $FF-terminated message
 3333+1524
 3334+1524 7E           m1524:		LD	A,(HL)		; get next char
 3335+1525 FE FF        		CP	$FF
 3336+1527 C8           		RET	Z		; exit if end
 3337+1528 EF           		RST	28H
 3338+1529 10 00        		DW	$0010		; output
 3339+152B 23           		INC	HL
 3340+152C 18 F6        		JR	m1524		; loop back
 3341+152E
 3342+152E              ; LOAD "disk" command
 3343+152E
 3344+152E EF           m152e:		DB	$EF		; LOAD keyword
 3345+152F 22 64 69 73  m152f:		DM	$22, "disk", $22
 3345+1533 6B 22
 3346+1535
 3347+1535              ; The LIST & LLIST commands (enter at m1535 for LLIST, m1539 for LIST)
 3348+1535
 3349+1535 3E 03        m1535:		LD	A,$03		; default stream 3 for LLIST
 3350+1537 18 02        		JR	m153b
 3351+1539 3E 02        m1539:		LD	A,$02		; default stream 2 for LIST
 3352+153B FD 36 02 00  m153b:		LD	(IY+$02),$00	; signal ordinary listing in main screen
 3353+153F EF           m153f:		RST	28H
 3354+1540 30 25        		DW	o2530		; are we checking syntax?
 3355+1542 28 03        		JR	Z,m1547
 3356+1544 EF           		RST	28H
 3357+1545 01 16        		DW	o1601		; open channel if not
 3358+1547 EF           m1547:		RST	28H
 3359+1548 18 00        		DW	$0018		; get character
 3360+154A EF           		RST	28H
 3361+154B 70 20        		DW	o2070		; see if stream must be altered
 3362+154D 38 18        		JR	C,m1567		; move on if not
 3363+154F EF           		RST	28H
 3364+1550 18 00        		DW	$0018		; get character
 3365+1552 FE 3B        		CP	$3B
 3366+1554 28 04        		JR	Z,m155a		; move on if ;
 3367+1556 FE 2C        		CP	","
 3368+1558 20 08        		JR	NZ,m1562	; move on if not ,
 3369+155A EF           m155a:		RST	28H
 3370+155B 20 00        		DW	$0020		; get next character
 3371+155D CD 21 11     m155d:		CALL	m1121		; get numeric expression
 3372+1560 18 08        		JR	m156a		; move on with line number to list from
 3373+1562 EF           m1562:		RST	28H
 3374+1563 E6 1C        		DW	o1CE6		; else use zero
 3375+1565 18 03        		JR	m156a
 3376+1567 EF           m1567:		RST	28H
 3377+1568 DE 1C        		DW	o1CDE		; fetch a numeric expression or use zero
 3378+156A CD B1 10     m156a:		CALL	m10b1		; check for end of statement
 3379+156D EF           m156d:		RST	28H
 3380+156E 25 18        		DW	$1825		; use ROM 3 for actual listing operation
 3381+1570 C9           		RET
 3382+1571
 3383+1571              ; PLAY command (enters here after syntax-checking)
 3384+1571
 3385+1571 F3           m1571:		DI
 3386+1572 C5           		PUSH	BC		; save count of strings
 3387+1573 11 37 00     		LD	DE,$0037	; $37 bytes required per string
 3388+1576 21 3C 00     		LD	HL,$003C	; plus $3C bytes overhead
 3389+1579 19           m1579:		ADD	HL,DE
 3390+157A 10 FD        		DJNZ	m1579
 3391+157C 4D           		LD	C,L
 3392+157D 44           		LD	B,H		; BC=workspace required
 3393+157E EF           		RST	28H
 3394+157F 30 00        		DW	$0030		; make space
 3395+1581 F3           		DI
 3396+1582 D5           		PUSH	DE
 3397+1583 FD E1        m1583:		POP	IY		; IY=start of space
 3398+1585 E5           		PUSH	HL		; stack HL=end of space+1
 3399+1586 DD E1        m1586:		POP	IX
 3400+1588 FD 36 10 FF  		LD	(IY+$10),$FF
 3401+158C 01 C9 FF     m158c:		LD	BC,$FFC9
 3402+158F DD 09        		ADD	IX,BC		; IX=start of next string parameter space
 3403+1591 DD 36 03 3C  		LD	(IX+$03),$3C
 3404+1595 DD 36 01 FF  		LD	(IX+$01),$FF
 3405+1599 DD 36 04 0F  		LD	(IX+$04),$0F
 3406+159D DD 36 05 05  		LD	(IX+$05),$05
 3407+15A1 DD 36 21 00  		LD	(IX+$21),$00
 3408+15A5 DD 36 0A 00  		LD	(IX+$0A),$00
 3409+15A9 DD 36 0B 00  		LD	(IX+$0B),$00
 3410+15AD DD 36 16 FF  		LD	(IX+$16),$FF
 3411+15B1 DD 36 17 00  		LD	(IX+$17),$00
 3412+15B5 DD 36 18 00  		LD	(IX+$18),$00
 3413+15B9 EF           		RST	28H
 3414+15BA F1 2B        		DW	o2BF1		; get string from top of stack
 3415+15BC F3           		DI
 3416+15BD DD 73 06     		LD	(IX+$06),E
 3417+15C0 DD 72 07     		LD	(IX+$07),D	; store address of string (twice)
 3418+15C3 DD 73 0C     		LD	(IX+$0C),E
 3419+15C6 DD 72 0D     		LD	(IX+$0D),D
 3420+15C9 EB           		EX	DE,HL
 3421+15CA 09           		ADD	HL,BC
 3422+15CB DD 75 08     		LD	(IX+$08),L
 3423+15CE DD 74 09     		LD	(IX+$09),H	; store address of end-of-string+1
 3424+15D1 C1           		POP	BC		; restore count of strings
 3425+15D2 C5           		PUSH	BC
 3426+15D3 05           		DEC	B
 3427+15D4 48           		LD	C,B
 3428+15D5 06 00        		LD	B,$00		; BC=number of strings left on stack
 3429+15D7 CB 21        		SLA	C
 3430+15D9 FD E5        		PUSH	IY
 3431+15DB E1           		POP	HL
 3432+15DC 09           		ADD	HL,BC		; HL=overheadspace+2*(string number-1)
 3433+15DD DD E5        		PUSH	IX
 3434+15DF C1           		POP	BC
 3435+15E0 71           		LD	(HL),C
 3436+15E1 23           		INC	HL
 3437+15E2 70           		LD	(HL),B		; store string parameter block address
 3438+15E3 B7           		OR	A
 3439+15E4 FD CB 10 16  		RL	(IY+$10)	; shift in 0 bit for each string
 3440+15E8 C1           		POP	BC
 3441+15E9 05           		DEC	B		; decrement string count
 3442+15EA C5           		PUSH	BC
 3443+15EB DD 70 02     		LD	(IX+$02),B	; store string number (0...7) in parameters
 3444+15EE 20 9C        		JR	NZ,m158c	; back for another string
 3445+15F0 C1           		POP	BC		; restore count of strings
 3446+15F1 FD 36 27 1A  		LD	(IY+$27),$1A
 3447+15F5 FD 36 28 0B  		LD	(IY+$28),$0B
 3448+15F9 FD E5        		PUSH	IY
 3449+15FB E1           		POP	HL
 3450+15FC 01 2B 00     		LD	BC,$002B
 3451+15FF 09           		ADD	HL,BC
 3452+1600 EB           		EX	DE,HL
 3453+1601 21 1D 16     		LD	HL,m161d
 3454+1604 01 0D 00     		LD	BC,$000D
 3455+1607 ED B0        		LDIR			; copy FP routine in
 3456+1609 16 07        		LD	D,$07
 3457+160B 1E F8        		LD	E,$F8
 3458+160D CD 6A 1A     		CALL	m1a6a		; output $F8 to AY register 7
 3459+1610 16 0B        		LD	D,$0B
 3460+1612 1E FF        		LD	E,$FF
 3461+1614 CD 6A 1A     		CALL	m1a6a		; output $FF to AY register 11
 3462+1617 14           		INC	D
 3463+1618 CD 6A 1A     		CALL	m1a6a		; output $FF to AY register 12
 3464+161B 18 4C        		JR	m1669		; move on
 3465+161D
 3466+161D              ; FP routine used to calculate tempo values, executed in RAM with ROM 3
 3467+161D              ; paged in
 3468+161D
 3469+161D EF           m161d:		RST	28H		; engage FP-calculator
 3470+161E A4           		DB	$A4		; X,10
 3471+161F 01           		DB	$01	; 10,X
 3472+1620 05           		DB	$05	; 10/X
 3473+1621 34           		DB	$34	; 10/X,Y
 3474+1622 DF 75 F4 38  		DB	$DF,$75,$F4,$38,$75
 3474+1626 75
 3475+1627 05           		DB	$05	; 10/(X*Y)
 3476+1628 38           		DB	$38
 3477+1629 C9           		RET
 3478+162A
 3479+162A              ; Subroutine to check if BREAK is being pressed (exit with carry reset if so)
 3480+162A
 3481+162A 3E 7F        m162a:		LD	A,$7F
 3482+162C DB FE        		IN	A,($FE)
 3483+162E 1F           		RRA
 3484+162F D8           		RET	C		; exit with carry set if not pressed
 3485+1630 3E FE        		LD	A,$FE
 3486+1632 DB FE        		IN	A,($FE)
 3487+1634 1F           		RRA			; test other key & exit
 3488+1635 C9           		RET
 3489+1636
 3490+1636              ; Subroutine to initialise string pointers to first string (m163b)
 3491+1636
 3492+1636 01 11 00     m1636:		LD	BC,$0011
 3493+1639 18 03        		JR	m163e
 3494+163B 01 00 00     m163b:		LD	BC,$0000
 3495+163E FD E5        m163e:		PUSH	IY
 3496+1640 E1           		POP	HL
 3497+1641 09           		ADD	HL,BC		; get address of pointer to string
 3498+1642 FD 75 23     		LD	(IY+$23),L
 3499+1645 FD 74 24     		LD	(IY+$24),H	; store address
 3500+1648 FD 7E 10     		LD	A,(IY+$10)
 3501+164B FD 77 22     		LD	(IY+$22),A	; copy available strings byte
 3502+164E FD 36 21 01  		LD	(IY+$21),$01	; set string bit marker
 3503+1652 C9           		RET
 3504+1653
 3505+1653              ; Subroutine to get address of current string parameter block in IX
 3506+1653
 3507+1653 5E           m1653:		LD	E,(HL)
 3508+1654 23           		INC	HL
 3509+1655 56           		LD	D,(HL)
 3510+1656 D5           		PUSH	DE
 3511+1657 DD E1        		POP	IX
 3512+1659 C9           		RET
 3513+165A
 3514+165A              ; Subroutine to increment pointer to next string parameter block address
 3515+165A
 3516+165A FD 6E 23     m165a:		LD	L,(IY+$23)
 3517+165D FD 66 24     		LD	H,(IY+$24)	; get current parameter block pointer address
 3518+1660 23           		INC	HL
 3519+1661 23           		INC	HL		; move to next
 3520+1662 FD 75 23     		LD	(IY+$23),L
 3521+1665 FD 74 24     		LD	(IY+$24),H	; store
 3522+1668 C9           		RET
 3523+1669
 3524+1669              ; More PLAY command
 3525+1669
 3526+1669 CD 3B 16     m1669:		CALL	m163b		; copy initial info
 3527+166C FD CB 22 1E  m166c:		RR	(IY+$22)	; rotate string counter
 3528+1670 38 06        		JR	C,m1678		; move on if no string
 3529+1672 CD 53 16     		CALL	m1653		; get IX=address of current string parm block
 3530+1675 CD 48 17     		CALL	m1748		; interpret string for standard parms
 3531+1678 FD CB 21 26  m1678:		SLA	(IY+$21)
 3532+167C 38 05        		JR	C,m1683		; move on if tried 8 strings
 3533+167E CD 5A 16     		CALL	m165a		; increment pointer to string parms address
 3534+1681 18 E9        		JR	m166c		; loop back
 3535+1683 CD 7F 1B     m1683:		CALL	m1b7f		; find shortest current notelength
 3536+1686 D5           		PUSH	DE
 3537+1687 CD 30 1B     		CALL	m1b30		; output next note from each string
 3538+168A D1           		POP	DE
 3539+168B FD 7E 10     m168b:		LD	A,(IY+$10)
 3540+168E FE FF        		CP	$FF
 3541+1690 20 05        		JR	NZ,m1697	; move on unless no strings,or stop encountered
 3542+1692 CD 81 1A     		CALL	m1a81		; close down AY channels for this command
 3543+1695 FB           		EI
 3544+1696 C9           		RET			; exit
 3545+1697 1B           m1697:		DEC	DE
 3546+1698 CD 64 1B     		CALL	m1b64		; pause
 3547+169B CD AF 1B     		CALL	m1baf		; decrement note lengths & change notes if nec
 3548+169E CD 7F 1B     		CALL	m1b7f		; find shortest current notelength
 3549+16A1 18 E8        		JR	m168b		; loop back
 3550+16A3
 3551+16A3              ; List of PLAY string parameters
 3552+16A3
 3553+16A3 48 5A 59 58  m16a3:		DM	"HZYXWUVMT)(NO!"
 3553+16A7 57 55 56 4D
 3553+16AB 54 29 28 4E
 3553+16AF 4F 21
 3554+16B1
 3555+16B1              ; Subroutine to get next character from string and increment string
 3556+16B1              ; interpretation address (carry set if no char available)
 3557+16B1
 3558+16B1 CD D1 1A     m16b1:		CALL	m1ad1		; get next character
 3559+16B4 D8           		RET	C		; exit if end of string
 3560+16B5 DD 34 06     		INC	(IX+$06)	; increment string interpretation address
 3561+16B8 C0           		RET	NZ
 3562+16B9 DD 34 07     		INC	(IX+$07)
 3563+16BC C9           		RET
 3564+16BD
 3565+16BD              ; Subroutine to get a note from the string, returning semitone value A (or 0)
 3566+16BD              ; If A=$80, a rest was found
 3567+16BD
 3568+16BD E5           m16bd:		PUSH	HL
 3569+16BE 0E 00        		LD	C,$00		; C=initial semitone value (natural)
 3570+16C0 CD B1 16     m16c0:		CALL	m16b1		; get next char from string
 3571+16C3 38 08        		JR	C,m16cd		; move on if none
 3572+16C5 FE 26        		CP	'&'
 3573+16C7 20 0F        		JR	NZ,m16d8	; move on if not a rest
 3574+16C9 3E 80        		LD	A,$80		; signal "rest"
 3575+16CB E1           m16cb:		POP	HL
 3576+16CC C9           		RET
 3577+16CD FD 7E 21     m16cd:		LD	A,(IY+$21)
 3578+16D0 FD B6 10     		OR	(IY+$10)
 3579+16D3 FD 77 10     		LD	(IY+$10),A	; set string to not in use & exit
 3580+16D6 18 F3        		JR	m16cb
 3581+16D8 FE 23        m16d8:		CP	"#"		; test for sharp sign
 3582+16DA 20 03        		JR	NZ,m16df
 3583+16DC 0C           		INC	C		; if so, increment semitone value & loop back
 3584+16DD 18 E1        		JR	m16c0
 3585+16DF FE 24        m16df:		CP	"$"		; test for flat sign
 3586+16E1 20 03        		JR	NZ,m16e6
 3587+16E3 0D           		DEC	C		; if so, decrement semitone value & loop back
 3588+16E4 18 DA        		JR	m16c0
 3589+16E6 CB 6F        m16e6:		BIT	5,A
 3590+16E8 20 06        		JR	NZ,m16f0	; move on if lowercase letter
 3591+16EA F5           		PUSH	AF
 3592+16EB 3E 0C        		LD	A,$0C
 3593+16ED 81           		ADD	A,C		; for uppercase, add octave to semitone value
 3594+16EE 4F           		LD	C,A
 3595+16EF F1           		POP	AF
 3596+16F0 E6 DF        m16f0:		AND	$DF		; make uppercase
 3597+16F2 D6 41        		SUB	"A"
 3598+16F4 DA 10 1B     		JP	C,m1b10		; error k if <A
 3599+16F7 FE 07        		CP	$07
 3600+16F9 D2 10 1B     		JP	NC,m1b10	; or if >G
 3601+16FC C5           		PUSH	BC
 3602+16FD 06 00        m16fd:		LD	B,$00
 3603+16FF 4F           		LD	C,A
 3604+1700 21 E7 19     		LD	HL,m19e7
 3605+1703 09           		ADD	HL,BC
 3606+1704 7E           		LD	A,(HL)		; get note semitone value
 3607+1705 C1           		POP	BC
 3608+1706 81           		ADD	A,C		; add octave/sharp/flat value
 3609+1707 E1           		POP	HL
 3610+1708 C9           		RET
 3611+1709
 3612+1709              ; Subroutine to get a numeric value from the string into BC (defaults to 0)
 3613+1709
 3614+1709 E5           m1709:		PUSH	HL
 3615+170A D5           		PUSH	DE
 3616+170B DD 6E 06     		LD	L,(IX+$06)
 3617+170E DD 66 07     		LD	H,(IX+$07)	; get string interpretation address
 3618+1711 11 00 00     		LD	DE,$0000	; initial value 0
 3619+1714 7E           m1714:		LD	A,(HL)		; get next char
 3620+1715 FE 30        		CP	"0"
 3621+1717 38 18        		JR	C,m1731
 3622+1719 FE 3A        		CP	"9"+1
 3623+171B 30 14        		JR	NC,m1731	; move on if not a digit
 3624+171D 23           		INC	HL
 3625+171E E5           		PUSH	HL
 3626+171F CD 3C 17     		CALL	m173c		; multiply current value by 10
 3627+1722 D6 30        		SUB	"0"
 3628+1724 26 00        		LD	H,$00
 3629+1726 6F           		LD	L,A
 3630+1727 19           		ADD	HL,DE		; add in digit
 3631+1728 38 04        		JR	C,m172e		; jump if overflow
 3632+172A EB           		EX	DE,HL
 3633+172B E1           		POP	HL
 3634+172C 18 E6        		JR	m1714		; back for more digits
 3635+172E C3 08 1B     m172e:		JP	m1b08		; error l - number too big
 3636+1731 DD 75 06     m1731:		LD	(IX+$06),L
 3637+1734 DD 74 07     		LD	(IX+$07),H	; replace updated interpretation address
 3638+1737 D5           		PUSH	DE
 3639+1738 C1           		POP	BC		; BC=value
 3640+1739 D1           		POP	DE		; restore registers
 3641+173A E1           		POP	HL
 3642+173B C9           		RET
 3643+173C
 3644+173C              ; Subroutine to multiply DE by 10
 3645+173C
 3646+173C 21 00 00     m173c:		LD	HL,$0000	; start with zero
 3647+173F 06 0A        		LD	B,$0A
 3648+1741 19           m1741:		ADD	HL,DE		; add DE 10 times
 3649+1742 38 EA        		JR	C,m172e		; jump if overflow
 3650+1744 10 FB        		DJNZ	m1741
 3651+1746 EB           		EX	DE,HL
 3652+1747 C9           		RET
 3653+1748
 3654+1748              ; Subroutine to interpret a string
 3655+1748
 3656+1748 CD 2A 16     m1748:		CALL	m162a		; check for break
 3657+174B 38 08        		JR	C,m1755		; move on if not pressed
 3658+174D CD 81 1A     		CALL	m1a81		; close down channels for this command
 3659+1750 FB           		EI			; re-enable interrupts
 3660+1751 CD DA 2A     		CALL	m2ada
 3661+1754 14           		DB	20		; error L - BREAK into program
 3662+1755 CD B1 16     m1755:		CALL	m16b1		; get next character of string
 3663+1758 DA 90 19     		JP	C,m1990		; move on if no more available
 3664+175B CD DE 19     		CALL	m19de		; search for char in parameter list
 3665+175E 06 00        		LD	B,$00
 3666+1760 CB 21        		SLA	C
 3667+1762 21 B8 19     		LD	HL,m19b8
 3668+1765 09           		ADD	HL,BC		; form pointer to routine address
 3669+1766 5E           		LD	E,(HL)
 3670+1767 23           		INC	HL
 3671+1768 56           		LD	D,(HL)
 3672+1769 EB           		EX	DE,HL		; HL=routine address
 3673+176A CD 70 17     		CALL	m1770		; call routine
 3674+176D 18 D9        		JR	m1748		; loop back for more standard params
 3675+176F C9           		RET			; exit when note length changed, or note found
 3676+1770 E9           m1770:		JP	(HL)
 3677+1771
 3678+1771              ; Parameter !: comment
 3679+1771
 3680+1771 CD B1 16     m1771:		CALL	m16b1		; get next character from string
 3681+1774 DA 8F 19     		JP	C,m198f		; move on if end of string
 3682+1777 FE 21        		CP	'!'
 3683+1779 C8           		RET	Z		; exit if end of comment
 3684+177A 18 F5        		JR	m1771		; loop back
 3685+177C
 3686+177C              ; Parameter O: octave
 3687+177C
 3688+177C CD 09 17     m177c:		CALL	m1709		; get number from string
 3689+177F 79           		LD	A,C
 3690+1780 FE 09        		CP	$09
 3691+1782 D2 00 1B     		JP	NC,m1b00	; error n if not 1-8
 3692+1785 CB 27        		SLA	A
 3693+1787 CB 27        		SLA	A
 3694+1789 47           		LD	B,A
 3695+178A CB 27        		SLA	A
 3696+178C 80           		ADD	A,B
 3697+178D DD 77 03     		LD	(IX+$03),A	; store base note number (12*octave)
 3698+1790 C9           		RET
 3699+1791
 3700+1791              ; Parameter N: number separator
 3701+1791
 3702+1791 C9           m1791:		RET
 3703+1792
 3704+1792              ; Parameter (: start of repeat section
 3705+1792
 3706+1792 DD 7E 0B     m1792:		LD	A,(IX+$0B)	; get current bracket depth
 3707+1795 3C           		INC	A		; increment
 3708+1796 FE 05        		CP	$05
 3709+1798 CA 18 1B     		JP	Z,m1b18		; if depth now 5, cause error d
 3710+179B DD 77 0B     		LD	(IX+$0B),A	; store new depth
 3711+179E 11 0C 00     		LD	DE,$000C	; offset for bracket addresses
 3712+17A1 CD 13 18     		CALL	m1813		; get pointer to next bracket address down
 3713+17A4 DD 7E 06     		LD	A,(IX+$06)
 3714+17A7 77           		LD	(HL),A
 3715+17A8 23           		INC	HL
 3716+17A9 DD 7E 07     		LD	A,(IX+$07)
 3717+17AC 77           		LD	(HL),A		; store address to repeat from
 3718+17AD C9           		RET
 3719+17AE
 3720+17AE              ; Parameter ): end of repeat section
 3721+17AE
 3722+17AE DD 7E 16     m17ae:		LD	A,(IX+$16)	; get number of )s encountered so far
 3723+17B1 11 17 00     		LD	DE,$0017	; offset for close bracket addresses
 3724+17B4 B7           		OR	A
 3725+17B5 FA DC 17     		JP	m,m17dc		; move on if none so far
 3726+17B8 CD 13 18     		CALL	m1813		; get address of current
 3727+17BB DD 7E 06     		LD	A,(IX+$06)
 3728+17BE BE           		CP	(HL)
 3729+17BF 20 1B        		JR	NZ,m17dc
 3730+17C1 23           		INC	HL
 3731+17C2 DD 7E 07     		LD	A,(IX+$07)
 3732+17C5 BE           		CP	(HL)
 3733+17C6 20 14        		JR	NZ,m17dc	; move on if not the same
 3734+17C8 DD 35 16     		DEC	(IX+$16)	; decrement close bracket depth
 3735+17CB DD 7E 16     		LD	A,(IX+$16)
 3736+17CE B7           		OR	A
 3737+17CF F0           		RET	p		; exit if still positive
 3738+17D0 DD CB 0A 46  		BIT	0,(IX+$0A)
 3739+17D4 C8           		RET	Z		; exit if not infinite repeat
 3740+17D5 DD 36 16 00  		LD	(IX+$16),$00	; set no close brackets
 3741+17D9 AF           		XOR	A
 3742+17DA 18 1B        		JR	m17f7
 3743+17DC DD 7E 16     m17dc:		LD	A,(IX+$16)
 3744+17DF 3C           		INC	A		; increment close bracket depth
 3745+17E0 FE 05        		CP	$05
 3746+17E2 CA 18 1B     		JP	Z,m1b18		; error d if depth of 5
 3747+17E5 DD 77 16     		LD	(IX+$16),A	; restore depth
 3748+17E8 CD 13 18     		CALL	m1813		; get pointer to next close bracket address
 3749+17EB DD 7E 06     		LD	A,(IX+$06)
 3750+17EE 77           		LD	(HL),A
 3751+17EF 23           		INC	HL
 3752+17F0 DD 7E 07     		LD	A,(IX+$07)
 3753+17F3 77           		LD	(HL),A		; store address to repeat to
 3754+17F4 DD 7E 0B     		LD	A,(IX+$0B)	; get current open bracket depth
 3755+17F7 11 0C 00     m17f7:		LD	DE,$000C
 3756+17FA CD 13 18     		CALL	m1813		; get pointer to address (or string start)
 3757+17FD 7E           		LD	A,(HL)
 3758+17FE DD 77 06     		LD	(IX+$06),A
 3759+1801 23           		INC	HL
 3760+1802 7E           		LD	A,(HL)
 3761+1803 DD 77 07     		LD	(IX+$07),A	; reset interpretation address to correct point
 3762+1806 DD 35 0B     		DEC	(IX+$0B)	; decrement open bracket depth
 3763+1809 F0           		RET	p
 3764+180A DD 36 0B 00  		LD	(IX+$0B),$00	; reset to zero if no open brackets
 3765+180E DD CB 0A C6  		SET	0,(IX+$0A)	; set "infinite repeat"
 3766+1812 C9           		RET
 3767+1813
 3768+1813              ; Subroutine to get HL=Ath word entry after IX+DE
 3769+1813              ; Used to find address for bracket address entries
 3770+1813
 3771+1813 DD E5        m1813:		PUSH	IX
 3772+1815 E1           		POP	HL
 3773+1816 19           		ADD	HL,DE		; add offset to string area
 3774+1817 06 00        		LD	B,$00
 3775+1819 4F           		LD	C,A
 3776+181A CB 21        		SLA	C
 3777+181C 09           		ADD	HL,BC		; add offset to Ath word
 3778+181D C9           		RET
 3779+181E
 3780+181E              ; Parameter T: tempo
 3781+181E
 3782+181E CD 09 17     m181e:		CALL	m1709		; get number from string
 3783+1821 78           		LD	A,B
 3784+1822 B7           		OR	A
 3785+1823 C2 00 1B     		JP	NZ,m1b00	; error n if >255
 3786+1826 79           		LD	A,C
 3787+1827 FE 3C        		CP	$3C
 3788+1829 DA 00 1B     		JP	C,m1b00		; error n if <60
 3789+182C FE F1        		CP	$F1
 3790+182E D2 00 1B     		JP	NC,m1b00	; error n if >240
 3791+1831 DD 7E 02     		LD	A,(IX+$02)
 3792+1834 B7           		OR	A
 3793+1835 C0           		RET	NZ		; ignore unless in first string
 3794+1836 06 00        		LD	B,$00
 3795+1838 C5           		PUSH	BC
 3796+1839 E1           		POP	HL
 3797+183A 29           		ADD	HL,HL
 3798+183B 29           		ADD	HL,HL
 3799+183C E5           		PUSH	HL
 3800+183D C1           		POP	BC		; BC=tempo*4
 3801+183E FD E5        		PUSH	IY
 3802+1840 EF           		RST	28H
 3803+1841 2B 2D        		DW	o2D2B		; stack BC on calculator stack
 3804+1843 F3           		DI
 3805+1844 FD E1        		POP	IY
 3806+1846 FD E5        		PUSH	IY
 3807+1848 FD E5        		PUSH	IY
 3808+184A E1           		POP	HL
 3809+184B 01 2B 00     		LD	BC,$002B	; offset to FP calculation routine
 3810+184E 09           		ADD	HL,BC
 3811+184F FD 21 3A 5C  		LD	IY,	$5C3A
 3812+1853 E5           		PUSH	HL		; stack FP routine address
 3813+1854 21 64 18     		LD	HL,m1864
 3814+1857 22 5A 5B     		LD	(	$5B5A),HL	; set up return address
 3815+185A 21 2A 5B     		LD	HL,	$5B2A
 3816+185D E3           		EX	(SP),HL
 3817+185E E5           		PUSH	HL
 3818+185F F5           		PUSH	AF
 3819+1860 E5           		PUSH	HL
 3820+1861 C3 10 5B     		JP		$5B10		; call FP calculator - TOS=10/(tempo*4*val)
 3821+1864 F3           m1864:		DI
 3822+1865 EF           		RST	28H
 3823+1866 A2 2D        		DW	o2DA2		; get value to BC
 3824+1868 F3           		DI
 3825+1869 FD E1        		POP	IY
 3826+186B FD 71 27     		LD	(IY+$27),C
 3827+186E FD 70 28     		LD	(IY+$28),B	; store tempo value
 3828+1871 C9           		RET
 3829+1872
 3830+1872              ; Parameter M: channel
 3831+1872
 3832+1872 CD 09 17     m1872:		CALL	m1709		; get number from string
 3833+1875 79           		LD	A,C
 3834+1876 FE 40        		CP	$40
 3835+1878 D2 00 1B     		JP	NC,m1b00	; error n if >63
 3836+187B 2F           		CPL
 3837+187C 5F           		LD	E,A
 3838+187D 16 07        		LD	D,$07
 3839+187F CD 6A 1A     		CALL	m1a6a		; output channel complement to AY register 7
 3840+1882 C9           		RET
 3841+1883
 3842+1883              ; Parameter V: volume level
 3843+1883
 3844+1883 CD 09 17     m1883:		CALL	m1709		; get number from string
 3845+1886 79           		LD	A,C
 3846+1887 FE 10        		CP	$10
 3847+1889 D2 00 1B     		JP	NC,m1b00	; error n if >15
 3848+188C DD 77 04     		LD	(IX+$04),A	; store volume level
 3849+188F DD 5E 02     		LD	E,(IX+$02)
 3850+1892 3E 08        		LD	A,$08
 3851+1894 83           		ADD	A,E
 3852+1895 57           		LD	D,A		; AY register=channel+8 (channel=0..7)
 3853+1896 59           		LD	E,C
 3854+1897 CD 6A 1A     		CALL	m1a6a		; output volume level to register
 3855+189A C9           		RET
 3856+189B
 3857+189B              ; Parameter U: volume effect in a string
 3858+189B
 3859+189B DD 5E 02     m189b:		LD	E,(IX+$02)
 3860+189E 3E 08        		LD	A,$08
 3861+18A0 83           		ADD	A,E
 3862+18A1 57           		LD	D,A		; AY register=channel+8 (channel=0..7)
 3863+18A2 1E 1F        		LD	E,$1F
 3864+18A4 DD 73 04     		LD	(IX+$04),E	; store volume effect marker
 3865+18A7 C9           		RET
 3866+18A8
 3867+18A8              ; Parameter W: volume effect
 3868+18A8
 3869+18A8 CD 09 17     m18a8:		CALL	m1709		; get number from string
 3870+18AB 79           		LD	A,C
 3871+18AC FE 08        		CP	$08
 3872+18AE D2 00 1B     		JP	NC,m1b00	; error n if >7
 3873+18B1 06 00        		LD	B,$00
 3874+18B3 21 D6 19     		LD	HL,m19d6
 3875+18B6 09           		ADD	HL,BC
 3876+18B7 7E           		LD	A,(HL)		; get envelope byte
 3877+18B8 FD 77 29     		LD	(IY+$29),A	; store it
 3878+18BB C9           		RET
 3879+18BC
 3880+18BC              ; Parameter X: volume duration
 3881+18BC
 3882+18BC CD 09 17     m18bc:		CALL	m1709		; get number from string
 3883+18BF 16 0B        		LD	D,$0B
 3884+18C1 59           		LD	E,C
 3885+18C2 CD 6A 1A     		CALL	m1a6a		; output duration to AY registers 11
 3886+18C5 14           		INC	D
 3887+18C6 58           		LD	E,B
 3888+18C7 CD 6A 1A     		CALL	m1a6a		; and 12
 3889+18CA C9           		RET
 3890+18CB
 3891+18CB              ; Parameter Y: MIDI channel
 3892+18CB
 3893+18CB CD 09 17     m18cb:		CALL	m1709		; get number from string
 3894+18CE 79           		LD	A,C
 3895+18CF 3D           		DEC	A		; decrement
 3896+18D0 FA 00 1B     		JP	m,m1b00		; error n if was 0
 3897+18D3 FE 10        		CP	$10
 3898+18D5 D2 00 1B     		JP	NC,m1b00	; error n if >15
 3899+18D8 DD 77 01     		LD	(IX+$01),A	; store channel
 3900+18DB C9           		RET
 3901+18DC
 3902+18DC              ; Parameter Z: MIDI programming code
 3903+18DC
 3904+18DC CD 09 17     m18dc:		CALL	m1709		; get number from string
 3905+18DF 79           		LD	A,C
 3906+18E0 CD 91 1D     		CALL	m1d91		; output code to MIDI
 3907+18E3 C9           		RET
 3908+18E4
 3909+18E4              ; Parameter H: stop PLAY command
 3910+18E4
 3911+18E4 FD 36 10 FF  m18e4:		LD	(IY+$10),$FF	; signal "no strings in use"
 3912+18E8 C9           		RET
 3913+18E9
 3914+18E9              ; Notes and other parameters
 3915+18E9
 3916+18E9 CD 07 1A     m18e9:		CALL	m1a07		; is char a digit? (ie note length)
 3917+18EC DA 6F 19     		JP	C,m196f		; move on if not
 3918+18EF CD 9A 19     		CALL	m199a		; get HL=pointer to note lengths for string
 3919+18F2 CD A2 19     		CALL	m19a2		; save in overhead area
 3920+18F5 AF           		XOR	A
 3921+18F6 DD 77 21     		LD	(IX+$21),A	; zero number of tied notes
 3922+18F9 CD B6 1A     		CALL	m1ab6		; decrement interpretation address
 3923+18FC CD 09 17     		CALL	m1709		; get number from string
 3924+18FF 79           		LD	A,C
 3925+1900 B7           		OR	A
 3926+1901 CA 00 1B     		JP	Z,m1b00		; error n if <1
 3927+1904 FE 0D        		CP	$0D
 3928+1906 D2 00 1B     		JP	NC,m1b00	; or >12
 3929+1909 FE 0A        		CP	$0A
 3930+190B 38 13        		JR	C,m1920		; move on unless dealing with triplets
 3931+190D CD EE 19     		CALL	m19ee		; get note length value
 3932+1910 CD 62 19     		CALL	m1962		; increment number of tied notes
 3933+1913 73           		LD	(HL),E
 3934+1914 23           		INC	HL
 3935+1915 72           		LD	(HL),D		; store note length for first note
 3936+1916 CD 62 19     m1916:		CALL	m1962		; increment number of tied notes
 3937+1919 23           		INC	HL
 3938+191A 73           		LD	(HL),E
 3939+191B 23           		INC	HL
 3940+191C 72           		LD	(HL),D		; store note length for next tied note
 3941+191D 23           		INC	HL
 3942+191E 18 06        		JR	m1926
 3943+1920 DD 71 05     m1920:		LD	(IX+$05),C	; save new note length
 3944+1923 CD EE 19     		CALL	m19ee		; get note length value
 3945+1926 CD 62 19     m1926:		CALL	m1962		; increment number of tied notes
 3946+1929 CD D1 1A     m1929:		CALL	m1ad1		; test next character
 3947+192C FE 5F        		CP	'_'
 3948+192E 20 2C        		JR	NZ,m195c	; move on unless tieing notes
 3949+1930 CD B1 16     		CALL	m16b1		; get the character
 3950+1933 CD 09 17     		CALL	m1709		; get number from string
 3951+1936 79           		LD	A,C
 3952+1937 FE 0A        		CP	$0A
 3953+1939 38 12        		JR	C,m194d		; move on if not triplet
 3954+193B E5           		PUSH	HL
 3955+193C D5           		PUSH	DE
 3956+193D CD EE 19     		CALL	m19ee		; get new note length value
 3957+1940 E1           		POP	HL
 3958+1941 19           		ADD	HL,DE
 3959+1942 4B           		LD	C,E
 3960+1943 42           		LD	B,D		; BC=old note length value+new note length val
 3961+1944 EB           		EX	DE,HL		; so does DE
 3962+1945 E1           		POP	HL		; restore address to store
 3963+1946 73           		LD	(HL),E
 3964+1947 23           		INC	HL
 3965+1948 72           		LD	(HL),D		; store value
 3966+1949 59           		LD	E,C
 3967+194A 50           		LD	D,B
 3968+194B 18 C9        		JR	m1916		; loop back
 3969+194D DD 71 05     m194d:		LD	(IX+$05),C	; store new note length
 3970+1950 E5           		PUSH	HL
 3971+1951 D5           		PUSH	DE
 3972+1952 CD EE 19     		CALL	m19ee		; get note length value
 3973+1955 E1           		POP	HL
 3974+1956 19           		ADD	HL,DE
 3975+1957 EB           		EX	DE,HL		; DE=old note length val+new note length val
 3976+1958 E1           		POP	HL
 3977+1959 C3 29 19     		JP	m1929		; loop back
 3978+195C
 3979+195C              ; Store note length value & move on
 3980+195C
 3981+195C 73           m195c:		LD	(HL),E
 3982+195D 23           		INC	HL
 3983+195E 72           		LD	(HL),D		; store note length value
 3984+195F C3 8A 19     		JP	m198a		; move on
 3985+1962
 3986+1962              ; Subroutine to increment number of tied notes for a string
 3987+1962
 3988+1962 DD 7E 21     m1962:		LD	A,(IX+$21)	; get number of tied notes
 3989+1965 3C           		INC	A		; increment
 3990+1966 FE 0B        m1966:		CP	$0B
 3991+1968 CA 28 1B     		JP	Z,m1b28		; error o - too many tied notes
 3992+196B DD 77 21     		LD	(IX+$21),A
 3993+196E C9           		RET
 3994+196F
 3995+196F              ; Notes and other parameters (continued)
 3996+196F
 3997+196F CD B6 1A     m196f:		CALL	m1ab6		; decrement string interpretation pointer
 3998+1972 DD 36 21 01  		LD	(IX+$21),$01	; set 1 tied note
 3999+1976 CD 9A 19     		CALL	m199a		; get pointer to note lengths for string
 4000+1979 CD A2 19     		CALL	m19a2		; save in overhead area
 4001+197C DD 4E 05     		LD	C,(IX+$05)	; get current note length
 4002+197F E5           		PUSH	HL
 4003+1980 CD EE 19     		CALL	m19ee		; calc note length value
 4004+1983 E1           		POP	HL
 4005+1984 73           		LD	(HL),E
 4006+1985 23           		INC	HL
 4007+1986 72           		LD	(HL),D		; store it
 4008+1987 C3 8A 19     		JP	m198a
 4009+198A E1           m198a:		POP	HL		; retrieve return address
 4010+198B 23           m198b:		INC	HL
 4011+198C 23           		INC	HL		; move on by two
 4012+198D E5           		PUSH	HL		; restack
 4013+198E C9           		RET			; return
 4014+198F
 4015+198F              ; Subroutine to set current string to "finished"
 4016+198F
 4017+198F E1           m198f:		POP	HL		; discard return address
 4018+1990 FD 7E 21     m1990:		LD	A,(IY+$21)	; get string mask bit
 4019+1993 FD B6 10     		OR	(IY+$10)
 4020+1996 FD 77 10     		LD	(IY+$10),A	; place into strings counter
 4021+1999 C9           		RET
 4022+199A
 4023+199A              ; Subroutine to set HL=pointer to note lengths for current string
 4024+199A
 4025+199A DD E5        m199a:		PUSH	IX
 4026+199C E1           		POP	HL
 4027+199D 01 22 00     		LD	BC,$0022
 4028+19A0 09           		ADD	HL,BC
 4029+19A1 C9           		RET
 4030+19A2
 4031+19A2              ; Subroutine to save note lengths pointer of string in overhead area
 4032+19A2
 4033+19A2 E5           m19a2:		PUSH	HL		; save note lengths pointer
 4034+19A3 FD E5        		PUSH	IY
 4035+19A5 E1           		POP	HL
 4036+19A6 01 11 00     		LD	BC,$0011
 4037+19A9 09           		ADD	HL,BC		; HL=overhead area+$11
 4038+19AA 06 00        		LD	B,$00
 4039+19AC DD 4E 02     		LD	C,(IX+$02)
 4040+19AF CB 21        m19af:		SLA	C
 4041+19B1 09           		ADD	HL,BC		; HL=overhead area+$11+(string*2)
 4042+19B2 D1           		POP	DE
 4043+19B3 73           		LD	(HL),E
 4044+19B4 23           		INC	HL
 4045+19B5 72           		LD	(HL),D		; store note lengths pointer
 4046+19B6 EB           		EX	DE,HL		; restore HL=note lengths pointer
 4047+19B7 C9           		RET
 4048+19B8
 4049+19B8              ; Table of routine addresses for elements of PLAY strings
 4050+19B8
 4051+19B8 E9 18        m19b8:		DW	m18e9		; note or other parameter
 4052+19BA 71 17        		DW	m1771		; Z
 4053+19BC 7C 17        		DW	m177c		; Y
 4054+19BE 91 17        		DW	m1791		; X
 4055+19C0 92 17        		DW	m1792		; W
 4056+19C2 AE 17        		DW	m17ae		; U
 4057+19C4 1E 18        		DW	m181e		; V
 4058+19C6 72 18        		DW	m1872		; M
 4059+19C8 83 18        		DW	m1883		; T
 4060+19CA 9B 18        		DW	m189b		; )
 4061+19CC A8 18        		DW	m18a8		; (
 4062+19CE BC 18        		DW	m18bc		; N
 4063+19D0 CB 18        		DW	m18cb		; O
 4064+19D2 DC 18        		DW	m18dc		; !
 4065+19D4 E4 18        		DW	m18e4		; H
 4066+19D6
 4067+19D6              ; Table of waveforms for volume effects
 4068+19D6
 4069+19D6 00 04 0B 0D  m19d6:		DB	$00,$04,$0B,$0D
 4070+19DA 08 0C 0E 0A  		DB	$08,$0C,$0E,$0A
 4071+19DE
 4072+19DE              ; Subroutine to search for string character A in parameter list
 4073+19DE              ; Z set if found
 4074+19DE
 4075+19DE 01 0F 00     m19de:		LD	BC,$000F
 4076+19E1 21 A3 16     		LD	HL,m16a3
 4077+19E4 ED B1        		CPIR
 4078+19E6 C9           		RET
 4079+19E7
 4080+19E7              ; Table of note semitone values
 4081+19E7
 4082+19E7 09 0B 00 02  m19e7:		DB	$09,$0B,$00,$02,$04,$05,$07
 4082+19EB 04 05 07
 4083+19EE
 4084+19EE              ; Subroutine to get note length value (DE) for note length C (1-12)
 4085+19EE
 4086+19EE E5           m19ee:		PUSH	HL
 4087+19EF 06 00        		LD	B,$00
 4088+19F1 21 FA 19     		LD	HL,m19fa	; start of table
 4089+19F4 09           		ADD	HL,BC
 4090+19F5 16 00        		LD	D,$00
 4091+19F7 5E           		LD	E,(HL)		; DE=note length value
 4092+19F8 E1           		POP	HL
 4093+19F9 C9           		RET
 4094+19FA
 4095+19FA              ; Table of note length values
 4096+19FA
 4097+19FA 80           m19fa:		DB	$80
 4098+19FB 06 09 0C 12  		DB	$06,$09,$0C,$12
 4099+19FF 18 24 30 48  		DB	$18,$24,$30,$48
 4100+1A03 60 04 08 10  		DB	$60,$04,$08,$10
 4101+1A07
 4102+1A07              ; Subroutine to test if A is a digit (carry reset if so)
 4103+1A07
 4104+1A07 FE 30        m1a07:		CP	"0"
 4105+1A09 D8           		RET	C
 4106+1A0A FE 3A        		CP	"9"+1
 4107+1A0C 3F           		CCF
 4108+1A0D C9           		RET
 4109+1A0E
 4110+1A0E              ; Subroutine to play note A through AY channel for current string
 4111+1A0E
 4112+1A0E 4F           m1a0e:		LD	C,A		; save semitone value
 4113+1A0F DD 7E 03     		LD	A,(IX+$03)
 4114+1A12 81           		ADD	A,C		; add in base note value
 4115+1A13 FE 80        		CP	$80
 4116+1A15 D2 20 1B     		JP	NC,m1b20	; error m if out of range
 4117+1A18 4F           		LD	C,A		; save note value
 4118+1A19 DD 7E 02     		LD	A,(IX+$02)
 4119+1A1C B7           		OR	A
 4120+1A1D 20 0E        		JR	NZ,m1a2d	; move on unless first string
 4121+1A1F 79           		LD	A,C
 4122+1A20 2F           		CPL
 4123+1A21 E6 7F        		AND	$7F
 4124+1A23 CB 3F        		SRL	A
 4125+1A25 CB 3F        m1a25:		SRL	A
 4126+1A27 16 06        		LD	D,$06
 4127+1A29 5F           		LD	E,A
 4128+1A2A CD 6A 1A     		CALL	m1a6a		; output value to AY register 6
 4129+1A2D DD 71 00     m1a2d:		LD	(IX+$00),C	; save last note value
 4130+1A30 DD 7E 02     		LD	A,(IX+$02)
 4131+1A33 FE 03        		CP	$03
 4132+1A35 D0           		RET	NC		; exit unless outputting AY channel 0-2
 4133+1A36 21 84 1C     		LD	HL,m1c84
 4134+1A39 06 00        		LD	B,$00
 4135+1A3B 79           		LD	A,C
 4136+1A3C D6 15        		SUB	$15
 4137+1A3E 30 05        		JR	NC,m1a45
 4138+1A40 11 BF 0F     		LD	DE,$0FBF	; lowest note possible
 4139+1A43 18 07        		JR	m1a4c
 4140+1A45 4F           m1a45:		LD	C,A
 4141+1A46 CB 21        		SLA	C		; form offset into semitone table
 4142+1A48 09           		ADD	HL,BC
 4143+1A49 5E           		LD	E,(HL)
 4144+1A4A 23           		INC	HL
 4145+1A4B 56           m1a4b:		LD	D,(HL)		; get DE=note value
 4146+1A4C EB           m1a4c:		EX	DE,HL
 4147+1A4D DD 56 02     		LD	D,(IX+$02)
 4148+1A50 CB 22        		SLA	D		; AY register=0,2 or 4
 4149+1A52 5D           		LD	E,L
 4150+1A53 CD 6A 1A     		CALL	m1a6a		; output low byte of note value
 4151+1A56 14           		INC	D		; AY register=1,3 or 5
 4152+1A57 5C           		LD	E,H
 4153+1A58 CD 6A 1A     		CALL	m1a6a		; output high byte of note value
 4154+1A5B DD CB 04 66  		BIT	4,(IX+$04)
 4155+1A5F C8           		RET	Z		; exit unless envelope to be used
 4156+1A60 16 0D        		LD	D,$0D
 4157+1A62 FD 7E 29     		LD	A,(IY+$29)
 4158+1A65 5F           		LD	E,A
 4159+1A66 CD 6A 1A     		CALL	m1a6a		; output waveform number to AY register 13
 4160+1A69 C9           		RET
 4161+1A6A
 4162+1A6A              ; Subroutine to output value E to sound register D
 4163+1A6A
 4164+1A6A C5           m1a6a:		PUSH	BC
 4165+1A6B 01 FD FF     		LD	BC,$FFFD
 4166+1A6E ED 51        		OUT	(C),D		; select register D
 4167+1A70 01 FD BF     		LD	BC,$BFFD
 4168+1A73 ED 59        		OUT	(C),E		; output value E
 4169+1A75 C1           		POP	BC
 4170+1A76 C9           		RET
 4171+1A77
 4172+1A77              ; Subroutine to get value of AY register A
 4173+1A77
 4174+1A77 C5           m1a77:		PUSH	BC
 4175+1A78 01 FD FF     		LD	BC,$FFFD
 4176+1A7B ED 79        		OUT	(C),A		; select register
 4177+1A7D ED 78        		IN	A,(C)		; get value
 4178+1A7F C1           		POP	BC
 4179+1A80 C9           		RET
 4180+1A81
 4181+1A81              ; Subroutine to close down AY channels associated with this PLAY command
 4182+1A81
 4183+1A81 16 07        m1a81:		LD	D,$07
 4184+1A83 1E FF        		LD	E,$FF
 4185+1A85 CD 6A 1A     		CALL	m1a6a		; output $FF to AY register 7
 4186+1A88 16 08        		LD	D,$08
 4187+1A8A 1E 00        		LD	E,$00
 4188+1A8C CD 6A 1A     		CALL	m1a6a		; output 0 to AY register 8
 4189+1A8F 14           		INC	D
 4190+1A90 CD 6A 1A     		CALL	m1a6a		; output 0 to AY register 9
 4191+1A93 14           		INC	D
 4192+1A94 CD 6A 1A     		CALL	m1a6a		; output 0 to AY register 10
 4193+1A97 CD 3B 16     		CALL	m163b		; initialise string pointer info
 4194+1A9A FD CB 22 1E  m1a9a:		RR	(IY+$22)	; test for string
 4195+1A9E 38 06        		JR	C,m1aa6		; move on if none
 4196+1AA0 CD 53 16     		CALL	m1653		; get IX=address of string parameter block
 4197+1AA3 CD 7B 1D     		CALL	m1d7b		; output terminator if MIDI channel
 4198+1AA6 FD CB 21 26  m1aa6:		SLA	(IY+$21)
 4199+1AAA 38 05        		JR	C,m1ab1		; move on when 8 strings tested for
 4200+1AAC CD 5A 16     		CALL	m165a		; increment pointer to next string block
 4201+1AAF 18 E9        		JR	m1a9a		; loop back
 4202+1AB1 FD 21 3A 5C  m1ab1:		LD	IY,	$5C3A	; reset IY to system variables
 4203+1AB5 C9           		RET			; done
 4204+1AB6
 4205+1AB6              ; Subroutine to decrement string interpretation pointer (skipping white space)
 4206+1AB6
 4207+1AB6 E5           m1ab6:		PUSH	HL
 4208+1AB7 D5           		PUSH	DE
 4209+1AB8 DD 6E 06     		LD	L,(IX+$06)
 4210+1ABB DD 66 07     		LD	H,(IX+$07)	; get current pointer
 4211+1ABE 2B           m1abe:		DEC	HL		; decrement
 4212+1ABF 7E           		LD	A,(HL)
 4213+1AC0 FE 20        		CP	$20
 4214+1AC2 28 FA        		JR	Z,m1abe
 4215+1AC4 FE 0D        		CP	$0D
 4216+1AC6 28 F6        		JR	Z,m1abe		; loop back while on white space
 4217+1AC8 DD 75 06     		LD	(IX+$06),L
 4218+1ACB DD 74 07     		LD	(IX+$07),H	; store updated pointer
 4219+1ACE D1           		POP	DE
 4220+1ACF E1           		POP	HL
 4221+1AD0 C9           		RET
 4222+1AD1
 4223+1AD1              ; Subroutine to get next character from string in A, skipping any white space
 4224+1AD1              ; Carry set on exit if end of string reached
 4225+1AD1
 4226+1AD1 E5           m1ad1:		PUSH	HL
 4227+1AD2 D5           		PUSH	DE
 4228+1AD3 C5           		PUSH	BC
 4229+1AD4 DD 6E 06     		LD	L,(IX+$06)
 4230+1AD7 DD 66 07     		LD	H,(IX+$07)	; get HL=string interpretation address
 4231+1ADA 7C           m1ada:		LD	A,H
 4232+1ADB DD BE 09     		CP	(IX+$09)	; compare against string end address
 4233+1ADE 20 09        		JR	NZ,m1ae9
 4234+1AE0 7D           		LD	A,L
 4235+1AE1 DD BE 08     		CP	(IX+$08)
 4236+1AE4 20 03        		JR	NZ,m1ae9
 4237+1AE6 37           		SCF			; set carry if end of string
 4238+1AE7 18 0A        		JR	m1af3
 4239+1AE9 7E           m1ae9:		LD	A,(HL)
 4240+1AEA FE 20        		CP	" "
 4241+1AEC 28 09        		JR	Z,m1af7		; move to skip any spaces
 4242+1AEE FE 0D        		CP	$0D
 4243+1AF0 28 05        		JR	Z,m1af7		; or CRs
 4244+1AF2 B7           		OR	A		; reset carry
 4245+1AF3 C1           m1af3:		POP	BC
 4246+1AF4 D1           		POP	DE
 4247+1AF5 E1           		POP	HL
 4248+1AF6 C9           m1af6:		RET
 4249+1AF7 23           m1af7:		INC	HL		; increment string interpretation address
 4250+1AF8 DD 75 06     		LD	(IX+$06),L
 4251+1AFB DD 74 07     		LD	(IX+$07),H
 4252+1AFE 18 DA        		JR	m1ada		; loop back
 4253+1B00
 4254+1B00              ; Error routines for PLAY
 4255+1B00
 4256+1B00 CD 81 1A     m1b00:		CALL	m1a81		; close down
 4257+1B03 FB           		EI
 4258+1B04 CD DA 2A     		CALL	m2ada
 4259+1B07 29           		DB	41		; error n - Out of range
 4260+1B08 CD 81 1A     m1b08:		CALL	m1a81		; close down
 4261+1B0B FB           		EI
 4262+1B0C CD DA 2A     		CALL	m2ada
 4263+1B0F 27           		DB	39		; error l - Number too big
 4264+1B10 CD 81 1A     m1b10:		CALL	m1a81		; close down
 4265+1B13 FB           		EI
 4266+1B14 CD DA 2A     		CALL	m2ada
 4267+1B17 26           		DB	38		; error k - Invalid note name
 4268+1B18 CD 81 1A     m1b18:		CALL	m1a81		; close down
 4269+1B1B FB           		EI
 4270+1B1C CD DA 2A     		CALL	m2ada
 4271+1B1F 1F           		DB	31		; error d - Too many brackets
 4272+1B20 CD 81 1A     m1b20:		CALL	m1a81		; close down
 4273+1B23 FB           		EI
 4274+1B24 CD DA 2A     		CALL	m2ada
 4275+1B27 28           		DB	40		; error m - Note out of range
 4276+1B28 CD 81 1A     m1b28:		CALL	m1a81		; close down
 4277+1B2B FB           		EI
 4278+1B2C CD DA 2A     		CALL	m2ada
 4279+1B2F 2A           		DB	42		; error o - Too many tied notes
 4280+1B30
 4281+1B30              ; Subroutine to output next note from each string
 4282+1B30
 4283+1B30 CD 3B 16     m1b30:		CALL	m163b		; initialise string pointer info
 4284+1B33 FD CB 22 1E  m1b33:		RR	(IY+$22)	; test for next string
 4285+1B37 38 21        		JR	C,m1b5a		; move on if not present
 4286+1B39 CD 53 16     		CALL	m1653		; get address of string parameter block to IX
 4287+1B3C CD BD 16     		CALL	m16bd		; get note from string
 4288+1B3F FE 80        		CP	$80
 4289+1B41 28 17        		JR	Z,m1b5a		; move on if rest found
 4290+1B43 CD 0E 1A     		CALL	m1a0e		; calculate semitone & play if string 0-2
 4291+1B46 DD 7E 02     		LD	A,(IX+$02)
 4292+1B49 FE 03        		CP	$03
 4293+1B4B 30 0A        		JR	NC,m1b57	; move on if strings 3-7
 4294+1B4D 16 08        		LD	D,$08
 4295+1B4F 82           		ADD	A,D
 4296+1B50 57           		LD	D,A
 4297+1B51 DD 5E 04     		LD	E,(IX+$04)
 4298+1B54 CD 6A 1A     		CALL	m1a6a		; output volume level to AY register 8+channel
 4299+1B57 CD 5C 1D     m1b57:		CALL	m1d5c		; output semitone to MIDI channels
 4300+1B5A FD CB 21 26  m1b5a:		SLA	(IY+$21)
 4301+1B5E D8           		RET	C		; exit when 8 strings done
 4302+1B5F CD 5A 16     		CALL	m165a		; get to next string parameter block
 4303+1B62 18 CF        		JR	m1b33		; loop back
 4304+1B64
 4305+1B64              ; Subroutine to pause for current notelength (DE)
 4306+1B64
 4307+1B64 E5           m1b64:		PUSH	HL
 4308+1B65 FD 6E 27     		LD	L,(IY+$27)
 4309+1B68 FD 66 28     		LD	H,(IY+$28)	; HL=tempo value
 4310+1B6B 01 64 00     		LD	BC,$0064
 4311+1B6E B7           		OR	A
 4312+1B6F ED 42        		SBC	HL,BC
 4313+1B71 E5           		PUSH	HL
 4314+1B72 C1           		POP	BC
 4315+1B73 E1           		POP	HL
 4316+1B74 0B           m1b74:		DEC	BC
 4317+1B75 78           		LD	A,B
 4318+1B76 B1           		OR	C
 4319+1B77 20 FB        		JR	NZ,m1b74	; timing delay
 4320+1B79 1B           		DEC	DE
 4321+1B7A 7A           		LD	A,D
 4322+1B7B B3           		OR	E
 4323+1B7C 20 E6        		JR	NZ,m1b64	; loop DE times
 4324+1B7E C9           		RET
 4325+1B7F
 4326+1B7F              ; Subroutine to find shortest cuurent note across all strings
 4327+1B7F
 4328+1B7F 11 FF FF     m1b7f:		LD	DE,$FFFF	; largest notelength so far (-1)
 4329+1B82 CD 36 16     		CALL	m1636		; initialise pointers to first string
 4330+1B85 FD CB 22 1E  m1b85:		RR	(IY+$22)	; test for next string
 4331+1B89 38 12        		JR	C,m1b9d		; move on if not present
 4332+1B8B D5           		PUSH	DE
 4333+1B8C 5E           		LD	E,(HL)
 4334+1B8D 23           		INC	HL
 4335+1B8E 56           		LD	D,(HL)		; get notelength pointer
 4336+1B8F EB           		EX	DE,HL
 4337+1B90 5E           		LD	E,(HL)
 4338+1B91 23           		INC	HL
 4339+1B92 56           		LD	D,(HL)		; get note length
 4340+1B93 D5           		PUSH	DE
 4341+1B94 E1           		POP	HL
 4342+1B95 C1           		POP	BC
 4343+1B96 B7           		OR	A
 4344+1B97 ED 42        		SBC	HL,BC
 4345+1B99 38 02        		JR	C,m1b9d		; move on if already found smaller
 4346+1B9B C5           		PUSH	BC
 4347+1B9C D1           		POP	DE		; keep current
 4348+1B9D FD CB 21 26  m1b9d:		SLA	(IY+$21)	; shift string bit marker
 4349+1BA1 38 05        		JR	C,m1ba8		; move on if done 8 strings
 4350+1BA3 CD 5A 16     		CALL	m165a		; increment pointer to next strings pointer
 4351+1BA6 18 DD        		JR	m1b85		; loop back
 4352+1BA8 FD 73 25     m1ba8:		LD	(IY+$25),E
 4353+1BAB FD 72 26     		LD	(IY+$26),D	; store shortest current note length
 4354+1BAE C9           		RET
 4355+1BAF
 4356+1BAF              ; Subroutine to decrement remaining note lengths for each string, changing
 4357+1BAF              ; notes if necessary
 4358+1BAF
 4359+1BAF AF           m1baf:		XOR	A
 4360+1BB0 FD 77 2A     		LD	(IY+$2A),A	; set no strings have changed notes
 4361+1BB3 CD 3B 16     		CALL	m163b		; initialise string pointers
 4362+1BB6 FD CB 22 1E  m1bb6:		RR	(IY+$22)
 4363+1BBA DA 48 1C     		JP	C,m1c48		; move on if string not present
 4364+1BBD CD 53 16     		CALL	m1653		; get address of current string parameter block
 4365+1BC0 FD E5        		PUSH	IY
 4366+1BC2 E1           		POP	HL
 4367+1BC3 01 11 00     		LD	BC,$0011
 4368+1BC6 09           		ADD	HL,BC
 4369+1BC7 06 00        		LD	B,$00
 4370+1BC9 DD 4E 02     		LD	C,(IX+$02)
 4371+1BCC CB 21        		SLA	C
 4372+1BCE 09           		ADD	HL,BC
 4373+1BCF 5E           		LD	E,(HL)
 4374+1BD0 23           		INC	HL
 4375+1BD1 56           		LD	D,(HL)
 4376+1BD2 EB           		EX	DE,HL
 4377+1BD3 E5           		PUSH	HL
 4378+1BD4 5E           		LD	E,(HL)
 4379+1BD5 23           		INC	HL
 4380+1BD6 56           		LD	D,(HL)
 4381+1BD7 EB           		EX	DE,HL		; HL=notelength for this string
 4382+1BD8 FD 5E 25     		LD	E,(IY+$25)
 4383+1BDB FD 56 26     		LD	D,(IY+$26)	; DE=length to play
 4384+1BDE B7           		OR	A
 4385+1BDF ED 52        		SBC	HL,DE
 4386+1BE1 EB           		EX	DE,HL
 4387+1BE2 E1           		POP	HL
 4388+1BE3 28 05        		JR	Z,m1bea		; move on if same length
 4389+1BE5 73           		LD	(HL),E
 4390+1BE6 23           		INC	HL
 4391+1BE7 72           		LD	(HL),D		; else store remaining length
 4392+1BE8 18 5E        		JR	m1c48		; and move on
 4393+1BEA DD 7E 02     m1bea:		LD	A,(IX+$02)
 4394+1BED FE 03        		CP	$03
 4395+1BEF 30 09        		JR	NC,m1bfa	; move on if MIDI channel
 4396+1BF1 16 08        		LD	D,$08
 4397+1BF3 82           		ADD	A,D
 4398+1BF4 57           		LD	D,A		; select AY register 8+channel
 4399+1BF5 1E 00        		LD	E,$00
 4400+1BF7 CD 6A 1A     		CALL	m1a6a		; output 0 to register
 4401+1BFA CD 7B 1D     m1bfa:		CALL	m1d7b		; output terminator if MIDI channel
 4402+1BFD DD E5        		PUSH	IX
 4403+1BFF E1           		POP	HL
 4404+1C00 01 21 00     		LD	BC,$0021
 4405+1C03 09           		ADD	HL,BC
 4406+1C04 35           		DEC	(HL)		; decrement number of tied notes
 4407+1C05 20 0D        		JR	NZ,m1c14	; move on if still some left
 4408+1C07 CD 48 17     		CALL	m1748		; interpret string for parameters
 4409+1C0A FD 7E 21     		LD	A,(IY+$21)
 4410+1C0D FD A6 10     		AND	(IY+$10)
 4411+1C10 20 36        		JR	NZ,m1c48	; move on if string no longer in use
 4412+1C12 18 17        		JR	m1c2b		; move on
 4413+1C14 FD E5        m1c14:		PUSH	IY
 4414+1C16 E1           		POP	HL
 4415+1C17 01 11 00     		LD	BC,$0011
 4416+1C1A 09           		ADD	HL,BC
 4417+1C1B 06 00        		LD	B,$00
 4418+1C1D DD 4E 02     		LD	C,(IX+$02)
 4419+1C20 CB 21        		SLA	C
 4420+1C22 09           		ADD	HL,BC
 4421+1C23 5E           		LD	E,(HL)
 4422+1C24 23           		INC	HL
 4423+1C25 56           		LD	D,(HL)
 4424+1C26 13           		INC	DE
 4425+1C27 13           		INC	DE
 4426+1C28 72           		LD	(HL),D
 4427+1C29 2B           		DEC	HL
 4428+1C2A 73           		LD	(HL),E		; store pointer to next tied note length
 4429+1C2B CD BD 16     m1c2b:		CALL	m16bd		; get note from string
 4430+1C2E 4F           		LD	C,A
 4431+1C2F FD 7E 21     		LD	A,(IY+$21)
 4432+1C32 FD A6 10     		AND	(IY+$10)
 4433+1C35 20 11        		JR	NZ,m1c48	; move on if string no longer in use
 4434+1C37 79           		LD	A,C
 4435+1C38 FE 80        		CP	$80
 4436+1C3A 28 0C        		JR	Z,m1c48		; move on if rest found
 4437+1C3C CD 0E 1A     		CALL	m1a0e		; play note through channel
 4438+1C3F FD 7E 21     		LD	A,(IY+$21)
 4439+1C42 FD B6 2A     		OR	(IY+$2A)
 4440+1C45 FD 77 2A     		LD	(IY+$2A),A	; signal "note changed for this string"
 4441+1C48 FD CB 21 26  m1c48:		SLA	(IY+$21)
 4442+1C4C 38 06        		JR	C,m1c54		; move on if no more strings
 4443+1C4E CD 5A 16     		CALL	m165a		; get to next string parameter block
 4444+1C51 C3 B6 1B     		JP	m1bb6		; loop back
 4445+1C54 11 01 00     m1c54:		LD	DE,$0001
 4446+1C57 CD 64 1B     		CALL	m1b64		; pause
 4447+1C5A CD 3B 16     		CALL	m163b		; initialise pointers to first string
 4448+1C5D FD CB 2A 1E  m1c5d:		RR	(IY+$2A)
 4449+1C61 30 17        		JR	NC,m1c7a	; move on if note didn't change
 4450+1C63 CD 53 16     		CALL	m1653		; get pointer to string parameter block
 4451+1C66 DD 7E 02     		LD	A,(IX+$02)
 4452+1C69 FE 03        		CP	$03
 4453+1C6B 30 0A        		JR	NC,m1c77	; move on if MIDI channel
 4454+1C6D 16 08        		LD	D,$08
 4455+1C6F 82           		ADD	A,D
 4456+1C70 57           		LD	D,A
 4457+1C71 DD 5E 04     		LD	E,(IX+$04)
 4458+1C74 CD 6A 1A     		CALL	m1a6a		; output volume to AY register 8+channel
 4459+1C77 CD 5C 1D     m1c77:		CALL	m1d5c		; output semitone to MIDI channel
 4460+1C7A FD CB 21 26  m1c7a:		SLA	(IY+$21)
 4461+1C7E D8           		RET	C		; exit if 8 strings done
 4462+1C7F CD 5A 16     		CALL	m165a		; move to next string parameter block
 4463+1C82 18 D9        		JR	m1c5d		; loop back
 4464+1C84
 4465+1C84              ; The semitone table of note values
 4466+1C84
 4467+1C84 BF 0F DC 0E  m1c84:		DW	$0FBF,$0EDC,$0E07,$0D3D
 4467+1C88 07 0E 3D 0D
 4468+1C8C 7F 0C CC 0B  		DW	$0C7F,$0BCC,$0B22,$0A82
 4468+1C90 22 0B 82 0A
 4469+1C94 EB 09 5D 09  		DW	$09EB,$095D,$08D6,$0857
 4469+1C98 D6 08 57 08
 4470+1C9C DF 07 6E 07  		DW	$07DF,$076E,$0703,$069F
 4470+1CA0 03 07 9F 06
 4471+1CA4 40 06 E6 05  		DW	$0640,$05E6,$0591,$0541
 4471+1CA8 91 05 41 05
 4472+1CAC F6 04 AE 04  		DW	$04F6,$04AE,$046B,$042C
 4472+1CB0 6B 04 2C 04
 4473+1CB4 F0 03 B7 03  		DW	$03F0,$03B7,o0382,o034F
 4473+1CB8 82 03 4F 03
 4474+1CBC 20 03 F3 02  		DW	$0320,$02F3,$02C8,o02A1
 4474+1CC0 C8 02 A1 02
 4475+1CC4 7B 02 57 02  		DW	$027B,$0257,$0236,$0216
 4475+1CC8 36 02 16 02
 4476+1CCC F8 01 DC 01  		DW	$01F8,$01DC,$01C1,$01A8
 4476+1CD0 C1 01 A8 01
 4477+1CD4 90 01 79 01  		DW	$0190,$0179,$0164,$0150
 4477+1CD8 64 01 50 01
 4478+1CDC 3D 01 2C 01  		DW	$013D,$012C,$011B,$010B
 4478+1CE0 1B 01 0B 01
 4479+1CE4 FC 00 EE 00  		DW	$00FC,$00EE,$00E0,$00D4
 4479+1CE8 E0 00 D4 00
 4480+1CEC C8 00 BD 00  		DW	$00C8,$00BD,$00B2,$00A8
 4480+1CF0 B2 00 A8 00
 4481+1CF4 9F 00 96 00  		DW	$009F,$0096,$008D,$0085
 4481+1CF8 8D 00 85 00
 4482+1CFC 7E 00 77 00  		DW	$007E,o0077,o0070,$006A
 4482+1D00 70 00 6A 00
 4483+1D04 64 00 5E 00  		DW	$0064,$005E,$0059,$0054
 4483+1D08 59 00 54 00
 4484+1D0C 4F 00 4B 00  		DW	$004F,$004B,$0047,$0043
 4484+1D10 47 00 43 00
 4485+1D14 3F 00 3B 00  		DW	$003F,$003B,o0038,$0035
 4485+1D18 38 00 35 00
 4486+1D1C 32 00 2F 00  		DW	$0032,$002F,$002D,$002A
 4486+1D20 2D 00 2A 00
 4487+1D24 28 00 25 00  		DW	$0028,$0025,$0023,$0021
 4487+1D28 23 00 21 00
 4488+1D2C 1F 00 1E 00  		DW	$001F,$001E,o001C,$001A
 4488+1D30 1C 00 1A 00
 4489+1D34 19 00 18 00  		DW	$0019,$0018,$0016,$0015
 4489+1D38 16 00 15 00
 4490+1D3C 14 00 13 00  		DW	$0014,$0013,$0012,$0011
 4490+1D40 12 00 11 00
 4491+1D44 10 00 0F 00  		DW	$0010,$000F,$000E,$000D
 4491+1D48 0E 00 0D 00
 4492+1D4C 0C 00 0C 00  		DW	$000C,$000C,$000B,$000B
 4492+1D50 0B 00 0B 00
 4493+1D54 0A 00 09 00  		DW	$000A,$0009,$0009,$0008
 4493+1D58 09 00 08 00
 4494+1D5C
 4495+1D5C              ; Subroutine to output a semitone if a MIDI channel
 4496+1D5C
 4497+1D5C DD 7E 01     m1d5c:		LD	A,(IX+$01)
 4498+1D5F B7           		OR	A
 4499+1D60 F8           		RET	m		; exit if not a MIDI channel
 4500+1D61 F6 90        		OR	$90
 4501+1D63 CD 91 1D     		CALL	m1d91		; output channel selector to MIDI
 4502+1D66 DD 7E 00     		LD	A,(IX+$00)
 4503+1D69 CD 91 1D     		CALL	m1d91		; output last semitone value
 4504+1D6C DD 7E 04     		LD	A,(IX+$04)
 4505+1D6F CB A7        		RES	4,A		; ignore waveform flag
 4506+1D71 CB 27        		SLA	A
 4507+1D73 CB 27        		SLA	A
 4508+1D75 CB 27        		SLA	A
 4509+1D77 CD 91 1D     		CALL	m1d91		; output volume to MIDI
 4510+1D7A C9           		RET
 4511+1D7B
 4512+1D7B              ; Subroutine to output terminator to MIDI channel
 4513+1D7B
 4514+1D7B DD 7E 01     m1d7b:		LD	A,(IX+$01)
 4515+1D7E B7           		OR	A
 4516+1D7F F8           		RET	m		; exit if not a MIDI channel
 4517+1D80 F6 80        		OR	$80
 4518+1D82 CD 91 1D     		CALL	m1d91		; output channel selector to MIDI
 4519+1D85 DD 7E 00     		LD	A,(IX+$00)
 4520+1D88 CD 91 1D     		CALL	m1d91		; output semitone to MIDI
 4521+1D8B 3E 40        		LD	A,$40
 4522+1D8D CD 91 1D     		CALL	m1d91		; output terminator to MIDI
 4523+1D90 C9           		RET
 4524+1D91
 4525+1D91              ; Subroutine to output a value (A) to the MIDI port (uses AUX)
 4526+1D91
 4527+1D91 6F           m1d91:		LD	L,A		; save value
 4528+1D92 01 FD FF     		LD	BC,$FFFD
 4529+1D95 3E 0E        		LD	A,$0E
 4530+1D97 ED 79        		OUT	(C),A		; select AY register 14 (RS232/AUX)
 4531+1D99 01 FD BF     		LD	BC,$BFFD
 4532+1D9C 3E FA        		LD	A,$FA
 4533+1D9E ED 79        		OUT	(C),A		; output data low to AUX
 4534+1DA0 1E 03        		LD	E,$03
 4535+1DA2 1D           m1da2:		DEC	E
 4536+1DA3 20 FD        		JR	NZ,m1da2	; delay loop
 4537+1DA5 00           		NOP
 4538+1DA6 00           		NOP
 4539+1DA7 00           		NOP
 4540+1DA8 00           		NOP
 4541+1DA9 7D           		LD	A,L
 4542+1DAA 16 08        		LD	D,$08		; 8 bits to output
 4543+1DAC 1F           m1dac:		RRA
 4544+1DAD 6F           		LD	L,A
 4545+1DAE D2 B7 1D     		JP	NC,m1db7
 4546+1DB1 3E FE        		LD	A,$FE
 4547+1DB3 ED 79        		OUT	(C),A		; if set, output data high to AUX
 4548+1DB5 18 06        		JR	m1dbd
 4549+1DB7 3E FA        m1db7:		LD	A,$FA
 4550+1DB9 ED 79        		OUT	(C),A		; if reset, output data low to AUX
 4551+1DBB 18 00        		JR	m1dbd
 4552+1DBD 1E 02        m1dbd:		LD	E,$02
 4553+1DBF 1D           m1dbf:		DEC	E
 4554+1DC0 20 FD        		JR	NZ,m1dbf	; delay loop
 4555+1DC2 00           		NOP
 4556+1DC3 C6 00        		ADD	A,$00
 4557+1DC5 7D           		LD	A,L
 4558+1DC6 15           		DEC	D
 4559+1DC7 20 E3        		JR	NZ,m1dac	; loop back for more bits
 4560+1DC9 00           		NOP
 4561+1DCA 00           		NOP
 4562+1DCB C6 00        		ADD	A,$00
 4563+1DCD 00           		NOP
 4564+1DCE 00           		NOP
 4565+1DCF 3E FE        		LD	A,$FE
 4566+1DD1 ED 79        		OUT	(C),A		; output data high to register
 4567+1DD3 1E 06        		LD	E,$06
 4568+1DD5 1D           m1dd5:		DEC	E
 4569+1DD6 20 FD        		JR	NZ,m1dd5	; delay loop
 4570+1DD8 C9           		RET
 4571+1DD9
 4572+1DD9              ; Unused code for a FORMAT "P";n command, used in same way as FORMAT LINE n
 4573+1DD9
 4574+1DD9 E7           m1dd9:		RST	20H
 4575+1DDA EF           		RST	28H
 4576+1DDB 82 1C        		DW	o1C82		; get a string expression
 4577+1DDD DF           		RST	18H
 4578+1DDE FE 2C        		CP	","
 4579+1DE0 C2 25 11     		JP	NZ,m1125
 4580+1DE3 E7           		RST	20H		; get next char
 4581+1DE4 EF           		RST	28H
 4582+1DE5 82 1C        		DW	o1C82		; get numeric expression
 4583+1DE7 DF           		RST	18H
 4584+1DE8 21 66 5B     		LD	HL,	$5B66
 4585+1DEB CB B6        		RES	6,(HL)
 4586+1DED FE 2C        		CP	","
 4587+1DEF 20 06        		JR	NZ,m1df7
 4588+1DF1 CB F6        		SET	6,(HL)
 4589+1DF3 E7           		RST	20H
 4590+1DF4 EF           		RST	28H
 4591+1DF5 82 1C        		DW	o1C82		; get a string expression
 4592+1DF7 CD B1 10     m1df7:		CALL	m10b1
 4593+1DFA 3E 01        		LD	A,1
 4594+1DFC EF           		RST	28H
 4595+1DFD 01 16        		DW	o1601
 4596+1DFF C3 F0 37     		JP	m37fe
 4597+1E02
 4598+1E02 EF           m1e02:		RST	28H
 4599+1E03 20 00        		DW	$0020		; get next char & continue into FORMAT LINE
 4600+1E05
 4601+1E05              ; The FORMAT LINE command
 4602+1E05
 4603+1E05 EF           m1e05:		RST	28H
 4604+1E06 82 1C        		DW	o1C82		; get numeric expression
 4605+1E08 FD CB 01 7E  		BIT	7,(IY+$01)
 4606+1E0C 28 07        		JR	Z,m1e15		; move on if syntax-checking
 4607+1E0E EF           		RST	28H
 4608+1E0F 99 1E        		DW	o1E99		; get value to BC
 4609+1E11 ED 43 5F 5B  		LD	(	$5B5F),BC	; set BAUD rate
 4610+1E15 EF           m1e15:		RST	28H
 4611+1E16 18 00        		DW	$0018		; get next char
 4612+1E18 FE 0D        		CP	$0D
 4613+1E1A 28 05        		JR	Z,m1e21		; move on if end-of-line
 4614+1E1C FE 3A        		CP	":"
 4615+1E1E C2 25 11     		JP	NZ,m1125	; error if not end-of-statement
 4616+1E21 CD B1 10     m1e21:		CALL	m10b1		; check for end-of-statement
 4617+1E24 ED 4B 5F 5B  		LD	BC,(	$5B5F)
 4618+1E28 78           		LD	A,B
 4619+1E29 B1           		OR	C
 4620+1E2A 20 04        		JR	NZ,m1e30	; move on if baud rate not zero
 4621+1E2C CD DA 2A     		CALL	m2ada
 4622+1E2F 25           		DB	$25		; else error "invalid baud rate"
 4623+1E30 21 50 1E     m1e30:		LD	HL,m1e50	; baud rate table
 4624+1E33 5E           m1e33:		LD	E,(HL)
 4625+1E34 23           		INC	HL
 4626+1E35 56           		LD	D,(HL)		; get next baud rate
 4627+1E36 23           		INC	HL
 4628+1E37 EB           		EX	DE,HL
 4629+1E38 7C           		LD	A,H
 4630+1E39 FE 25        		CP	$25
 4631+1E3B 30 0A        		JR	NC,m1e47	; move on if end of table
 4632+1E3D A7           		AND	A
 4633+1E3E ED 42        		SBC	HL,BC
 4634+1E40 30 05        		JR	NC,m1e47	; move on if >= required rate
 4635+1E42 EB           		EX	DE,HL
 4636+1E43 23           		INC	HL		; skip timing constant
 4637+1E44 23           		INC	HL
 4638+1E45 18 EC        		JR	m1e33		; loop back for next
 4639+1E47 EB           m1e47:		EX	DE,HL
 4640+1E48 5E           		LD	E,(HL)
 4641+1E49 23           		INC	HL
 4642+1E4A 56           		LD	D,(HL)		; get appropriate timing constant
 4643+1E4B ED 53 5F 5B  		LD	(	$5B5F),DE	; save in BAUD
 4644+1E4F C9           		RET
 4645+1E50
 4646+1E50              ; The baud rate table
 4647+1E50
 4648+1E50 32 00 A5 0A  m1e50:		DW	$0032,$0AA5	; 50
 4649+1E54 6E 00 D4 04  		DW	$006E,$04D4	; 110
 4650+1E58 2C 01 C3 01  		DW	$012C,$01C3	; 300
 4651+1E5C 58 02 E0 00  		DW	$0258,$00E0	; 600
 4652+1E60 B0 04 6E 00  		DW	$04B0,$006E	; 1200
 4653+1E64 60 09 36 00  		DW	$0960,$0036	; 2400
 4654+1E68 C0 12 19 00  		DW	$12C0,$0019	; 4800
 4655+1E6C 80 25 0B 00  		DW	$2580,$000B	; 9600
 4656+1E70
 4657+1E70              ; Printer input channel routine
 4658+1E70
 4659+1E70 21 66 5B     m1e70:		LD	HL,	$5B66
 4660+1E73 CB 5E        		BIT	3,(HL)
 4661+1E75 CA 85 1E     		JP	Z,m1e85		; move on if using Centronics
 4662+1E78 21 61 5B     		LD	HL,	$5B61
 4663+1E7B 7E           		LD	A,(HL)
 4664+1E7C A7           		AND	A
 4665+1E7D 28 0A        		JR	Z,m1e89		; move on if no RS232 character waiting
 4666+1E7F 36 00        		LD	(HL),$00	; reset SERFL flag
 4667+1E81 23           		INC	HL
 4668+1E82 7E           		LD	A,(HL)		; and get character
 4669+1E83 37           		SCF
 4670+1E84 C9           		RET
 4671+1E85 EF           m1e85:		RST	28H
 4672+1E86 C4 15        		DW	o15C4		; invalid I/O device error
 4673+1E88 C9           		RET
 4674+1E89 CD F9 2A     m1e89:		CALL	m2af9		; test for BREAK
 4675+1E8C
 4676+1E8C F3           m1e8c:		DI
 4677+1E8D D9           		EXX
 4678+1E8E ED 5B 5F 5B  		LD	DE,(	$5B5F)	; DE=BAUD
 4679+1E92 2A 5F 5B     		LD	HL,(	$5B5F)
 4680+1E95 CB 3C        		SRL	H
 4681+1E97 CB 1D        		RR	L		; HL=BAUD/2
 4682+1E99 B7           		OR	A
 4683+1E9A 06 FA        		LD	B,$FA		; B=timing constant
 4684+1E9C D9           		EXX
 4685+1E9D 0E FD        		LD	C,$FD
 4686+1E9F 16 FF        		LD	D,$FF
 4687+1EA1 1E BF        		LD	E,$BF
 4688+1EA3 42           		LD	B,D
 4689+1EA4 3E 0E        		LD	A,$0E
 4690+1EA6 ED 79        		OUT	(C),A		; select AY register 14
 4691+1EA8 ED 78        		IN	A,(C)		; get RS232/AUX value
 4692+1EAA F6 F0        		OR	$F0
 4693+1EAC E6 FB        		AND	$FB		; set CTS low
 4694+1EAE 43           		LD	B,E
 4695+1EAF ED 79        		OUT	(C),A		; output CTS low
 4696+1EB1 67           		LD	H,A		; save RS232/AUX value with CTS low
 4697+1EB2 42           m1eb2:		LD	B,D
 4698+1EB3 ED 78        		IN	A,(C)		; get RS232/AUX value
 4699+1EB5 E6 80        		AND	$80
 4700+1EB7 28 09        		JR	Z,m1ec2		; move on if TXD was low (ie data ready)
 4701+1EB9 D9           m1eb9:		EXX
 4702+1EBA 05           		DEC	B		; decrement timer
 4703+1EBB D9           		EXX
 4704+1EBC 20 F4        		JR	NZ,m1eb2	; loop back
 4705+1EBE AF           		XOR	A		; carry reset for no data
 4706+1EBF F5           		PUSH	AF
 4707+1EC0 18 39        		JR	m1efb		; move on if no data received
 4708+1EC2 ED 78        m1ec2:		IN	A,(C)
 4709+1EC4 E6 80        		AND	$80
 4710+1EC6 20 F1        		JR	NZ,m1eb9	; back if TXD high
 4711+1EC8 ED 78        		IN	A,(C)
 4712+1ECA E6 80        		AND	$80
 4713+1ECC 20 EB        		JR	NZ,m1eb9	; back if TXD high
 4714+1ECE D9           		EXX
 4715+1ECF 01 FD FF     		LD	BC,$FFFD
 4716+1ED2 3E 80        		LD	A,$80		; A'=char to build (carry will be set when
 4717+1ED4 08           		EX	AF,AF'		; all 8 bits have been read)
 4718+1ED5 19           m1ed5:		ADD	HL,DE
 4719+1ED6 00           		NOP
 4720+1ED7 00           		NOP
 4721+1ED8 00           		NOP
 4722+1ED9 00           		NOP
 4723+1EDA 2B           m1eda:		DEC	HL
 4724+1EDB 7C           		LD	A,H
 4725+1EDC B5           		OR	L
 4726+1EDD 20 FB        		JR	NZ,m1eda	; baud rate timing loop
 4727+1EDF ED 78        		IN	A,(C)		; get RS232/AUX data
 4728+1EE1 E6 80        		AND	$80		; mask data bit
 4729+1EE3 CA EF 1E     		JP	Z,m1eef		; move on if zero
 4730+1EE6 08           		EX	AF,AF'
 4731+1EE7 37           		SCF
 4732+1EE8 1F           		RRA			; rotate a 1 bit in
 4733+1EE9 38 0D        		JR	C,m1ef8		; move on if byte complete
 4734+1EEB 08           		EX	AF,AF'
 4735+1EEC C3 D5 1E     		JP	m1ed5		; loop back for more bits
 4736+1EEF 08           m1eef:		EX	AF,AF'
 4737+1EF0 B7           		OR	A
 4738+1EF1 1F           		RRA			; rotate a 0 bit in
 4739+1EF2 38 04        		JR	C,m1ef8		; move on if byte complete
 4740+1EF4 08           		EX	AF,AF'
 4741+1EF5 C3 D5 1E     		JP	m1ed5		; loop back for more bits
 4742+1EF8 37           m1ef8:		SCF
 4743+1EF9 F5           		PUSH	AF
 4744+1EFA D9           		EXX
 4745+1EFB 7C           m1efb:		LD	A,H
 4746+1EFC F6 04        		OR	$04
 4747+1EFE 43           		LD	B,E
 4748+1EFF ED 79        		OUT	(C),A		; set RS232 CTS high
 4749+1F01 D9           		EXX
 4750+1F02 62           		LD	H,D
 4751+1F03 6B           		LD	L,E		; HL=BAUD
 4752+1F04 01 07 00     		LD	BC,$0007
 4753+1F07 B7           		OR	A
 4754+1F08 ED 42        		SBC	HL,BC
 4755+1F0A 2B           m1f0a:		DEC	HL
 4756+1F0B 7C           		LD	A,H
 4757+1F0C B5           		OR	L
 4758+1F0D 20 FB        		JR	NZ,m1f0a	; timing loop
 4759+1F0F 01 FD FF     		LD	BC,$FFFD
 4760+1F12 19           		ADD	HL,DE
 4761+1F13 19           		ADD	HL,DE
 4762+1F14 19           		ADD	HL,DE
 4763+1F15 ED 78        m1f15:		IN	A,(C)
 4764+1F17 E6 80        		AND	$80
 4765+1F19 28 08        		JR	Z,m1f23		; move on if TXD low (2nd byte available)
 4766+1F1B 2B           		DEC	HL
 4767+1F1C 7C           		LD	A,H
 4768+1F1D B5           		OR	L
 4769+1F1E 20 F5        		JR	NZ,m1f15	; timing loop
 4770+1F20 F1           		POP	AF		; restore value
 4771+1F21 FB           		EI
 4772+1F22 C9           		RET			; exit
 4773+1F23 ED 78        m1f23:		IN	A,(C)
 4774+1F25 E6 80        		AND	$80
 4775+1F27 20 EC        		JR	NZ,m1f15	; move back if TXD high
 4776+1F29 ED 78        		IN	A,(C)
 4777+1F2B E6 80        		AND	$80
 4778+1F2D 20 E6        		JR	NZ,m1f15	; move back if TXD high
 4779+1F2F 62           		LD	H,D
 4780+1F30 6B           		LD	L,E
 4781+1F31 01 02 00     		LD	BC,$0002
 4782+1F34 CB 3C        		SRL	H
 4783+1F36 CB 1D        		RR	L
 4784+1F38 B7           		OR	A
 4785+1F39 ED 42        		SBC	HL,BC
 4786+1F3B 01 FD FF     		LD	BC,$FFFD
 4787+1F3E 3E 80        		LD	A,$80		; prepare 2nd byte in A'
 4788+1F40 08           		EX	AF,AF'
 4789+1F41 00           m1f41:		NOP
 4790+1F42 00           		NOP
 4791+1F43 00           		NOP
 4792+1F44 00           		NOP
 4793+1F45 19           		ADD	HL,DE
 4794+1F46 2B           m1f46:		DEC	HL
 4795+1F47 7C           		LD	A,H
 4796+1F48 B5           		OR	L
 4797+1F49 20 FB        		JR	NZ,m1f46	; timing loop
 4798+1F4B ED 78        		IN	A,(C)
 4799+1F4D E6 80        		AND	$80		; test bit
 4800+1F4F CA 5B 1F     		JP	Z,m1f5b		; move on if zero
 4801+1F52 08           		EX	AF,AF'
 4802+1F53 37           		SCF
 4803+1F54 1F           		RRA			; rotate a 1 bit in
 4804+1F55 38 0D        		JR	C,m1f64		; move on if byte complete
 4805+1F57 08           		EX	AF,AF'
 4806+1F58 C3 41 1F     		JP	m1f41		; back for more bits
 4807+1F5B 08           m1f5b:		EX	AF,AF'
 4808+1F5C B7           		OR	A
 4809+1F5D 1F           		RRA			; rotate a 0 bit in
 4810+1F5E 38 04        		JR	C,m1f64		; move on if byte complete
 4811+1F60 08           		EX	AF,AF'
 4812+1F61 C3 41 1F     		JP	m1f41		; back for more bits
 4813+1F64 21 61 5B     m1f64:		LD	HL,	$5B61
 4814+1F67 36 01        		LD	(HL),$01	; flag "2nd byte available"
 4815+1F69 23           		INC	HL
 4816+1F6A 77           		LD	(HL),A		; store 2nd byte
 4817+1F6B F1           		POP	AF		; restore the 1st byte
 4818+1F6C FB           		EI
 4819+1F6D C9           		RET			; done
 4820+1F6E
 4821+1F6E              ; Printer output channel routine
 4822+1F6E
 4823+1F6E E5           m1f6e:		PUSH	HL
 4824+1F6F 21 66 5B     		LD	HL,	$5B66
 4825+1F72 CB 56        		BIT	2,(HL)
 4826+1F74 E1           		POP	HL
 4827+1F75 CA 51 20     		JP	Z,m2051		; go to output if pure binary channel
 4828+1F78 F5           		PUSH	AF
 4829+1F79 3A 65 5B     		LD	A,(	$5B65)
 4830+1F7C B7           		OR	A
 4831+1F7D 28 0F        		JR	Z,m1f8e		; move on if no inline parameters expected
 4832+1F7F 3D           		DEC	A
 4833+1F80 32 65 5B     		LD	(	$5B65),A	; decrement # parameters
 4834+1F83 20 04        		JR	NZ,m1f89	; move on if more still needed
 4835+1F85 F1           		POP	AF
 4836+1F86 C3 20 20     		JP	m2020		; move on
 4837+1F89 F1           m1f89:		POP	AF
 4838+1F8A 32 0F 5C     		LD	(	$5C0E+1),A	; save first parameter & exit
 4839+1F8D C9           		RET
 4840+1F8E F1           m1f8e:		POP	AF
 4841+1F8F FE A3        		CP	$A3
 4842+1F91 38 0D        		JR	C,m1fa0		; move on unless BASIC token
 4843+1F93 2A 5A 5B     		LD	HL,(	$5B5A)
 4844+1F96 E5           		PUSH	HL		; save RETADDR
 4845+1F97 EF           		RST	28H
 4846+1F98 52 0B        		DW	o0B52		; output tokens using ROM 3
 4847+1F9A E1           		POP	HL
 4848+1F9B 22 5A 5B     		LD	(	$5B5A),HL	; restore RETADDR
 4849+1F9E 37           		SCF
 4850+1F9F C9           		RET
 4851+1FA0 21 3B 5C     m1fa0:		LD	HL,	$5C3B
 4852+1FA3 CB 86        		RES	0,(HL)		; reset "outputting space" flag
 4853+1FA5 FE 20        		CP	" "
 4854+1FA7 20 02        		JR	NZ,m1fab
 4855+1FA9 CB C6        		SET	0,(HL)		; set "outputting space" flag
 4856+1FAB FE 7F        m1fab:		CP	$7F
 4857+1FAD 38 02        		JR	C,m1fb1
 4858+1FAF 3E 3F        		LD	A,"?"		; substitute ? for graphics
 4859+1FB1 FE 20        m1fb1:		CP	" "
 4860+1FB3 38 17        		JR	C,m1fcc		; move on for control codes
 4861+1FB5 F5           		PUSH	AF
 4862+1FB6 21 63 5B     		LD	HL,	$5B63
 4863+1FB9 34           		INC	(HL)		; increment column
 4864+1FBA 3A 64 5B     		LD	A,(	$5B64)
 4865+1FBD BE           		CP	(HL)
 4866+1FBE 30 08        		JR	NC,m1fc8	; if within width, move on to print
 4867+1FC0 CD D0 1F     		CALL	m1fd0		; output CRLF
 4868+1FC3 3E 01        		LD	A,$01
 4869+1FC5 32 63 5B     		LD	(	$5B63),A		; set first column
 4870+1FC8 F1           m1fc8:		POP	AF
 4871+1FC9 C3 51 20     		JP	m2051		; output character
 4872+1FCC FE 0D        m1fcc:		CP	$0D
 4873+1FCE 20 0E        		JR	NZ,m1fde	; move on unless CR
 4874+1FD0 AF           m1fd0:		XOR	A
 4875+1FD1 32 63 5B     		LD	(	$5B63),A		; reset column counter
 4876+1FD4 3E 0D        		LD	A,$0D
 4877+1FD6 CD 51 20     		CALL	m2051		; output CRLF
 4878+1FD9 3E 0A        		LD	A,$0A
 4879+1FDB C3 51 20     		JP	m2051		; & exit
 4880+1FDE FE 06        m1fde:		CP	$06
 4881+1FE0 20 1F        		JR	NZ,m2001	; move on unless PRINT comma
 4882+1FE2 ED 4B 63 5B  		LD	BC,(	$5B63)	; B=WIDTH, C=COL
 4883+1FE6 1E 00        		LD	E,$00
 4884+1FE8 1C           m1fe8:		INC	E		; increment COL & E
 4885+1FE9 0C           		INC	C
 4886+1FEA 79           		LD	A,C
 4887+1FEB B8           		CP	B
 4888+1FEC 28 08        		JR	Z,m1ff6		; if end of line, go to do E spaces
 4889+1FEE D6 08        m1fee:		SUB	$08
 4890+1FF0 28 04        		JR	Z,m1ff6		; or if at a tab stop
 4891+1FF2 30 FA        		JR	NC,m1fee
 4892+1FF4 18 F2        		JR	m1fe8		; loop back until reach a tab stop or eol
 4893+1FF6 D5           m1ff6:		PUSH	DE
 4894+1FF7 3E 20        		LD	A," "
 4895+1FF9 CD 6E 1F     		CALL	m1f6e		; output a space
 4896+1FFC D1           		POP	DE
 4897+1FFD 1D           		DEC	E
 4898+1FFE C8           		RET	Z
 4899+1FFF 18 F5        		JR	m1ff6		; loop back for more
 4900+2001 FE 16        m2001:		CP	$16
 4901+2003 28 09        		JR	Z,m200e		; move on for AT (2 inline codes)
 4902+2005 FE 17        		CP	$17
 4903+2007 28 0E        		JR	Z,m2017
 4904+2009 FE 10        		CP	$10
 4905+200B D8           		RET	C		; exit for codes 0-15
 4906+200C 18 09        		JR	m2017		; move on for colour codes (1 inline code)
 4907+200E 32 0E 5C     m200e:		LD	(	$5C0E),A	; store control code
 4908+2011 3E 02        		LD	A,$02
 4909+2013 32 65 5B     		LD	(	$5B65),A	; & number of codes required
 4910+2016 C9           		RET
 4911+2017 32 0E 5C     m2017:		LD	(	$5C0E),A	; store control code
 4912+201A 3E 01        		LD	A,$01
 4913+201C 32 65 5B     		LD	(	$5B65),A	; & number of codes required
 4914+201F C9           		RET
 4915+2020
 4916+2020              ; Here, we deal with inline parameters
 4917+2020
 4918+2020 57           m2020:		LD	D,A		; save last parameter
 4919+2021 3A 0E 5C     		LD	A,(	$5C0E)	; get control code
 4920+2024 FE 16        		CP	$16
 4921+2026 28 08        		JR	Z,m2030		; move on for AT
 4922+2028 FE 17        		CP	$17
 4923+202A 3F           		CCF
 4924+202B C0           		RET	NZ		; ignore other codes except TAB
 4925+202C 3A 0F 5C     		LD	A,(	$5C0E+1)	; use first parameter as column
 4926+202F 57           		LD	D,A
 4927+2030 3A 64 5B     m2030:		LD	A,(	$5B64)	; get width
 4928+2033 BA           		CP	D
 4929+2034 28 02        		JR	Z,m2038
 4930+2036 30 06        		JR	NC,m203e
 4931+2038 47           m2038:		LD	B,A
 4932+2039 7A           		LD	A,D
 4933+203A 90           		SUB	B		; reduce column by width until in range
 4934+203B 57           		LD	D,A
 4935+203C 18 F2        		JR	m2030
 4936+203E 7A           m203e:		LD	A,D
 4937+203F B7           		OR	A
 4938+2040 CA D0 1F     		JP	Z,m1fd0		; for column 0, do CRLF
 4939+2043 3A 63 5B     m2043:		LD	A,(	$5B63)
 4940+2046 BA           		CP	D
 4941+2047 C8           		RET	Z		; exit if at right column
 4942+2048 D5           		PUSH	DE
 4943+2049 3E 20        		LD	A," "
 4944+204B CD 6E 1F     		CALL	m1f6e		; output a space
 4945+204E D1           		POP	DE
 4946+204F 18 F2        		JR	m2043		; loop back
 4947+2051
 4948+2051              ; Subroutine to output a character to the printer (Centronics or RS232)
 4949+2051
 4950+2051 E5           m2051:		PUSH	HL
 4951+2052 21 66 5B     		LD	HL,	$5B66
 4952+2055 CB 5E        		BIT	3,(HL)
 4953+2057 E1           		POP	HL
 4954+2058 CA A8 20     		JP	Z,m20a8		; move on if print output is centronics
 4955+205B
 4956+205B F5           m205c:		PUSH	AF		; save character
 4957+205C 0E FD        		LD	C,$FD
 4958+205E 16 FF        		LD	D,$FF
 4959+2060 1E BF        		LD	E,$BF
 4960+2062 42           		LD	B,D
 4961+2063 3E 0E        		LD	A,$0E
 4962+2065 ED 79        		OUT	(C),A		; select AY register 14
 4963+2067 CD F9 2A     m2067:		CALL	m2af9		; test for BREAK
 4964+206A ED 78        		IN	A,(C)		; read RS232/AUX
 4965+206C E6 40        		AND	$40
 4966+206E 20 F7        		JR	NZ,m2067	; loop until DTR low
 4967+2070 2A 5F 5B     		LD	HL,(	$5B5F)
 4968+2073 11 02 00     		LD	DE,$0002
 4969+2076 B7           		OR	A
 4970+2077 ED 52        		SBC	HL,DE
 4971+2079 EB           		EX	DE,HL		; DE=BAUD-2
 4972+207A F1           		POP	AF		; restore character
 4973+207B 2F           		CPL			; invert it
 4974+207C 37           		SCF			; set carry for initial bit
 4975+207D 06 0B        		LD	B,$0B		; 11 bits to output
 4976+207F F3           m207f:		DI
 4977+2080 C5           m2080:		PUSH	BC		; save registers
 4978+2081 F5           		PUSH	AF
 4979+2082 3E FE        		LD	A,$FE
 4980+2084 62           		LD	H,D		; HL=BAUD-2
 4981+2085 6B           		LD	L,E
 4982+2086 01 FD BF     		LD	BC,$BFFD
 4983+2089 D2 92 20     		JP	NC,m2092	; move on to output a one bit
 4984+208C E6 F7        		AND	$F7		; mask RS232 RXD off
 4985+208E ED 79        		OUT	(C),A		; output zero bit to RS232
 4986+2090 18 06        		JR	m2098
 4987+2092 F6 08        m2092:		OR	$08		; set RS232 RXD on
 4988+2094 ED 79        		OUT	(C),A		; output one bit to RS232
 4989+2096 18 00        		JR	m2098
 4990+2098 2B           m2098:		DEC	HL
 4991+2099 7C           		LD	A,H
 4992+209A B5           		OR	L
 4993+209B 20 FB        		JR	NZ,m2098	; timing loop for baud rate
 4994+209D 00           		NOP			; more timing values
 4995+209E 00           		NOP
 4996+209F 00           		NOP
 4997+20A0 F1           		POP	AF		; restore registers
 4998+20A1 C1           		POP	BC
 4999+20A2 B7           		OR	A		; clear carry (for stop bits)
 5000+20A3 1F           		RRA			; rotate next bit
 5001+20A4 10 DA        		DJNZ	m2080		; loop back for more
 5002+20A6 FB           		EI
 5003+20A7 C9           		RET
 5004+20A8
 5005+20A8 F5           m20a8:		PUSH	AF		; save character
 5006+20A9 CD F9 2A     m20a9:		CALL	m2af9		; test for BREAK
 5007+20AC 01 FD 0F     		LD	BC,$0FFD
 5008+20AF ED 78        		IN	A,(C)
 5009+20B1 CB 47        		BIT	0,A
 5010+20B3 20 F4        		JR	NZ,m20a9	; wait for printer ready
 5011+20B5 F1           		POP	AF
 5012+20B6 ED 79        		OUT	(C),A		; output character
 5013+20B8 F3           		DI
 5014+20B9 01 FD 1F     m20b9:		LD	BC,PBANK678
 5015+20BC 3A 67 5B     		LD	A,(	$5B67)
 5016+20BF E6 EF        		AND	$EF
 5017+20C1 ED 79        		OUT	(C),A		; output strobe
 5018+20C3 F6 10        		OR	$10
 5019+20C5 32 67 5B     		LD	(	$5B67),A
 5020+20C8 ED 79        		OUT	(C),A		; output strobe
 5021+20CA FB           		EI
 5022+20CB 37           		SCF
 5023+20CC C9           		RET
 5024+20CD 00           		NOP
 5025+20CE
 5026+20CE              ; The COPY (to printer) command routine
 5027+20CE
 5028+20CE FD CB 01 7E  m20ce:		BIT	7,(IY+$01)
 5029+20D2 C8           		RET	Z		; exit if syntax-checking
 5030+20D3 3A 67 5B     		LD	A,(	$5B67)
 5031+20D6 01 FD 1F     		LD	BC,PBANK678
 5032+20D9 CB E7        		SET	4,A
 5033+20DB F3           		DI			; disable interrupts
 5034+20DC 32 67 5B     		LD	(	$5B67),A
 5035+20DF ED 79        		OUT	(C),A		; set strobe high
 5036+20E1 FB           		EI
 5037+20E2 21 69 5B     		LD	HL,	$5B69
 5038+20E5 36 2B        		LD	(HL),$2B	; set Y location to 43 (4 bits on each row)
 5039+20E7 21 6B 21     m20e7:		LD	HL,m216b
 5040+20EA CD 51 21     		CALL	m2151		; output 120dpi line command
 5041+20ED CD 07 21     		CALL	m2107		; output raster image
 5042+20F0 21 72 21     		LD	HL,m2172
 5043+20F3 CD 51 21     		CALL	m2151		; output linefeed
 5044+20F6 21 69 5B     		LD	HL,	$5B69
 5045+20F9 AF           		XOR	A
 5046+20FA BE           		CP	(HL)
 5047+20FB 28 03        		JR	Z,m2100
 5048+20FD 35           		DEC	(HL)
 5049+20FE 18 E7        		JR	m20e7		; loop back for more lines
 5050+2100 21 74 21     m2100:		LD	HL,m2174
 5051+2103 CD 51 21     		CALL	m2151		; reset linespacing and done
 5052+2106 C9           		RET
 5053+2107
 5054+2107              ; Subroutine to output a raster line for a non-expanded copy
 5055+2107
 5056+2107 21 68 5B     m2107:		LD	HL,	$5B68
 5057+210A 36 FF        		LD	(HL),$FF	; set XLOC
 5058+210C CD 18 21     m210c:		CALL	m2118		; output a pixel's width
 5059+210F 21 68 5B     		LD	HL,	$5B68
 5060+2112 AF           		XOR	A
 5061+2113 BE           		CP	(HL)
 5062+2114 C8           		RET	Z		; exit if done line
 5063+2115 35           		DEC	(HL)
 5064+2116 18 F4        		JR	m210c		; back for next pixel width
 5065+2118
 5066+2118              ; Subroutine to output a pixel's width of a non-expanded copy
 5067+2118
 5068+2118 11 00 C0     m2118:		LD	DE,$C000	; D=pixel position mask
 5069+211B ED 4B 68 5B  		LD	BC,(	$5B68)	; C=x-position, B=y-position
 5070+211F 37           		SCF
 5071+2120 CB 10        		RL	B
 5072+2122 37           		SCF
 5073+2123 CB 10        		RL	B		; B=top row of required bits
 5074+2125 79           		LD	A,C
 5075+2126 2F           		CPL
 5076+2127 4F           		LD	C,A		; start at left of screen
 5077+2128 AF           		XOR	A		; initialise raster byte
 5078+2129 F5           		PUSH	AF
 5079+212A D5           		PUSH	DE
 5080+212B C5           		PUSH	BC
 5081+212C CD 5F 21     m212c:		CALL	m215f		; get pixel state
 5082+212F C1           		POP	BC
 5083+2130 D1           		POP	DE
 5084+2131 1E 00        		LD	E,$00
 5085+2133 28 01        		JR	Z,m2136		; set E=0 for no pixel
 5086+2135 5A           		LD	E,D		; or E=mask for pixel
 5087+2136 F1           m2136:		POP	AF
 5088+2137 B3           		OR	E		; combine pixel into raster byte
 5089+2138 F5           		PUSH	AF
 5090+2139 05           		DEC	B		; decrement Y position
 5091+213A CB 3A        		SRL	D
 5092+213C CB 3A        		SRL	D		; shift mask right twice (4 pixels per row)
 5093+213E D5           		PUSH	DE
 5094+213F C5           		PUSH	BC
 5095+2140 30 EA        		JR	NC,m212c	; loop back if more pixels to get
 5096+2142 C1           		POP	BC
 5097+2143 D1           		POP	DE
 5098+2144 F1           		POP	AF
 5099+2145 06 03        		LD	B,$03
 5100+2147 C5           m2147:		PUSH	BC
 5101+2148 F5           		PUSH	AF
 5102+2149 CD 51 20     		CALL	m2051		; output raster byte
 5103+214C F1           		POP	AF
 5104+214D C1           		POP	BC
 5105+214E 10 F7        		DJNZ	m2147		; loop back for 3 passes
 5106+2150 C9           		RET
 5107+2151
 5108+2151              ; Subroutine to output a counted string at HL to the printer
 5109+2151
 5110+2151 46           m2151:		LD	B,(HL)		; get count
 5111+2152 23           		INC	HL
 5112+2153 7E           m2153:		LD	A,(HL)		; get next char
 5113+2154 E5           		PUSH	HL
 5114+2155 C5           		PUSH	BC
 5115+2156 CD 51 20     		CALL	m2051		; output char to printer
 5116+2159 C1           		POP	BC
 5117+215A E1           		POP	HL
 5118+215B 23           		INC	HL
 5119+215C 10 F5        		DJNZ	m2153		; loop back for more
 5120+215E C9           		RET
 5121+215F
 5122+215F              ; Subroutine to check pixel at B=y,C=x
 5123+215F              ; On exit, Z is reset if pixel is ink, set if pixel is paper
 5124+215F
 5125+215F EF           m215f:		RST	28H
 5126+2160 AA 22        		DW	o22AA		; get address of pixel in HL
 5127+2162 47           		LD	B,A
 5128+2163 04           		INC	B		; B=counter to get required pixel
 5129+2164 AF           		XOR	A		; zero A
 5130+2165 37           		SCF			; set carry
 5131+2166 1F           m2166:		RRA
 5132+2167 10 FD        m2167:		DJNZ	m2166
 5133+2169 A6           		AND	(HL)		; mask against screen byte
 5134+216A C9           		RET
 5135+216B
 5136+216B              ; The line header for a non-expanded copy
 5137+216B
 5138+216B 06           m216b:		DB	$06		; 6 bytes
 5139+216C 1B 31        		DB	$1B,"1"		; select 7/72" linespacing
 5140+216E 1B 4C 00 03  		DB	$1B,"L",$00,$03	; print 768 dots in 120dpi
 5141+2172
 5142+2172              ; The line terminator for a non-expanded copy
 5143+2172
 5144+2172 01           m2172:		DB	$01		; 1 byte
 5145+2173 0A           		DB	$0A		; linefeed
 5146+2174
 5147+2174              ; The terminator for a non-expanded copy
 5148+2174
 5149+2174 02           m2174:		DB	$02		; 2 bytes
 5150+2175 1B 32        		DB	$1B,"2"		; select 1/6" linespacing
 5151+2177
 5152+2177              ; The PRINT & LPRINT commands (enter at m2177 for LPRINT, m217b for PRINT)
 5153+2177
 5154+2177 3E 03        m2177:		LD	A,$03		; use stream 3 for LPRINT
 5155+2179 18 02        		JR	m217d
 5156+217B 3E 02        m217b:		LD	A,$02		; use stream 2 for PRINT
 5157+217D EF           m217d:		RST	28H
 5158+217E 30 25        		DW	o2530		; are we syntax-checking?
 5159+2180 28 03        		JR	Z,m2185
 5160+2182 EF           		RST	28H
 5161+2183 01 16        		DW	o1601		; open channel if not
 5162+2185 EF           m2185:		RST	28H
 5163+2186 4D 0D        		DW	o0D4D		; set temporary colours
 5164+2188 EF           		RST	28H
 5165+2189 DF 1F        		DW	o1FDF		; use ROM 3 for command routine
 5166+218B CD B1 10     		CALL	m10b1		; check for end-of-statement
 5167+218E C9           		RET
 5168+218F
 5169+218F              ; The INPUT command
 5170+218F
 5171+218F EF           m218f:		RST	28H
 5172+2190 30 25        		DW	o2530
 5173+2192 28 08        		JR	Z,m219c		; move on if syntax-checking
 5174+2194 3E 01        		LD	A,$01
 5175+2196 EF           m2196:		RST	28H
 5176+2197 01 16        		DW	o1601		; open channel to stream 1
 5177+2199 EF           		RST	28H
 5178+219A 6E 0D        		DW	o0D6E		; clear lower screen
 5179+219C FD 36 02 01  m219c:		LD	(IY+$02),$01	; set DF_SZ to 1
 5180+21A0 EF           		RST	28H
 5181+21A1 C1 20        		DW	o20C1		; deal with the input items
 5182+21A3 CD B1 10     		CALL	m10b1		; check for end-of-statement
 5183+21A6 EF           		RST	28H
 5184+21A7 A0 20        		DW	$20A0		; use ROM 3 for actual routine
 5185+21A9 C9           		RET
 5186+21AA
 5187+21AA              ; The COPY command
 5188+21AA
 5189+21AA DF           m21aa:		RST	18H
 5190+21AB FE 0D        		CP	$0D
 5191+21AD CA CE 20     		JP	Z,m20ce		; go to do printer copy if end of line
 5192+21B0 FE 3A        		CP	":"
 5193+21B2 CA CE 20     		JP	Z,m20ce		; or end of statement
 5194+21B5 FE B9        		CP	$B9
 5195+21B7 CA 28 33     		JP	Z,m3328		; go to do expanded copy if COPY EXP
 5196+21BA 00 00 00...  		DS	5
 5197+21BF EF           		RST	28H
 5198+21C0 8C 1C        		DW	o1C8C		; get a string expression
 5199+21C2 EF           		RST	28H
 5200+21C3 18 00        		DW	$0018		; get character
 5201+21C5 FE CC        m21c5:		CP	$CC
 5202+21C7 28 04        		JR	Z,m21cd		; move on if found TO
 5203+21C9 CD DA 2A     		CALL	m2ada
 5204+21CC 0B           		DB	$0B		; error C - nonsense in BASIC
 5205+21CD EF           m21cd:		RST	28H
 5206+21CE 20 00        		DW	$0020		; get next char
 5207+21D0 FE AA        m21d0:		CP	$AA
 5208+21D2 CA 37 22     		JP	Z,m2237		; move on if COPY f$ TO SCREEN$
 5209+21D5 FE A3        		CP	$A3
 5210+21D7 CA 57 22     		JP	Z,m2257		; move on if COPY f$ TO SPECTRUM FORMAT
 5211+21DA FE E0        		CP	$E0
 5212+21DC CA 37 22     		JP	Z,m2237		; move on if COPY f$ TO LPRINT
 5213+21DF EF           		RST	28H
 5214+21E0 8C 1C        		DW	o1C8C		; get a string expression
 5215+21E2 CD B1 10     		CALL	m10b1		; check for end-of-statement
 5216+21E5 EF           		RST	28H
 5217+21E6 F1 2B        		DW	o2BF1		; fetch last value from calculator stack
 5218+21E8 78           		LD	A,B
 5219+21E9 B1           		OR	C		; check length of second string
 5220+21EA 20 04        		JR	NZ,m21f0
 5221+21EC CD DA 2A     		CALL	m2ada
 5222+21EF 2C           		DB	$2C		; error "Bad filename"
 5223+21F0 13           m21f0:		INC	DE
 5224+21F1 1A           		LD	A,(DE)		; check 2nd char of 2nd string
 5225+21F2 1B           		DEC	DE
 5226+21F3 FE 3A        		CP	":"
 5227+21F5 20 04        		JR	NZ,m21fb	; move on if not specifying a drive
 5228+21F7 1A           		LD	A,(DE)
 5229+21F8 E6 DF        		AND	$DF		; convert drive letter to uppercase
 5230+21FA 12           		LD	(DE),A
 5231+21FB 21 01 ED     m21fb:		LD	HL,$ED01
 5232+21FE EB           		EX	DE,HL
 5233+21FF CD 63 3F     		CALL	m3f63		; copy 2nd string to page 7
 5234+2202 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 5235+2205 3E FF        		LD	A,$FF
 5236+2207 12           		LD	(DE),A		; terminate 2nd filename with $FF
 5237+2208 13           		INC	DE		; increment pointer after 2nd filename
 5238+2209 CD 64 2B     		CALL	m2b64		; page in normal memory
 5239+220C D5           		PUSH	DE		; save pointer
 5240+220D EF           		RST	28H
 5241+220E F1 2B        		DW	o2BF1		; fetch value from calculator stack
 5242+2210 78           		LD	A,B
 5243+2211 B1           		OR	C
 5244+2212 20 04        		JR	NZ,m2218	; check length of first string
 5245+2214 CD DA 2A     		CALL	m2ada
 5246+2217 2C           		DB	$2C		; error "Bad filename"
 5247+2218 13           m2218:		INC	DE
 5248+2219 1A           		LD	A,(DE)		; check 2nd char of first string
 5249+221A 1B           		DEC	DE
 5250+221B FE 3A        		CP	":"
 5251+221D 20 04        		JR	NZ,m2223	; move on if not specifying a drive
 5252+221F 1A           		LD	A,(DE)
 5253+2220 E6 DF        		AND	$DF		; convert drive letter to uppercase
 5254+2222 12           		LD	(DE),A
 5255+2223 E1           m2223:		POP	HL		; restore address in page 7
 5256+2224 EB           		EX	DE,HL
 5257+2225 CD 63 3F     		CALL	m3f63		; copy 1st filename to page 7
 5258+2228 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 5259+222B 3E FF        		LD	A,$FF
 5260+222D 12           		LD	(DE),A		; terminate 1st filename with $FF
 5261+222E CD 64 2B     		CALL	m2b64		; page in normal memory
 5262+2231 AF           		XOR	A		; signal "copying to a file"
 5263+2232 37           		SCF
 5264+2233 CD A3 2B     		CALL	m2ba3		; do the copy
 5265+2236 C9           		RET
 5266+2237
 5267+2237              ; The COPY...TO SCREEN$/LPRINT commands
 5268+2237
 5269+2237 F5           m2237:		PUSH	AF		; save keyword
 5270+2238 EF           		RST	28H
 5271+2239 20 00        		DW	$0020		; get next char
 5272+223B CD B1 10     m223b:		CALL	m10b1		; check for end-of-statement
 5273+223E EF           		RST	28H
 5274+223F F1 2B        		DW	o2BF1		; get string
 5275+2241 21 01 ED     		LD	HL,$ED01
 5276+2244 EB           		EX	DE,HL
 5277+2245 CD 63 3F     		CALL	m3f63		; copy into page 7
 5278+2248 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 5279+224B 3E FF        		LD	A,$FF
 5280+224D 12           		LD	(DE),A		; add terminator
 5281+224E CD 64 2B     		CALL	m2b64		; page in normal memory
 5282+2251 F1           		POP	AF		; restore keyword as destination flag
 5283+2252 A7           		AND	A		; reset Z flag
 5284+2253 CD A3 2B     		CALL	m2ba3		; copy the file
 5285+2256 C9           		RET
 5286+2257
 5287+2257              ; The COPY....TO SPECTRUM FORMAT command
 5288+2257
 5289+2257 EF           m2257:		RST	28H
 5290+2258 20 00        		DW	$0020		; get next char
 5291+225A FE D0        m225a:		CP	$D0		; check for FORMAT
 5292+225C 28 04        		JR	Z,m2262
 5293+225E CD DA 2A     		CALL	m2ada
 5294+2261 0B           		DB	$0B		; nonsense in BASIC if not
 5295+2262 EF           m2262:		RST	28H
 5296+2263 20 00        		DW	$0020		; get to next char
 5297+2265 CD B1 10     m2265:		CALL	m10b1		; check for end-of-statement
 5298+2268 EF           		RST	28H
 5299+2269 F1 2B        		DW	o2BF1		; get string
 5300+226B 21 01 ED     		LD	HL,$ED01
 5301+226E EB           		EX	DE,HL
 5302+226F CD 63 3F     		CALL	m3f63		; copy into page 7
 5303+2272 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 5304+2275 3E FF        		LD	A,$FF
 5305+2277 12           		LD	(DE),A		; add terminator
 5306+2278 CD 64 2B     		CALL	m2b64		; page in normal memory
 5307+227B AF           		XOR	A
 5308+227C CD A3 2B     		CALL	m2ba3		; copy the file
 5309+227F C9           		RET
 5310+2280
 5311+2280              ; The NEW command
 5312+2280
 5313+2280 F3           m2280:		DI
 5314+2281 CD 80 3E     		CALL	m3e80
 5315+2284 B0 01        		DW	$01B0		; use routine in ROM 0
 5316+2286
 5317+2286              ; The CIRCLE command
 5318+2286
 5319+2286 DF           m2286:		RST	18H		; get current char
 5320+2287 FE 2C        		CP	","
 5321+2289 20 38        		JR	NZ,m22c3	; error C if not comma
 5322+228B E7           		RST	20H		; get next char
 5323+228C EF           		RST	28H
 5324+228D 82 1C        		DW	o1C82		; get numeric expression
 5325+228F CD B1 10     		CALL	m10b1		; check for end-of-statement
 5326+2292 EF           		RST	28H
 5327+2293 2D 23        		DW	$232D		; use ROM 3 for actual routine
 5328+2295 C9           		RET
 5329+2296
 5330+2296              ; The DRAW command
 5331+2296
 5332+2296 DF           m2296:		RST	18H		; get current char
 5333+2297 FE 2C        		CP	","
 5334+2299 28 07        		JR	Z,m22a2		; move on if comma
 5335+229B CD B1 10     		CALL	m10b1		; check for end-of-statement
 5336+229E EF           		RST	28H
 5337+229F 77 24        		DW	o2477		; use ROM 3 to draw line
 5338+22A1 C9           		RET
 5339+22A2 E7           m22a2:		RST	20H		; get next char
 5340+22A3 EF           		RST	28H
 5341+22A4 82 1C        		DW	o1C82		; get numeric expression
 5342+22A6 CD B1 10     		CALL	m10b1		; check for end of statement
 5343+22A9 EF           		RST	28H
 5344+22AA 94 23        		DW	$2394		; use ROM 3 to draw curve
 5345+22AC C9           		RET
 5346+22AD
 5347+22AD              ; The DIM command
 5348+22AD
 5349+22AD EF           m22ad:		RST	28H
 5350+22AE B2 28        		DW	o28B2		; search variables area
 5351+22B0 20 11        		JR	NZ,m22c3	; move on if error
 5352+22B2 EF           		RST	28H
 5353+22B3 30 25        		DW	o2530
 5354+22B5 20 08        		JR	NZ,m22bf	; move on if runtime
 5355+22B7 CB B1        		RES	6,C		; test string syntax as if numeric
 5356+22B9 EF           		RST	28H
 5357+22BA 96 29        		DW	o2996		; check syntax of parenthesised expression
 5358+22BC CD B1 10     		CALL	m10b1		; check for end-of-statement
 5359+22BF EF           m22bf:		RST	28H
 5360+22C0 15 2C        		DW	o2C15		; use ROM 3 for actual command
 5361+22C2 C9           		RET
 5362+22C3 CD DA 2A     m22c3:		CALL	m2ada
 5363+22C6 0B           		DB	$0B		; error C - nonsense in BASIC
 5364+22C7
 5365+22C7
 5366+22C7              ; Subroutine to clear whole display unless unnecessary
 5367+22C7
 5368+22C7 FD CB 30 46  m22c7:		BIT	0,(IY+$30)	; check FLAGS2
 5369+22CB C8           		RET	Z		; exit if not necessay
 5370+22CC EF           		RST	28H
 5371+22CD AF 0D        		DW	o0DAF		; cls
 5372+22CF C9           		RET
 5373+22D0
 5374+22D0              ; Subroutine to evaluate an expression for the calculator, & set the
 5375+22D0              ; result to be used by the next calculation
 5376+22D0
 5377+22D0 21 FE FF     m22d0:		LD	HL,$FFFE
 5378+22D3 22 45 5C     		LD	(	$5C45),HL	; set statement -2
 5379+22D6 FD CB 01 BE  		RES	7,(IY+$01)	; signal "syntax checking"
 5380+22DA CD 68 23     		CALL	m2368		; set interpreter to start of line
 5381+22DD EF           		RST	28H
 5382+22DE FB 24        		DW	o24FB		; evaluate an expression
 5383+22E0 FD CB 01 76  		BIT	6,(IY+$01)
 5384+22E4 28 2C        		JR	Z,m2312		; move on if value not numeric
 5385+22E6 DF           		RST	18H
 5386+22E7 FE 0D        		CP	$0D
 5387+22E9 20 27        		JR	NZ,m2312	; or if next character isn't end-of-line
 5388+22EB FD CB 01 FE  		SET	7,(IY+$01)	; signal "executing"
 5389+22EF CD 68 23     		CALL	m2368		; set interpreter to start of line
 5390+22F2 21 CB 25     		LD	HL,m25cb
 5391+22F5 22 6C 5B     		LD	(	$5B6C),HL	; set up error return address
 5392+22F8 EF           		RST	28H
 5393+22F9 FB 24        		DW	o24FB		; evaluate an expression
 5394+22FB FD CB 01 76  		BIT	6,(IY+$01)
 5395+22FF 28 11        		JR	Z,m2312		; move on if value not numeric
 5396+2301 11 6E 5B     		LD	DE,	$5B6E
 5397+2304 2A 65 5C     		LD	HL,(	$5C65)
 5398+2307 01 05 00     		LD	BC,$0005
 5399+230A B7           		OR	A
 5400+230B ED 42        		SBC	HL,BC
 5401+230D ED B0        		LDIR			; copy result into LASTV variable
 5402+230F C3 16 23     		JP	m2316
 5403+2312 CD DA 2A     m2312:		CALL	m2ada
 5404+2315 19           		DB	25		; error Q - parameter error
 5405+2316 3E 0D        m2316:		LD	A,$0D
 5406+2318 CD 47 23     		CALL	m2347		; do a newline
 5407+231B 01 01 00     		LD	BC,$0001
 5408+231E EF           		RST	28H
 5409+231F 30 00        		DW	$0030		; make a byte in the workspace
 5410+2321 22 5B 5C     m2321:		LD	(	$5C5B),HL	; save address of cursor
 5411+2324 E5           		PUSH	HL
 5412+2325 2A 51 5C     		LD	HL,(	$5C51)	; get address of current channel information
 5413+2328 E5           		PUSH	HL
 5414+2329 3E FF        		LD	A,$FF
 5415+232B EF           		RST	28H
 5416+232C 01 16        		DW	o1601		; open channel to stream -1
 5417+232E EF           		RST	28H
 5418+232F E3 2D        		DW	o2DE3		; print the result value
 5419+2331 E1           		POP	HL
 5420+2332 EF           		RST	28H
 5421+2333 15 16        		DW	o1615		; restore old channel
 5422+2335 D1           		POP	DE
 5423+2336 2A 5B 5C     		LD	HL,(	$5C5B)	; get new cursor address
 5424+2339 A7           		AND	A
 5425+233A ED 52        		SBC	HL,DE		; HL=# of result chars
 5426+233C 1A           m233c:		LD	A,(DE)
 5427+233D CD 47 23     		CALL	m2347		; "type" each result character
 5428+2340 13           		INC	DE
 5429+2341 2B           		DEC	HL
 5430+2342 7C           		LD	A,H
 5431+2343 B5           		OR	L
 5432+2344 20 F6        		JR	NZ,m233c	; loop back for more
 5433+2346 C9           		RET
 5434+2347
 5435+2347              ; Subroutine to "do" a key (A) using ROM 0's editing keys
 5436+2347
 5437+2347 E5           m2347:		PUSH	HL
 5438+2348 D5           		PUSH	DE
 5439+2349 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 5440+234C 21 0D EC     		LD	HL,$EC0D
 5441+234F CB 9E        		RES	3,(HL)		; ???
 5442+2351 F5           		PUSH	AF
 5443+2352 3E 02        		LD	A,$02
 5444+2354 EF           		RST	28H
 5445+2355 01 16        		DW	o1601		; open channel to stream 2
 5446+2357 F1           		POP	AF
 5447+2358 CD 80 3E     		CALL	m3e80
 5448+235B 16 07        		DW	o0716		; "do" the key
 5449+235D 21 0D EC     		LD	HL,$EC0D
 5450+2360 CB 9E        		RES	3,(HL)		; ???
 5451+2362 CD 64 2B     		CALL	m2b64		; page in normal memory
 5452+2365 D1           		POP	DE
 5453+2366 E1           		POP	HL
 5454+2367 C9           		RET
 5455+2368
 5456+2368              ; Subroutine to set interpreter to entered line, with A=first char
 5457+2368
 5458+2368 2A 59 5C     m2368:		LD	HL,(	$5C59)
 5459+236B 2B           		DEC	HL
 5460+236C 22 5D 5C     		LD	(	$5C5D),HL	; CH_ADD=E_LINE-1
 5461+236F E7           		RST	20H		; get next char
 5462+2370 C9           		RET
 5463+2371
 5464+2371              ; Subroutine to determine if line is a single LET statement (Z set if so)
 5465+2371
 5466+2371 CD 68 23     m2371:		CALL	m2368		; get first char in E_LINE
 5467+2374 FE F1        		CP	$F1
 5468+2376 C0           		RET	NZ		; exit unless LET
 5469+2377 2A 5D 5C     		LD	HL,(	$5C5D)
 5470+237A 7E           m237a:		LD	A,(HL)
 5471+237B 23           		INC	HL
 5472+237C FE 0D        		CP	$0D
 5473+237E C8           		RET	Z		; exit when end of line found (with Z set)
 5474+237F FE 3A        		CP	":"
 5475+2381 20 F7        		JR	NZ,m237a
 5476+2383 B7           		OR	A
 5477+2384 C9           		RET			; or when end of statement found (with Z reset)
 5478+2385
 5479+2385              ; Subroutine to check if character is a binary operator (Z set if so)
 5480+2385
 5481+2385 47           m2385:		LD	B,A		; save char
 5482+2386 21 97 23     		LD	HL,m2397	; list of operators
 5483+2389 7E           m2389:		LD	A,(HL)		; get next
 5484+238A 23           		INC	HL
 5485+238B B7           		OR	A
 5486+238C 28 05        		JR	Z,m2393		; if end of list, exit with Z reset
 5487+238E B8           		CP	B
 5488+238F 20 F8        		JR	NZ,m2389	; loop back if no match
 5489+2391 78           		LD	A,B		; restore char
 5490+2392 C9           		RET			; exit with Z set
 5491+2393 F6 FF        m2393:		OR	$FF		; reset Z
 5492+2395 78           		LD	A,B		; restore character
 5493+2396 C9           		RET
 5494+2397
 5495+2397              ; List of valid binary operators for numeric calculations
 5496+2397
 5497+2397 2B 2D 2A 2F  m2397:		DM	"+-*/^=><"
 5497+239B 5E 3D 3E 3C
 5498+239F C7 C8 C9     		DB	$C7,$C8,$C9	; <=,>=,<>
 5499+23A2 C5 C6        		DB	$C5,$C6		; OR,AND
 5500+23A4 00           		DB	0
 5501+23A5
 5502+23A5              ; Subroutine to check if a character is a valid function (Z set if so)
 5503+23A5
 5504+23A5 FE A5        m23a5:		CP	$A5
 5505+23A7 38 0E        		JR	C,m23b7		; move on if before RND
 5506+23A9 FE C4        		CP	$C4
 5507+23AB 30 0A        		JR	NC,m23b7	; or after NOT
 5508+23AD FE AC        		CP	$AC
 5509+23AF 28 06        		JR	Z,m23b7		; or if AT
 5510+23B1 FE AD        		CP	$AD
 5511+23B3 28 02        		JR	Z,m23b7		; or if TAB
 5512+23B5 BF           		CP	A		; set Z for valid functions
 5513+23B6 C9           		RET
 5514+23B7 FE A5        m23b7:		CP	$A5		; reset Z
 5515+23B9 C9           		RET
 5516+23BA
 5517+23BA              ; Subroutine to check if character is start of a value
 5518+23BA
 5519+23BA 47           m23ba:		LD	B,A		; save character
 5520+23BB F6 20        		OR	$20		; make lowercase
 5521+23BD FE 61        		CP	"a"
 5522+23BF 38 06        		JR	C,m23c7
 5523+23C1 FE 7B        		CP	"z"+1
 5524+23C3 30 02        		JR	NC,m23c7
 5525+23C5 BF           		CP	A		; set Z if character is a letter
 5526+23C6 C9           		RET
 5527+23C7 78           m23c7:		LD	A,B
 5528+23C8 FE 2E        		CP	'.'
 5529+23CA C8           		RET	Z		; exit with Z set if "."
 5530+23CB CD E4 23     		CALL	m23e4		; check for digits
 5531+23CE 20 11        		JR	NZ,m23e1	; if not, junk character & exit
 5532+23D0 E7           m23d0:		RST	20H		; get next char
 5533+23D1 CD E4 23     		CALL	m23e4
 5534+23D4 28 FA        		JR	Z,m23d0		; loop back while still digits
 5535+23D6 FE 2E        		CP	'.'
 5536+23D8 C8           		RET	Z		; exit with Z set if "."
 5537+23D9 FE 45        		CP	"E"
 5538+23DB C8           		RET	Z		; or "E"
 5539+23DC FE 65        		CP	"e"
 5540+23DE C8           		RET	Z		; or "e"
 5541+23DF 18 A4        		JR	m2385		; else check for a binary operator
 5542+23E1 F6 FF        m23e1:		OR	$FF		; junk character & reset Z
 5543+23E3 C9           		RET
 5544+23E4
 5545+23E4              ; Subroutine to check if A is a digit (Z set if so)
 5546+23E4
 5547+23E4 FE 30        m23e4:		CP	"0"
 5548+23E6 38 06        		JR	C,m23ee
 5549+23E8 FE 3A        		CP	"9"+1
 5550+23EA 30 02        		JR	NC,m23ee
 5551+23EC BF           		CP	A		; set Z if char is a digit
 5552+23ED C9           		RET
 5553+23EE FE 30        m23ee:		CP	"0"		; reset Z otherwise
 5554+23F0 C9           		RET
 5555+23F1
 5556+23F1              ; The PLAY command
 5557+23F1
 5558+23F1 06 00        m23f1:		LD	B,$00		; string counter
 5559+23F3 DF           		RST	18H		; get char
 5560+23F4 C5           m23f4:		PUSH	BC
 5561+23F5 EF           		RST	28H
 5562+23F6 8C 1C        		DW	o1C8C		; get a string
 5563+23F8 C1           		POP	BC
 5564+23F9 04           		INC	B		; increment counter
 5565+23FA FE 2C        		CP	","
 5566+23FC 20 03        		JR	NZ,m2401	; move on if no more strings
 5567+23FE E7           		RST	20H		; get next char
 5568+23FF 18 F3        		JR	m23f4		; loop back
 5569+2401 78           m2401:		LD	A,B
 5570+2402 FE 09        		CP	$09
 5571+2404 38 04        		JR	C,m240a		; up to 9 strings allowed
 5572+2406 CD DA 2A     		CALL	m2ada
 5573+2409 2B           		DB	$2B		; error "Too many tied notes"
 5574+240A CD B1 10     m240a:		CALL	m10b1		; check for end-of-statement
 5575+240D C3 71 15     		JP	m1571		; go to execute command
 5576+2410
 5577+2410              ; Subroutine called from ROM 0 to initialise DOS & check the status
 5578+2410              ; of drives on the system, displaying information to the user.
 5579+2410
 5580+2410              ; aca inicializa +3dos
 5581+2410 CD 89 2B     m2410:		CALL	m2b89		; page in DOS workspace (page 7)
 5582+2413 CD B6 32     		CALL	m32b6
 5583+2416 21 66 5B     		LD	HL,	$5B66
 5584+2419 CB 7E        		BIT	7,(HL)
 5585+241B 20 0A        		JR	NZ,m2427	; move on if DOS already initialised
 5586+241D CB FE        		SET	7,(HL)		; signal "DOS initialised"
 5587+241F CD 00 3F     		CALL	m3f00
 5588+2422 A3 00        		DW	$00A3
 5589+2424 32 9D DF     		LD	($DF9D),A
 5590+2427 CD 00 3F     m2427:		CALL	m3f00
 5591+242A 00 01        		DW	$0100
 5592+242C CD EE 32     		CALL	m32ee
 5593+242F
 5594+242F              		IF 1
 5595+242F
 5596+242F 3E 10        			LD	A,16		; colores linea 2 de la barra de
 5597+2431 D7           			RST	10H		; estado, no imprimo ningún msg
 5598+2432 3E 07        			LD	A,%00000111	; tipo "physical drives", no
 5599+2434 D7           			RST	10H		; tiene sentido para mi por que
 5600+2435              						; es obvio lo que significan
 5601+2435              						; las letras
 5602+2435
 5603+2435              		ELSE
 5604+2435 ~
 5605+2435 ~            			LD	HL,m368c
 5606+2435 ~            			CALL	m24b5
 5607+2435 ~
 5608+2435              		ENDIF
 5609+2435
 5610+2435 3E FF        m242a:		LD	A,$FF
 5611+2437 21 02 00     		LD	HL,$0002	; standard ALERT routine in ROM 2
 5612+243A CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 5613+243D CD 00 3F     		CALL	m3f00
 5614+2440 4E 01        		DW	$014E
 5615+2442 CD EE 32     		CALL	m32ee		; restore TSTACK
 5616+2445 21 66 5B     		LD	HL,	$5B66
 5617+2448 CB A6        		RES	4,(HL)		; signal "disk interface not present"
 5618+244A
 5619+244A CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 5620+244D CD 00 3F     		CALL	m3f00
 5621+2450 57 01        		DW	$0157
 5622+2452 CD EE 32     		CALL	m32ee		; restore TSTACK
 5623+2455 3E 30        		LD	A,$30
 5624+2457 30 2F        		JR	NC,m2488
 5625+2459 21 66 5B     		LD	HL,	$5B66
 5626+245C CB E6        		SET	4,(HL)		; signal "disk interface present"
 5627+245E CB AE        		RES	5,(HL)		; signal "no drive B:"
 5628+2460 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 5629+2463 CD 00 3F     		CALL	m3f00
 5630+2466 7B 01        		DW	$017B
 5631+2468 CD EE 32     		CALL	m32ee		; restore TSTACK
 5632+246B 38 14        		JR	C,m24a3		; move on if drive B exists
 5633+246D 0E 00        		LD	C,$00
 5634+246F 21 05 00     		LD	HL,5
 5635+2472 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 5636+2475 CD 00 3F     		CALL	m3f00
 5637+2478 54 01        		DW	$0154	; map drive B: to unit 0
 5638+247A CD EE 32     		CALL	m32ee		; restore TSTACK
 5639+247D 3E 31        		LD	A,$31
 5640+247F 18 07        		JR	m2488
 5641+2481
 5642+2481 21 66 5B     m24a3:		LD	HL,	$5B66
 5643+2484 CB EE        		SET	5,(HL)		; signal "drive B: present"
 5644+2486
 5645+2486 3E 32        		LD	A,$32
 5646+2488 D7           m2488:		RST	10H
 5647+2489 21 90 36     		LD	HL,m369e
 5648+248C CD C0 24     		CALL	m24b5
 5649+248F 3A 9D DF     		LD	A,($DF9D)
 5650+2492 C6 30        		ADD	A,$30
 5651+2494 D7           		RST	10H
 5652+2495 21 9A 36     		LD	HL,m36a8
 5653+2498 CD C0 24     		CALL	m24b5
 5654+249B 21 A0 E2     		LD	HL,$E2A0
 5655+249E 0E 41        		LD	C,$41
 5656+24A0 06 10        		LD	B,$10
 5657+24A2 7E           m24a2:		LD	A,(HL)
 5658+24A3 23           		INC	HL
 5659+24A4 B6           		OR	(HL)
 5660+24A5 23           		INC	HL
 5661+24A6 28 11        		JR	Z,m24b9
 5662+24A8 3A 79 5B     		LD	A,(	$5B79)
 5663+24AB B9           		CP	C
 5664+24AC 1E 00        		LD	E,0
 5665+24AE 20 02        		JR	NZ,m24b2
 5666+24B0 1E 01        		LD	E,1
 5667+24B2
 5668+24B2              m24b2:
 5669+24B2              	IF 1
 5670+24B2 3E 14        		LD	A,$14		; prefiero video inverso para
 5671+24B4              					; mostrar la letra de la unidad
 5672+24B4              					; por defecto por que en un +3
 5673+24B4              					; real se ve mejor por composite
 5674+24B4              	ELSE
 5675+24B4 ~            		LD	A,$13		; video bright
 5676+24B4              	ENDIF
 5677+24B4
 5678+24B4 D7           		RST	10H
 5679+24B5
 5680+24B5 7B           		LD	A,E
 5681+24B6 D7           		RST	10H
 5682+24B7 79           		LD	A,C
 5683+24B8 D7           		RST	10H
 5684+24B9
 5685+24B9 0C           m24b9:		INC	C
 5686+24BA 10 E6        		DJNZ	m24a2
 5687+24BC
 5688+24BC              	IF 1
 5689+24BC CD 7E 36     		CALL	rest_ink
 5690+24BF              	ELSE
 5691+24BF ~            		CALL	m2b64		; page in normal memory
 5692+24BF              	ENDIF
 5693+24BF
 5694+24BF C9           		RET
 5695+24C0
 5696+24C0              ; Subroutine to print a zero-terminated string
 5697+24C0
 5698+24C0 7E           m24b5:		LD	A,(HL)		; get next char
 5699+24C1 B7           		OR	A
 5700+24C2 C8           		RET	Z		; exit if zero
 5701+24C3 D7           		RST	10H
 5702+24C4 23           		INC	HL
 5703+24C5 18 F9        		JR	m24b5		; back for more
 5704+24C7
 5705+24C7              ; Drives present messages
 5706+24C7
 5707+24C7 FE B5        n24c7:		CP	$B5
 5708+24C9 20 01        		JR	NZ,m24cc
 5709+24CB E7           		RST	20H
 5710+24CC CD B1 10     m24cc:		CALL	m10b1
 5711+24CF C3 96 0A     		JP	m0a96
 5712+24D2 00 00 00...  		DS	30
 5713+24F0
 5714+24F0              ; Subroutine used to execute a command line or evaluate an expression
 5715+24F0
 5716+24F0 FD 36 00 FF  m24f0:		LD	(IY+$00),$FF	; clear error
 5717+24F4 FD 36 31 02  		LD	(IY+$31),$02	; set lower screen to 2 lines
 5718+24F8 21 3A 5B     		LD	HL,	$5B3A
 5719+24FB E5           		PUSH	HL
 5720+24FC ED 73 3D 5C  		LD	(	$5C3D),SP	; set up error stack
 5721+2500 21 60 25     		LD	HL,m2560
 5722+2503 22 6C 5B     		LD	(	$5B6C),HL	; set error return address
 5723+2506 CD 68 23     		CALL	m2368		; set interpretation address & get first char
 5724+2509 CD A5 23     		CALL	m23a5		; test for function
 5725+250C CA D0 22     m250c:		JP	Z,m22d0		; if so, evaluate the expression
 5726+250F FE 28        		CP	"("
 5727+2511 CA D0 22     		JP	Z,m22d0		; or if bracketed expression
 5728+2514 FE 2D        		CP	"-"
 5729+2516 CA D0 22     		JP	Z,m22d0		; or a unary operator (+ or -)
 5730+2519 FE 2B        		CP	"+"
 5731+251B CA D0 22     		JP	Z,m22d0
 5732+251E CD BA 23     		CALL	m23ba		; check for start of a value (var or number)
 5733+2521 CA D0 22     		JP	Z,m22d0		; if so, evaluate the expression
 5734+2524 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 5735+2527 3A 0E EC     		LD	A,(	$EC0E		)	; get current process
 5736+252A CD 64 2B     		CALL	m2b64		; page in normal memory
 5737+252D FE 04        		CP	$04		; is it the calculator?
 5738+252F C2 BF 0F     m252f:		JP	NZ,m0fbf	; if not, execute it
 5739+2532 CD 71 23     		CALL	m2371		; is line a single LET statement?
 5740+2535 CA BF 0F     		JP	Z,m0fbf		; if so, execute it
 5741+2538 E1           		POP	HL		; unstack ONERR address
 5742+2539 C9           		RET			; exit
 5743+253A
 5744+253A              ; The +3-specific error-handling routine
 5745+253A              ; ONERR jumps here
 5746+253A
 5747+253A CD 89 2B     m253a:		CALL	m2b89		; page in DOS workspace
 5748+253D 06 00        		LD	B,$00
 5749+253F CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 5750+2542 CD 00 3F     		CALL	m3f00
 5751+2545 09 01        		DW	$0109	; close file 0
 5752+2547 CD EE 32     		CALL	m32ee		; restore TSTACK
 5753+254A 38 0D        		JR	C,m2559		; move on if no error
 5754+254C 06 00        		LD	B,$00
 5755+254E CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 5756+2551 CD 00 3F     		CALL	m3f00
 5757+2554 0C 01        		DW	$010C	; abandon file 0
 5758+2556 CD EE 32     		CALL	m32ee		; restore TSTACK
 5759+2559 CD 64 2B     m2559:		CALL	m2b64		; page back normal memory
 5760+255C 2A 6C 5B     		LD	HL,(	$5B6C)
 5761+255F E9           		JP	(HL)		; return to syntax return address
 5762+2560
 5763+2560              ; This is one of the syntax return addresses, used when entering a line
 5764+2560              ; as a direct command
 5765+2560
 5766+2560 FD CB 00 7E  m2560:		BIT	7,(IY+$00)
 5767+2564 20 01        		JR	NZ,m2567
 5768+2566 C9           		RET			; exit if error in line
 5769+2567 2A 59 5C     m2567:		LD	HL,(	$5C59)
 5770+256A 22 5D 5C     		LD	(	$5C5D),HL	; reset CH_ADD to editing line
 5771+256D EF           		RST	28H
 5772+256E FB 19        		DW	o19FB		; get line number of editing line
 5773+2570 78           		LD	A,B
 5774+2571 B1           		OR	C
 5775+2572 C2 8E 26     		JP	NZ,m268e	; move on if it exists, to add to program
 5776+2575 DF           		RST	18H		; get character
 5777+2576 FE 0D        		CP	$0D
 5778+2578 C8           		RET	Z		; exit if empty line
 5779+2579 CD C7 22     		CALL	m22c7		; clear display if necessary
 5780+257C FD CB 02 76  		BIT	6,(IY+$02)
 5781+2580 20 03        		JR	NZ,m2585
 5782+2582 EF           		RST	28H
 5783+2583 6E 0D        		DW	o0D6E		; clear lower screen if necessary
 5784+2585 FD CB 02 B6  m2585:		RES	6,(IY+$02)	; signal "lower screen clear"
 5785+2589 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 5786+258C 21 0D EC     		LD	HL,$EC0D
 5787+258F CB 76        		BIT	6,(HL)		; ???
 5788+2591 20 0B        		JR	NZ,m259e
 5789+2593 23           		INC	HL
 5790+2594 7E           		LD	A,(HL)		; ???
 5791+2595 FE 00        		CP	$00
 5792+2597 20 05        		JR	NZ,m259e
 5793+2599 CD 80 3E     		CALL	m3e80
 5794+259C 8E 1A        		DW	l1a8e
 5795+259E CD 64 2B     m259e:		CALL	m2b64		; page in normal memory
 5796+25A1 21 3C 5C     		LD	HL,	$5C3C
 5797+25A4 CB 9E        		RES	3,(HL)		; signal "mode hasn't changed"
 5798+25A6 3E 19        		LD	A,$19
 5799+25A8 FD 96 4F     		SUB	(IY+$4F)
 5800+25AB 32 8C 5C     		LD	(	$5C8C),A	; set appropriate scroll count
 5801+25AE FD CB 01 FE  		SET	7,(IY+$01)	; signal "execution"
 5802+25B2 FD 36 0A 01  		LD	(IY+$0A),$01	; jump to statement 1
 5803+25B6 21 00 3E     		LD	HL,n3e00
 5804+25B9 E5           		PUSH	HL		; stack GOSUB stack end marker
 5805+25BA 21 3A 5B     		LD	HL,	$5B3A
 5806+25BD E5           		PUSH	HL		; stack error address
 5807+25BE ED 73 3D 5C  		LD	(	$5C3D),SP	; reset ERR_SP
 5808+25C2 21 CB 25     		LD	HL,m25cb
 5809+25C5 22 6C 5B     		LD	(	$5B6C),HL	; store execution error handler address
 5810+25C8 C3 48 10     		JP	m1048		; execute immediate command
 5811+25CB
 5812+25CB              ; This is one of the syntax return addresses, used during execution
 5813+25CB
 5814+25CB ED 7B B2 5C  m25cb:		LD	SP,(	$5CB2)
 5815+25CF 33           		INC	SP		; clear return stack
 5816+25D0 21 FF 5B     		LD	HL,	$5BFF
 5817+25D3 22 6A 5B     		LD	(	$5B6A),HL	; set OLDSP to temporary stack area
 5818+25D6 00           		NOP
 5819+25D7 FD CB 01 AE  		RES	5,(IY+$01)	; signal no key available
 5820+25DB 3A 3A 5C     		LD	A,(	$5C3A)
 5821+25DE 3C           		INC	A		; A=error code
 5822+25DF F5           m25df:		PUSH	AF		; save error code
 5823+25E0 21 00 00     		LD	HL,$0000
 5824+25E3 FD 74 37     		LD	(IY+$37),H	; clear FLAGX
 5825+25E6 FD 74 26     		LD	(IY+$26),H	; clear high byte of X_PTR
 5826+25E9 22 0B 5C     		LD	(	$5C0B),HL	; clear DEFADD
 5827+25EC 21 01 00     		LD	HL,$0001
 5828+25EF 22 16 5C     		LD	(	$5C10+6),HL	; reset stream 0
 5829+25F2 EF           		RST	28H
 5830+25F3 B0 16        		DW	o16B0		; clear editing areas and calculator etc
 5831+25F5 FD CB 37 AE  		RES	5,(IY+$37)	; ???
 5832+25F9 EF           		RST	28H
 5833+25FA 6E 0D        		DW	o0D6E		; clear lower screen
 5834+25FC FD CB 02 EE  		SET	5,(IY+$02)	; signal "clear lower screen after keystroke"
 5835+2600 F1           		POP	AF		; get back error code
 5836+2601 47           		LD	B,A		; save it
 5837+2602 FE 0A        		CP	$0A
 5838+2604 38 0E        		JR	C,m2614		; move on if 0-9
 5839+2606 FE 1D        		CP	$1D
 5840+2608 38 08        		JR	C,m2612		; move on if A-R
 5841+260A FE 2C        		CP	$2C
 5842+260C 30 0C        		JR	NC,m261a	; move on if +3DOS error
 5843+260E C6 14        		ADD	A,$14		; else convert for errors a-o
 5844+2610 18 02        		JR	m2614
 5845+2612 C6 07        m2612:		ADD	A,$07		; convert to code to letter
 5846+2614 EF           m2614:		RST	28H
 5847+2615 EF 15        		DW	o15EF		; output error character (0-9 or A-R or a-o)
 5848+2617 3E 20        		LD	A," "
 5849+2619 D7           		RST	10H		; output space
 5850+261A 78           m261a:		LD	A,B		; get back error code
 5851+261B FE 1D        		CP	$1D
 5852+261D 38 12        		JR	C,m2631		; move on if old 48K Spectrum error
 5853+261F D6 1D        		SUB	$1D
 5854+2621 06 00        		LD	B,$00
 5855+2623 4F           		LD	C,A
 5856+2624 21 05 27     		LD	HL,m2705
 5857+2627 09           		ADD	HL,BC
 5858+2628 09           		ADD	HL,BC		; HL points to address of error message
 5859+2629 5E           		LD	E,(HL)
 5860+262A 23           		INC	HL
 5861+262B 56           		LD	D,(HL)		; DE=error message address
 5862+262C CD CE 2A     		CALL	m2ace		; output it
 5863+262F 18 06        		JR	m2637
 5864+2631 11 91 13     m2631:		LD	DE,o1391	; base address of ROM 3 message table
 5865+2634 EF           		RST	28H
 5866+2635 0A 0C        		DW	o0C0A		; output 48K Spectrum error message
 5867+2637 AF           m2637:		XOR	A
 5868+2638 11 36 15     		LD	DE,o1536
 5869+263B EF           		RST	28H
 5870+263C 0A 0C        		DW	o0C0A		; output "comma" message
 5871+263E ED 4B 45 5C  		LD	BC,(	$5C45)	; get error line number
 5872+2642 EF           		RST	28H
 5873+2643 1B 1A        		DW	o1A1B		; output it
 5874+2645 3E 3A        		LD	A,":"
 5875+2647 D7           		RST	10H		; output ":"
 5876+2648 FD 4E 0D     		LD	C,(IY+$0D)	; get error statement number
 5877+264B 06 00        		LD	B,$00
 5878+264D EF           		RST	28H
 5879+264E 1B 1A        		DW	o1A1B		; output it
 5880+2650 EF           		RST	28H
 5881+2651 97 10        		DW	o1097		; clear editing area/workspace
 5882+2653 3A 3A 5C     		LD	A,(	$5C3A)
 5883+2656 3C           		INC	A
 5884+2657 28 1B        		JR	Z,m2674		; move on if error "OK"
 5885+2659 FE 09        		CP	$09
 5886+265B 28 04        		JR	Z,m2661		; move on if error "9 - STOP statement"
 5887+265D FE 15        		CP	$15
 5888+265F 20 03        		JR	NZ,m2664	; move on if not "L - BREAK into program"
 5889+2661 FD 34 0D     m2661:		INC	(IY+$0D)	; increment statement for CONTINUE
 5890+2664 01 03 00     m2664:		LD	BC,$0003
 5891+2667 11 70 5C     		LD	DE,	$5C70
 5892+266A 21 44 5C     		LD	HL,	$5C44
 5893+266D CB 7E        		BIT	7,(HL)
 5894+266F 28 01        		JR	Z,m2672
 5895+2671 09           		ADD	HL,BC
 5896+2672 ED B8        m2672:		LDDR
 5897+2674 FD 36 0A FF  m2674:		LD	(IY+$0A),$FF	; clear NSPPC
 5898+2678 FD CB 01 9E  		RES	3,(IY+$01)	; signal "K" mode
 5899+267C 21 66 5B     		LD	HL,	$5B66
 5900+267F CB 86        		RES	0,(HL)		; ???
 5901+2681 CD 80 3E     		CALL	m3e80
 5902+2684 7B 06        		DW	l067b
 5903+2686 3E 10        m2686:		LD	A,$10		; error G - no room for line
 5904+2688 01 00 00     		LD	BC,$0000
 5905+268B C3 DF 25     		JP	m25df		; loop back
 5906+268E
 5907+268E              ; Routine to ???
 5908+268E
 5909+268E ED 43 49 5C  m268e:		LD	(	$5C49),BC	; ???
 5910+2692 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 5911+2695 78           		LD	A,B
 5912+2696 B1           		OR	C
 5913+2697 28 08        		JR	Z,m26a1
 5914+2699 ED 43 49 5C  		LD	(	$5C49),BC	; ???
 5915+269D ED 43 08 EC  		LD	($EC08),BC
 5916+26A1 CD 64 2B     m26a1:		CALL	m2b64		; page in normal memory
 5917+26A4 2A 5D 5C     		LD	HL,(	$5C5D)
 5918+26A7 EB           		EX	DE,HL
 5919+26A8 21 86 26     		LD	HL,m2686	; error return address (no room)
 5920+26AB E5           		PUSH	HL
 5921+26AC 2A 61 5C     		LD	HL,(	$5C61)
 5922+26AF 37           		SCF
 5923+26B0 ED 52        		SBC	HL,DE
 5924+26B2 E5           		PUSH	HL		; HL=line length
 5925+26B3 60           		LD	H,B
 5926+26B4 69           		LD	L,C
 5927+26B5 EF           		RST	28H
 5928+26B6 6E 19        		DW	o196E		; get address of line in program
 5929+26B8 20 06        		JR	NZ,m26c0	; if line not in program yet, move on
 5930+26BA EF           		RST	28H
 5931+26BB B8 19        		DW	o19B8		; get address of next line
 5932+26BD EF           		RST	28H
 5933+26BE E8 19        		DW	o19E8		; delete the existing line
 5934+26C0 C1           m26c0:		POP	BC		; restore line length
 5935+26C1 79           		LD	A,C
 5936+26C2 3D           		DEC	A
 5937+26C3 B0           		OR	B
 5938+26C4 20 15        		JR	NZ,m26db	; move on if no line body (just deleting)
 5939+26C6 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 5940+26C9 E5           		PUSH	HL
 5941+26CA 2A 49 5C     		LD	HL,(	$5C49)
 5942+26CD CD 80 3E     		CALL	m3e80
 5943+26D0 18 14        		DW	l1418
 5944+26D2 22 49 5C     		LD	(	$5C49),HL
 5945+26D5 E1           		POP	HL
 5946+26D6 CD 64 2B     		CALL	m2b64		; page in normal memory
 5947+26D9 18 28        		JR	m2703
 5948+26DB C5           m26db:		PUSH	BC
 5949+26DC 03           		INC	BC
 5950+26DD 03           		INC	BC
 5951+26DE 03           		INC	BC
 5952+26DF 03           		INC	BC
 5953+26E0 2B           		DEC	HL
 5954+26E1 ED 5B 53 5C  		LD	DE,(	$5C53)
 5955+26E5 D5           		PUSH	DE
 5956+26E6 EF           m26e6:		RST	28H
 5957+26E7 55 16        		DW	o1655		; make space for ???
 5958+26E9 E1           		POP	HL
 5959+26EA 22 53 5C     m26ea:		LD	(	$5C53),HL
 5960+26ED C1           		POP	BC
 5961+26EE C5           		PUSH	BC
 5962+26EF 13           		INC	DE
 5963+26F0 2A 61 5C     		LD	HL,(	$5C61)
 5964+26F3 2B           		DEC	HL
 5965+26F4 2B           		DEC	HL
 5966+26F5 ED B8        		LDDR
 5967+26F7 2A 49 5C     		LD	HL,(	$5C49)
 5968+26FA EB           		EX	DE,HL
 5969+26FB C1           		POP	BC
 5970+26FC 70           		LD	(HL),B
 5971+26FD 2B           		DEC	HL
 5972+26FE 71           		LD	(HL),C
 5973+26FF 2B           		DEC	HL
 5974+2700 73           		LD	(HL),E
 5975+2701 2B           		DEC	HL
 5976+2702 72           		LD	(HL),D
 5977+2703 F1           m2703:		POP	AF		; ???
 5978+2704 C9           		RET
 5979+2705
 5980+2705              ; Table of error message addresses
 5981+2705
 5982+2705 93 27        m2705:		DW	m276d
 5983+2707 9E 27        		DW	m2778
 5984+2709 AD 27        		DW	m2787
 5985+270B B7 27        		DW	m2791
 5986+270D C8 27        		DW	m27a2
 5987+270F DB 27        		DW	m27b5
 5988+2711 E7 27        		DW	m27c1
 5989+2713 E7 27        		DW	m27c1
 5990+2715 FA 27        		DW	m27d4
 5991+2717 08 28        		DW	m27e2
 5992+2719 19 28        		DW	m27f3
 5993+271B 2A 28        		DW	m2804
 5994+271D 38 28        		DW	m2812
 5995+271F 49 28        		DW	m2823
 5996+2721 55 28        		DW	m282f
 5997+2723 68 28        		DW	m2842
 5998+2725 68 28        		DW	m2842
 5999+2727 74 28        		DW	m284e
 6000+2729 82 28        		DW	m285c
 6001+272B 91 28        		DW	m286b
 6002+272D 9F 28        		DW	m2879
 6003+272F B2 28        		DW	m288c
 6004+2731 C3 28        		DW	m289d
 6005+2733 CC 28        		DW	m28a6
 6006+2735 DA 28        		DW	m28b4
 6007+2737 EB 28        		DW	m28c5
 6008+2739 F8 28        		DW	m28d2
 6009+273B 0B 29        		DW	m28e5
 6010+273D 23 29        		DW	m28fd
 6011+273F 31 29        		DW	m290b
 6012+2741 39 29        		DW	m2913
 6013+2743 45 29        		DW	m291f
 6014+2745 59 29        		DW	m2933
 6015+2747 65 29        		DW	m293f
 6016+2749 74 29        		DW	m294e
 6017+274B 8B 29        		DW	m2965
 6018+274D 94 29        		DW	m296e
 6019+274F A2 29        		DW	m297c
 6020+2751 A9 29        		DW	m2983
 6021+2753 BD 29        		DW	m2997
 6022+2755 D5 29        		DW	m29af
 6023+2757 E7 29        		DW	m29c1
 6024+2759 FC 29        		DW	m29d6
 6025+275B 0C 2A        		DW	m29e6
 6026+275D 1D 2A        		DW	m29f7
 6027+275F 35 2A        		DW	m2a0f
 6028+2761 4F 2A        		DW	m2a29
 6029+2763 68 2A        		DW	m2a42
 6030+2765 7F 2A        		DW	m2a59
 6031+2767 9A 2A        		DW	m2a74
 6032+2769 B0 2A        		DW	m2a8a
 6033+276B BD 2A        		DW	m2a97
 6034+276D ED 36        		DW	m36fb
 6035+276F FE 36        		DW	m370c
 6036+2771 16 37        		DW	m3724
 6037+2773 25 37        		DW	m3733
 6038+2775 33 37        		DW	m3741
 6039+2777 4B 37        		DW	m3759
 6040+2779 5F 37        		DW	m376d
 6041+277B 73 37        		DW	m3781
 6042+277D 7F 37        		DW	m378d
 6043+277F 90 37        		DW	m379e
 6044+2781 00 00 00...  		DS	18
 6045+2793
 6046+2793              ; The +3 BASIC and +3DOS error messages
 6047+2793
 6048+2793 4D 45 52 47  m276d:		DM	"MERGE erro", "r"+$80
 6048+2797 45 20 65 72
 6048+279B 72 6F F2
 6049+279E 57 72 6F 6E  m2778:		DM	"Wrong file typ", "e"+$80
 6049+27A2 67 20 66 69
 6049+27A6 6C 65 20 74
 6049+27AA 79 70 E5
 6050+27AD 43 4F 44 45  m2787:		DM	"CODE erro", "r"+$80
 6050+27B1 20 65 72 72
 6050+27B5 6F F2
 6051+27B7 54 6F 6F 20  m2791:		DM	"Too many bracket", "s"+$80
 6051+27BB 6D 61 6E 79
 6051+27BF 20 62 72 61
 6051+27C3 63 6B 65 74
 6051+27C7 F3
 6052+27C8 46 69 6C 65  m27a2:		DM	"File already exist", "s"+$80
 6052+27CC 20 61 6C 72
 6052+27D0 65 61 64 79
 6052+27D4 20 65 78 69
 6052+27D8 73 74 F3
 6053+27DB 49 6E 76 61  m27b5:		DM	"Invalid nam", "e"+$80
 6053+27DF 6C 69 64 20
 6053+27E3 6E 61 6D E5
 6054+27E7 46 69 6C 65  m27c1:		DM	"File does not exis", "t"+$80
 6054+27EB 20 64 6F 65
 6054+27EF 73 20 6E 6F
 6054+27F3 74 20 65 78
 6054+27F7 69 73 F4
 6055+27FA 49 6E 76 61  m27d4:		DM	"Invalid devic", "e"+$80
 6055+27FE 6C 69 64 20
 6055+2802 64 65 76 69
 6055+2806 63 E5
 6056+2808 49 6E 76 61  m27e2:		DM	"Invalid baud rat", "e"+$80
 6056+280C 6C 69 64 20
 6056+2810 62 61 75 64
 6056+2814 20 72 61 74
 6056+2818 E5
 6057+2819 49 6E 76 61  m27f3:		DM	"Invalid note nam", "e"+$80
 6057+281D 6C 69 64 20
 6057+2821 6E 6F 74 65
 6057+2825 20 6E 61 6D
 6057+2829 E5
 6058+282A 4E 75 6D 62  m2804:		DM	"Number too bi", "g"+$80
 6058+282E 65 72 20 74
 6058+2832 6F 6F 20 62
 6058+2836 69 E7
 6059+2838 4E 6F 74 65  m2812:		DM	"Note out of rang", "e"+$80
 6059+283C 20 6F 75 74
 6059+2840 20 6F 66 20
 6059+2844 72 61 6E 67
 6059+2848 E5
 6060+2849 4F 75 74 20  m2823:		DM	"Out of rang", "e"+$80
 6060+284D 6F 66 20 72
 6060+2851 61 6E 67 E5
 6061+2855 54 6F 6F 20  m282f:		DM	"Too many tied note", "s"+$80
 6061+2859 6D 61 6E 79
 6061+285D 20 74 69 65
 6061+2861 64 20 6E 6F
 6061+2865 74 65 F3
 6062+2868 42 61 64 20  m2842:		DM	"Bad filenam", "e"+$80
 6062+286C 66 69 6C 65
 6062+2870 6E 61 6D E5
 6063+2874 42 61 64 20  m284e:		DM	"Bad parameter", "s"+$80
 6063+2878 70 61 72 61
 6063+287C 6D 65 74 65
 6063+2880 72 F3
 6064+2882 44 72 69 76  m285c:		DM	"Drive not foun", "d"+$80
 6064+2886 65 20 6E 6F
 6064+288A 74 20 66 6F
 6064+288E 75 6E E4
 6065+2891 46 69 6C 65  m286b:		DM	"File not foun", "d"+$80
 6065+2895 20 6E 6F 74
 6065+2899 20 66 6F 75
 6065+289D 6E E4
 6066+289F 46 69 6C 65  m2879:		DM	"File already exist", "s"+$80
 6066+28A3 20 61 6C 72
 6066+28A7 65 61 64 79
 6066+28AB 20 65 78 69
 6066+28AF 73 74 F3
 6067+28B2 45 6E 64 20  m288c:		DM	"End of file foun", "d"+$80
 6067+28B6 6F 66 20 66
 6067+28BA 69 6C 65 20
 6067+28BE 66 6F 75 6E
 6067+28C2 E4
 6068+28C3 44 69 73 6B  m289d:		DM	"Disk ful", "l"+$80
 6068+28C7 20 66 75 6C
 6068+28CB EC
 6069+28CC 44 69 72 65  m28a6:		DM	"Directory ful", "l"+$80
 6069+28D0 63 74 6F 72
 6069+28D4 79 20 66 75
 6069+28D8 6C EC
 6070+28DA 46 69 6C 65  m28b4:		DM	"File is read onl", "y"+$80
 6070+28DE 20 69 73 20
 6070+28E2 72 65 61 64
 6070+28E6 20 6F 6E 6C
 6070+28EA F9
 6071+28EB 46 69 6C 65  m28c5:		DM	"File not ope", "n"+$80
 6071+28EF 20 6E 6F 74
 6071+28F3 20 6F 70 65
 6071+28F7 EE
 6072+28F8 46 69 6C 65  m28d2:		DM	"File already in us", "e"+$80
 6072+28FC 20 61 6C 72
 6072+2900 65 61 64 79
 6072+2904 20 69 6E 20
 6072+2908 75 73 E5
 6073+290B 4E 6F 20 72  m28e5:		DM	"No rename between drive", "s"+$80
 6073+290F 65 6E 61 6D
 6073+2913 65 20 62 65
 6073+2917 74 77 65 65
 6073+291B 6E 20 64 72
 6073+291F 69 76 65 F3
 6074+2923 4D 69 73 73  m28fd:		DM	"Missing exten", "t"+$80
 6074+2927 69 6E 67 20
 6074+292B 65 78 74 65
 6074+292F 6E F4
 6075+2931 55 6E 63 61  m290b:		DM	"Uncache", "d"+$80
 6075+2935 63 68 65 E4
 6076+2939 46 69 6C 65  m2913:		DM	"File too bi", "g"+$80
 6076+293D 20 74 6F 6F
 6076+2941 20 62 69 E7
 6077+2945 44 69 73 6B  m291f:		DM	"Disk is not bootabl", "e"+$80
 6077+2949 20 69 73 20
 6077+294D 6E 6F 74 20
 6077+2951 62 6F 6F 74
 6077+2955 61 62 6C E5
 6078+2959 44 72 69 76  m2933:		DM	"Drive in us", "e"+$80
 6078+295D 65 20 69 6E
 6078+2961 20 75 73 E5
 6079+2965 44 72 69 76  m293f:		DM	"Drive not read", "y"+$80
 6079+2969 65 20 6E 6F
 6079+296D 74 20 72 65
 6079+2971 61 64 F9
 6080+2974 44 69 73 6B  m294e:		DM	"Disk is write protecte", "d"+$80
 6080+2978 20 69 73 20
 6080+297C 77 72 69 74
 6080+2980 65 20 70 72
 6080+2984 6F 74 65 63
 6080+2988 74 65 E4
 6081+298B 53 65 65 6B  m2965:		DM	"Seek fai", "l"+$80
 6081+298F 20 66 61 69
 6081+2993 EC
 6082+2994 43 52 43 20  m296e:		DM	"CRC data erro", "r"+$80
 6082+2998 64 61 74 61
 6082+299C 20 65 72 72
 6082+29A0 6F F2
 6083+29A2 4E 6F 20 64  m297c:		DM	"No dat", "a"+$80
 6083+29A6 61 74 E1
 6084+29A9 4D 69 73 73  m2983:		DM	"Missing address mar", "k"+$80
 6084+29AD 69 6E 67 20
 6084+29B1 61 64 64 72
 6084+29B5 65 73 73 20
 6084+29B9 6D 61 72 EB
 6085+29BD 55 6E 72 65  m2997:		DM	"Unrecognised disk forma", "t"+$80
 6085+29C1 63 6F 67 6E
 6085+29C5 69 73 65 64
 6085+29C9 20 64 69 73
 6085+29CD 6B 20 66 6F
 6085+29D1 72 6D 61 F4
 6086+29D5 55 6E 6B 6E  m29af:		DM	"Unknown disk erro", "r"+$80
 6086+29D9 6F 77 6E 20
 6086+29DD 64 69 73 6B
 6086+29E1 20 65 72 72
 6086+29E5 6F F2
 6087+29E7 44 69 73 6B  m29c1:		DM	"Disk has been change", "d"+$80
 6087+29EB 20 68 61 73
 6087+29EF 20 62 65 65
 6087+29F3 6E 20 63 68
 6087+29F7 61 6E 67 65
 6087+29FB E4
 6088+29FC 55 6E 73 75  m29d6:		DM	"Unsuitable medi", "a"+$80
 6088+2A00 69 74 61 62
 6088+2A04 6C 65 20 6D
 6088+2A08 65 64 69 E1
 6089+2A0C 49 6E 76 61  m29e6:		DM	"Invalid attribut", "e"+$80
 6089+2A10 6C 69 64 20
 6089+2A14 61 74 74 72
 6089+2A18 69 62 75 74
 6089+2A1C E5
 6090+2A1D 43 61 6E 6E  m29f7:		DM	"Cannot copy to/from tap", "e"+$80
 6090+2A21 6F 74 20 63
 6090+2A25 6F 70 79 20
 6090+2A29 74 6F 2F 66
 6090+2A2D 72 6F 6D 20
 6090+2A31 74 61 70 E5
 6091+2A35 44 65 73 74  m2a0f:		DM	"Destination cannot be wil", "d"+$80
 6091+2A39 69 6E 61 74
 6091+2A3D 69 6F 6E 20
 6091+2A41 63 61 6E 6E
 6091+2A45 6F 74 20 62
 6091+2A49 65 20 77 69
 6091+2A4D 6C E4
 6092+2A4F 44 65 73 74  m2a29:		DM	"Destination must be driv", "e"+$80
 6092+2A53 69 6E 61 74
 6092+2A57 69 6F 6E 20
 6092+2A5B 6D 75 73 74
 6092+2A5F 20 62 65 20
 6092+2A63 64 72 69 76
 6092+2A67 E5
 6093+2A68 44 72 69 76  m2a42:		DM	"Drive B: is not presen", "t"+$80
 6093+2A6C 65 20 42 3A
 6093+2A70 20 69 73 20
 6093+2A74 6E 6F 74 20
 6093+2A78 70 72 65 73
 6093+2A7C 65 6E F4
 6094+2A7F 2B 32 41 20  m2a59:		DM	"+2A does not support forma", "t"+$80
 6094+2A83 64 6F 65 73
 6094+2A87 20 6E 6F 74
 6094+2A8B 20 73 75 70
 6094+2A8F 70 6F 72 74
 6094+2A93 20 66 6F 72
 6094+2A97 6D 61 F4
 6095+2A9A 44 72 69 76  m2a74:		DM	"Drive must be A: or B", ":"+$80
 6095+2A9E 65 20 6D 75
 6095+2AA2 73 74 20 62
 6095+2AA6 65 20 41 3A
 6095+2AAA 20 6F 72 20
 6095+2AAE 42 BA
 6096+2AB0 49 6E 76 61  m2a8a:		DM	"Invalid driv", "e"+$80
 6096+2AB4 6C 69 64 20
 6096+2AB8 64 72 69 76
 6096+2ABC E5
 6097+2ABD 43 6F 64 65  m2a97:		DM	"Code length erro", "r"+$80
 6097+2AC1 20 6C 65 6E
 6097+2AC5 67 74 68 20
 6097+2AC9 65 72 72 6F
 6097+2ACD F2
 6098+2ACE
 6099+2ACE              ; Subroutine to output an error message (terminated by
 6100+2ACE              ; a byte with bit 7 set)
 6101+2ACE              ; Enter with DE=message address
 6102+2ACE
 6103+2ACE 1A           m2ace:		LD	A,(DE)		; get next char
 6104+2ACF E6 7F        		AND	$7F		; mask bit 7
 6105+2AD1 D5           m2ad1:		PUSH	DE
 6106+2AD2 D7           		RST	10H		; output
 6107+2AD3 D1           		POP	DE
 6108+2AD4 1A           		LD	A,(DE)
 6109+2AD5 13           m2ad5:		INC	DE
 6110+2AD6 87           		ADD	A,A		; check bit 7
 6111+2AD7 30 F5        		JR	NC,m2ace	; loop back if not set
 6112+2AD9 C9           		RET
 6113+2ADA
 6114+2ADA              ; The Error Handling routine
 6115+2ADA              ; Enter here with inline error code-1
 6116+2ADA
 6117+2ADA E1           m2ada:		POP	HL		; get address of error code
 6118+2ADB ED 7B 3D 5C  		LD	SP,(	$5C3D)	; reset SP
 6119+2ADF 7E           		LD	A,(HL)
 6120+2AE0 32 5E 5B     		LD	(	$5B5E),A	; store error number-1
 6121+2AE3 3C           		INC	A		; get error code
 6122+2AE4 FE 1E        		CP	$1E
 6123+2AE6 30 03        		JR	NC,m2aeb	; move on if a +3-specific error
 6124+2AE8 EF           m2ae8:		RST	28H
 6125+2AE9 5D 5B        		DW		$5B5D		; else call ROM 3 error handler
 6126+2AEB 3D           m2aeb:		DEC	A
 6127+2AEC FD 77 00     		LD	(IY+$00),A	; save code in ERR_NR
 6128+2AEF 2A 5D 5C     m2aef:		LD	HL,(	$5C5D)	; get address at which error occurred
 6129+2AF2 22 5F 5C     		LD	(	$5C5F),HL	; save it
 6130+2AF5 EF           		RST	28H
 6131+2AF6 C5 16        		DW	o16C5		; clear calculator stack
 6132+2AF8 C9           		RET			; exit to error address
 6133+2AF9
 6134+2AF9              ; Subroutine to test the BREAK key
 6135+2AF9              ; Terminates with error L - BREAK into program if so
 6136+2AF9
 6137+2AF9 3E 7F        m2af9:		LD	A,$7F
 6138+2AFB DB FE        		IN	A,($FE)
 6139+2AFD 1F           		RRA
 6140+2AFE D8           		RET	C		; exit if SPACE not pressed
 6141+2AFF 3E FE        		LD	A,$FE
 6142+2B01 DB FE        		IN	A,($FE)
 6143+2B03 1F           		RRA
 6144+2B04 D8           		RET	C		; or if CAPS not pressed
 6145+2B05 CD DA 2A     		CALL	m2ada
 6146+2B08 14           		DB	$14		; error L
 6147+2B09
 6148+2B09              ; Subroutine to execute routine at HL, returning to m3a1b in order to
 6149+2B09              ; return control to ROM 3
 6150+2B09              ; It is provided to allow serial input into 48K BASIC, but looks buggy
 6151+2B09
 6152+2B09 DF           m2b09:		RST	18H
 6153+2B0A FE 23        		CP	$23
 6154+2B0C 28 06        		JR	Z,m2b14
 6155+2B0E CD B1 10     		CALL	m10b1
 6156+2B11 C3 66 12     		JP	m1266
 6157+2B14 CD 35 2B     m2b14:		CALL	m2b35
 6158+2B17 06 00        		LD	B,0
 6159+2B19 CD 00 3F     m2b19:		CALL	m3f00
 6160+2B1C 62 00        		DW	$0062
 6161+2B1E D5           		PUSH	DE
 6162+2B1F E5           		PUSH	HL
 6163+2B20 C1           		POP	BC
 6164+2B21 EF           		RST	28H
 6165+2B22 2B 2D        		DW	o2D2B
 6166+2B24 C1           		POP	BC
 6167+2B25 EF           		RST	28H
 6168+2B26 2B 2D        		DW	o2D2B
 6169+2B28 11 56 2B     		LD	DE,m2b56
 6170+2B2B 01 0A 00     		LD	BC,10
 6171+2B2E CD F0 14     		CALL	m14f0
 6172+2B31 EF           		RST	28H
 6173+2B32 FF 2A        		DW	o2AFF
 6174+2B34 C9           		RET
 6175+2B35 E7           m2b35:		RST	20H
 6176+2B36 EF           		RST	28H
 6177+2B37 82 1C        		DW	o1C82
 6178+2B39 DF           		RST	18H
 6179+2B3A FE 2C        		CP	","
 6180+2B3C C2 C3 22     		JP	NZ,m22c3
 6181+2B3F E7           		RST	20H
 6182+2B40 EF           		RST	28H
 6183+2B41 1F 1C        		DW	o1C1F
 6184+2B43 FD CB 01 76  		BIT	6, (IY+$01)
 6185+2B47 CA C3 22     		JP	Z,m22c3
 6186+2B4A E1           		POP	HL
 6187+2B4B CD B1 10     		CALL	m10b1
 6188+2B4E E5           		PUSH	HL
 6189+2B4F EF           		RST	28H
 6190+2B50 94 1E        		DW	o1E94
 6191+2B52 EF           		RST	28H
 6192+2B53 01 16        		DW	o1601
 6193+2B55 C9           		RET
 6194+2B56 EF           m2b56:		RST	28H
 6195+2B57 34 40        		DW	$4034
 6196+2B59 41           		LD	B,C
 6197+2B5A 00           		NOP
 6198+2B5B 00           		NOP
 6199+2B5C 04           		INC	B
 6200+2B5D 0F           		RRCA
 6201+2B5E 38           		DB	$38
 6202+2B5F C9           		RET
 6203+2B60 00 00 00 00  		DS	4
 6204+2B64
 6205+2B64              ; Subroutine to page in normal memory (page 0) and swap SP with OLDSP
 6206+2B64
 6207+2B64 08           m2b64:		EX	AF,AF'		; save AF
 6208+2B65 3E 10        		LD	A,$10
 6209+2B67 F3           		DI
 6210+2B68 CD 7E 2B     		CALL	m2b7e		; page in page 0
 6211+2B6B F1           		POP	AF		; AF=return address
 6212+2B6C 22 58 5B     		LD	(	$5B58),HL	; save HL
 6213+2B6F 2A 6A 5B     		LD	HL,(	$5B6A)
 6214+2B72 ED 73 6A 5B  		LD	(	$5B6A),SP
 6215+2B76 F9           		LD	SP,HL		; SP now swapped with OLDSP
 6216+2B77 FB           		EI
 6217+2B78 2A 58 5B     		LD	HL,(	$5B58)	; restore HL
 6218+2B7B F5           		PUSH	AF		; restack return address
 6219+2B7C 08           		EX	AF,AF'		; restore AF
 6220+2B7D C9           		RET
 6221+2B7E
 6222+2B7E              ; Subroutine to page in a RAM/ROM/screen combination (in A)
 6223+2B7E
 6224+2B7E C5           m2b7e:		PUSH	BC
 6225+2B7F 01 FD 7F     		LD	BC,PBANKM
 6226+2B82 ED 79        		OUT	(C),A		; page it in
 6227+2B84 32 5C 5B     		LD	(	$5B5C),A
 6228+2B87 C1           		POP	BC
 6229+2B88 C9           		RET
 6230+2B89
 6231+2B89              ; Subroutine to page in DOS workspace (page 7) and swap SP with OLDSP
 6232+2B89
 6233+2B89 08           m2b89:		EX	AF,AF'		; save AF
 6234+2B8A F3           		DI
 6235+2B8B F1           		POP	AF		; AF=return address
 6236+2B8C 22 58 5B     		LD	(	$5B58),HL	; save HL
 6237+2B8F 2A 6A 5B     		LD	HL,(	$5B6A)
 6238+2B92 ED 73 6A 5B  		LD	(	$5B6A),SP
 6239+2B96 F9           		LD	SP,HL		; SP swapped with OLDSP
 6240+2B97 2A 58 5B     		LD	HL,(	$5B58)	; restore HL
 6241+2B9A F5           		PUSH	AF		; push back return address
 6242+2B9B 3E 17        		LD	A,$17
 6243+2B9D CD 7E 2B     		CALL	m2b7e		; page in page 7
 6244+2BA0 FB           		EI
 6245+2BA1 08           		EX	AF,AF'		; restore AF
 6246+2BA2 C9           		RET
 6247+2BA3
 6248+2BA3              ; Subroutine to copy a file
 6249+2BA3              ; Enter with A=destination flag
 6250+2BA3              ; A=$00 - file
 6251+2BA3              ;  =$E0 - printer
 6252+2BA3              ;  =$AA - screen
 6253+2BA3              ; Z flag set if A=$00
 6254+2BA3              ; C flag reset if copying TO SPECTRUM FORMAT
 6255+2BA3
 6256+2BA3 CD 89 2B     m2ba3:		CALL	m2b89		; page in DOS workspace
 6257+2BA6 32 0C C0     		LD	(	$C00C		),A	; save destination flag
 6258+2BA9 F5           		PUSH	AF
 6259+2BAA 28 06        		JR	Z,m2bb2		; move on if copying to a file
 6260+2BAC FE E0        		CP	$E0		; copy to LPRINT?
 6261+2BAE 3E 03        		LD	A,$03		; use stream 3
 6262+2BB0 28 02        		JR	Z,m2bb4
 6263+2BB2 3E 02        m2bb2:		LD	A,$02		; use stream 2
 6264+2BB4 CD 64 2B     m2bb4:		CALL	m2b64		; page in normal memory
 6265+2BB7 EF           		RST	28H
 6266+2BB8 01 16        		DW	o1601		; open channel to stream
 6267+2BBA CD 89 2B     		CALL	m2b89		; page in DOS workspace
 6268+2BBD F1           		POP	AF		; restore destination flag
 6269+2BBE 28 5E        		JR	Z,m2c1e		; move on if copying to another file
 6270+2BC0 21 01 ED     		LD	HL,$ED01			; stored filename address
 6271+2BC3 01 01 00     		LD	BC,$0001	; use file number 0,exclusive-read
 6272+2BC6 11 01 00     		LD	DE,$0001	; open action - error if doesn't exist
 6273+2BC9 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6274+2BCC CD 00 3F     		CALL	m3f00
 6275+2BCF 06 01        		DW	$0106	; open file
 6276+2BD1 CD EE 32     		CALL	m32ee		; restore TSTACK
 6277+2BD4 D2 19 32     		JP	NC,m3219	; move on if error opening
 6278+2BD7 06 00        m2bd7:		LD	B,$00		; file 0
 6279+2BD9 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6280+2BDC CD 00 3F     		CALL	m3f00
 6281+2BDF 18 01        		DW	$0118	; read a byte
 6282+2BE1 CD EE 32     		CALL	m32ee		; restore TSTACK
 6283+2BE4 38 07        		JR	C,m2bed		; move on if no error
 6284+2BE6 FE 19        		CP	$19
 6285+2BE8 C2 19 32     		JP	NZ,m3219	; move on if not end-of-file error
 6286+2BEB 18 1D        		JR	m2c0a		; end of file, so move on to close file
 6287+2BED 3A 0C C0     m2bed:		LD	A,(	$C00C		)	; check destination flag
 6288+2BF0 FE AA        		CP	$AA
 6289+2BF2 79           		LD	A,C		; A=byte from file
 6290+2BF3 20 0A        		JR	NZ,m2bff	; move on unless copying to screen
 6291+2BF5 FE 0D        		CP	$0D
 6292+2BF7 28 06        		JR	Z,m2bff		; okay to output CRs
 6293+2BF9 FE 20        		CP	$20
 6294+2BFB 30 02        		JR	NC,m2bff
 6295+2BFD 3E 20        		LD	A,$20		; but replace other control chars with spaces
 6296+2BFF CD 64 2B     m2bff:		CALL	m2b64		; page in normal memory
 6297+2C02 EF           		RST	28H
 6298+2C03 10 00        		DW	$0010		; output byte
 6299+2C05 CD 89 2B     m2c05:		CALL	m2b89		; page in DOS workspace
 6300+2C08 18 CD        		JR	m2bd7		; back for more
 6301+2C0A 06 00        m2c0a:		LD	B,$00
 6302+2C0C CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6303+2C0F CD 00 3F     		CALL	m3f00
 6304+2C12 09 01        		DW	$0109	; close file
 6305+2C14 CD EE 32     		CALL	m32ee		; restore TSTACK
 6306+2C17 D2 19 32     		JP	NC,m3219	; move on if error closing
 6307+2C1A CD 64 2B     		CALL	m2b64		; page in normal memory
 6308+2C1D C9           		RET			; done
 6309+2C1E
 6310+2C1E              ; This part of the copy routine copies a file to another file
 6311+2C1E
 6312+2C1E F5           m2c1e:		PUSH	AF		; save destination flag
 6313+2C1F 21 01 ED     		LD	HL,$ED01
 6314+2C22 22 02 C0     		LD	(	$C002		),HL	; store address of destination filespec
 6315+2C25 11 10 C0     		LD	DE,$C010
 6316+2C28 CD 09 31     		CALL	m3109		; copy filespec, error if too long
 6317+2C2B E5           		PUSH	HL		; save address of source filespec
 6318+2C2C 3E FF        		LD	A,$FF
 6319+2C2E CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6320+2C31 CD 00 3F     		CALL	m3f00
 6321+2C34 2D 01        		DW	$012D	; set default drive
 6322+2C36 CD EE 32     		CALL	m32ee		; restore TSTACK
 6323+2C39 32 05 C0     		LD	(	$C005		),A	; use default drive for destination
 6324+2C3C 32 04 C0     		LD	(	$C004		),A	; use default drive for source
 6325+2C3F 21 10 C0     		LD	HL,$C010
 6326+2C42 CD F0 30     		CALL	m30f0		; is destination drive specified?
 6327+2C45 20 06        		JR	NZ,m2c4d	; move on if not
 6328+2C47 11 05 C0     		LD	DE,	$C005
 6329+2C4A CD E3 30     		CALL	m30e3		; place drive letter at dst_drv
 6330+2C4D E1           m2c4d:		POP	HL		; restore address of source filespec
 6331+2C4E F1           		POP	AF		; restore destination flag
 6332+2C4F D2 23 31     		JP	NC,m3123	; move on if copying TO SPECTRUM FORMAT
 6333+2C52 22 00 C0     		LD	(	$C000		),HL	; save address of source filespec
 6334+2C55 11 22 C0     		LD	DE,$C022
 6335+2C58 CD 09 31     		CALL	m3109		; copy filespec, error if too long
 6336+2C5B 21 22 C0     		LD	HL,$C022
 6337+2C5E CD F0 30     		CALL	m30f0		; is source drive specified?
 6338+2C61 20 06        		JR	NZ,m2c69	; move on if not
 6339+2C63 11 04 C0     		LD	DE,	$C004
 6340+2C66 CD E3 30     		CALL	m30e3		; place drive letter at src_drv
 6341+2C69 32 8C 5C     m2c69:		LD	(	$5C8C),A	; zeroise scroll count
 6342+2C6C 3E 0D        		LD	A,$0D
 6343+2C6E D7           		RST	10H		; output CR
 6344+2C6F AF           		XOR	A
 6345+2C70 32 0B C0     		LD	(	$C00B		),A	; clear "wild" flag
 6346+2C73 32 0F C0     		LD	(	$C00F		),A	; zero # files copied
 6347+2C76 32 0C C0     		LD	(	$C00C		),A	; destination is a file
 6348+2C79 21 10 C0     		LD	HL,$C010
 6349+2C7C CD B6 30     		CALL	m30b6		; check if destination wild
 6350+2C7F 3A 0B C0     		LD	A,(	$C00B		)
 6351+2C82 B7           		OR	A
 6352+2C83 28 07        		JR	Z,m2c8c
 6353+2C85 CD 64 2B     		CALL	m2b64		; if so, page in normal memory
 6354+2C88 CD DA 2A     		CALL	m2ada		; and cause error "destination cannot be wild"
 6355+2C8B 49           		DB	$49
 6356+2C8C 21 83 32     m2c8c:		LD	HL,m3283
 6357+2C8F 11 4E C0     		LD	DE,$C04E
 6358+2C92 01 0E 00     		LD	BC,$000E
 6359+2C95 ED B0        		LDIR			; copy temporary filename
 6360+2C97 21 22 C0     		LD	HL,$C022
 6361+2C9A CD B6 30     		CALL	m30b6		; check if source wild
 6362+2C9D 3A 0B C0     		LD	A,(	$C00B		)
 6363+2CA0 B7           		OR	A
 6364+2CA1 20 06        		JR	NZ,m2ca9	; move on if so
 6365+2CA3 CD 58 2D     		CALL	m2d58		; copy a single file
 6366+2CA6 C3 26 2D     		JP	m2d26		; finish up
 6367+2CA9 2A 02 C0     m2ca9:		LD	HL,(	$C002		)	; get address of dest filespec
 6368+2CAC CD F0 30     		CALL	m30f0		; get past drive
 6369+2CAF 3E FF        		LD	A,$FF
 6370+2CB1 BE           		CP	(HL)
 6371+2CB2 28 07        		JR	Z,m2cbb		; move on if just drive
 6372+2CB4 CD 64 2B     		CALL	m2b64		; page in normal memory
 6373+2CB7 CD DA 2A     		CALL	m2ada
 6374+2CBA 4A           		DB	$4A		; else error "destination must be drive"
 6375+2CBB 21 41 C0     m2cbb:		LD	HL,$C041
 6376+2CBE AF           		XOR	A
 6377+2CBF 06 0D        		LD	B,$0D
 6378+2CC1 77           m2cc1:		LD	(HL),A		; zeroise directory entry 1
 6379+2CC2 23           		INC	HL
 6380+2CC3 10 FC        		DJNZ	m2cc1
 6381+2CC5 21 41 C0     m2cc5:		LD	HL,$C041
 6382+2CC8 11 34 C0     		LD	DE,$C034
 6383+2CCB 01 0D 00     		LD	BC,$000D
 6384+2CCE ED B0        		LDIR			; and zeroise directory entry 0
 6385+2CD0 2A 00 C0     		LD	HL,(	$C000		)
 6386+2CD3 01 00 02     		LD	BC,$0200	; 1 entry required, include system files
 6387+2CD6 11 34 C0     		LD	DE,$C034
 6388+2CD9 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6389+2CDC CD 00 3F     		CALL	m3f00
 6390+2CDF 1E 01        		DW	$011E	; get next filename
 6391+2CE1 CD EE 32     		CALL	m32ee		; restore TSTACK
 6392+2CE4 D2 19 32     		JP	NC,m3219	; move on if error
 6393+2CE7 21 0C C0     		LD	HL,	$C00C
 6394+2CEA 7E           		LD	A,(HL)
 6395+2CEB B7           		OR	A
 6396+2CEC 20 09        		JR	NZ,m2cf7	; move on if not copying first file
 6397+2CEE 3C           		INC	A
 6398+2CEF 77           		LD	(HL),A		; set "first file copied" flag
 6399+2CF0 3E 17        		LD	A,$17
 6400+2CF2 05           		DEC	B
 6401+2CF3 CA 19 32     		JP	Z,m3219		; cause error "File not found" if none
 6402+2CF6 04           		INC	B
 6403+2CF7 05           m2cf7:		DEC	B		; B=0 if no more matches
 6404+2CF8 28 2C        		JR	Z,m2d26		; move to finish if done
 6405+2CFA 21 22 C0     		LD	HL,$C022
 6406+2CFD CD F0 30     		CALL	m30f0		; get past drive of source
 6407+2D00 EB           		EX	DE,HL
 6408+2D01 21 41 C0     		LD	HL,$C041			; address of found entry
 6409+2D04 06 08        		LD	B,$08
 6410+2D06 CD D9 30     		CALL	m30d9		; copy filename part into source
 6411+2D09 21 49 C0     		LD	HL,$C041		+8	; get to extension of found entry
 6412+2D0C 3E 2E        		LD	A,'.'
 6413+2D0E 12           		LD	(DE),A		; insert "."
 6414+2D0F 13           		INC	DE
 6415+2D10 06 03        		LD	B,$03
 6416+2D12 CD D9 30     		CALL	m30d9		; copy extension part into source
 6417+2D15 3E FF        		LD	A,$FF
 6418+2D17 12           		LD	(DE),A		; insert terminator
 6419+2D18 21 10 C0     		LD	HL,$C010
 6420+2D1B CD F0 30     		CALL	m30f0		; get past drive name in dest
 6421+2D1E 36 FF        		LD	(HL),$FF	; insert terminator
 6422+2D20 CD 58 2D     		CALL	m2d58		; copy a file
 6423+2D23 C3 C5 2C     		JP	m2cc5		; loop back for more
 6424+2D26
 6425+2D26              ; Copy file routines - end part
 6426+2D26
 6427+2D26 21 4E C0     m2d26:		LD	HL,$C04E
 6428+2D29 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6429+2D2C CD 00 3F     		CALL	m3f00
 6430+2D2F 24 01        		DW	$0124	; delete temp file
 6431+2D31 CD EE 32     		CALL	m32ee		; restore TSTACK
 6432+2D34 3A 0F C0     		LD	A,(	$C00F		)
 6433+2D37 3D           		DEC	A		; A=# files copied-1
 6434+2D38 21 C9 3E     		LD	HL,m3291	; "1 file copied" message
 6435+2D3B 28 0F        		JR	Z,m2d4c		; move on if 1
 6436+2D3D 3C           		INC	A
 6437+2D3E 6F           		LD	L,A
 6438+2D3F 26 00        		LD	H,$00		; HL=# files copied
 6439+2D41 3E 0D        		LD	A,$0D
 6440+2D43 D7           		RST	10H		; output CR
 6441+2D44 1E 20        		LD	E," "
 6442+2D46 CD 05 08     		CALL	m0800		; output #
 6443+2D49 21 DD 3E     		LD	HL,m32a5	; "files copied" message
 6444+2D4C CD 68 32     m2d4c:		CALL	m3268		; output message
 6445+2D4F 3E 17        		LD	A,$17
 6446+2D51 32 8C 5C     		LD	(	$5C8C),A	; set scroll count
 6447+2D54 CD 64 2B     		CALL	m2b64		; page in normal memory
 6448+2D57 C9           		RET			; done!
 6449+2D58
 6450+2D58              ; Subroutine to copy a single file
 6451+2D58
 6452+2D58 21 10 C0     m2d58:		LD	HL,$C010			; dest filespec
 6453+2D5B 11 22 C0     		LD	DE,$C022			; source filespec
 6454+2D5E 1A           m2d5e:		LD	A,(DE)
 6455+2D5F BE           		CP	(HL)		; compare filespecs
 6456+2D60 20 10        		JR	NZ,m2d72	; move on if different
 6457+2D62 3E FF        		LD	A,$FF
 6458+2D64 BE           		CP	(HL)
 6459+2D65 20 07        		JR	NZ,m2d6e
 6460+2D67 CD 64 2B     		CALL	m2b64		; page in normal memory
 6461+2D6A CD DA 2A     		CALL	m2ada
 6462+2D6D 30           		DB	$30		; error if filespecs the same
 6463+2D6E 23           m2d6e:		INC	HL		; increment pointers
 6464+2D6F 13           		INC	DE
 6465+2D70 18 EC        		JR	m2d5e		; loop back
 6466+2D72 21 10 C0     m2d72:		LD	HL,$C010
 6467+2D75 CD F0 30     		CALL	m30f0		; move past drive specifier in dest filespec
 6468+2D78 7E           		LD	A,(HL)
 6469+2D79 FE FF        		CP	$FF
 6470+2D7B 20 17        		JR	NZ,m2d94	; move on if a destination filename specified
 6471+2D7D 21 10 C0     		LD	HL,$C010
 6472+2D80 CD F0 30     		CALL	m30f0
 6473+2D83 E5           		PUSH	HL		; store address after drive specifier
 6474+2D84 21 22 C0     		LD	HL,$C022
 6475+2D87 CD F0 30     		CALL	m30f0		; get to filename of source
 6476+2D8A D1           		POP	DE
 6477+2D8B 7E           m2d8b:		LD	A,(HL)
 6478+2D8C 12           		LD	(DE),A		; copy filename to destination
 6479+2D8D 3C           		INC	A
 6480+2D8E 28 04        		JR	Z,m2d94		; move on when done
 6481+2D90 13           		INC	DE
 6482+2D91 23           		INC	HL
 6483+2D92 18 F7        		JR	m2d8b		; loop back
 6484+2D94 AF           m2d94:		XOR	A
 6485+2D95 32 09 C0     		LD	($C009		),A	; signal "copy via M:"
 6486+2D98 3E 4D        		LD	A,"M"
 6487+2D9A CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6488+2D9D CD 00 3F     		CALL	m3f00
 6489+2DA0 21 01        		DW	$0121	; find free space on drive M:
 6490+2DA2 CD EE 32     		CALL	m32ee		; restore TSTACK
 6491+2DA5 D2 C7 2D     		JP	NC,m2dc7
 6492+2DA8 7C           		LD	A,H
 6493+2DA9 B7           		OR	A
 6494+2DAA 28 03        		JR	Z,m2daf
 6495+2DAC 21 3F 00     		LD	HL,$003F	; use max 63K on drive M:
 6496+2DAF 7D           m2daf:		LD	A,L
 6497+2DB0 FE 40        		CP	$40
 6498+2DB2 38 03        		JR	C,m2db7
 6499+2DB4 21 3F 00     		LD	HL,$003F	; use max 63K on drive M:
 6500+2DB7 65           m2db7:		LD	H,L
 6501+2DB8 2E 00        		LD	L,$00
 6502+2DBA 29           		ADD	HL,HL
 6503+2DBB 29           		ADD	HL,HL
 6504+2DBC 22 07 C0     		LD	(	$C007		),HL	; store free bytes on drive M:
 6505+2DBF 11 00 08     		LD	DE,o0800
 6506+2DC2 B7           		OR	A
 6507+2DC3 ED 52        		SBC	HL,DE
 6508+2DC5 30 0A        		JR	NC,m2dd1	; move on if >=2K free
 6509+2DC7 3E FF        m2dc7:		LD	A,$FF
 6510+2DC9 32 8C 5C     		LD	(	$5C8C),A	; set scroll count
 6511+2DCC 3E 01        		LD	A,$01
 6512+2DCE 32 09 C0     		LD	($C009		),A	; signal "copy via RAM"
 6513+2DD1 AF           m2dd1:		XOR	A
 6514+2DD2 32 0A C0     		LD	($C00A		),A	; signal no temporary file open
 6515+2DD5 32 06 C0     		LD	(	$C006		),A		; signal not EOF
 6516+2DD8 21 10 C0     		LD	HL,$C010
 6517+2DDB CD F0 30     		CALL	m30f0		; get past drive of dest
 6518+2DDE 7E           		LD	A,(HL)
 6519+2DDF FE FF        		CP	$FF
 6520+2DE1 C2 5D 2E     		JP	NZ,m2e5d	; if dest filename specified, jump on
 6521+2DE4 21 22 C0     		LD	HL,$C022
 6522+2DE7 CD F0 30     		CALL	m30f0		; get past drive of source
 6523+2DEA 7E           		LD	A,(HL)
 6524+2DEB FE FF        m2deb:		CP	$FF
 6525+2DED C2 5D 2E     		JP	NZ,m2e5d	; if source filename specified, jump on
 6526+2DF0 3A 05 C0     		LD	A,(	$C005		)	; check destination drive
 6527+2DF3 FE 4D        		CP	"M"
 6528+2DF5 CA 5D 2E     		JP	Z,m2e5d		; move on if M: (will fail on attempted copy)
 6529+2DF8 3A 04 C0     		LD	A,(	$C004		)	; check source drive
 6530+2DFB FE 4D        		CP	"M"
 6531+2DFD CA 5D 2E     		JP	Z,m2e5d		; move on if M: (will fail on attempted copy)
 6532+2E00 3E 41        		LD	A,"A"		; by this stage, we must be copy A:<-->B:
 6533+2E02 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6534+2E05 CD 00 3F     		CALL	m3f00
 6535+2E08 51 01        		DW	$0151	; get XDPB for drive A:
 6536+2E0A CD EE 32     		CALL	m32ee		; restore TSTACK
 6537+2E0D D2 19 32     		JP	NC,m3219	; move on if error
 6538+2E10 0E 00        		LD	C,0
 6539+2E12 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6540+2E15 CD 00 3F     		CALL	m3f00
 6541+2E18 75 01        		DW	$0175	; login disk in drive A:
 6542+2E1A CD EE 32     		CALL	m32ee		; restore TSTACK
 6543+2E1D D2 19 32     		JP	NC,m3219	; move on if error
 6544+2E20 B7           		OR	A
 6545+2E21 3E 06        		LD	A,$06
 6546+2E23 C2 19 32     		JP	NZ,m3219	; cause error 6 if not a standard +3 disk
 6547+2E26 3A 04 C0     		LD	A,(	$C004		)	; get source drive letter
 6548+2E29 01 01 00     		LD	BC,$0001
 6549+2E2C CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6550+2E2F CD 00 3F     		CALL	m3f00
 6551+2E32 4B 01        		DW	$014B	; open source drive as exclusive-read file
 6552+2E34 CD EE 32     		CALL	m32ee		; restore TSTACK
 6553+2E37 D2 19 32     		JP	NC,m3219	; move on if error
 6554+2E3A 3A 05 C0     		LD	A,(	$C005		)	; get dest drive letter
 6555+2E3D 01 02 01     		LD	BC,$0102
 6556+2E40 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6557+2E43 CD 00 3F     		CALL	m3f00
 6558+2E46 4B 01        		DW	$014B	; open dest drive as exclusive-write file
 6559+2E48 CD EE 32     		CALL	m32ee		; restore TSTACK
 6560+2E4B D2 19 32     		JP	NC,m3219	; move on if error
 6561+2E4E 3E 01        		LD	A,$01
 6562+2E50 32 0A C0     		LD	($C00A		),A	; signal temporary file open
 6563+2E53 3A 09 C0     		LD	A,($C009		)
 6564+2E56 B7           		OR	A
 6565+2E57 CA 44 2F     		JP	Z,m2f44		; copy via M: if >=2K free on drive M:
 6566+2E5A C3 CD 2E     		JP	m2ecd		; else copy via RAM
 6567+2E5D 21 22 C0     m2e5d:		LD	HL,$C022			; source name
 6568+2E60 3E FF        		LD	A,$FF
 6569+2E62 32 8C 5C     		LD	(	$5C8C),A	; set max scroll count
 6570+2E65 E5           		PUSH	HL
 6571+2E66 E5           		PUSH	HL
 6572+2E67 CD 68 32     		CALL	m3268		; display filespec
 6573+2E6A D1           		POP	DE
 6574+2E6B EB           		EX	DE,HL
 6575+2E6C B7           		OR	A
 6576+2E6D ED 52        		SBC	HL,DE
 6577+2E6F 11 11 00     		LD	DE,$0011
 6578+2E72 19           		ADD	HL,DE
 6579+2E73 45           		LD	B,L		; B=# spaces required
 6580+2E74 C5           m2e74:		PUSH	BC
 6581+2E75 3E 20        		LD	A," "
 6582+2E77 D7           		RST	10H		; output a space
 6583+2E78 C1           		POP	BC
 6584+2E79 10 F9        		DJNZ	m2e74		; loop back
 6585+2E7B E1           		POP	HL
 6586+2E7C 3A 05 C0     		LD	A,(	$C005		)	; get dest drive letter
 6587+2E7F F6 20        		OR	$20		; make lowercase
 6588+2E81 FE 6D        		CP	"m"
 6589+2E83 28 10        		JR	Z,m2e95		; move on if copying to M:
 6590+2E85 3A 09 C0     		LD	A,($C009		)
 6591+2E88 B7           		OR	A
 6592+2E89 20 0A        		JR	NZ,m2e95	; or if >=2K free on M:
 6593+2E8B 3A 04 C0     		LD	A,(	$C004		)	; get source drive letter
 6594+2E8E F6 20        		OR	$20
 6595+2E90 FE 6D        		CP	"m"
 6596+2E92 C2 2D 2F     		JP	NZ,m2f2d	; if not copying from M:, move on
 6597+2E95 21 22 C0     m2e95:		LD	HL,$C022			; source filename
 6598+2E98 01 01 00     		LD	BC,$0001	; file 0,excl read
 6599+2E9B 11 02 00     		LD	DE,$0002	; must be openable
 6600+2E9E CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6601+2EA1 CD 00 3F     		CALL	m3f00
 6602+2EA4 06 01        		DW	$0106
 6603+2EA6 CD EE 32     		CALL	m32ee		; restore TSTACK
 6604+2EA9 D2 19 32     		JP	NC,m3219	; move on if error
 6605+2EAC 21 10 C0     		LD	HL,$C010			; dest filename
 6606+2EAF E5           		PUSH	HL
 6607+2EB0 CD 68 32     		CALL	m3268		; display filename
 6608+2EB3 E1           		POP	HL
 6609+2EB4 01 02 01     		LD	BC,$0102	; file 1, exc write
 6610+2EB7 11 04 02     		LD	DE,$0204	; create new file
 6611+2EBA CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6612+2EBD CD 00 3F     		CALL	m3f00
 6613+2EC0 06 01        		DW	$0106
 6614+2EC2 CD EE 32     		CALL	m32ee		; restore TSTACK
 6615+2EC5 D2 19 32     		JP	NC,m3219	; move on if error
 6616+2EC8 3E 01        		LD	A,$01
 6617+2ECA 32 0A C0     		LD	($C00A		),A	; signal temporary file open
 6618+2ECD
 6619+2ECD              ; Subroutine to copy everything from file 0 to file 1, via a 2K area
 6620+2ECD              ; in page 0 (bug: this should be page 7!)
 6621+2ECD 01 07 00     m2ecd:		LD	BC,$0007	; file 0, page 0 (oops, should be page 7!)
 6622+2ED0 11 00 08     		LD	DE,o0800	; 2K to read
 6623+2ED3 21 11 ED     		LD	HL,$ED11			; address to read
 6624+2ED6 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6625+2ED9 CD 00 3F     		CALL	m3f00
 6626+2EDC 12 01        		DW	$0112	; read bytes
 6627+2EDE CD EE 32     		CALL	m32ee		; restore TSTACK
 6628+2EE1 38 25        		JR	C,m2f08		; move on if no error
 6629+2EE3 FE 19        		CP	$19
 6630+2EE5 C2 19 32     		JP	NZ,m3219	; if error not end-of-file, cause error
 6631+2EE8 3E 01        		LD	A,$01
 6632+2EEA 32 06 C0     		LD	(	$C006		),A		; signal end-of-file reached
 6633+2EED D5           m2eed:		PUSH	DE		; save # unread bytes
 6634+2EEE 06 00        		LD	B,$00
 6635+2EF0 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6636+2EF3 CD 00 3F     		CALL	m3f00
 6637+2EF6 09 01        		DW	$0109	; close file 0
 6638+2EF8 CD EE 32     		CALL	m32ee		; restore TSTACK
 6639+2EFB D1           		POP	DE
 6640+2EFC D2 19 32     		JP	NC,m3219	; move on if error
 6641+2EFF 21 00 08     		LD	HL,o0800
 6642+2F02 B7           		OR	A
 6643+2F03 ED 52        		SBC	HL,DE
 6644+2F05 EB           		EX	DE,HL		; DE=number of bytes read
 6645+2F06 18 03        		JR	m2f0b		; move on
 6646+2F08 11 00 08     m2f08:		LD	DE,o0800	; DE=2048 bytes read
 6647+2F0B 7B           m2f0b:		LD	A,E
 6648+2F0C B2           		OR	D
 6649+2F0D 28 14        		JR	Z,m2f23		; if no bytes read, move on
 6650+2F0F 21 11 ED     		LD	HL,$ED11
 6651+2F12 01 07 01     		LD	BC,$0107
 6652+2F15 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6653+2F18 CD 00 3F     		CALL	m3f00
 6654+2F1B 15 01        		DW	$0115	; write bytes to file 1 from page 0 (oops)
 6655+2F1D CD EE 32     		CALL	m32ee		; restore TSTACK
 6656+2F20 D2 19 32     		JP	NC,m3219	; move on if error
 6657+2F23 3A 06 C0     m2f23:		LD	A,(	$C006		)
 6658+2F26 B7           		OR	A
 6659+2F27 CA CD 2E     		JP	Z,m2ecd		; loop back if not end-of-file
 6660+2F2A C3 9E 30     		JP	m309e		; close file 1 and exit
 6661+2F2D
 6662+2F2D              ; Continuation of copy command, where M: is involved
 6663+2F2D
 6664+2F2D 21 22 C0     m2f2d:		LD	HL,$C022			; source filename
 6665+2F30 01 01 00     		LD	BC,$0001	; file 0, excl read
 6666+2F33 11 02 00     		LD	DE,$0002	; must be openable
 6667+2F36 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6668+2F39 CD 00 3F     		CALL	m3f00
 6669+2F3C 06 01        		DW	$0106
 6670+2F3E CD EE 32     		CALL	m32ee		; restore TSTACK
 6671+2F41 D2 19 32     		JP	NC,m3219	; move on if error
 6672+2F44
 6673+2F44              ; Subroutine to copy everything from file 0 to file 1, via a temporary
 6674+2F44              ; file in drive M:
 6675+2F44              ; Each 2K is read via RAM in page 0 - this should be page 7 (oops!)
 6676+2F44
 6677+2F44 21 4E C0     m2f44:		LD	HL,$C04E			; temporary filename
 6678+2F47 01 03 02     		LD	BC,$0203	; file 2, exclusive read-write mode
 6679+2F4A 11 04 02     		LD	DE,$0204	; open & create actions
 6680+2F4D CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6681+2F50 CD 00 3F     		CALL	m3f00
 6682+2F53 06 01        		DW	$0106	; open temporary file
 6683+2F55 CD EE 32     		CALL	m32ee		; restore TSTACK
 6684+2F58 D2 19 32     		JP	NC,m3219	; move on if error
 6685+2F5B 21 00 00     		LD	HL,$0000
 6686+2F5E 22 0D C0     		LD	($C00D		),HL	; zero # bytes copied to temp file
 6687+2F61 01 07 00     m2f61:		LD	BC,$0007
 6688+2F64 11 00 08     		LD	DE,o0800
 6689+2F67 21 11 ED     		LD	HL,$ED11
 6690+2F6A CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6691+2F6D CD 00 3F     		CALL	m3f00
 6692+2F70 12 01        		DW	$0112	; read 2K into RAM
 6693+2F72 CD EE 32     		CALL	m32ee		; restore TSTACK
 6694+2F75 38 25        		JR	C,m2f9c		; move on if no error
 6695+2F77 FE 19        		CP	$19
 6696+2F79 C2 19 32     		JP	NZ,m3219	; cause error if it wasn't end-of-file
 6697+2F7C 3E 01        		LD	A,$01
 6698+2F7E 32 06 C0     		LD	(	$C006		),A		; signal end-of-file reached
 6699+2F81 D5           		PUSH	DE		; save # unread bytes
 6700+2F82 06 00        		LD	B,$00
 6701+2F84 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6702+2F87 CD 00 3F     		CALL	m3f00
 6703+2F8A 09 01        		DW	$0109	; close file 0
 6704+2F8C CD EE 32     		CALL	m32ee		; restore TSTACK
 6705+2F8F D1           		POP	DE
 6706+2F90 D2 19 32     		JP	NC,m3219	; move on if error
 6707+2F93 21 00 08     		LD	HL,o0800
 6708+2F96 B7           		OR	A
 6709+2F97 ED 52        		SBC	HL,DE
 6710+2F99 EB           		EX	DE,HL		; DE=# bytes read
 6711+2F9A 18 03        		JR	m2f9f
 6712+2F9C 11 00 08     m2f9c:		LD	DE,o0800	; DE=2048 bytes read
 6713+2F9F 7B           m2f9f:		LD	A,E
 6714+2FA0 B2           		OR	D
 6715+2FA1 28 16        		JR	Z,m2fb9		; move on if no bytes read
 6716+2FA3 D5           		PUSH	DE
 6717+2FA4 21 11 ED     		LD	HL,$ED11
 6718+2FA7 01 07 02     		LD	BC,$0207
 6719+2FAA CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6720+2FAD CD 00 3F     		CALL	m3f00
 6721+2FB0 15 01        		DW	$0115	; write bytes to temporary file
 6722+2FB2 CD EE 32     		CALL	m32ee		; restore TSTACK
 6723+2FB5 D1           		POP	DE
 6724+2FB6 D2 19 32     		JP	NC,m3219	; move on if error
 6725+2FB9 2A 0D C0     m2fb9:		LD	HL,($C00D		)
 6726+2FBC 19           		ADD	HL,DE
 6727+2FBD 22 0D C0     		LD	($C00D		),HL	; update number of bytes copied to temp file
 6728+2FC0 11 00 08     		LD	DE,o0800
 6729+2FC3 19           		ADD	HL,DE
 6730+2FC4 EB           		EX	DE,HL
 6731+2FC5 2A 07 C0     		LD	HL,(	$C007		)
 6732+2FC8 3A 06 C0     		LD	A,(	$C006		)
 6733+2FCB B7           		OR	A
 6734+2FCC 20 04        		JR	NZ,m2fd2	; move on if end-of-file reached
 6735+2FCE ED 52        		SBC	HL,DE
 6736+2FD0 30 8F        		JR	NC,m2f61	; loop back if temp file can take 2K more
 6737+2FD2 3A 04 C0     m2fd2:		LD	A,(	$C004		)
 6738+2FD5 E6 DF        		AND	$DF		; get source drive (capitalised)
 6739+2FD7 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6740+2FDA CD 00 3F     		CALL	m3f00
 6741+2FDD 42 01        		DW	$0142	; flush for source drive
 6742+2FDF CD EE 32     		CALL	m32ee		; restore TSTACK
 6743+2FE2 D2 19 32     		JP	NC,m3219	; move on if error
 6744+2FE5 06 02        		LD	B,$02
 6745+2FE7 21 00 00     		LD	HL,$0000
 6746+2FEA 1E 00        		LD	E,$00
 6747+2FEC CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6748+2FEF CD 00 3F     		CALL	m3f00
 6749+2FF2 36 01        		DW	$0136	; get to start of temp file
 6750+2FF4 CD EE 32     		CALL	m32ee		; restore TSTACK
 6751+2FF7 3A 0A C0     		LD	A,($C00A		)
 6752+2FFA B7           		OR	A
 6753+2FFB 20 21        		JR	NZ,m301e	; move on if dst_file contains spec of temp file
 6754+2FFD 21 10 C0     		LD	HL,$C010
 6755+3000 E5           		PUSH	HL
 6756+3001 CD 68 32     		CALL	m3268		; else display filespec
 6757+3004 E1           		POP	HL
 6758+3005 01 02 01     		LD	BC,$0102
 6759+3008 11 04 02     		LD	DE,$0204
 6760+300B CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6761+300E CD 00 3F     		CALL	m3f00
 6762+3011 06 01        		DW	$0106	; open file 1 in exclusive-write mode
 6763+3013 CD EE 32     		CALL	m32ee		; restore TSTACK
 6764+3016 D2 19 32     		JP	NC,m3219	; move on if error
 6765+3019 3E 01        		LD	A,$01
 6766+301B 32 0A C0     		LD	($C00A		),A	; signal dest file is open
 6767+301E 21 11 ED     m301e:		LD	HL,$ED11
 6768+3021 11 00 08     		LD	DE,o0800
 6769+3024 01 07 02     		LD	BC,$0207
 6770+3027 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6771+302A CD 00 3F     		CALL	m3f00
 6772+302D 12 01        		DW	$0112	; read 2K from temp file
 6773+302F CD EE 32     		CALL	m32ee		; restore TSTACK
 6774+3032 21 00 08     		LD	HL,o0800	; HL=o0800 bytes read
 6775+3035 38 0B        		JR	C,m3042		; move on if no error
 6776+3037 FE 19        		CP	$19
 6777+3039 C2 19 32     		JP	NZ,m3219	; cause non-EOF errors
 6778+303C 21 00 08     		LD	HL,o0800
 6779+303F B7           		OR	A
 6780+3040 ED 52        		SBC	HL,DE		; HL=# bytes read
 6781+3042 EB           m3042:		EX	DE,HL
 6782+3043 01 07 01     		LD	BC,$0107
 6783+3046 21 11 ED     		LD	HL,$ED11
 6784+3049 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6785+304C CD 00 3F     		CALL	m3f00
 6786+304F 15 01        		DW	$0115	; write bytes to file 1
 6787+3051 CD EE 32     		CALL	m32ee		; restore TSTACK
 6788+3054 D2 19 32     		JP	NC,m3219	; move on if error
 6789+3057 2A 0D C0     		LD	HL,($C00D		)
 6790+305A 11 00 08     		LD	DE,o0800
 6791+305D B7           		OR	A
 6792+305E ED 52        		SBC	HL,DE
 6793+3060 38 07        		JR	C,m3069		; move on if temp file empty
 6794+3062 7C           		LD	A,H
 6795+3063 B5           		OR	L
 6796+3064 22 0D C0     		LD	($C00D		),HL	; update bytes left in temp file
 6797+3067 20 B5        		JR	NZ,m301e	; loop back to copy more
 6798+3069 06 02        m3069:		LD	B,$02
 6799+306B CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6800+306E CD 00 3F     		CALL	m3f00
 6801+3071 09 01        		DW	$0109	; close temp file
 6802+3073 CD EE 32     		CALL	m32ee		; restore TSTACK
 6803+3076 3A 05 C0     		LD	A,(	$C005		)
 6804+3079 E6 DF        		AND	$DF		; get dest drive (capitalised)
 6805+307B CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6806+307E CD 00 3F     		CALL	m3f00
 6807+3081 42 01        		DW	$0142	; flush dest drive
 6808+3083 CD EE 32     		CALL	m32ee		; restore TSTACK
 6809+3086 D2 19 32     		JP	NC,m3219	; move on if error
 6810+3089 3A 06 C0     		LD	A,(	$C006		)
 6811+308C B7           		OR	A
 6812+308D CA 44 2F     		JP	Z,m2f44		; loop back if not EOF
 6813+3090 21 4E C0     		LD	HL,$C04E
 6814+3093 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6815+3096 CD 00 3F     		CALL	m3f00
 6816+3099 24 01        		DW	$0124	; delete temp file
 6817+309B CD EE 32     		CALL	m32ee		; restore TSTACK
 6818+309E
 6819+309E              ; Enter here if copying via 2K area in RAM
 6820+309E
 6821+309E 06 01        m309e:		LD	B,$01
 6822+30A0 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6823+30A3 CD 00 3F     		CALL	m3f00
 6824+30A6 09 01        		DW	$0109	; close file 1
 6825+30A8 CD EE 32     		CALL	m32ee		; restore TSTACK
 6826+30AB D2 19 32     		JP	NC,m3219	; move on if error
 6827+30AE 3E 0D        		LD	A,$0D
 6828+30B0 D7           		RST	10H		; output CR
 6829+30B1 21 0F C0     		LD	HL,	$C00F
 6830+30B4 34           		INC	(HL)		; increment # files copied
 6831+30B5 C9           		RET
 6832+30B6
 6833+30B6              ; Subroutine to check whether filespec at HL is wild
 6834+30B6              ; Causes error if filespec longer than $11 (inc terminator)
 6835+30B6
 6836+30B6 06 11        m30b6:		LD	B,$11
 6837+30B8 7E           		LD	A,(HL)
 6838+30B9 FE 3F        		CP	"?"
 6839+30BB 20 07        		JR	NZ,m30c4	; move on if not ? wildcard
 6840+30BD F5           		PUSH	AF
 6841+30BE 3E 01        		LD	A,$01
 6842+30C0 32 0B C0     		LD	(	$C00B		),A	; set wildcard flag
 6843+30C3 F1           		POP	AF
 6844+30C4 FE 2A        m30c4:		CP	"*"
 6845+30C6 20 07        		JR	NZ,m30cf	; move on if not * wildcard
 6846+30C8 F5           		PUSH	AF
 6847+30C9 3E 01        		LD	A,$01
 6848+30CB 32 0B C0     		LD	(	$C00B		),A	; set wildcard flag
 6849+30CE F1           		POP	AF
 6850+30CF 23           m30cf:		INC	HL		; increment pointer
 6851+30D0 3C           		INC	A
 6852+30D1 C8           		RET	Z		; exit if done
 6853+30D2 10 E2        		DJNZ	m30b6		; loop back
 6854+30D4 3E 14        		LD	A,$14
 6855+30D6 C3 19 32     		JP	m3219		; cause bad filename error if too long
 6856+30D9
 6857+30D9              ; Subroutine to copy up to B chars from HL to DE, stopping at first space
 6858+30D9
 6859+30D9 7E           m30d9:		LD	A,(HL)		; get next char
 6860+30DA FE 20        		CP	" "
 6861+30DC C8           		RET	Z		; exit if space
 6862+30DD 12           		LD	(DE),A		; copy char
 6863+30DE 23           		INC	HL		; increment pointers
 6864+30DF 13           		INC	DE
 6865+30E0 10 F7        		DJNZ	m30d9		; loop back
 6866+30E2 C9           		RET
 6867+30E3
 6868+30E3              ; Subroutine to get a drive letter from a filespec & place it
 6869+30E3              ; in the address at DE. HL points past the colon of the filespec
 6870+30E3
 6871+30E3 2B           m30e3:		DEC	HL
 6872+30E4 2B           		DEC	HL
 6873+30E5 7E           		LD	A,(HL)		; get character before colon
 6874+30E6 F6 20        		OR	$20		; make lowercase
 6875+30E8 FE 61        		CP	"a"
 6876+30EA D8           		RET	C		; exit if < 'a'
 6877+30EB FE 7B        		CP	'{'
 6878+30ED D0           		RET	NC		; or if > 'z'
 6879+30EE 12           		LD	(DE),A		; store drive letter
 6880+30EF C9           		RET
 6881+30F0
 6882+30F0              ; Subroutine to check if filespec includes drive specification
 6883+30F0              ; On entry, HL=address of filespec
 6884+30F0              ; On exit, Z flag set if drive specified, and HL points to
 6885+30F0              ; start of filename after colon.
 6886+30F0
 6887+30F0 E5           m30f0:		PUSH	HL
 6888+30F1 D1           		POP	DE		; copy address of filename to DE
 6889+30F2 7E           		LD	A,(HL)		; get first char
 6890+30F3 3C           		INC	A
 6891+30F4 28 0D        		JR	Z,m3103		; move to exit if end of filename
 6892+30F6 06 03        		LD	B,$03		; check first 3 chars
 6893+30F8 7E           m30f8:		LD	A,(HL)
 6894+30F9 FE 3A        		CP	":"		; is char a ":" ?
 6895+30FB 28 0A        		JR	Z,m3107		; move on if so
 6896+30FD 3C           		INC	A
 6897+30FE 28 03        		JR	Z,m3103		; exit if end of filename
 6898+3100 23           		INC	HL
 6899+3101 10 F5        		DJNZ	m30f8		; back for more
 6900+3103 F6 FF        m3103:		OR	$FF		; reset Z flag - no drive specified
 6901+3105 EB           		EX	DE,HL		; HL=start of filename
 6902+3106 C9           		RET
 6903+3107 23           m3107:		INC	HL		; HL=start of filename after drive spec
 6904+3108 C9           		RET			; exit with Z set
 6905+3109
 6906+3109              ; Subroutine to copy a $FF-terminated filename from HL to DE
 6907+3109              ; If max length of $11 (inc terminator) exceeded, cause error
 6908+3109
 6909+3109 06 11        m3109:		LD	B,$11		; allow 17 characters in a filename
 6910+310B 7E           		LD	A,(HL)
 6911+310C 12           		LD	(DE),A		; copy filename
 6912+310D 23           		INC	HL		; increment pointers
 6913+310E 13           		INC	DE
 6914+310F 3C           		INC	A		; test for end of filename
 6915+3110 28 07        		JR	Z,m3119		; exit if found
 6916+3112 10 F5        		DJNZ	m3109		; loop back
 6917+3114 3E 14        		LD	A,$14
 6918+3116 C3 19 32     		JP	m3219		; cause +3DOS error $14, "Bad filename"
 6919+3119 C9           m3119:		RET
 6920+311A
 6921+311A
 6922+311A              ; Subroutine to clear screen and open channel to stream 2
 6923+311A
 6924+311A EF           m311a:		RST	28H
 6925+311B 6B 0D        		DW	o0D6B		; cls
 6926+311D 3E 02        		LD	A,$02
 6927+311F EF           		RST	28H
 6928+3120 01 16        		DW	o1601		; open channel to stream 2
 6929+3122 C9           		RET
 6930+3123
 6931+3123              ; Routine to copy files to spectrum format
 6932+3123
 6933+3123 AF           m3123:		XOR	A
 6934+3124 32 0B C0     		LD	(	$C00B		),A	; no wildcard
 6935+3127 32 0A C0     		LD	($C00A		),A	; dest not open file
 6936+312A 21 10 C0     		LD	HL,$C010
 6937+312D CD B6 30     		CALL	m30b6		; is dest filespec wild?
 6938+3130 3A 0B C0     		LD	A,(	$C00B		)
 6939+3133 B7           		OR	A
 6940+3134 28 07        		JR	Z,m313d		; move on if not
 6941+3136 CD 64 2B     		CALL	m2b64		; page in normal memory
 6942+3139 CD DA 2A     		CALL	m2ada
 6943+313C 49           		DB	$49		; else error "destination cannot be wild"
 6944+313D 21 10 C0     m313d:		LD	HL,$C010
 6945+3140 06 12        		LD	B,$12
 6946+3142 7E           m3142:		LD	A,(HL)
 6947+3143 FE 2E        		CP	'.'		; has file got extension?
 6948+3145 23           		INC	HL
 6949+3146 28 03        		JR	Z,m314b		; move on if so
 6950+3148 3C           		INC	A
 6951+3149 20 F7        		JR	NZ,m3142
 6952+314B 2B           m314b:		DEC	HL
 6953+314C EB           		EX	DE,HL
 6954+314D 21 14 32     		LD	HL,m3214
 6955+3150 01 04 00     		LD	BC,$0004	; length 4 misses terminator (oops!)
 6956+3153 ED B0        		LDIR			; copy ".HED" extension
 6957+3155 2A 02 C0     		LD	HL,(	$C002		)
 6958+3158 01 01 00     		LD	BC,$0001	; file 0, exclusive read
 6959+315B 11 01 00     		LD	DE,$0001
 6960+315E CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6961+3161 CD 00 3F     		CALL	m3f00
 6962+3164 06 01        		DW	$0106	; open source file
 6963+3166 CD EE 32     		CALL	m32ee		; restore TSTACK
 6964+3169 D2 19 32     		JP	NC,m3219	; move on if error
 6965+316C 21 10 C0     		LD	HL,$C010			; dest filename
 6966+316F 01 02 01     		LD	BC,$0102	; file 1, exclusive write
 6967+3172 11 04 01     		LD	DE,$0104
 6968+3175 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6969+3178 CD 00 3F     		CALL	m3f00
 6970+317B 06 01        		DW	$0106	; open dest file
 6971+317D CD EE 32     		CALL	m32ee		; restore TSTACK
 6972+3180 D2 19 32     		JP	NC,m3219	; move on if error
 6973+3183 3E 01        		LD	A,$01
 6974+3185 32 0A C0     		LD	($C00A		),A	; signal dest open
 6975+3188 21 00 00     		LD	HL,$0000
 6976+318B 22 0D C0     		LD	($C00D		),HL	; signal 0 bytes copied
 6977+318E 06 00        m318e:		LD	B,$00
 6978+3190 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6979+3193 CD 00 3F     		CALL	m3f00
 6980+3196 18 01        		DW	$0118	; read a byte
 6981+3198 CD EE 32     		CALL	m32ee		; restore TSTACK
 6982+319B 38 07        		JR	C,m31a4		; move on if no error
 6983+319D FE 19        		CP	$19
 6984+319F C2 19 32     		JP	NZ,m3219	; cause non-EOF error
 6985+31A2 28 19        		JR	Z,m31bd		; move on
 6986+31A4 06 01        m31a4:		LD	B,$01
 6987+31A6 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6988+31A9 CD 00 3F     		CALL	m3f00
 6989+31AC 1B 01        		DW	$011B	; write byte
 6990+31AE CD EE 32     		CALL	m32ee		; restore TSTACK
 6991+31B1 2A 0D C0     		LD	HL,($C00D		)
 6992+31B4 23           		INC	HL		; update bytes copied
 6993+31B5 22 0D C0     		LD	($C00D		),HL
 6994+31B8 38 D4        		JR	C,m318e		; loop back if no error
 6995+31BA C3 19 32     		JP	m3219		; cause error
 6996+31BD 06 00        m31bd:		LD	B,$00
 6997+31BF CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 6998+31C2 CD 00 3F     		CALL	m3f00
 6999+31C5 09 01        		DW	$0109	; close source file
 7000+31C7 CD EE 32     		CALL	m32ee		; restore TSTACK
 7001+31CA D2 19 32     		JP	NC,m3219	; move on if error
 7002+31CD 3A 05 C0     		LD	A,(	$C005		)
 7003+31D0 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 7004+31D3 CD 00 3F     		CALL	m3f00
 7005+31D6 42 01        		DW	$0142	; flush dest drive
 7006+31D8 CD EE 32     		CALL	m32ee		; restore TSTACK
 7007+31DB 06 01        		LD	B,$01
 7008+31DD CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 7009+31E0 CD 00 3F     		CALL	m3f00
 7010+31E3 0F 01        		DW	$010F	; point at header data for dest file
 7011+31E5 CD EE 32     		CALL	m32ee		; restore TSTACK
 7012+31E8 D2 19 32     		JP	NC,m3219
 7013+31EB 3E 03        		LD	A,$03
 7014+31ED DD 77 00     		LD	(IX+$00),A	; set CODE type
 7015+31F0 2A 0D C0     		LD	HL,($C00D		)
 7016+31F3 DD 75 01     		LD	(IX+$01),L
 7017+31F6 DD 74 02     		LD	(IX+$02),H	; set length
 7018+31F9 AF           		XOR	A
 7019+31FA DD 77 03     		LD	(IX+$03),A	; set load address to zero
 7020+31FD DD 77 04     		LD	(IX+$04),A
 7021+3200 06 01        		LD	B,$01
 7022+3202 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 7023+3205 CD 00 3F     		CALL	m3f00
 7024+3208 09 01        		DW	$0109	; close dest file
 7025+320A CD EE 32     		CALL	m32ee		; restore TSTACK
 7026+320D D2 19 32     		JP	NC,m3219	; move on if error
 7027+3210 CD 64 2B     		CALL	m2b64		; page in normal memory
 7028+3213 C9           		RET			; done
 7029+3214
 7030+3214 2E 48 45 44  m3214:		DM	".HED", $FF
 7030+3218 FF
 7031+3219
 7032+3219              ; Routine to close files 0-2, delete temporary files and
 7033+3219              ; generate the +3DOS error held in A
 7034+3219
 7035+3219 F5           m3219:		PUSH	AF		; save +3DOS error code
 7036+321A 06 03        		LD	B,$03		; three files
 7037+321C C5           m321c:		PUSH	BC		; stack counter
 7038+321D 05           		DEC	B		; decrement counter
 7039+321E C5           		PUSH	BC		; stack file number
 7040+321F CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 7041+3222 CD 00 3F     		CALL	m3f00
 7042+3225 09 01        		DW	$0109	; try to close file B
 7043+3227 CD EE 32     		CALL	m32ee		; restore TSTACK
 7044+322A C1           		POP	BC		; restore file number
 7045+322B 38 0B        		JR	C,m3238		; move on if closed okay
 7046+322D CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 7047+3230 CD 00 3F     		CALL	m3f00
 7048+3233 0C 01        		DW	$010C	; else abandon it
 7049+3235 CD EE 32     		CALL	m32ee		; restore TSTACK
 7050+3238 C1           m3238:		POP	BC
 7051+3239 10 E1        		DJNZ	m321c		; back for other files
 7052+323B 3E 0D        		LD	A,$0D
 7053+323D D7           		RST	10H		; new line on screen
 7054+323E 3A 0A C0     		LD	A,($C00A		)
 7055+3241 B7           		OR	A
 7056+3242 28 0E        		JR	Z,m3252		; move on if no temporary file created
 7057+3244 21 10 C0     		LD	HL,$C010			; HL=address of temporary filename
 7058+3247 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 7059+324A CD 00 3F     		CALL	m3f00
 7060+324D 24 01        		DW	$0124	; delete temporary file
 7061+324F CD EE 32     		CALL	m32ee		; restore TSTACK
 7062+3252 21 4E C0     m3252:		LD	HL,$C04E
 7063+3255 CD B6 32     		CALL	m32b6		; save TSTACK in page 7
 7064+3258 CD 00 3F     		CALL	m3f00
 7065+325B 24 01        		DW	$0124	; delete other temporary file
 7066+325D CD EE 32     		CALL	m32ee		; restore TSTACK
 7067+3260 F1           		POP	AF		; restore +3DOS error code
 7068+3261 CD 64 2B     		CALL	m2b64		; page in normal memory
 7069+3264 CD 9A 0E     		CALL	m0e9a		; cause +3DOS error
 7070+3267 FF           		DB	$FF
 7071+3268
 7072+3268              ; Subroutine to display filename/message at HL
 7073+3268
 7074+3268 7E           m3268:		LD	A,(HL)		; get next char
 7075+3269 23           		INC	HL
 7076+326A B7           		OR	A
 7077+326B C8           		RET	Z		; exit if null
 7078+326C FE FF        		CP	$FF
 7079+326E C8           		RET	Z		; or $FF
 7080+326F E6 7F        		AND	$7F
 7081+3271 D7           		RST	10H		; display character
 7082+3272 18 F4        		JR	m3268		; loop back
 7083+3274
 7084+3274
 7085+3274              ; Subroutine to get a key (apparently unused)
 7086+3274
 7087+3274 21 3B 5C     m3274:		LD	HL,	$5C3B
 7088+3277 CB AE        		RES	5,(HL)		; set "no key"
 7089+3279 CB 6E        m3279:		BIT	5,(HL)
 7090+327B 28 FC        		JR	Z,m3279		; loop until key available
 7091+327D CB AE        		RES	5,(HL)		; set "no key"
 7092+327F 3A 08 5C     		LD	A,(	$5C08)	; get it
 7093+3282 C9           		RET
 7094+3283
 7095+3283              ; Temporary filespec, used in COPY
 7096+3283
 7097+3283 4D 3A 56 41  m3283:		DM	"M:VAXNSUZ.$$$", $FF
 7097+3287 58 4E 53 55
 7097+328B 5A 2E 24 24
 7097+328F 24 FF
 7098+3291
 7099+3291              ; Files copied messages
 7100+3291
 7101+3291 00 00 00...  		DS	37
 7102+32B6
 7103+32B6              ; Subroutine to copy TSTACK to a temporary area in page 7, and
 7104+32B6              ; reset SP to use whole of TSTACK again
 7105+32B6
 7106+32B6 F3           m32b6:		DI
 7107+32B7 22 08 E6     		LD	(	$E608		),HL	; save HL
 7108+32BA F5           		PUSH	AF
 7109+32BB E1           		POP	HL
 7110+32BC 22 06 E6     		LD	(	$E606		),HL	; save AF
 7111+32BF ED 53 0A E6  		LD	(	$E60A		),DE	; save DE
 7112+32C3 ED 43 0C E6  		LD	(	$E60C		),BC	; save BC
 7113+32C7 21 FF 5B     		LD	HL,	$5BFF
 7114+32CA 11 FF E7     		LD	DE,$E7ff
 7115+32CD 01 84 00     		LD	BC,$0084
 7116+32D0 ED B8        		LDDR			; copy TSTACK area into page 7
 7117+32D2 C1           		POP	BC		; BC=return address
 7118+32D3 ED 73 02 E6  		LD	(	$E602		),SP	; save SP
 7119+32D7 21 FF 5B     		LD	HL,	$5BFF
 7120+32DA F9           		LD	SP,HL		; set SP back to top of TSTACK
 7121+32DB C5           		PUSH	BC		; restack return address
 7122+32DC ED 4B 0C E6  		LD	BC,(	$E60C		)	; restore BC
 7123+32E0 ED 5B 0A E6  		LD	DE,(	$E60A		)	; restore DE
 7124+32E4 2A 06 E6     		LD	HL,(	$E606		)
 7125+32E7 E5           		PUSH	HL
 7126+32E8 F1           		POP	AF		; restore AF
 7127+32E9 2A 08 E6     		LD	HL,(	$E608		)	; restore HL
 7128+32EC FB           		EI
 7129+32ED C9           		RET
 7130+32EE
 7131+32EE              ; Subroutine to restore TSTACK from where it's been saved in a temporary
 7132+32EE              ; area in page 7
 7133+32EE
 7134+32EE F3           m32ee:		DI
 7135+32EF 22 08 E6     		LD	(	$E608		),HL	; save HL
 7136+32F2 F5           		PUSH	AF
 7137+32F3 E1           		POP	HL
 7138+32F4 22 06 E6     		LD	(	$E606		),HL	; save AF
 7139+32F7 ED 53 0A E6  		LD	(	$E60A		),DE	; save DE
 7140+32FB ED 43 0C E6  		LD	(	$E60C		),BC	; save BC
 7141+32FF E1           		POP	HL
 7142+3300 22 04 E6     		LD	(	$E604		),HL	; save return address
 7143+3303 21 FF E7     		LD	HL,$E7ff
 7144+3306 11 FF 5B     		LD	DE,	$5BFF
 7145+3309 01 84 00     		LD	BC,$0084
 7146+330C ED B8        		LDDR			; restore TSTACK from saved location
 7147+330E 2A 02 E6     		LD	HL,(	$E602		)
 7148+3311 F9           		LD	SP,HL		; restore SP
 7149+3312 2A 04 E6     		LD	HL,(	$E604		)
 7150+3315 E5           		PUSH	HL		; restack return address
 7151+3316 ED 4B 0C E6  		LD	BC,(	$E60C		)	; restore BC
 7152+331A ED 5B 0A E6  		LD	DE,(	$E60A		)	; restore DE
 7153+331E 2A 06 E6     		LD	HL,(	$E606		)
 7154+3321 E5           		PUSH	HL
 7155+3322 F1           		POP	AF		; restore AF
 7156+3323 2A 08 E6     		LD	HL,(	$E608		)	; restore HL
 7157+3326 FB           		EI
 7158+3327 C9           		RET
 7159+3328
 7160+3328              ; The COPY EXP command
 7161+3328
 7162+3328 AF           m3328:		XOR	A
 7163+3329 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 7164+332C 32 16 ED     		LD	($ED11		+5),A	; flag "normal copy exp"
 7165+332F CD 64 2B     		CALL	m2b64		; page in normal memory
 7166+3332 EF           		RST	28H
 7167+3333 20 00        		DW	$0020		; get next character
 7168+3335 FE DD        		CP	$DD
 7169+3337 20 0E        		JR	NZ,x34be	; move on if not INVERSE
 7170+3339 3E FC        		LD	A,$FC
 7171+333B CD 89 2B     		CALL	m2b89		; page in DOS workspace
 7172+333E 32 16 ED     		LD	($ED11		+5),A	; flag "inverse copy exp"
 7173+3341 CD 64 2B     		CALL	m2b64		; page in normal memory
 7174+3344 EF           		RST	28H
 7175+3345 20 00        		DW	$0020		; get to next char
 7176+3347              x34be:		EQU	$
 7177+3347 CD B1 10     m3347:		CALL	m10b1		; check for end-of-statement
 7178+334A 3A 67 5B     		LD	A,(	$5B67)
 7179+334D 01 FD 1F     		LD	BC,PBANK678
 7180+3350 CB E7        		SET	4,A		; set strobe high
 7181+3352 F3           		DI
 7182+3353 32 67 5B     		LD	(	$5B67),A
 7183+3356 ED 79        		OUT	(C),A		; output strobe
 7184+3358 FB           		EI
 7185+3359 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 7186+335C F3           		DI
 7187+335D 3E 1B        		LD	A,$1B		; set DUMPLF/216" linespacing
 7188+335F CD B9 33     		CALL	m33b9
 7189+3362 3E 33        		LD	A,"3"
 7190+3364 CD B9 33     		CALL	m33b9
 7191+3367 21 7B 5B     		LD	HL,	$5B7B
 7192+336A 7E           		LD	A,(HL)
 7193+336B CD B9 33     		CALL	m33b9
 7194+336E 21 1F 40     		LD	HL,$401F	; address of top right corner of display
 7195+3371 1E 20        		LD	E,$20		; number of chars per line
 7196+3373 E5           m3373:		PUSH	HL
 7197+3374 16 01        		LD	D,$01		; start with bit 0 pixel
 7198+3376 D5           m3376:		PUSH	DE
 7199+3377 E5           		PUSH	HL
 7200+3378 21 BF 34     		LD	HL,m34bf
 7201+337B CD C5 33     		CALL	m33c5		; output raster line header
 7202+337E E1           		POP	HL
 7203+337F D1           		POP	DE
 7204+3380 E5           		PUSH	HL
 7205+3381 CD D1 33     m3381:		CALL	m33d1		; output raster data for next two pixels
 7206+3384 7C           		LD	A,H
 7207+3385 E6 07        		AND	$07
 7208+3387 24           		INC	H		; get to next pixel line down
 7209+3388 FE 07        		CP	$07
 7210+338A 20 F5        		JR	NZ,m3381	; loop back if still in same character line
 7211+338C 7C           		LD	A,H
 7212+338D D6 08        		SUB	$08		; back to top line of a character
 7213+338F 67           		LD	H,A
 7214+3390 7D           		LD	A,L
 7215+3391 C6 20        		ADD	A,$20		; move to next character line down
 7216+3393 6F           		LD	L,A
 7217+3394 30 EB        		JR	NC,m3381	; loop back if same screen third
 7218+3396 7C           		LD	A,H
 7219+3397 C6 08        		ADD	A,$08		; increment screen third
 7220+3399 67           		LD	H,A
 7221+339A FE 58        		CP	$58
 7222+339C 20 E3        		JR	NZ,m3381	; loop back if all thirds not done
 7223+339E E1           		POP	HL		; restore top of screen address
 7224+339F CB 22        		SLA	D
 7225+33A1 CB 22        		SLA	D		; shift left two pixels
 7226+33A3 30 D1        		JR	NC,m3376	; loop back if within same char
 7227+33A5 E1           		POP	HL		; restore top of screen address
 7228+33A6 2B           		DEC	HL		; previous character
 7229+33A7 1D           		DEC	E
 7230+33A8 20 C9        		JR	NZ,m3373	; loop back if not finished
 7231+33AA 3E 1B        		LD	A,$1B		; reset printer
 7232+33AC CD B9 33     		CALL	m33b9
 7233+33AF 3E 40        		LD	A,'@'
 7234+33B1 CD B9 33     		CALL	m33b9
 7235+33B4 FB           		EI
 7236+33B5 CD 64 2B     		CALL	m2b64		; page in normal memory
 7237+33B8 C9           		RET			; done
 7238+33B9
 7239+33B9              ; Subroutine to page in normal memory, output a character to the
 7240+33B9              ; printer, and page back DOS workspace
 7241+33B9
 7242+33B9 FB           m33b9:		EI
 7243+33BA CD 64 2B     		CALL	m2b64		; page in normal memory
 7244+33BD CD 51 20     		CALL	m2051		; output char to printer
 7245+33C0 CD 89 2B     		CALL	m2b89		; page in DOS workspace
 7246+33C3 F3           		DI
 7247+33C4 C9           		RET
 7248+33C5
 7249+33C5              ; Subroutine to output a $FF-terminated string to the printer
 7250+33C5
 7251+33C5 7E           m33c5:		LD	A,(HL)		; get next char
 7252+33C6 FE FF        		CP	$FF
 7253+33C8 C8           		RET	Z		; exit if $FF
 7254+33C9 E5           		PUSH	HL
 7255+33CA CD B9 33     		CALL	m33b9		; output char
 7256+33CD E1           		POP	HL
 7257+33CE 23           		INC	HL
 7258+33CF 18 F4        		JR	m33c5		; loop back
 7259+33D1
 7260+33D1              ; Subroutine to output 4 raster bytes for the next 2 pixels
 7261+33D1
 7262+33D1 F5           m33d1:		PUSH	AF		; save registers
 7263+33D2 E5           		PUSH	HL
 7264+33D3 D5           		PUSH	DE
 7265+33D4 E5           		PUSH	HL
 7266+33D5 CD 02 34     		CALL	m3402		; E=attribute for address in HL
 7267+33D8 E1           		POP	HL
 7268+33D9 CD 12 34     		CALL	m3412		; clear 4-byte buffer
 7269+33DC CD 3F 34     		CALL	m343f		; copy appropriate pattern for pixel to buffer
 7270+33DF CD 1F 34     		CALL	m341f		; shift pattern left 3 bits
 7271+33E2 CB 22        		SLA	D		; shift pixel number
 7272+33E4 CD 3F 34     		CALL	m343f		; merge in pattern for next pixel
 7273+33E7 CD 32 34     		CALL	m3432		; shift patterns left 2 bits
 7274+33EA 06 04        		LD	B,$04		; get ready to output 4 raster bytes
 7275+33EC 21 11 ED     		LD	HL,$ED11
 7276+33EF 7E           m33ef:		LD	A,(HL)		; get pattern
 7277+33F0 C5           		PUSH	BC
 7278+33F1 E5           		PUSH	HL
 7279+33F2 21 16 ED     		LD	HL,$ED11		+5
 7280+33F5 AE           		XOR	(HL)		; invert if required
 7281+33F6 CD B9 33     		CALL	m33b9		; output byte
 7282+33F9 E1           		POP	HL
 7283+33FA C1           		POP	BC
 7284+33FB 23           		INC	HL
 7285+33FC 10 F1        		DJNZ	m33ef		; loop back
 7286+33FE D1           		POP	DE
 7287+33FF E1           		POP	HL
 7288+3400 F1           		POP	AF
 7289+3401 C9           		RET
 7290+3402
 7291+3402              ; Subroutine to get attribute byte in E for screen address in HL
 7292+3402
 7293+3402 F5           m3402:		PUSH	AF
 7294+3403 7C           		LD	A,H
 7295+3404 E6 18        		AND	$18
 7296+3406 CB 3F        		SRL	A
 7297+3408 CB 3F        		SRL	A
 7298+340A CB 3F        		SRL	A
 7299+340C F6 58        		OR	$58		; address attribs
 7300+340E 67           		LD	H,A
 7301+340F 5E           		LD	E,(HL)		; get attrib
 7302+3410 F1           		POP	AF
 7303+3411 C9           		RET
 7304+3412
 7305+3412              ; Subroutine to clear a 4-byte area at tmp_buff
 7306+3412
 7307+3412 E5           m3412:		PUSH	HL
 7308+3413 21 11 ED     		LD	HL,$ED11
 7309+3416 06 04        		LD	B,$04
 7310+3418 36 00        m3418:		LD	(HL),$00	; clear the buffer
 7311+341A 23           		INC	HL
 7312+341B 10 FB        		DJNZ	m3418
 7313+341D E1           		POP	HL
 7314+341E C9           		RET
 7315+341F
 7316+341F              ; Subroutine to shift patterns in buffer left 3 bits
 7317+341F
 7318+341F E5           m341f:		PUSH	HL
 7319+3420 C5           		PUSH	BC
 7320+3421 21 11 ED     		LD	HL,$ED11
 7321+3424 06 04        		LD	B,$04
 7322+3426 CB 26        m3426:		SLA	(HL)		; shift left
 7323+3428 CB 26        		SLA	(HL)
 7324+342A CB 26        		SLA	(HL)
 7325+342C 23           		INC	HL
 7326+342D 10 F7        		DJNZ	m3426
 7327+342F C1           		POP	BC
 7328+3430 E1           		POP	HL
 7329+3431 C9           		RET
 7330+3432
 7331+3432              ; Subroutine to shift patterns in buffer left 2 bits
 7332+3432
 7333+3432 21 11 ED     m3432:		LD	HL,$ED11
 7334+3435 06 04        		LD	B,$04
 7335+3437 CB 26        m3437:		SLA	(HL)		; shift left
 7336+3439 CB 26        		SLA	(HL)
 7337+343B 23           		INC	HL
 7338+343C 10 F9        		DJNZ	m3437
 7339+343E C9           		RET
 7340+343F
 7341+343F              ; Subroutine to merge required pattern for pixel into buffer at tmp_buff
 7342+343F
 7343+343F D5           m343f:		PUSH	DE		; save registers
 7344+3440 E5           		PUSH	HL
 7345+3441 7A           		LD	A,D
 7346+3442 A6           		AND	(HL)		; mask required pixel
 7347+3443 7B           		LD	A,E		; A=attribute
 7348+3444 20 06        		JR	NZ,m344c	; move on if need ink
 7349+3446 CB 3F        		SRL	A		; shift paper colour to ink position
 7350+3448 CB 3F        		SRL	A
 7351+344A CB 3F        		SRL	A
 7352+344C E6 07        m344c:		AND	$07		; mask off ink/paper colour as required
 7353+344E CB 73        		BIT	6,E		; check BRIGHT
 7354+3450 28 02        		JR	Z,m3454
 7355+3452 F6 08        		OR	$08		; add 8 if bright
 7356+3454 21 6F 34     m3454:		LD	HL,m346f	; address of colour offsets table
 7357+3457 16 00        		LD	D,$00
 7358+3459 5F           		LD	E,A
 7359+345A 19           		ADD	HL,DE
 7360+345B 5E           		LD	E,(HL)		; DE=offset into pattern table
 7361+345C 21 7F 34     		LD	HL,m347f
 7362+345F 19           		ADD	HL,DE		; HL=required pattern address
 7363+3460 06 04        		LD	B,$04
 7364+3462 11 11 ED     		LD	DE,$ED11
 7365+3465 1A           m3465:		LD	A,(DE)
 7366+3466 B6           		OR	(HL)
 7367+3467 12           		LD	(DE),A		; merge pattern into buffer
 7368+3468 23           		INC	HL
 7369+3469 13           		INC	DE
 7370+346A 10 F9        		DJNZ	m3465
 7371+346C E1           		POP	HL		; restore registers
 7372+346D D1           		POP	DE
 7373+346E C9           		RET
 7374+346F
 7375+346F              ; Table of offsets into following pattern table
 7376+346F
 7377+346F 00 04 08 0C  m346f:		DB	$00,$04,$08,$0C
 7378+3473 10 14 18 1C  		DB	$10,$14,$18,$1C
 7379+3477 20 24 28 2C  		DB	$20,$24,$28,$2C
 7380+347B 30 34 38 3C  		DB	$30,$34,$38,$3C
 7381+347F
 7382+347F              ; Pattern table for expanded copy
 7383+347F
 7384+347F 07 07 07 07  m347f:		DB	$07,$07,$07,$07	; black
 7385+3483 07 05 07 07  		DB	$07,$05,$07,$07	; blue
 7386+3487 03 07 06 07  		DB	$03,$07,$06,$07	; red
 7387+348B 07 03 06 03  		DB	$07,$03,$06,$03	; magenta
 7388+348F 06 03 06 03  		DB	$06,$03,$06,$03	; green
 7389+3493 06 05 02 05  		DB	$06,$05,$02,$05	; cyan
 7390+3497 02 05 02 05  		DB	$02,$05,$02,$05	; yellow
 7391+349B 01 06 03 04  		DB	$01,$06,$03,$04	; white
 7392+349F 07 07 07 07  		DB	$07,$07,$07,$07	; black
 7393+34A3 05 02 03 04  		DB	$05,$02,$03,$04	; bright blue
 7394+34A7 06 01 02 01  		DB	$06,$01,$02,$01	; bright red
 7395+34AB 01 04 02 04  		DB	$01,$04,$02,$04	; bright magenta
 7396+34AF 04 00 04 01  		DB	$04,$00,$04,$01	; bright green
 7397+34B3 01 00 04 00  		DB	$01,$00,$04,$00	; bright cyan
 7398+34B7 00 02 00 00  		DB	$00,$02,$00,$00	; bright yellow
 7399+34BB 00 00 00 00  		DB	$00,$00,$00,$00	; bright white
 7400+34BF
 7401+34BF              ; Raster line header for expanded copy
 7402+34BF
 7403+34BF 0D 0A        m34bf:		DB	$0D,$0A		; CRLF
 7404+34C1 1B 4C 00 03  		DB	$1B,"L",$00,$03	; 768 bytes in 120dpi mode
 7405+34C5 FF           		DB	$FF
 7406+34C6
 7407+34C6              ; CAT "T:" routine
 7408+34C6
 7409+34C6 01 11 00     m34c6:		LD	BC,$0011
 7410+34C9 EF           		RST	28H
 7411+34CA 30 00        		DW	$0030		; make space for tape header
 7412+34CC D5           		PUSH	DE
 7413+34CD DD E1        		POP	IX		; IX=address of space
 7414+34CF 3E 0D        m34cf:		LD	A,$0D
 7415+34D1 EF           		RST	28H
 7416+34D2 10 00        		DW	$0010		; output CR
 7417+34D4 3E 7F        m34d4:		LD	A,$7F
 7418+34D6 DB FE        		IN	A,($FE)
 7419+34D8 1F           		RRA
 7420+34D9 38 08        		JR	C,m34e3		; move on if BREAK not pressed
 7421+34DB 3E FE        		LD	A,$FE
 7422+34DD DB FE        		IN	A,($FE)
 7423+34DF 1F           		RRA
 7424+34E0 38 01        		JR	C,m34e3		; move on if BREAK not pressed
 7425+34E2 C9           		RET			; done
 7426+34E3 3E 00        m34e3:		LD	A,$00
 7427+34E5 11 11 00     		LD	DE,$0011
 7428+34E8 37           		SCF
 7429+34E9 DD E5        		PUSH	IX
 7430+34EB EF           		RST	28H
 7431+34EC 56 05        		DW	o0556		; read a header
 7432+34EE DD E1        		POP	IX
 7433+34F0 30 E2        		JR	NC,m34d4	; loop back if failed
 7434+34F2 DD E5        		PUSH	IX
 7435+34F4 3E 22        		LD	A,$22
 7436+34F6 EF           		RST	28H
 7437+34F7 10 00        		DW	$0010		; output quote
 7438+34F9 06 0A        		LD	B,$0A		; name length 10
 7439+34FB DD 7E 01     m34fb:		LD	A,(IX+$01)
 7440+34FE EF           		RST	28H
 7441+34FF 10 00        		DW	$0010		; output next byte
 7442+3501 DD 23        		INC	IX
 7443+3503 10 F6        		DJNZ	m34fb		; loop back
 7444+3505 DD E1        		POP	IX
 7445+3507 21 A1 35     		LD	HL,m35a1
 7446+350A CD 91 35     		CALL	m3591		; output quote and space
 7447+350D DD 7E 00     		LD	A,(IX+$00)	; get file type
 7448+3510 FE 00        		CP	$00
 7449+3512 20 23        		JR	NZ,m3537	; move on if not program
 7450+3514 DD 7E 0E     		LD	A,(IX+$0E)
 7451+3517 FE 80        		CP	$80
 7452+3519 28 14        		JR	Z,m352f		; move on if no auto-run line number
 7453+351B 21 BE 35     		LD	HL,m35be
 7454+351E CD 91 35     		CALL	m3591		; display "LINE" message
 7455+3521 DD 4E 0D     		LD	C,(IX+$0D)
 7456+3524 DD 46 0E     		LD	B,(IX+$0E)
 7457+3527 CD 9A 35     		CALL	m359a		; output line number
 7458+352A 3E 20        		LD	A," "
 7459+352C EF           		RST	28H
 7460+352D 10 00        		DW	$0010		; output space
 7461+352F 21 A4 35     m352f:		LD	HL,m35a4
 7462+3532 CD 91 35     		CALL	m3591		; output "BASIC" message
 7463+3535 18 98        		JR	m34cf		; loop back
 7464+3537 FE 01        m3537:		CP	$01
 7465+3539 20 19        		JR	NZ,m3554	; move on if not number array
 7466+353B 21 AD 35     		LD	HL,m35ad
 7467+353E CD 91 35     		CALL	m3591		; output "DATA" message
 7468+3541 DD 7E 0E     		LD	A,(IX+$0E)
 7469+3544 E6 7F        		AND	$7F
 7470+3546 F6 40        		OR	$40
 7471+3548 EF           		RST	28H
 7472+3549 10 00        		DW	$0010		; output variable name
 7473+354B 21 BA 35     		LD	HL,m35b9+1
 7474+354E CD 91 35     		CALL	m3591		; output "()" message
 7475+3551 C3 CF 34     		JP	m34cf		; loop back
 7476+3554 FE 02        m3554:		CP	$02
 7477+3556 20 19        		JR	NZ,m3571	; move on if not character array
 7478+3558 21 AD 35     		LD	HL,m35ad
 7479+355B CD 91 35     		CALL	m3591		; output "DATA" message
 7480+355E DD 7E 0E     		LD	A,(IX+$0E)
 7481+3561 E6 7F        		AND	$7F
 7482+3563 F6 40        		OR	$40
 7483+3565 EF           		RST	28H
 7484+3566 10 00        		DW	$0010		; output variable name
 7485+3568 21 B9 35     		LD	HL,m35b9
 7486+356B CD 91 35     		CALL	m3591		; output "$()" message
 7487+356E C3 CF 34     		JP	m34cf		; loop back
 7488+3571 21 B3 35     m3571:		LD	HL,m35b3
 7489+3574 CD 91 35     		CALL	m3591		; output "CODE" message
 7490+3577 DD 4E 0D     		LD	C,(IX+$0D)
 7491+357A DD 46 0E     		LD	B,(IX+$0E)
 7492+357D CD 9A 35     		CALL	m359a		; output load address
 7493+3580 3E 2C        		LD	A,","
 7494+3582 EF           		RST	28H
 7495+3583 10 00        		DW	$0010		; output comma
 7496+3585 DD 4E 0B     		LD	C,(IX+$0B)
 7497+3588 DD 46 0C     		LD	B,(IX+$0C)
 7498+358B CD 9A 35     		CALL	m359a		; output length
 7499+358E C3 CF 34     		JP	m34cf		; loop back
 7500+3591
 7501+3591              ; Subroutine to output a null-terminated string
 7502+3591
 7503+3591 7E           m3591:		LD	A,(HL)		; get next char
 7504+3592 B7           		OR	A
 7505+3593 C8           		RET	Z		; exit if null
 7506+3594 EF           		RST	28H
 7507+3595 10 00        		DW	$0010		; output char
 7508+3597 23           		INC	HL
 7509+3598 18 F7        		JR	m3591		; loop back
 7510+359A
 7511+359A              ; Subroutine to output number in BC
 7512+359A
 7513+359A EF           m359a:		RST	28H
 7514+359B 2B 2D        		DW	o2D2B		; stack number on calculator
 7515+359D EF           		RST	28H
 7516+359E E3 2D        		DW	o2DE3		; output number
 7517+35A0 C9           		RET
 7518+35A1
 7519+35A1              ; Messages for tape catalogs
 7520+35A1
 7521+35A1 22 20 00     m35a1:		DM	$22, " ", $00
 7522+35A4 28 42 41 53  m35a4:		DM	"(BASIC) ", 0
 7522+35A8 49 43 29 20
 7522+35AC 00
 7523+35AD 44 41 54 41  m35ad:		DM	"DATA ", 0
 7523+35B1 20 00
 7524+35B3 43 4F 44 45  m35b3:		DM	"CODE ", 0
 7524+35B7 20 00
 7525+35B9 24 28 29 20  m35b9:		DM	"$() ", 0
 7525+35BD 00
 7526+35BE 4C 49 4E 45  m35be:		DM	"LINE ", 0
 7526+35C2 20 00
 7527+35C4
 7528+35C4 EF           		RST	28H
 7529+35C5 F1 2B        		DW	o2BF1
 7530+35C7 C5           		PUSH	BC
 7531+35C8 D5           		PUSH	DE
 7532+35C9 EF           		RST	28H
 7533+35CA 94 1E        		DW	o1E94
 7534+35CC D1           		POP	DE
 7535+35CD C1           		POP	BC
 7536+35CE CD 00 3F     		CALL	m3f00
 7537+35D1 56 00        		DW	$0056
 7538+35D3 D2 DB 0E     m35d3:		JP	NC,m0edb
 7539+35D6 C9           		RET
 7540+35D7 EF           m35d7:		RST	28H
 7541+35D8 94 1E        		DW	o1E94
 7542+35DA CD 00 3F     		CALL	l3f00
 7543+35DD 59 00        		DW	$0059
 7544+35DF 18 F2        		JR	m35d3
 7545+35E1 DF           		RST	18H
 7546+35E2 FE 23        		CP	"#"
 7547+35E4 28 0A        		JR	Z,m35f0
 7548+35E6 EF           		RST	28H
 7549+35E7 82 1C        		DW	o1C82
 7550+35E9 CD B1 10     		CALL	m10b1
 7551+35EC EF           		RST	28H
 7552+35ED 67 1E        		DW	o1E67
 7553+35EF C9           		RET
 7554+35F0 CD 1C 11     m35f0:		CALL	m111c
 7555+35F3 CD B1 10     		CALL	m10b1
 7556+35F6 11 D5 04     		LD	DE,m04d5
 7557+35F9 01 0D 00     		LD	BC,13
 7558+35FC CD F0 14     		CALL	m14f0
 7559+35FF EF           		RST	28H
 7560+3600 94 1E        		DW	o1E94
 7561+3602 EF           		RST	28H
 7562+3603 01 16        		DW	o1601
 7563+3605 EF           		RST	28H
 7564+3606 A2 2D        		DW	o2DA2
 7565+3608 C5           		PUSH	BC
 7566+3609 EF           		RST	28H
 7567+360A A2 2D        		DW	o2DA2
 7568+360C C5           		PUSH	BC
 7569+360D E1           		POP	HL
 7570+360E D1           		POP	DE
 7571+360F 06 01        		LD	B,1
 7572+3611 CD 00 3F     		CALL	m3f00
 7573+3614 62 00        		DW	$0062
 7574+3616 C9           		RET
 7575+3617
 7576+3617              ; ####################################################################################################################
 7577+3617
 7578+3617              SPARE_ROM1_0:	EQU	$
 7579+3617
 7580+3617 AF           is_tap:		XOR	A
 7581+3618 32 05 E8     		LD	(	$E805	),A
 7582+361B 1B           		DEC	DE		; veo si termina en .tap
 7583+361C 1A           		LD	A,(DE)
 7584+361D E6 DF        		AND	$DF
 7585+361F FE 50        		CP	"P"		; me baso en que termine solo con la letra "P" por ".TAP"
 7586+3621 20 3F        		JR	NZ,notap	; si no es otra cosa no lo considero como ".TAP" solo
 7587+3623              					; espero que el usuario sea prolijo y haya proporcionado
 7588+3623 01 00 00     		LD	BC,$0000	; un nombre de archivo en el argumento del tipo "*.TAP"
 7589+3626 ED 43 0F E8  		LD	(		$E80F	+0),BC
 7590+362A ED 43 11 E8  		LD	(		$E80F	+2),BC
 7591+362E
 7592+362E 06 06        		LD	B,$06
 7593+3630 CD 00 3F     		CALL	m3f00
 7594+3633 0C 01        		DW	$010C
 7595+3635
 7596+3635 01 01 06     		LD	BC,$0601	; abro el archivo lectura exc. con handle: 06
 7597+3638 79           		LD	A,C
 7598+3639 32 05 E8     		LD	(	$E805	),A	; 1=en pag 7 me indicará que estoy cargando desde cinta
 7599+363C 11 02 00     		LD	DE,$0002	; error si no existe + puntero en 0
 7600+363F 21 4E C0     		LD	HL,$C04E
 7601+3642 CD 00 3F     		CALL	m3f00
 7602+3645 06 01        		DW	$0106	; open file
 7603+3647 38 07        		JR	C,ok_opentap	; salto adelante si todo Ok
 7604+3649
 7605+3649 CD 64 2B     		CALL	m2b64		; page in normal memory
 7606+364C CD 9A 0E     		CALL	m0e9a		; cause DOS error
 7607+364F FF           		DB	$FF
 7608+3650
 7609+3650 3A 79 5B     ok_opentap:	LD	A,(	$5B79)
 7610+3653 32 06 E8     		LD	(	$E806	),A
 7611+3656 3E 54        		LD	A,"T"
 7612+3658 32 79 5B     		LD	(	$5B79),A	; cambio a T: el "drive" por defecto
 7613+365B
 7614+365B CD EE 32     		CALL	m32ee		; esta es la forma de retornar
 7615+365E CD 64 2B     		CALL	m2b64		; al basic
 7616+3661 C9           		RET
 7617+3662
 7618+3662 21 4E C0     notap:		LD	HL,$C04E			; trato de continuar como si que...
 7619+3665 C9           		RET			; "aquí no pasó nada"
 7620+3666
 7621+3666              ; ##############################################################################
 7622+3666
 7623+3666              FREE_ROM1_0:	EQU	$
 7624+3666
 7625+3666              		;...
 7626+3666              		;...
 7627+3666
 7628+3666              R1_FREE_0:	EQU	103-($-SPARE_ROM1_0)
 7629+3666 00 00 00...  ROM1_SPARE0:	DS	R1_FREE_0
 7630+367E
 7631+367E              		IF 1
 7632+367E
 7633+367E 21 A2 36     rest_ink:		LD	HL,strver
 7634+3681 CD C0 24     			CALL	m24b5
 7635+3684 3E 10        			LD	A,$10		; *2
 7636+3686 D7           			RST	10H		; *1
 7637+3687 3E 05        			LD	A,	%00000101	; *2
 7638+3689 D7           			RST	10H		; *1
 7639+368A C3 64 2B     			JP	m2b64		; *3 - page in normal memory
 7640+368D 00 00 00     			DS	3		; *9
 7641+3690
 7642+3690              		ELSE
 7643+3690 ~
 7644+3690 ~            m368c:			DM	"Physical drives: ", 0	; *18
 7645+3690 ~
 7646+3690              		ENDIF
 7647+3690
 7648+3690 20 66 6C 6F  m369e:		DM	" floppy, ", 0
 7648+3694 70 70 79 2C
 7648+3698 20 00
 7649+369A 20 49 44 45  m36a8:		DM	" IDE"
 7650+369E
 7651+369E              		IF 1
 7652+369E
 7653+369E 2C 20 00 00  			DM	", ",0,0
 7654+36A2
 7655+36A2 2C 20 76     strver:			DM	", v"
 7656+36A5 31           			DB	($30+	1	)
 7657+36A6 2E           			DB	"."
 7658+36A7 33           			DB	($30+	3	)
 7659+36A8 38           			DB	($30+	8	)
 7660+36A9 74           			DM		"t"
 7661+36AA 00 00 00...  			DS	5
 7662+36AF
 7663+36AF              		ELSE
 7664+36AF ~
 7665+36AF ~            			DM	"Logical drives: ", 0
 7666+36AF ~
 7667+36AF              		ENDIF
 7668+36AF
 7669+36AF 52 65 61 6C  m36bd:		DM	"Really format hard disk (Y/N)?", 0
 7669+36B3 6C 79 20 66
 7669+36B7 6F 72 6D 61
 7669+36BB 74 20 68 61
 7669+36BF 72 64 20 64
 7669+36C3 69 73 6B 20
 7669+36C7 28 59 2F 4E
 7669+36CB 29 3F 00
 7670+36CE 52 65 61 6C  m36dc:		DM	"Really delete partition (Y/N)?", 0
 7670+36D2 6C 79 20 64
 7670+36D6 65 6C 65 74
 7670+36DA 65 20 70 61
 7670+36DE 72 74 69 74
 7670+36E2 69 6F 6E 20
 7670+36E6 28 59 2F 4E
 7670+36EA 29 3F 00
 7671+36ED 49 6E 76 61  m36fb:		DM	"Invalid partitio", "n"+$80
 7671+36F1 6C 69 64 20
 7671+36F5 70 61 72 74
 7671+36F9 69 74 69 6F
 7671+36FD EE
 7672+36FE 50 61 72 74  m370c:		DM	"Partition already exist", "s"+$80
 7672+3702 69 74 69 6F
 7672+3706 6E 20 61 6C
 7672+370A 72 65 61 64
 7672+370E 79 20 65 78
 7672+3712 69 73 74 F3
 7673+3716 4E 6F 74 20  m3724:		DM	"Not implemente", "d"+$80
 7673+371A 69 6D 70 6C
 7673+371E 65 6D 65 6E
 7673+3722 74 65 E4
 7674+3725 50 61 72 74  m3733:		DM	"Partition ope", "n"+$80
 7674+3729 69 74 69 6F
 7674+372D 6E 20 6F 70
 7674+3731 65 EE
 7675+3733 4F 75 74 20  m3741:		DM	"Out of partition handle", "s"+$80
 7675+3737 6F 66 20 70
 7675+373B 61 72 74 69
 7675+373F 74 69 6F 6E
 7675+3743 20 68 61 6E
 7675+3747 64 6C 65 F3
 7676+374B 4E 6F 74 20  m3759:		DM	"Not a swap partitio", "n"+$80
 7676+374F 61 20 73 77
 7676+3753 61 70 20 70
 7676+3757 61 72 74 69
 7676+375B 74 69 6F EE
 7677+375F 44 72 69 76  m376d:		DM	"Drive already mappe", "d"+$80
 7677+3763 65 20 61 6C
 7677+3767 72 65 61 64
 7677+376B 79 20 6D 61
 7677+376F 70 70 65 E4
 7678+3773 4F 75 74 20  m3781:		DM	"Out of XDPB", "s"+$80
 7678+3777 6F 66 20 58
 7678+377B 44 50 42 F3
 7679+377F 4E 6F 20 73  m378d:		DM	"No swap partitio", "n"+$80
 7679+3783 77 61 70 20
 7679+3787 70 61 72 74
 7679+378B 69 74 69 6F
 7679+378F EE
 7680+3790 49 6E 76 61  m379e:		DM	"Invalid devic", "e"+$80
 7680+3794 6C 69 64 20
 7680+3798 64 65 76 69
 7680+379C 63 E5
 7681+379E
 7682+379E 00 00 00...  		DS	$31
 7683+37CF
 7684+37CF              ;CORREGIDO MANUALMENTE DE ACA PARA ABAJO
 7685+37CF
 7686+37CF CD C0 24     m37dd:		CALL	m24b5
 7687+37D2 21 3B 5C     		LD	HL,	$5C3B
 7688+37D5 CB AE        		RES	5,(HL)
 7689+37D7 CB 6E        m37e5:		BIT	5,(HL)
 7690+37D9 28 FC        		JR	Z,m37e5
 7691+37DB CB AE        		RES	5,(HL)
 7692+37DD 3A 08 5C     		LD	A,(	$5C08)
 7693+37E0 E6 DF        		AND	$DF
 7694+37E2 FE 4E        		CP	"N"
 7695+37E4 28 04        		JR	Z,m37f8
 7696+37E6 FE 59        		CP	"Y"
 7697+37E8 20 ED        		JR	NZ,m37e5
 7698+37EA F5           m37f8:		PUSH	AF
 7699+37EB EF           		RST	28H
 7700+37EC 6E 0D        		DW	o0D6E
 7701+37EE F1           		POP	AF
 7702+37EF C9           		RET
 7703+37F0
 7704+37F0 EF           m37fe:		RST	28H
 7705+37F1 6E 0D        		DW	o0D6E
 7706+37F3 21 AF 36     		LD	HL,m36bd
 7707+37F6 CD CF 37     		CALL	m37dd
 7708+37F9 F5           		PUSH	AF
 7709+37FA 01 00 00     		LD	BC,0
 7710+37FD 3A 66 5B     		LD	A,(	$5B66)
 7711+3800 CB 77        		BIT	6,A
 7712+3802 28 03        		JR	Z,m3815
 7713+3804 EF           		RST	28H
 7714+3805 99 1E        		DW	o1E99
 7715+3807 C5           m3815:		PUSH	BC
 7716+3808 EF           		RST	28H
 7717+3809 99 1E        		DW	o1E99
 7718+380B C5           		PUSH	BC
 7719+380C EF           		RST	28H
 7720+380D 94 1E        		DW	o1E94
 7721+380F 4F           		LD	C,A
 7722+3810 E1           		POP	HL
 7723+3811 D1           		POP	DE
 7724+3812 F1           		POP	AF
 7725+3813 FE 4E        		CP	"N"
 7726+3815 C8           		RET	Z
 7727+3816 E5           m3824:		PUSH	HL
 7728+3817 C5           		PUSH	BC
 7729+3818 D5           		PUSH	DE
 7730+3819 06 07        		LD	B,7
 7731+381B 21 11 ED     		LD	HL,$ED11
 7732+381E CD 89 2B     		CALL	m2b89
 7733+3821 CD B6 32     		CALL	m32b6
 7734+3824 CD 00 3F     		CALL	m3f00
 7735+3827 A2 01        		DW	$01A2
 7736+3829 FE 42        		CP	$42
 7737+382B 37           		SCF
 7738+382C 3F           		CCF
 7739+382D C2 52 39     		JP	NZ,m395a
 7740+3830 DD 21 11 ED  		LD	IX,$ED11
 7741+3834 DD 66 03     		LD	H,(IX+$03)
 7742+3837 DD 6E 06     		LD	L,(IX+$06)
 7743+383A DD 5E 01     		LD	E,(IX+$01)
 7744+383D DD 24        		INC	IXH
 7745+383F DD 56 00     		LD	D,(IX+$00)
 7746+3842 CD EE 32     		CALL	m32ee
 7747+3845 CD 64 2B     		CALL	m2b64
 7748+3848 E3           		EX	(SP),HL
 7749+3849 A7           		AND	A
 7750+384A ED 52        		SBC	HL,DE
 7751+384C D2 BF 38     		JP	NC,m38c7
 7752+384F 19           		ADD	HL,DE
 7753+3850 7C           		LD	A,H
 7754+3851 B5           		OR	L
 7755+3852 28 06        		JR	Z,m3862
 7756+3854 EB           		EX	DE,HL
 7757+3855 E1           		POP	HL
 7758+3856 CB FC        		SET	7,H
 7759+3858 18 01        		JR	m3863
 7760+385A E1           m3862:		POP	HL
 7761+385B C1           m3863:		POP	BC
 7762+385C 79           		LD	A,C
 7763+385D C1           		POP	BC
 7764+385E D5           		PUSH	DE
 7765+385F DD E1        		POP	IX
 7766+3861 CD 89 2B     		CALL	m2b89
 7767+3864 CD B6 32     		CALL	m32b6
 7768+3867 CD 00 3F     		CALL	m3f00
 7769+386A B2 00        		DW	$00B2
 7770+386C CD EE 32     		CALL	m32ee
 7771+386F CD 64 2B     		CALL	m2b64
 7772+3872 D8           		RET	C
 7773+3873 CD CB 0E     m387b:		CALL	m0ecb
 7774+3876 FF           		RST	38H
 7775+3877 DF           		RST	18H
 7776+3878 FE E4        		CP	$E4
 7777+387A 28 0A        		JR	Z,m388e
 7778+387C FE B9        		CP	$B9
 7779+387E 28 06        		JR	Z,m388e
 7780+3880 CD B1 10     		CALL	m10b1
 7781+3883 C3 80 22     		JP	m2280
 7782+3886 F5           m388e:		PUSH	AF
 7783+3887 E7           		RST	20H
 7784+3888 EF           		RST	28H
 7785+3889 8C 1C        		DW	o1C8C
 7786+388B DF           		RST	18H
 7787+388C FE 2C        		CP	","
 7788+388E C2 25 11     		JP	NZ,m1125
 7789+3891 E7           m3899:		RST	20H
 7790+3892 EF           		RST	28H
 7791+3893 82 1C        		DW	o1C82
 7792+3895 CD B1 10     		CALL	m10b1
 7793+3898 EF           		RST	28H
 7794+3899 99 1E        		DW	o1E99
 7795+389B C5           		PUSH	BC
 7796+389C CD 5D 39     		CALL	m3965
 7797+389F C2 82 39     		JP	NZ,m398a
 7798+38A2 E1           		POP	HL
 7799+38A3 F1           		POP	AF
 7800+38A4 FE B9        		CP	$B9
 7801+38A6 3E 02        		LD	A,2
 7802+38A8 01 11 00     		LD	BC,17
 7803+38AB 28 05        		JR	Z,m38ba
 7804+38AD 3E 03        		LD	A,3
 7805+38AF 01 11 00     		LD	BC,17
 7806+38B2 CD 89 2B     m38ba:		CALL	m2b89
 7807+38B5 32 A8 EF     		LD	($EFA8),A
 7808+38B8 E5           		PUSH	HL
 7809+38B9 A7           		AND	A
 7810+38BA ED 42        		SBC	HL,BC
 7811+38BC E1           		POP	HL
 7812+38BD 38 07        		JR	C,m38ce
 7813+38BF CD 64 2B     m38c7:		CALL	m2b64
 7814+38C2 CD DA 2A     		CALL	m2ada
 7815+38C5 0A           		LD	A,(BC)
 7816+38C6 7C           m38ce:		LD	A,H
 7817+38C7 B5           		OR	L
 7818+38C8 28 F5        		JR	Z,m38c7
 7819+38CA D5           		PUSH	DE
 7820+38CB E5           		PUSH	HL
 7821+38CC 21 8B 3D     		LD	HL,m3d8b
 7822+38CF 11 B8 EF     		LD	DE,$EFB8
 7823+38D2 01 1D 00     		LD	BC,$1D
 7824+38D5 ED B0        		LDIR
 7825+38D7 E1           		POP	HL
 7826+38D8 E5           		PUSH	HL
 7827+38D9 55           		LD	D,L
 7828+38DA 1E 00        		LD	E,0
 7829+38DC 7D           		LD	A,L
 7830+38DD FE 05        		CP	5
 7831+38DF 38 1A        		JR	C,m3903
 7832+38E1 FE 09        		CP	9
 7833+38E3 38 0D        		JR	C,m38fa
 7834+38E5 CB 3A        		SRL	D
 7835+38E7 CB 1B        		RR	E
 7836+38E9 01 06 3F     		LD	BC,$3F06
 7837+38EC 26 03        		LD	H,3
 7838+38EE 3E C0        		LD	A,$C0
 7839+38F0 18 12        		JR	m390c
 7840+38F2 01 05 1F     m38fa:		LD	BC,o1F05
 7841+38F5 26 01        		LD	H,1
 7842+38F7 3E F0        		LD	A,$F0
 7843+38F9 18 09        		JR	m390c
 7844+38FB CB 22        m3903:		SLA	D
 7845+38FD 01 04 0F     		LD	BC,$0F04
 7846+3900 26 00        		LD	H,0
 7847+3902 3E FF        		LD	A,$FF
 7848+3904 ED 43 BA EF  m390c:		LD	($EFBA),BC
 7849+3908 32 C1 EF     		LD	($EFC1),A
 7850+390B 7C           		LD	A,H
 7851+390C 32 BC EF     		LD	($EFBC),A
 7852+390F 1B           		DEC	DE
 7853+3910 45           		LD	B,L
 7854+3911 AF           		XOR	A
 7855+3912 C6 10        m391a:		ADD	A,$10
 7856+3914 10 FC        		DJNZ	m391a
 7857+3916 A7           		AND	A
 7858+3917 20 04        		JR	NZ,m3925
 7859+3919 3D           		DEC	A
 7860+391A 11 F7 07     		LD	DE,$07F7
 7861+391D 32 CA EF     m3925:		LD	($EFCA),A
 7862+3920 ED 53 BD EF  		LD	($EFBD),DE
 7863+3924 E1           		POP	HL
 7864+3925 29           		ADD	HL,HL
 7865+3926 29           		ADD	HL,HL
 7866+3927 29           		ADD	HL,HL
 7867+3928 2B           		DEC	HL
 7868+3929 22 B0 EF     		LD	($EFB0),HL
 7869+392C 3E FF        		LD	A,$FF
 7870+392E 32 AF EF     		LD	($EFAF),A
 7871+3931 F1           		POP	AF
 7872+3932 F5           		PUSH	AF
 7873+3933 21 98 EF     		LD	HL,$EF98
 7874+3936 CD B6 32     		CALL	m32b6
 7875+3939 CD 00 3F     		CALL	m3f00
 7876+393C B8 00        		DW	$00B8
 7877+393E CD EE 32     		CALL	m32ee
 7878+3941 30 12        		JR	NC,m395d
 7879+3943 F1           		POP	AF
 7880+3944 2E E5        		LD	L,$E5
 7881+3946 DD 21 20 00  		LD	IX,$0020
 7882+394A CD B6 32     		CALL	m32b6
 7883+394D CD 00 3F     		CALL	m3f00
 7884+3950 BB 00        		DW	$00BB
 7885+3952 CD EE 32     m395a:		CALL	m32ee
 7886+3955 CD 64 2B     m395d:		CALL	m2b64
 7887+3958 D8           		RET	C
 7888+3959 CD CB 0E     		CALL	m0ecb
 7889+395C FF           		RST	38H
 7890+395D EF           m3965:		RST	28H
 7891+395E F1 2B        		DW	o2BF1
 7892+3960 78           		LD	A,B
 7893+3961 B1           		OR	C
 7894+3962 20 04        		JR	NZ,m3970
 7895+3964 CD DA 2A     		CALL	m2ada
 7896+3967 2C           		INC	L
 7897+3968 13           m3970:		INC	DE
 7898+3969 1A           		LD	A,(DE)
 7899+396A 1B           		DEC	DE
 7900+396B FE 3E        		CP	">"
 7901+396D 3E 00        		LD	A,0
 7902+396F 20 15        		JR	NZ,m398e
 7903+3971 1A           m3979:		LD	A,(DE)
 7904+3972 13           		INC	DE
 7905+3973 13           		INC	DE
 7906+3974 0B           		DEC	BC
 7907+3975 0B           		DEC	BC
 7908+3976 D6 30        		SUB	"0"
 7909+3978 28 0C        		JR	Z,m398e
 7910+397A FE 01        		CP	1
 7911+397C 28 08        		JR	Z,m398e
 7912+397E 57           		LD	D,A
 7913+397F FE 05        		CP	5
 7914+3981 D8           		RET	C
 7915+3982 CD DA 2A     m398a:		CALL	m2ada
 7916+3985 59           		LD	E,C
 7917+3986 F5           m398e:		PUSH	AF
 7918+3987 06 00        		LD	B,0
 7919+3989 79           		LD	A,C
 7920+398A FE 11        		CP	$11
 7921+398C 38 02        		JR	C,m3998
 7922+398E 3E 10        		LD	A,$10
 7923+3990 EB           m3998:		EX	DE,HL
 7924+3991 11 98 EF     		LD	DE,$EF98
 7925+3994 CD 63 3F     		CALL	m3f63
 7926+3997 F3           		DI
 7927+3998 3A 5C 5B     		LD	A,(	$5B5C)
 7928+399B F6 07        		OR	7
 7929+399D 01 FD 7F     		LD	BC,$7FFD
 7930+39A0 ED 79        		OUT	(C),A
 7931+39A2 EB           		EX	DE,HL
 7932+39A3 16 10        		LD	D,$10
 7933+39A5 36 20        m39ad:		LD	(HL),$20
 7934+39A7 23           		INC	HL
 7935+39A8 15           		DEC	D
 7936+39A9 20 FA        		JR	NZ,m39ad
 7937+39AB 3A 5C 5B     		LD	A,(	$5B5C)
 7938+39AE ED 79        		OUT	(C),A
 7939+39B0 FB           		EI
 7940+39B1 D1           		POP	DE
 7941+39B2 C9           		RET
 7942+39B3 DF           m39bb:		RST	18H
 7943+39B4 FE EB        		CP	$EB
 7944+39B6 CA F2 3D     		JP	Z,m3df2
 7945+39B9 FE BF        		CP	$BF
 7946+39BB 28 17        		JR	Z,m39dc
 7947+39BD FE DF        		CP	$DF
 7948+39BF 28 56        		JR	Z,m3a1f
 7949+39C1 FE C4        		CP	$C4
 7950+39C3 28 70        		JR	Z,m3a3d
 7951+39C5 FE CC        		CP	$CC
 7952+39C7 C2 25 11     		JP	NZ,m1125
 7953+39CA E7           		RST	20H
 7954+39CB EF           		RST	28H
 7955+39CC 8C 1C        		DW	o1C8C
 7956+39CE CD B1 10     		CALL	m10b1
 7957+39D1 C3 E5 04     		JP	m04e5
 7958+39D4 E7           m39dc:		RST	20H
 7959+39D5 EF           		RST	28H
 7960+39D6 8C 1C        		DW	o1C8C
 7961+39D8 CD 79 3A     		CALL	m3a81
 7962+39DB CD B1 10     		CALL	m10b1
 7963+39DE CD 5D 39     		CALL	m3965
 7964+39E1 7A           		LD	A,D
 7965+39E2 F5           		PUSH	AF
 7966+39E3 20 16        		JR	NZ,m3a03
 7967+39E5 21 98 EF     		LD	HL,$EF98
 7968+39E8 CD 89 2B     		CALL	m2b89
 7969+39EB CD B6 32     		CALL	m32b6
 7970+39EE CD 00 3F     		CALL	m3f00
 7971+39F1 B5 00        		DW	$00B5
 7972+39F3 CD EE 32     		CALL	m32ee
 7973+39F6 CD 64 2B     		CALL	m2b64
 7974+39F9 30 18        		JR	NC,m3a1b
 7975+39FB C5           m3a03:		PUSH	BC
 7976+39FC CD 86 3A     		CALL	m3a8e
 7977+39FF C1           		POP	BC
 7978+3A00 F1           		POP	AF
 7979+3A01 CD 89 2B     		CALL	m2b89
 7980+3A04 CD B6 32     		CALL	m32b6
 7981+3A07 CD 00 3F     		CALL	m3f00
 7982+3A0A F1 00        		DW	$00F1
 7983+3A0C CD EE 32     		CALL	m32ee
 7984+3A0F CD 64 2B     		CALL	m2b64
 7985+3A12 D8           		RET	C
 7986+3A13 CD CB 0E     m3a1b:		CALL	m0ecb
 7987+3A16 FF           		RST	38H
 7988+3A17 E7           m3a1f:		RST	20H
 7989+3A18 CD 79 3A     		CALL	m3a81
 7990+3A1B CD B1 10     		CALL	m10b1
 7991+3A1E CD 86 3A     		CALL	m3a8e
 7992+3A21 CD 89 2B     		CALL	m2b89
 7993+3A24 CD B6 32     		CALL	m32b6
 7994+3A27 CD 00 3F     		CALL	m3f00
 7995+3A2A F4 00        		DW	$00F4
 7996+3A2C CD EE 32     		CALL	m32ee
 7997+3A2F CD 64 2B     		CALL	m2b64
 7998+3A32 30 DF        		JR	NC,m3a1b
 7999+3A34 C9           		RET
 8000+3A35 E7           m3a3d:		RST	20H
 8001+3A36 CD B1 10     		CALL	m10b1
 8002+3A39 21 CE 36     		LD	HL,m36dc
 8003+3A3C CD CF 37     		CALL	m37dd
 8004+3A3F F5           		PUSH	AF
 8005+3A40 CD 5D 39     		CALL	m3965
 8006+3A43 C2 82 39     		JP	NZ,m398a
 8007+3A46 F1           		POP	AF
 8008+3A47 FE 4E        		CP	"N"
 8009+3A49 C8           		RET	Z
 8010+3A4A 7A           		LD	A,D
 8011+3A4B F5           		PUSH	AF
 8012+3A4C 21 98 EF     		LD	HL,$EF98
 8013+3A4F CD 89 2B     		CALL	m2b89
 8014+3A52 CD B6 32     		CALL	m32b6
 8015+3A55 CD 00 3F     		CALL	m3f00
 8016+3A58 B5 00        		DW	$00B5
 8017+3A5A CD EE 32     		CALL	m32ee
 8018+3A5D CD 64 2B     		CALL	m2b64
 8019+3A60 30 13        		JR	NC,m3a7d
 8020+3A62 F1           		POP	AF
 8021+3A63 CD 89 2B     		CALL	m2b89
 8022+3A66 CD B6 32     		CALL	m32b6
 8023+3A69 CD 00 3F     		CALL	m3f00
 8024+3A6C BE 00        		DW	$00BE
 8025+3A6E CD EE 32     		CALL	m32ee
 8026+3A71 CD 64 2B     		CALL	m2b64
 8027+3A74 D8           		RET	C
 8028+3A75 CD CB 0E     m3a7d:		CALL	m0ecb
 8029+3A78 FF           		RST	38H
 8030+3A79 DF           m3a81:		RST	18H
 8031+3A7A 21 66 5B     		LD	HL,	$5B66
 8032+3A7D CB B6        		RES	6,(HL)
 8033+3A7F FE B5        		CP	$B5
 8034+3A81 C0           		RET	NZ
 8035+3A82 CB F6        		SET	6,(HL)
 8036+3A84 E7           		RST	20H
 8037+3A85 C9           		RET
 8038+3A86 EF           m3a8e:		RST	28H
 8039+3A87 F1           		POP	AF
 8040+3A88 2B           		DEC	HL
 8041+3A89 0B           		DEC	BC
 8042+3A8A 0B           		DEC	BC
 8043+3A8B 78           		LD	A,B
 8044+3A8C B1           		OR	C
 8045+3A8D 20 14        		JR	NZ,m3aab
 8046+3A8F 13           		INC	DE
 8047+3A90 1A           		LD	A,(DE)
 8048+3A91 FE 3A        		CP	":"
 8049+3A93 20 0E        		JR	NZ,m3aab
 8050+3A95 1B           		DEC	DE
 8051+3A96 1A           		LD	A,(DE)
 8052+3A97 E6 DF        		AND	$DF
 8053+3A99 FE 41        		CP	"A"
 8054+3A9B 38 06        		JR	C,m3aab
 8055+3A9D FE 51        		CP	"Q"
 8056+3A9F 30 02        		JR	NC,m3aab
 8057+3AA1 6F           		LD	L,A
 8058+3AA2 C9           		RET
 8059+3AA3 CD DA 2A     m3aab:		CALL	m2ada
 8060+3AA6 4E           		LD	C,(HL)
 8061+3AA7 DF           cmdspec:	RST	18H
 8062+3AA8 FE AB        		CP	$AB		; ATTR
 8063+3AAA 01 FF 01     		LD	BC,$1Ff
 8064+3AAD 28 51        		JR	Z,m3b08
 8065+3AAF FE D9        		CP	$D9		; INK
 8066+3AB1 01 07 01     		LD	BC,$0107
 8067+3AB4 28 4A        		JR	Z,m3b08
 8068+3AB6 FE DA        		CP	$DA		; PAPER
 8069+3AB8 01 07 04     		LD	BC,$0407
 8070+3ABB 28 43        		JR	Z,m3b08
 8071+3ABD FE DB        		CP	$DB		; FLASH
 8072+3ABF 01 01 08     		LD	BC,$0801
 8073+3AC2 28 3C        		JR	Z,m3b08
 8074+3AC4 FE DC        		CP	$DC		; BRIGHT
 8075+3AC6 01 01 07     		LD	BC,$0701
 8076+3AC9 28 35        		JR	Z,m3b08
 8077+3ACB FE 0D        		CP	$0D		; ENTER
 8078+3ACD 28 04        		JR	Z,m3adb
 8079+3ACF FE 3A        		CP	":"
 8080+3AD1 20 06        		JR	NZ,m3ae1
 8081+3AD3 CD B1 10     m3adb:		CALL	m10b1
 8082+3AD6 C3 65 14     		JP	m1465
 8083+3AD9 EF           m3ae1:		RST	28H
 8084+3ADA 8C 1C        		DW	o1C8C
 8085+3ADC CD B1 10     		CALL	m10b1
 8086+3ADF EF           		RST	28H
 8087+3AE0 F1 2B        		DW	o2BF1
 8088+3AE2 EB           		EX	DE,HL
 8089+3AE3 11 4E C0     		LD	DE,$C04E
 8090+3AE6 CD 63 3F     		CALL	m3f63
 8091+3AE9 CD 89 2B     		CALL	m2b89
 8092+3AEC 3E FF        		LD	A,$FF
 8093+3AEE 12           		LD	(DE),A
 8094+3AEF
 8095+3AEF              ; #############################################################################
 8096+3AEF              		;ld      hl, tmp_file
 8097+3AEF CD 17 36     		CALL	is_tap
 8098+3AF2              ; #############################################################################
 8099+3AF2
 8100+3AF2 CD B6 32     		CALL	m32b6
 8101+3AF5 CD 00 3F     		CALL	m3f00
 8102+3AF8 FD 00        		DW	$00FD
 8103+3AFA CD EE 32     		CALL	m32ee
 8104+3AFD C3 21 3D     		JP	m3d21
 8105+3B00
 8106+3B00              ;CAMBIA/STORE ATRIBUTOS
 8107+3B00 C5           m3b08:		PUSH	BC
 8108+3B01 E7           		RST	20H
 8109+3B02 EF           		RST	28H
 8110+3B03 82 1C        		DW	o1C82
 8111+3B05 CD 79 3A     		CALL	m3a81
 8112+3B08 CD B1 10     		CALL	m10b1
 8113+3B0B EF           		RST	28H
 8114+3B0C 94 1E        		DW	o1E94
 8115+3B0E C1           		POP	BC
 8116+3B0F 57           		LD	D,A
 8117+3B10 79           		LD	A,C
 8118+3B11 BA           		CP	D
 8119+3B12 30 04        		JR	NC,m3b20
 8120+3B14 CD DA 2A     		CALL	m2ada
 8121+3B17 13           		INC	DE
 8122+3B18 05           m3b20:		DEC	B
 8123+3B19 28 06        		JR	Z,m3b29
 8124+3B1B CB 02        		RLC	D
 8125+3B1D CB 01        		RLC	C
 8126+3B1F 18 F7        		JR	m3b20
 8127+3B21 CD 89 2B     m3b29:		CALL	m2b89
 8128+3B24 79           		LD	A,C
 8129+3B25 2F           		CPL
 8130+3B26 4F           		LD	C,A
 8131+3B27 3A 11 EC     		LD	A,($EC11		)
 8132+3B2A A1           		AND	C
 8133+3B2B B2           		OR	D
 8134+3B2C 32 11 EC     		LD	($EC11		),A
 8135+3B2F 32 0F EC     		LD	($EC0F		),A
 8136+3B32 CD 64 2B     		CALL	m2b64
 8137+3B35 21 66 5B     		LD	HL,	$5B66
 8138+3B38 CB 76        		BIT	6,(HL)
 8139+3B3A C8           		RET	Z
 8140+3B3B 67           		LD	H,A
 8141+3B3C AF           		XOR	A
 8142+3B3D C3 5C 3E     		JP	m3e5c
 8143+3B40
 8144+3B40 FE AD        m3b48:		CP	$AD		; TAB
 8145+3B42 28 18        		JR	Z,m3b64
 8146+3B44 FE B5        		CP	$B5		; ASN
 8147+3B46 CA A8 3D     		JP	Z,m3da8
 8148+3B49 CD DA 2A     		CALL	m2ada
 8149+3B4C 0B           		DEC	BC
 8150+3B4D FE B9        n3b4d:		CP	$B9		; EXP
 8151+3B4F CA 2B 06     		JP	Z,m062b
 8152+3B52 FE B5        		CP	$B5		; ASN
 8153+3B54 CA A8 3D     		JP	Z,m3da8
 8154+3B57 FE AD        		CP	$AD		; TAB
 8155+3B59 C2 F8 05     		JP	NZ,m05f8
 8156+3B5C E7           m3b64:		RST	20H
 8157+3B5D FE B9        		CP	$B9		; EXP
 8158+3B5F 20 06        		JR	NZ,m3b6f
 8159+3B61 E7           		RST	20H
 8160+3B62 21 66 5B     		LD	HL,	$5B66
 8161+3B65 CB F6        		SET	6,(HL)
 8162+3B67 CD B1 10     m3b6f:		CALL	m10b1
 8163+3B6A CD 89 2B     		CALL	m2b89
 8164+3B6D 06 02        		LD	B,2
 8165+3B6F C5           m3b77:		PUSH	BC
 8166+3B70 3E 02        		LD	A,2
 8167+3B72 90           		SUB	B
 8168+3B73 11 00 00     		LD	DE,0
 8169+3B76 D5           		PUSH	DE
 8170+3B77 F5           		PUSH	AF
 8171+3B78 21 48 3D     		LD	HL,m3d48
 8172+3B7B CD D7 07     		CALL	m07d7
 8173+3B7E F1           		POP	AF
 8174+3B7F F5           		PUSH	AF
 8175+3B80 4F           		LD	C,A
 8176+3B81 C6 30        		ADD	A,$30
 8177+3B83 CD CF 07     		CALL	m07cf
 8178+3B86 06 07        		LD	B,7
 8179+3B88 21 11 ED     		LD	HL,$ED11
 8180+3B8B CD B6 32     		CALL	m32b6
 8181+3B8E CD 00 3F     		CALL	m3f00
 8182+3B91 A2 01        		DW	$01A2
 8183+3B93 CD EE 32     		CALL	m32ee
 8184+3B96 FE 42        		CP	$42
 8185+3B98 37           		SCF
 8186+3B99 3F           		CCF
 8187+3B9A 20 6A        		JR	NZ,m3c06
 8188+3B9C DD 21 11 ED  		LD	IX,$ED11
 8189+3BA0 21 77 3D     		LD	HL,m3d77
 8190+3BA3 CD D7 07     		CALL	m07d7
 8191+3BA6 DD 6E 01     		LD	L,(IX+$01)
 8192+3BA9 DD 24        		INC	IXH
 8193+3BAB DD 66 00     		LD	H,(IX+$00)
 8194+3BAE DD 25        		DEC	IXH
 8195+3BB0 1E FF        		LD	E,$FF
 8196+3BB2 CD DF 07     		CALL	m07df
 8197+3BB5 3E 2F        		LD	A, "/"
 8198+3BB7 CD CF 07     		CALL	m07cf
 8199+3BBA 26 00        		LD	H,0
 8200+3BBC DD 6E 03     		LD	L,(IX+$03)
 8201+3BBF 1E FF        		LD	E,$FF
 8202+3BC1 CD DF 07     		CALL	m07df
 8203+3BC4 3E 2F        		LD	A, "/"
 8204+3BC6 CD CF 07     		CALL	m07cf
 8205+3BC9 26 00        		LD	H,0
 8206+3BCB DD 6E 06     		LD	L,(IX+$06)
 8207+3BCE 1E FF        		LD	E,$FF
 8208+3BD0 CD DF 07     		CALL	m07df
 8209+3BD3 3E 29        		LD	A, ")"
 8210+3BD5 CD CF 07     		CALL	m07cf
 8211+3BD8 3E 0D        		LD	A,13
 8212+3BDA CD CF 07     		CALL	m07cf
 8213+3BDD 01 00 00     m3bdd:		LD	BC,0
 8214+3BE0 F1           m3be0:		POP	AF
 8215+3BE1 F5           		PUSH	AF
 8216+3BE2 21 98 EF     		LD	HL,$EF98
 8217+3BE5 CD B6 32     		CALL	m32b6
 8218+3BE8 CD 00 3F     		CALL	m3f00
 8219+3BEB C4 00        		DW	$00C4
 8220+3BED CD EE 32     		CALL	m32ee
 8221+3BF0 D2 15 3D     		JP	NC,m3d15
 8222+3BF3 DD 21 98 EF  		LD	IX,$EF98
 8223+3BF7 DD 7E 10     		LD	A,(IX+$10)
 8224+3BFA FE 00        		CP	0
 8225+3BFC 20 10        		JR	NZ,m3c0e
 8226+3BFE F1           		POP	AF
 8227+3BFF D1           		POP	DE
 8228+3C00 13           		INC	DE
 8229+3C01 D5           		PUSH	DE
 8230+3C02 F5           		PUSH	AF
 8231+3C03 C3 F9 3C     		JP	m3cf9
 8232+3C06 21 7A 3D     m3c06:		LD	HL,m3d7a
 8233+3C09 CD D7 07     		CALL	m07d7
 8234+3C0C 18 CF        		JR	m3bdd
 8235+3C0E C5           m3c0e:		PUSH	BC
 8236+3C0F 21 98 EF     		LD	HL,$EF98
 8237+3C12 1E 10        		LD	E,$10
 8238+3C14 7E           m3c14:		LD	A,(HL)
 8239+3C15 23           		INC	HL
 8240+3C16 A7           		AND	A
 8241+3C17 20 02        		JR	NZ,m3c1b
 8242+3C19 3E 7E        		LD	A,$7E
 8243+3C1B CD CF 07     m3c1b:		CALL	m07cf
 8244+3C1E 1D           		DEC	E
 8245+3C1F 20 F3        		JR	NZ,m3c14
 8246+3C21 3E 20        		LD	A,$20
 8247+3C23 CD CF 07     		CALL	m07cf
 8248+3C26 DD 6E 18     		LD	L,(IX+$18)
 8249+3C29 DD 66 19     		LD	H,(IX+$19)
 8250+3C2C DD 5E 1A     		LD	E,(IX+$1A)
 8251+3C2F 7B           		LD	A,E
 8252+3C30 B4           		OR	H
 8253+3C31 20 13        		JR	NZ,m3c46
 8254+3C33 65           		LD	H,L
 8255+3C34 DD 6E 17     		LD	L,(IX+$17)
 8256+3C37 23           		INC	HL
 8257+3C38 CB 3C        		SRL	H
 8258+3C3A CB 1D        		RR	L
 8259+3C3C 1E 20        		LD	E,$20
 8260+3C3E CD DF 07     		CALL	m07df
 8261+3C41 21 2B 3D     		LD	HL,m3d2b
 8262+3C44 18 1D        		JR	m3c63
 8263+3C46 AF           m3c46:		XOR	A
 8264+3C47 CB 3B        		SRL	E
 8265+3C49 CB 1C        		RR	H
 8266+3C4B CB 1D        		RR	L
 8267+3C4D 1F           		RRA
 8268+3C4E CB 3B        		SRL	E
 8269+3C50 CB 1C        		RR	H
 8270+3C52 CB 1D        		RR	L
 8271+3C54 1F           		RRA
 8272+3C55 CB 3B        		SRL	E
 8273+3C57 CB 1C        		RR	H
 8274+3C59 CB 1D        		RR	L
 8275+3C5B 1E 20        		LD	E,$20
 8276+3C5D CD DF 07     		CALL	m07df
 8277+3C60 21 27 3D     		LD	HL,m3d27
 8278+3C63 CD D7 07     m3c63:		CALL	m07d7
 8279+3C66 DD 7E 10     		LD	A,(IX+$10)
 8280+3C69 FE 01        		CP	1
 8281+3C6B 21 5E 00     		LD	HL,m005e
 8282+3C6E 28 1F        		JR	Z,m3c8f
 8283+3C70 FE 02        		CP	2
 8284+3C72 21 52 3D     		LD	HL,m3d52
 8285+3C75 28 18        		JR	Z,m3c8f
 8286+3C77 FE 03        		CP	3
 8287+3C79 21 57 3D     		LD	HL,m3d57
 8288+3C7C 28 11        		JR	Z,m3c8f
 8289+3C7E FE FE        		CP	$FE
 8290+3C80 21 5D 3D     		LD	HL,m3d5d
 8291+3C83 28 0A        		JR	Z,m3c8f
 8292+3C85 FE FF        		CP	$FF
 8293+3C87 21 63 3D     		LD	HL,m3d63
 8294+3C8A 28 03        		JR	Z,m3c8f
 8295+3C8C 21 68 3D     		LD	HL,m3d68
 8296+3C8F CD D7 07     m3c8f:		CALL	m07d7
 8297+3C92 DD 7E 10     		LD	A,(IX+$10)
 8298+3C95 FE 03        		CP	3
 8299+3C97 20 0E        		JR	NZ,m3ca7
 8300+3C99 DD 7E 3C     		LD	A,(IX+$3C)
 8301+3C9C A7           		AND	A
 8302+3C9D 28 08        		JR	Z,m3ca7
 8303+3C9F CD CF 07     		CALL	m07cf
 8304+3CA2 3E 3A        		LD	A, ":"
 8305+3CA4 CD CF 07     		CALL	m07cf
 8306+3CA7 3E 0D        m3ca7:		LD	A,13
 8307+3CA9 CD CF 07     		CALL	m07cf
 8308+3CAC 21 66 5B     		LD	HL,	$5B66
 8309+3CAF CB 76        		BIT	6,(HL)
 8310+3CB1 28 45        		JR	Z,m3cf8
 8311+3CB3 21 56 00     		LD	HL,m0056
 8312+3CB6 CD D7 07     		CALL	m07d7
 8313+3CB9 DD 6E 11     		LD	L,(IX+$11)
 8314+3CBC DD 66 12     		LD	H,(IX+$12)
 8315+3CBF 1E FF        		LD	E,$FF
 8316+3CC1 CD DF 07     		CALL	m07df
 8317+3CC4 3E 2C        		LD	A, ","
 8318+3CC6 CD CF 07     		CALL	m07cf
 8319+3CC9 DD 6E 13     		LD	L,(IX+$13)
 8320+3CCC 26 00        		LD	H,0
 8321+3CCE 1E FF        		LD	E,$FF
 8322+3CD0 CD DF 07     		CALL	m07df
 8323+3CD3 21 70 3D     		LD	HL,m3d70
 8324+3CD6 CD D7 07     		CALL	m07d7
 8325+3CD9 DD 6E 14     		LD	L,(IX+$14)
 8326+3CDC DD 66 15     		LD	H,(IX+$15)
 8327+3CDF 1E FF        		LD	E,$FF
 8328+3CE1 CD DF 07     		CALL	m07df
 8329+3CE4 3E 2C        		LD	A, ","
 8330+3CE6 CD CF 07     		CALL	m07cf
 8331+3CE9 DD 6E 16     		LD	L,(IX+$16)
 8332+3CEC 26 00        		LD	H,0
 8333+3CEE 1E FF        		LD	E,$FF
 8334+3CF0 CD DF 07     		CALL	m07df
 8335+3CF3 3E 0D        		LD	A,13
 8336+3CF5 CD CF 07     		CALL	m07cf
 8337+3CF8 C1           m3cf8:		POP	BC
 8338+3CF9 03           m3cf9:		INC	BC
 8339+3CFA 78           		LD	A,B
 8340+3CFB B1           		OR	C
 8341+3CFC C2 E0 3B     		JP	NZ,m3be0
 8342+3CFF F1           m3cff:		POP	AF
 8343+3D00 E1           		POP	HL
 8344+3D01 1E FF        		LD	E,$FF
 8345+3D03 CD DF 07     		CALL	m07df
 8346+3D06 21 2E 3D     		LD	HL,m3d2e
 8347+3D09 CD D7 07     		CALL	m07d7
 8348+3D0C C1           m3d0c:		POP	BC
 8349+3D0D 05           		DEC	B
 8350+3D0E C2 6F 3B     		JP	NZ,m3b77
 8351+3D11 CD 64 2B     		CALL	m2b64
 8352+3D14 C9           		RET
 8353+3D15 FE 38        m3d15:		CP	$38
 8354+3D17 28 E6        		JR	Z,m3cff
 8355+3D19 FE 16        		CP	$16
 8356+3D1B 20 04        		JR	NZ,m3d21
 8357+3D1D F1           		POP	AF
 8358+3D1E E1           		POP	HL
 8359+3D1F 18 EB        		JR	m3d0c
 8360+3D21 CD 64 2B     m3d21:		CALL	m2b64
 8361+3D24 C3 73 38     		JP	m387b
 8362+3D27 4D 62 20 00  m3d27:		DM	"Mb ", 0
 8363+3D2B 4B 20 00     m3d2b:		DM	"K ", 0
 8364+3D2E 20 66 72 65  m3d2e:		DM	" free partition entries", 13, 13, 0
 8364+3D32 65 20 70 61
 8364+3D36 72 74 69 74
 8364+3D3A 69 6F 6E 20
 8364+3D3E 65 6E 74 72
 8364+3D42 69 65 73 0D
 8364+3D46 0D 00
 8365+3D48 49 44 45 20  m3d48:		DM	"IDE unit ", 0
 8365+3D4C 75 6E 69 74
 8365+3D50 20 00
 8366+3D52 73 77 61 70  m3d52:		DM	"swap", 0
 8366+3D56 00
 8367+3D57 64 61 74 61  m3d57:		DM	"data ", 0
 8367+3D5B 20 00
 8368+3D5D 2A 42 41 44  m3d5d:		DM	"*BAD*", 0
 8368+3D61 2A 00
 8369+3D63 46 52 45 45  m3d63:		DM	"FREE", 0
 8369+3D67 00
 8370+3D68 75 6E 6B 6E  m3d68:		DM	"unknown", 0
 8370+3D6C 6F 77 6E 00
 8371+3D70 20 45 6E 64  m3d70:		DM	" End: ", 0
 8371+3D74 3A 20 00
 8372+3D77 20 28 00     m3d77:		DM	" (", 0
 8373+3D7A 20 28 6E 6F  m3d7a:		DM	" (not detected)", 13, 0
 8373+3D7E 74 20 64 65
 8373+3D82 74 65 63 74
 8373+3D86 65 64 29 0D
 8373+3D8A 00
 8374+3D8B 00 02 00 00  m3d8b:		DB	0,2,0,0,0,0,0,$FF,1,0,0,0,$80,0
 8374+3D8F 00 00 00 FF
 8374+3D93 01 00 00 00
 8374+3D97 80 00
 8375+3D99 00 02 03 00  		DB	0,2,3,0,0,$80,0,0,2,0,0,0,0,0,0
 8375+3D9D 00 80 00 00
 8375+3DA1 02 00 00 00
 8375+3DA5 00 00 00
 8376+3DA8 E7           m3da8:		RST	20H
 8377+3DA9 CD B1 10     		CALL	m10b1
 8378+3DAC CD 89 2B     		CALL	m2b89
 8379+3DAF 06 10        		LD	B,$10
 8380+3DB1 2E 41        		LD	L, "A"
 8381+3DB3 C5           m3db3:		PUSH	BC
 8382+3DB4 E5           		PUSH	HL
 8383+3DB5 01 98 EF     		LD	BC,$EF98
 8384+3DB8 CD B6 32     		CALL	m32b6
 8385+3DBB CD 00 3F     		CALL	m3f00
 8386+3DBE F7 00        		DW	$00F7
 8387+3DC0 CD EE 32     		CALL	m32ee
 8388+3DC3 D2 21 3D     		JP	NC,m3d21
 8389+3DC6 28 21        		JR	Z,m3de9
 8390+3DC8 E1           		POP	HL
 8391+3DC9 E5           		PUSH	HL
 8392+3DCA 7D           		LD	A,L
 8393+3DCB CD CF 07     		CALL	m07cf
 8394+3DCE 3E 3A        		LD	A, ":"
 8395+3DD0 CD CF 07     		CALL	m07cf
 8396+3DD3 3E 20        		LD	A, " "
 8397+3DD5 CD CF 07     		CALL	m07cf
 8398+3DD8 21 98 EF     		LD	HL,$EF98
 8399+3DDB 06 12        		LD	B,$12
 8400+3DDD 7E           m3ddd:		LD	A,(HL)
 8401+3DDE CD CF 07     		CALL	m07cf
 8402+3DE1 23           		INC	HL
 8403+3DE2 10 F9        		DJNZ	m3ddd
 8404+3DE4 3E 0D        		LD	A,13
 8405+3DE6 CD CF 07     		CALL	m07cf
 8406+3DE9 E1           m3de9:		POP	HL
 8407+3DEA C1           		POP	BC
 8408+3DEB 2C           		INC	L
 8409+3DEC 10 C5        		DJNZ	m3db3
 8410+3DEE CD 64 2B     		CALL	m2b64
 8411+3DF1 C9           		RET
 8412+3DF2 E7           m3df2:		RST	20H
 8413+3DF3 EF           		RST	28H
 8414+3DF4 8C 1C        		DW	o1C8C
 8415+3DF6 CD B1 10     		CALL	m10b1
 8416+3DF9 EF           		RST	28H
 8417+3DFA F1 2B        		DW	o2BF1
 8418+3DFC 06 00        		LD	B,0
 8419+3DFE 79           		LD	A,C
 8420+3DFF A7           		AND	A
 8421+3E00 20 04        		JR	NZ,m3e06
 8422+3E02 CD DA 2A     		CALL	m2ada
 8423+3E05 2C           		INC	L
 8424+3E06 FE 10        m3e06:		CP	$10
 8425+3E08 38 02        		JR	C,m3e0c
 8426+3E0A 0E 10        		LD	C,$10
 8427+3E0C C5           m3e0c:		PUSH	BC
 8428+3E0D EB           		EX	DE,HL
 8429+3E0E 11 4E C0     		LD	DE,$C04E
 8430+3E11 CD 63 3F     		CALL	m3f63
 8431+3E14 CD 5D 39     		CALL	m3965
 8432+3E17 7A           		LD	A,D
 8433+3E18 C2 82 39     		JP	NZ,m398a
 8434+3E1B F5           		PUSH	AF
 8435+3E1C 21 98 EF     		LD	HL,$EF98
 8436+3E1F CD 89 2B     		CALL	m2b89
 8437+3E22 CD B6 32     		CALL	m32b6
 8438+3E25 CD 00 3F     		CALL	m3f00
 8439+3E28 B5 00        		DW	$00B5
 8440+3E2A CD EE 32     		CALL	m32ee
 8441+3E2D CD 64 2B     		CALL	m2b64
 8442+3E30 30 26        		JR	NC,m3e58
 8443+3E32 F1           		POP	AF
 8444+3E33 D1           		POP	DE
 8445+3E34 CD 89 2B     		CALL	m2b89
 8446+3E37 21 4E C0     		LD	HL,$C04E
 8447+3E3A 19           		ADD	HL,DE
 8448+3E3B 57           		LD	D,A
 8449+3E3C 3E 11        		LD	A,$11
 8450+3E3E 93           		SUB	E
 8451+3E3F 36 20        m3e3f:		LD	(HL),$20
 8452+3E41 23           		INC	HL
 8453+3E42 3D           		DEC	A
 8454+3E43 20 FA        		JR	NZ,m3e3f
 8455+3E45 7A           		LD	A,D
 8456+3E46 21 4E C0     		LD	HL,$C04E
 8457+3E49 CD B6 32     		CALL	m32b6
 8458+3E4C CD 00 3F     		CALL	m3f00
 8459+3E4F C1 00        		DW	$00C1
 8460+3E51 CD EE 32     		CALL	m32ee
 8461+3E54 CD 64 2B     		CALL	m2b64
 8462+3E57 D8           		RET	C
 8463+3E58 CD CB 0E     m3e58:		CALL	m0ecb
 8464+3E5B FF           		RST	38H
 8465+3E5C
 8466+3E5C 47           m3e5c:		LD	B,A
 8467+3E5D 4F           		LD	C,A
 8468+3E5E 2E 08        		LD	L,8
 8469+3E60 CD 89 2B     		CALL	m2b89
 8470+3E63 CD B6 32     		CALL	m32b6
 8471+3E66 CD 00 3F     		CALL	m3f00
 8472+3E69 D6 00        		DW	$00D6
 8473+3E6B 3A 8D 5C     		LD	A,(	$5C8D)
 8474+3E6E 67           		LD	H,A
 8475+3E6F 2E 09        		LD	L,9
 8476+3E71 AF           		XOR	A
 8477+3E72 47           		LD	B,A
 8478+3E73 4F           		LD	C,A
 8479+3E74 CD 00 3F     		CALL	m3f00
 8480+3E77 D6 00        		DW	$00D6
 8481+3E79 CD EE 32     		CALL	m32ee
 8482+3E7C CD 64 2B     		CALL	m2b64
 8483+3E7F C9           		RET
 8484+3E80
 8485+3E80              ; Subroutine to call a subroutine in ROM 0
 8486+3E80              ; The subroutine address is inline after the call to this routine
 8487+3E80
 8488+3E80 22 52 5B     m3e80:		LD	(	$5B52),HL	; save HL in OLDHL
 8489+3E83 ED 43 54 5B  		LD	(	$5B54),BC	; save BC in OLDBC
 8490+3E87 F5           		PUSH	AF
 8491+3E88 E1           		POP	HL
 8492+3E89 22 56 5B     		LD	(	$5B56),HL	; save AF in OLDAF
 8493+3E8C E3           		EX	(SP),HL		; HL=address of inline address
 8494+3E8D 4E           		LD	C,(HL)
 8495+3E8E 23           		INC	HL
 8496+3E8F 46           		LD	B,(HL)		; BC=inline ROM 0 address
 8497+3E90 23           		INC	HL
 8498+3E91 E3           		EX	(SP),HL		; stack return address
 8499+3E92 C5           		PUSH	BC
 8500+3E93 E1           		POP	HL		; HL=routine address in ROM 0
 8501+3E94 3A 5C 5B     		LD	A,(	$5B5C)
 8502+3E97 E6 EF        		AND	$EF
 8503+3E99 F3           		DI
 8504+3E9A 32 5C 5B     		LD	(	$5B5C),A
 8505+3E9D 01 FD 7F     		LD	BC,PBANKM
 8506+3EA0 ED 79        		OUT	(C),A		; page in ROM 0
 8507+3EA2
 8508+3EA2              ; The rest of the routine continues at $3EA2 in ROM 0
 8509+3EA2              ; The following is a continuation of a mirrored routine in ROM 0 for
 8510+3EA2              ; calling this ROM
 8511+3EA2
 8512+3EA2 FB           m3ea2:		EI
 8513+3EA3 01 B5 3E     		LD	BC,$3EB5
 8514+3EA6 C5           		PUSH	BC		; stack return add to swap back ROMs
 8515+3EA7 E5           		PUSH	HL		; stack routine address
 8516+3EA8 2A 56 5B     		LD	HL,(	$5B56)
 8517+3EAB E5           		PUSH	HL
 8518+3EAC F1           		POP	AF		; restore AF
 8519+3EAD ED 4B 54 5B  		LD	BC,(	$5B54)	; restore BC
 8520+3EB1 2A 52 5B     		LD	HL,(	$5B52)	; restore HL
 8521+3EB4 C9           		RET			; execute routine in this ROM
 8522+3EB5
 8523+3EB5              ; This part is the routine which returns control to ROM 0
 8524+3EB5
 8525+3EB5 F5           m3eb5:		PUSH	AF		; save AF & BC
 8526+3EB6 C5           		PUSH	BC
 8527+3EB7 3A 5C 5B     		LD	A,(	$5B5C)
 8528+3EBA E6 EF        		AND	$EF
 8529+3EBC F3           		DI
 8530+3EBD 32 5C 5B     		LD	(	$5B5C),A
 8531+3EC0 01 FD 7F     		LD	BC,PBANKM
 8532+3EC3 ED 79        		OUT	(C),A		; page back ROM 0
 8533+3EC5
 8534+3EC5              ; The rest of the routine continues at $3EC5 in ROM 0
 8535+3EC5              ; The following is a continuation of a mirrored routine in ROM 0 for
 8536+3EC5              ; returning to this ROM
 8537+3EC5
 8538+3EC5 FB           m3ec5:		EI
 8539+3EC6 C1           		POP	BC		; restore registers
 8540+3EC7 F1           		POP	AF
 8541+3EC8 C9           		RET			; return
 8542+3EC9
 8543+3EC9 0D 20 20 31  m3291:		DM	$0D,"  1 file copied.",$0D,$0D,$00
 8543+3ECD 20 66 69 6C
 8543+3ED1 65 20 63 6F
 8543+3ED5 70 69 65 64
 8543+3ED9 2E 0D 0D 00
 8544+3EDD 20 66 69 6C  m32a5:		DM	" files copied.",$0D,$0D,$00
 8544+3EE1 65 73 20 63
 8544+3EE5 6F 70 69 65
 8544+3EE9 64 2E 0D 0D
 8544+3EED 00
 8545+3EEE 00 00 00...  		DS	$12
 8546+3F00
 8547+3F00              ; Subroutine to call a subroutine in ROM 2
 8548+3F00              ; The subroutine address is inline after the call to this routine
 8549+3F00              ; This routine is duplicated in ROMs 0 & 2, so that when we start switching
 8550+3F00              ; (first to ROM 0, then to ROM 2) there is no problem.
 8551+3F00
 8552+3F00 22 52 5B     m3f00:		LD	(	$5B52),HL	; save HL,BC and AF
 8553+3F03 ED 43 54 5B  		LD	(	$5B54),BC
 8554+3F07 F5           		PUSH	AF
 8555+3F08 E1           		POP	HL
 8556+3F09 22 56 5B     		LD	(	$5B56),HL
 8557+3F0C E3           		EX	(SP),HL
 8558+3F0D 4E           		LD	C,(HL)
 8559+3F0E 23           		INC	HL
 8560+3F0F 46           		LD	B,(HL)		; BC=inline address
 8561+3F10 23           		INC	HL
 8562+3F11 E3           		EX	(SP),HL		; restack updated return address
 8563+3F12 21 42 3F     		LD	HL,m3f42
 8564+3F15 E5           		PUSH	HL
 8565+3F16 C5           		PUSH	BC
 8566+3F17 E1           		POP	HL		; HL=address to call in ROM
 8567+3F18 3A 5C 5B     		LD	A,(	$5B5C)
 8568+3F1B E6 EF        		AND	$EF
 8569+3F1D F3           		DI
 8570+3F1E 32 5C 5B     		LD	(	$5B5C),A
 8571+3F21 01 FD 7F     		LD	BC,PBANKM
 8572+3F24 ED 79        		OUT	(C),A		; page in ROM 0
 8573+3F26 3A 67 5B     		LD	A,(	$5B67)
 8574+3F29 F6 04        		OR	$04
 8575+3F2B 32 67 5B     		LD	(	$5B67),A
 8576+3F2E 01 FD 1F     m3f2a:		LD	BC,PBANK678
 8577+3F31 ED 79        		OUT	(C),A		; page in ROM 2
 8578+3F33 FB           		EI
 8579+3F34 E5           		PUSH	HL		; stack routine address to call in ROM 2
 8580+3F35 2A 56 5B     		LD	HL,(	$5B56)	; restore registers
 8581+3F38 E5           		PUSH	HL
 8582+3F39 F1           		POP	AF
 8583+3F3A ED 4B 54 5B  		LD	BC,(	$5B54)
 8584+3F3E 2A 52 5B     		LD	HL,(	$5B52)
 8585+3F41 C9           		RET			; exit to routine
 8586+3F42
 8587+3F42              ; This part of the routine returns control to ROM 1
 8588+3F42
 8589+3F42 C5           m3f42:		PUSH	BC		; save registers
 8590+3F43 F5           		PUSH	AF
 8591+3F44 3A 67 5B     		LD	A,(	$5B67)
 8592+3F47 E6 FB        		AND	$FB
 8593+3F49 F3           		DI
 8594+3F4A 32 67 5B     		LD	(	$5B67),A
 8595+3F4D 01 FD 1F     		LD	BC,PBANK678
 8596+3F50 ED 79        		OUT	(C),A		; page in ROM 0
 8597+3F52 3A 5C 5B     		LD	A,(	$5B5C)
 8598+3F55 F6 10        		OR	$10
 8599+3F57 32 5C 5B     		LD	(	$5B5C),A
 8600+3F5A 01 FD 7F     		LD	BC,PBANKM
 8601+3F5D ED 79        		OUT	(C),A		; page in ROM 1
 8602+3F5F FB           		EI
 8603+3F60 F1           		POP	AF		; restore registers
 8604+3F61 C1           		POP	BC
 8605+3F62 C9           		RET			; done!
 8606+3F63
 8607+3F63              ; Subroutine to copy a block of memory from HL in page 0 to
 8608+3F63              ; DE in page 7 (length BC bytes)
 8609+3F63
 8610+3F63 F3           m3f63:		DI
 8611+3F64 D9           		EXX
 8612+3F65 01 FD 7F     		LD	BC,PBANKM	; BC'=paging port
 8613+3F68 D9           		EXX
 8614+3F69 D9           m3f69:		EXX
 8615+3F6A 3E 10        		LD	A,$10
 8616+3F6C ED 79        		OUT	(C),A		; page in page 0
 8617+3F6E D9           		EXX
 8618+3F6F 7E           		LD	A,(HL)
 8619+3F70 08           		EX	AF,AF'		; get A'=byte from page 0
 8620+3F71 D9           		EXX
 8621+3F72 3E 17        		LD	A,$17
 8622+3F74 ED 79        		OUT	(C),A		; page in page 7
 8623+3F76 D9           		EXX
 8624+3F77 08           		EX	AF,AF'
 8625+3F78 12           		LD	(DE),A		; store byte from page 0 in page 7
 8626+3F79 23           		INC	HL		; increment addresses
 8627+3F7A 13           		INC	DE
 8628+3F7B 0B           		DEC	BC		; decrement counter
 8629+3F7C 78           		LD	A,B
 8630+3F7D B1           		OR	C
 8631+3F7E 20 E9        		JR	NZ,m3f69	; loop back for more
 8632+3F80 3A 5C 5B     		LD	A,(	$5B5C)
 8633+3F83 01 FD 7F     		LD	BC,PBANKM
 8634+3F86 ED 79        		OUT	(C),A		; page in previous memory
 8635+3F88 FB           		EI			; enable interrupts
 8636+3F89 C9           		RET
 8637+3F8A
 8638+3F8A              ; Subroutine to copy a block of memory from HL in page 7 to
 8639+3F8A              ; DE in page 0 (length BC bytes)
 8640+3F8A
 8641+3F8A F3           m3f8a:		DI
 8642+3F8B D9           		EXX
 8643+3F8C 01 FD 7F     		LD	BC,PBANKM	; BC'=paging port
 8644+3F8F D9           		EXX
 8645+3F90 D9           m3f90:		EXX
 8646+3F91 3E 17        		LD	A,$17
 8647+3F93 ED 79        		OUT	(C),A		; page in page 7
 8648+3F95 D9           		EXX
 8649+3F96 7E           		LD	A,(HL)
 8650+3F97 08           		EX	AF,AF'		; A'=byte from page 7
 8651+3F98 D9           		EXX
 8652+3F99 3E 10        		LD	A,$10
 8653+3F9B ED 79        		OUT	(C),A		; page in page 0
 8654+3F9D D9           		EXX
 8655+3F9E 08           		EX	AF,AF'
 8656+3F9F 12           		LD	(DE),A		; store byte in page 0
 8657+3FA0 23           		INC	HL		; increment addresses
 8658+3FA1 13           		INC	DE
 8659+3FA2 0B           		DEC	BC		; decrement pointers
 8660+3FA3 78           		LD	A,B
 8661+3FA4 B1           		OR	C
 8662+3FA5 20 E9        		JR	NZ,m3f90	; loop back for more
 8663+3FA7 3A 5C 5B     		LD	A,(	$5B5C)
 8664+3FAA 01 FD 7F     		LD	BC,PBANKM
 8665+3FAD ED 79        		OUT	(C),A		; page in previous memory
 8666+3FAF FB           		EI			; enable interrupts
 8667+3FB0 C9           		RET
 8668+3FB1
 8669+3FB1 4B 20 66 72  m07c9:		DM	"K free",13,0
 8669+3FB5 65 65 0D 00
 8670+3FB9 4E 6F 20 66  m07d1:		DM	"No files found",13,0
 8670+3FBD 69 6C 65 73
 8670+3FC1 20 66 6F 75
 8670+3FC5 6E 64 0D 00
 8671+3FC9 45 72 61 73  merase:		DM	"Erase ",0
 8671+3FCD 65 20 00
 8672+3FD0 20 3F 20 28  myn:		DM	" ? (Y/N)",0
 8672+3FD4 59 2F 4E 29
 8672+3FD8 00
 8673+3FD9
 8674+3FD9              FREE_ROM1_1:	EQU	$
 8675+3FD9
 8676+3FD9              		;...
 8677+3FD9              		;...
 8678+3FD9
 8679+3FD9              R1_FREE_1:	EQU	$0027-($-FREE_ROM1_1)
 8680+3FD9 00 00 00...  ROM1_SPARE1:	DS	R1_FREE_1
 8681+4000
 8682+4000              ; ------------------------------------------------------------------------------
 8683+4000
 8684+4000              ; ============================
 8685+4000              ; PLAY command data structures
 8686+4000              ; ============================
 8687+4000              ;
 8688+4000              ; During execution of the PLAY command, an area of memory $3C bytes long plus
 8689+4000              ; $37 bytes per string is reserved. IY is used to point to the "overhead" area,
 8690+4000              ; and IX points to the data for the string currently being considered.
 8691+4000              ; A maximum of 8 strings are allowed.
 8692+4000              ;
 8693+4000              ;
 8694+4000              ; Overhead Area: IY+n
 8695+4000              ; -------------------
 8696+4000              ;
 8697+4000              ; Offset  Length  Description
 8698+4000              ; ------  ------  -----------
 8699+4000              ; +00     10      Address of data area for each string
 8700+4000              ; +10     1       String presence flags (bit reset if string in use)
 8701+4000              ; +11     10      Note length of current note for each string
 8702+4000              ; +21     1       String counter
 8703+4000              ; +22     1       String presence flags, shifted with string counter
 8704+4000              ; +23     2       Address of pointer to string data area
 8705+4000              ; +25     2       Shortest current note length (=length to play)
 8706+4000              ; +27     2       Tempo value
 8707+4000              ; +29     1       Waveform number for volume effects
 8708+4000              ; +2a     1       Notes changed flag
 8709+4000              ; +2b     0d      FP routine used to calculate tempo value
 8710+4000              ; +38     4       Unused
 8711+4000              ;
 8712+4000              ;
 8713+4000              ; String Data Areas: IX+n
 8714+4000              ; -----------------------
 8715+4000              ;
 8716+4000              ; Offset  Length  Description
 8717+4000              ; ------  ------  -----------
 8718+4000              ; +00     1       Current semitone number
 8719+4000              ; +01     1       $FF, or MIDI channel 0-15
 8720+4000              ; +02     1       String number 0-7
 8721+4000              ; +03     1       Base semitone number (12*octave)
 8722+4000              ; +04     1       Volume level (bit 4 set=use volume effect)
 8723+4000              ; +05     1       Note length
 8724+4000              ; +06     2       String interpretation pointer
 8725+4000              ; +08     2       String end+1
 8726+4000              ; +0a     1       Infinite repeat flag
 8727+4000              ; +0b     1       Open bracket depth
 8728+4000              ; +0c     2       String start
 8729+4000              ; +0e     8       Opening bracket addresses (max depth 4)
 8730+4000              ; +16     1       Close bracket depth
 8731+4000              ; +17     0a      Close bracket addresses (max depth 5)
 8732+4000              ; +21     1       # tied notes
 8733+4000              ; +22     16      Note lengths for tied notes (max 11)
 8734+4000
# file closed: plus3ROM1.asm
  122 4000              	INCLUDE	"plus3ROM2.asm"			; ROM DEL +3DOS
# file opened: plus3ROM2.asm
    1+4000              		OUTPUT	"p3t_rom2.rom"
    2+4000
    3+4000              		ORG	$0000
    4+0000
    5+0000              ; *************************************************
    6+0000              ; *** SPECTRUM +3 ROM 2 DISASSEMBLY (+3DOS ROM) ***
    7+0000              ; *************************************************
    8+0000
    9+0000              ; ROM2 del PROYECTO +3e de la VERSION IDE 8bits
   10+0000              ; Desensamblado por DJr, con la valiosa ayuda de DZ80 V2.0
   11+0000
   12+0000              ; este desensamble no sabe nada de las constantes spanish, garry, y V41
   13+0000              ; aca todo es IDE8 v4.0 e ingles . a.k.a no me la compliquesn
   14+0000
   15+0000 18 FE        n0000:		JR	$0000	; que es esto??? no parece tener uso he probado
   16+0002 C3 C2 22     		JP	l22c2	; a sustituirlo pos "DS 8" como en la ROM
   17+0005 C3 6A 19     		JP	l196a	; original y aparentemente todo funciona bien
   18+0008
   19+0008 50 4C 55 53  n0008:		DB	"PLUS3DOS"
   19+000C 33 44 4F 53
   20+0010
   21+0010 2F 58 32 9A  n0010:		DB	$2F,$58,$32,$9A	; ¿¿¿que es todo esto??? son como datos
   22+0014 2F 9E 34 E3  		DB	$2F,$9E,$34,$E3	; al azar si se examina su desensamble
   23+0018 80 01 C0 05  		DB	$80,$01,$C0,$05	; y a primera vista no parecen ser
   24+001C C4 09 C8 0D  		DB	$C4,$09,$C8,$0D	; necesarios, pero he comprobado que si
   25+0020 61 0F CC 14  		DB	$61,$0F,$CC,$14	; quito esto y pongo "DS 40" como en la
   26+0024 51 00 13 16  		DB	$51,$00,$13,$16 ; ROM original muchos Z80s no cargan
   27+0028 24 17 56 19  		DB	$24,$17,$56,$19 ; con el comando SPECTRUM
   28+002C 10 13 14 ED  		DB	$10,$13,$14,$ED
   29+0030 79 01 06 7F  		DB	$79,$01,$06,$7F
   30+0034 3E C3 FB C9  		DB	$3E,$C3,$FB,$C9
   31+0038
   32+0038 ~            /*
   33+0038 ~            		n0000:	DS 8
   34+0038 ~            		n0008:	DM "PLUS3DOS"
   35+0038 ~            		n0010:	DS 40
   36+0038 ~            */
   37+0038
   38+0038 ~            /*
   39+0038 ~            ;===============================================================================
   40+0038 ~
   41+0038 ~            POR OTRO LADO: NO HAY MUCHO ESPACIO LIBRE PARA RASCAR, PERO CUALQUIER COSA BAJO
   42+0038 ~            LA DIRECTIVA "DS" ES TODO USABLE PARA PONER ALGUN CAMBIO QUE QUIERAS HACER
   43+0038 ~
   44+0038 ~            ;===============================================================================
   45+0038 ~            */
   46+0038
   47+0038              ; The maskable interrupt routine
   48+0038
   49+0038 F5           		PUSH	AF
   50+0039 E5           		PUSH	HL
   51+003A 2A 78 5C     		LD	HL,(	$5C78)
   52+003D 23           		INC	HL		; increment FRAMES
   53+003E 22 78 5C     		LD	(	$5C78),HL
   54+0041 7C           		LD	A,H
   55+0042 B5           		OR	L
   56+0043 20 03        		JR	NZ,l0048
   57+0045 FD 34 40     		INC	(IY+$40)	; increment high byte of FRAMES
   58+0048 C5           l0048:		PUSH	BC
   59+0049 D5           		PUSH	DE
   60+004A CD 72 3E     		CALL	l3e72		; scan the keyboard
   61+004D CD 68 00     		CALL	l0068		; test for disk motor timeout
   62+0050 D1           		POP	DE
   63+0051 C1           		POP	BC
   64+0052 E1           		POP	HL
   65+0053 F1           		POP	AF
   66+0054 FB           		EI
   67+0055 C9           		RET
   68+0056
   69+0056 C3 24 3A     		JP	l3a24
   70+0059 C3 C9 3C     		JP	l3cc9
   71+005C C3 5F 3D     		JP	l3d5f
   72+005F C3 55 3D     		JP	l3d55
   73+0062 C3 64 3D     		JP	l3d64
   74+0065 00           		NOP
   75+0066
   76+0066              ; The Non-maskable interrupt
   77+0066
   78+0066 ED 45        x0066:		RETN
   79+0068
   80+0068 01 FD 7F     l0068:		LD	BC,PBANKM
   81+006B 3A 5C 5B     		LD	A,(	$5B5C)
   82+006E F6 07        		OR	$07
   83+0070 ED 79        		OUT	(C),A
   84+0072 3A 00 E6     		LD	A,(	$E600		)
   85+0075 B7           		OR	A
   86+0076 28 1D        		JR	Z,l0095		; (+$1D)
   87+0078 3A 78 5C     		LD	A,(	$5C78)
   88+007B CB 47        		BIT	0,A
   89+007D 20 16        		JR	NZ,l0095	; (+$16)
   90+007F 3A 00 E6     		LD	A,(	$E600		)
   91+0082 3D           		DEC	A
   92+0083 32 00 E6     		LD	(	$E600		),A
   93+0086 20 0D        		JR	NZ,l0095	; (+$0D)
   94+0088 01 FD 1F     		LD	BC,PBANK678
   95+008B 3A 67 5B     		LD	A,(	$5B67)
   96+008E E6 F7        		AND	$F7
   97+0090 32 67 5B     		LD	(	$5B67),A
   98+0093 ED 79        		OUT	(C),A
   99+0095 01 FD 7F     l0095:		LD	BC,PBANKM
  100+0098 3A 5C 5B     		LD	A,(	$5B5C)
  101+009B ED 79        		OUT	(C),A
  102+009D C9           		RET
  103+009E
  104+009E 00 00        		DW	$0000
  105+00A0
  106+00A0 C3 08 28     		JP	l2808
  107+00A3 C3 9A 24     		JP	l249a
  108+00A6 C3 28 28     		JP	l2828
  109+00A9 C3 0D 28     		JP	l280d
  110+00AC C3 58 25     		JP	l2558
  111+00AF C3 FB 25     		JP	l25fb
  112+00B2 C3 01 2A     		JP	l2a01
  113+00B5 C3 C8 2B     		JP	l2bc8
  114+00B8 C3 E2 2D     		JP	l2de2
  115+00BB C3 0B 2D     		JP	l2d0b
  116+00BE C3 93 2F     		JP	l2f93
  117+00C1 C3 0F 2C     		JP	l2c0f
  118+00C4 C3 69 2B     		JP	l2b69
  119+00C7 C3 92 2B     		JP	l2b92
  120+00CA C3 3B 2C     		JP	l2c3b
  121+00CD C3 94 2C     		JP	l2c94
  122+00D0 C3 DB 2C     		JP	l2cdb
  123+00D3 C3 6C 30     		JP	l306c
  124+00D6 C3 83 30     		JP	l3083
  125+00D9 C3 8B 31     		JP	l318b
  126+00DC C3 DB 2C     		JP	l2cdb
  127+00DF C3 31 31     		JP	l3131
  128+00E2 C3 06 31     		JP	l3106
  129+00E5 C3 4E 31     		JP	l314e
  130+00E8 C3 AF 30     		JP	l30af
  131+00EB C3 BB 30     		JP	l30bb
  132+00EE C3 E1 31     		JP	l31e1
  133+00F1 C3 27 32     		JP	l3227
  134+00F4 C3 70 33     		JP	l3370
  135+00F7 C3 CD 33     		JP	l33cd
  136+00FA C3 AC 34     		JP	l34ac
  137+00FD C3 31 35     		JP	l3531
  138+0100
  139+0100 C3 A8 01     l0100:		JP	l01a8		; DOS_INITIALISE
  140+0103 C3 DC 01     l0103:		JP	l01dc		; DOS_VERSION
  141+0106 C3 35 06     l0106:		JP	l0635		; DOS_OPEN
  142+0109 C3 4A 07     l0109:		JP	l074a		; DOS_CLOSE
  143+010C C3 6B 07     l010c:		JP	l076b		; DOS_ABANDON
  144+010F C3 BB 08     x010f:		JP	l08bb		; DOS_REF_HEAD
  145+0112 C3 C0 19     l0112:		JP	l19c0		; DOS_READ
  146+0115 C3 7F 11     l0115:		JP	l117f		; DOS_WRITE
  147+0118 C3 29 11     l0118:		JP	l1129		; DOS_BYTE_READ
  148+011B C3 19 12     l011b:		JP	l1219		; DOS_BYTE_WRITE
  149+011E C3 23 0A     l011e:		JP	l0a23		; DOS_CATALOG
  150+0121 C3 FC 08     l0121:		JP	l08fc		; DOS_FREE_SPACE
  151+0124 C3 2E 09     l0124:		JP	l092e		; DOS_DELETE
  152+0127 C3 79 09     l0127:		JP	l0979		; DOS_RENAME
  153+012A C3 4D 1B     l012a:		JP	l1b4d		; DOS_BOOT
  154+012D C3 19 09     l012d:		JP	l0919		; DOS_SET_DRIVE
  155+0130 C3 06 09     x0130:		JP	l0906		; DOS_SET_USER
  156+0133 C3 5F 10     l0133:		JP	l105f		; DOS_GET_POSITION
  157+0136 C3 7B 10     x0136:		JP	l107b		; DOS_SET_POSITION
  158+0139 C3 68 10     l0139:		JP	l1068		; DOS_GET_EOF
  159+013C C3 EC 01     l013c:		JP	l01ec		; DOS_GET_1346
  160+013F C3 F2 01     l013f:		JP	l01f2		; DOS_SET_1346
  161+0142 C3 CF 05     l0142:		JP	l05cf		; DOS_FLUSH
  162+0145 C3 CD 08     l0145:		JP	l08cd		; DOS_SET_ACCESS
  163+0148 C3 63 09     l0148:		JP	l0963		; DOS_SET_ATTRIBUTES
  164+014B C3 0E 07     l014b:		JP	l070e		; DOS_OPEN_DRIVE
  165+014E C3 F0 02     l014e:		JP	l02f0		; DOS_SET_MESSAGE
  166+0151 C3 C5 17     l0151:		JP	l17c5		; DOS_REF_XDPB
  167+0154 C3 35 19     l0154:		JP	l1935		; DOS_MAP_B
  168+0157 C3 86 1F     l0157:		JP	l1f86		; DD_INTERFACE
  169+015A C3 91 1F     l015a:		JP	l1f91		; DD_INIT
  170+015D C3 A6 1F     l015d:		JP	x1fa6		; DD_SETUP
  171+0160 C3 66 19     l0160:		JP	l1966		; DD_SET_RETRY
  172+0163 C3 75 1C     l0163:		JP	l1c75		; DD_READ_SECTOR
  173+0166 C3 83 1C     l0166:		JP	x1c83		; DD_WRITE_SECTOR
  174+0169 C3 8C 1C     l0169:		JP	x1c8c		; DD_CHECK_SECTOR
  175+016C C3 9A 1C     x016c:		JP	l1c9a		; DD_FORMAT
  176+016F C3 AC 1C     l016f:		JP	l1cac		; DD_READ_ID
  177+0172 C3 DB 1E     l0172:		JP	l1edb		; DD_TEST_UNSUITABLE
  178+0175 C3 F6 1C     l0175:		JP	l1cf6		; DD_LOGIN
  179+0178 C3 51 1D     l0178:		JP	l1d51		; DD_SEL_FORMAT
  180+017B C3 4F 1F     l017b:		JP	l1f4f		; DD_ASK_1
  181+017E C3 5B 1F     l017e:		JP	l1f5b		; DD_DRIVE_STATUS
  182+0181 C3 EB 1E     l0181:		JP	l1eeb		; DD_EQUIPMENT
  183+0184 C3 50 1C     l0184:		JP	l1c50		; DD_ENCODE
  184+0187 C3 64 1D     l0187:		JP	l1d64		; DD_L_XDPB
  185+018A C3 A6 1D     l018a:		JP	l1da6		; DD_L_DPB
  186+018D C3 D5 1F     l018d:		JP	l1fd5		; DD_L_SEEK
  187+0190 C3 F5 3E     l0190:		JP	l3ef5		; DD_L_READ
  188+0193 C3 22 21     l0193:		JP	l2122		; DD_L_WRITE
  189+0196 C3 81 21     l0196:		JP	l2181		; DD_L_ON_MOTOR
  190+0199 C3 A6 21     l0199:		JP	l21a6		; DD_L_T_OFF_MOTOR
  191+019C C3 E6 3E     l019c:		JP	l3ee6		; DD_L_OFF_MOTOR
  192+019F
  193+019F C3 BD 39     		JP	l39bd
  194+01A2 C3 BF 24     		JP	l24bf
  195+01A5 C3 CA 29     		JP	l29ca
  196+01A8
  197+01A8 3A 9D DF     l01a8:		LD	A,($DF9D)
  198+01AB F5           		PUSH	AF
  199+01AC 21 00 DB     		LD	HL,$DB00
  200+01AF 11 01 DB     		LD	DE,$DB01
  201+01B2 01 FF 09     		LD	BC,$09FF
  202+01B5 36 00        		LD	(HL),$00
  203+01B7 ED B0        		LDIR
  204+01B9 CD 86 1F     		CALL	l1f86
  205+01BC 30 06        		JR	NC,l01c4	; (+$06)
  206+01BE CD 91 1F     		CALL	l1f91
  207+01C1 CD 37 17     		CALL	l1737
  208+01C4 21 78 08     l01c4:		LD	HL,$0878
  209+01C7 11 08 00     		LD	DE,$0008
  210+01CA D5           		PUSH	DE
  211+01CB CD 98 17     		CALL	x1798
  212+01CE D1           		POP	DE
  213+01CF CD A5 14     		CALL	l14a5
  214+01D2 CD 08 05     		CALL	l0508
  215+01D5 F1           		POP	AF
  216+01D6 32 9D DF     		LD	($DF9D),A
  217+01D9 C3 28 28     		JP	l2828
  218+01DC AF           l01dc:		XOR	A
  219+01DD 06 01        		LD	B,$01
  220+01DF 90           		SUB	B
  221+01E0 3E 00        		LD	A,$00
  222+01E2 47           		LD	B,A
  223+01E3 4F           		LD	C,A
  224+01E4 11 01 01     		LD	DE,$0101
  225+01E7 21 69 00     		LD	HL,$0069
  226+01EA 37           		SCF
  227+01EB C9           		RET
  228+01EC
  229+01EC CD B1 1A     l01ec:		CALL	l1ab1
  230+01EF C3 9C 14     		JP	l149c
  231+01F2 D5           l01f2:		PUSH	DE
  232+01F3 EB           		EX	DE,HL
  233+01F4 CD B1 1A     		CALL	l1ab1
  234+01F7 B7           		OR	A
  235+01F8 ED 52        		SBC	HL,DE
  236+01FA EB           		EX	DE,HL
  237+01FB 37           		SCF
  238+01FC C4 BB 1A     		CALL	NZ,l1abb
  239+01FF D1           		POP	DE
  240+0200 D0           		RET	NC
  241+0201
  242+0201 EB           		EX	DE,HL
  243+0202 CD 9C 14     		CALL	l149c
  244+0205 EB           		EX	DE,HL
  245+0206 B7           		OR	A
  246+0207 ED 52        		SBC	HL,DE
  247+0209 19           		ADD	HL,DE
  248+020A 37           		SCF
  249+020B C4 A1 14     		CALL	NZ,l14a1
  250+020E C9           		RET
  251+020F
  252+020F 0C           l020f:		INC	C
  253+0210 0D           		DEC	C
  254+0211 20 03        		JR	NZ,l0216	; (+$03)
  255+0213 04           		INC	B
  256+0214 05           		DEC	B
  257+0215 C8           		RET	Z
  258+0216
  259+0216 CD 1B 02     l0216:		CALL	l021b
  260+0219 ED B0        		LDIR
  261+021B E5           l021b:		PUSH	HL
  262+021C C5           		PUSH	BC
  263+021D 47           		LD	B,A
  264+021E 21 5C 5B     		LD	HL,	$5B5C
  265+0221 7E           		LD	A,(HL)
  266+0222 E6 07        		AND	$07
  267+0224 F5           		PUSH	AF
  268+0225 7E           		LD	A,(HL)
  269+0226 E6 F8        		AND	$F8
  270+0228 B0           		OR	B
  271+0229 01 FD 7F     		LD	BC,PBANKM
  272+022C 77           		LD	(HL),A
  273+022D ED 79        		OUT	(C),A
  274+022F F1           		POP	AF
  275+0230 C1           		POP	BC
  276+0231 E1           		POP	HL
  277+0232 C9           		RET
  278+0233
  279+0233 87           l0233:		ADD	A,A
  280+0234 6F           		LD	L,A
  281+0235 F6 C0        		OR	$C0
  282+0237 67           		LD	H,A
  283+0238 7D           		LD	A,L
  284+0239 2E 00        		LD	L,$00
  285+023B 07           		RLCA
  286+023C 07           		RLCA
  287+023D 07           		RLCA
  288+023E E6 06        		AND	$06
  289+0240 FE 04        		CP	$04
  290+0242 D0           		RET	NC
  291+0243
  292+0243 3C           		INC	A
  293+0244 C9           		RET
  294+0245
  295+0245 79           l0245:		LD	A,C
  296+0246 B8           		CP	B
  297+0247 20 06        		JR	NZ,l024f	; (+$06)
  298+0249 DD E5        		PUSH	IX
  299+024B C1           		POP	BC
  300+024C C3 0F 02     		JP	l020f
  301+024F C5           l024f:		PUSH	BC
  302+0250 CD CC 02     		CALL	l02cc
  303+0253 CD 0F 02     		CALL	l020f
  304+0256 C1           		POP	BC
  305+0257 C5           		PUSH	BC
  306+0258 78           		LD	A,B
  307+0259 EB           		EX	DE,HL
  308+025A CD CC 02     		CALL	l02cc
  309+025D EB           		EX	DE,HL
  310+025E CD 0F 02     		CALL	l020f
  311+0261 DD E5        		PUSH	IX
  312+0263 C1           		POP	BC
  313+0264 78           		LD	A,B
  314+0265 B1           		OR	C
  315+0266 C1           		POP	BC
  316+0267 C8           		RET	Z
  317+0268
  318+0268 ED 5F        		LD	A,R
  319+026A F3           		DI
  320+026B F5           		PUSH	AF
  321+026C B7           		OR	A
  322+026D CD 7B 02     		CALL	l027b
  323+0270 CD 90 02     		CALL	l0290
  324+0273 37           		SCF
  325+0274 CD 7B 02     		CALL	l027b
  326+0277 F1           		POP	AF
  327+0278 E0           		RET	po
  328+0279
  329+0279 FB           		EI
  330+027A C9           		RET
  331+027B
  332+027B E5           l027b:		PUSH	HL
  333+027C D5           		PUSH	DE
  334+027D C5           		PUSH	BC
  335+027E 01 20 00     		LD	BC,$0020
  336+0281 11 00 DB     		LD	DE,$DB00
  337+0284 21 E0 BF     		LD	HL,$BFE0
  338+0287 30 01        		JR	NC,l028a	; (+$01)
  339+0289 EB           		EX	DE,HL
  340+028A ED B0        l028a:		LDIR
  341+028C C1           		POP	BC
  342+028D D1           		POP	DE
  343+028E E1           		POP	HL
  344+028F C9           		RET
  345+0290
  346+0290 DD E5        l0290:		PUSH	IX
  347+0292 E3           		EX	(SP),HL
  348+0293 7C           		LD	A,H
  349+0294 B7           		OR	A
  350+0295 20 05        		JR	NZ,l029c	; (+$05)
  351+0297 7D           		LD	A,L
  352+0298 FE 20        		CP	$20
  353+029A 38 02        		JR	C,x029e		; (+$02)
  354+029C 3E 20        l029c:		LD	A,$20
  355+029E C5           x029e:		PUSH	BC
  356+029F 4F           		LD	C,A
  357+02A0 06 00        		LD	B,$00
  358+02A2 B7           		OR	A
  359+02A3 ED 42        		SBC	HL,BC
  360+02A5 C1           		POP	BC
  361+02A6 E3           		EX	(SP),HL
  362+02A7 DD E1        		POP	IX
  363+02A9 B7           		OR	A
  364+02AA C8           		RET	Z
  365+02AB
  366+02AB D5           		PUSH	DE
  367+02AC C5           		PUSH	BC
  368+02AD F5           		PUSH	AF
  369+02AE 47           		LD	B,A
  370+02AF 79           		LD	A,C
  371+02B0 48           		LD	C,B
  372+02B1 06 00        		LD	B,$00
  373+02B3 11 E0 BF     		LD	DE,$BFE0
  374+02B6 CD 0F 02     		CALL	l020f
  375+02B9 F1           		POP	AF
  376+02BA C1           		POP	BC
  377+02BB D1           		POP	DE
  378+02BC E5           		PUSH	HL
  379+02BD C5           		PUSH	BC
  380+02BE 4F           		LD	C,A
  381+02BF 78           		LD	A,B
  382+02C0 06 00        		LD	B,$00
  383+02C2 21 E0 BF     		LD	HL,$BFE0
  384+02C5 CD 0F 02     		CALL	l020f
  385+02C8 C1           		POP	BC
  386+02C9 E1           		POP	HL
  387+02CA 18 C4        		JR	l0290		; (-$3C)
  388+02CC E5           l02cc:		PUSH	HL
  389+02CD 01 00 00     		LD	BC,$0000
  390+02D0 21 00 C0     		LD	HL,	$C000
  391+02D3 B7           		OR	A
  392+02D4 ED 52        		SBC	HL,DE
  393+02D6 38 16        		JR	C,l02ee		; (+$16)
  394+02D8 28 14        		JR	Z,l02ee		; (+$14)
  395+02DA DD E5        		PUSH	IX
  396+02DC C1           		POP	BC
  397+02DD B7           		OR	A
  398+02DE ED 42        		SBC	HL,BC
  399+02E0 09           		ADD	HL,BC
  400+02E1 30 02        		JR	NC,l02e5	; (+$02)
  401+02E3 44           		LD	B,H
  402+02E4 4D           		LD	C,L
  403+02E5 DD E5        l02e5:		PUSH	IX
  404+02E7 E1           		POP	HL
  405+02E8 B7           		OR	A
  406+02E9 ED 42        		SBC	HL,BC
  407+02EB E5           		PUSH	HL
  408+02EC DD E1        		POP	IX
  409+02EE E1           l02ee:		POP	HL
  410+02EF C9           		RET
  411+02F0
  412+02F0 B7           l02f0:		OR	A
  413+02F1 20 03        		JR	NZ,l02f6	; (+$03)
  414+02F3 21 00 00     		LD	HL,$0000
  415+02F6 ED 5B 20 DB  l02f6:		LD	DE,($DB20		)
  416+02FA 22 20 DB     		LD	($DB20		),HL
  417+02FD EB           		EX	DE,HL
  418+02FE C9           		RET
  419+02FF
  420+02FF 47           l02ff:		LD	B,A
  421+0300 2A 20 DB     		LD	HL,($DB20		)
  422+0303 7C           		LD	A,H
  423+0304 B5           		OR	L
  424+0305 78           		LD	A,B
  425+0306 20 02        		JR	NZ,x030a	; (+$02)
  426+0308 2C           		INC	L
  427+0309 C9           		RET
  428+030A
  429+030A C5           x030a:		PUSH	BC
  430+030B 21 CD 03     		LD	HL,x03cd
  431+030E 22 22 DB     		LD	(	$DB22		),HL
  432+0311 CD 2D 03     		CALL	l032d
  433+0314 C1           		POP	BC
  434+0315 C5           		PUSH	BC
  435+0316 CD 1F 03     		CALL	l031f
  436+0319 C1           		POP	BC
  437+031A D6 01        		SUB	$01
  438+031C 3F           		CCF
  439+031D 78           		LD	A,B
  440+031E C9           		RET
  441+031F
  442+031F E5           l031f:		PUSH	HL
  443+0320 2A 20 DB     		LD	HL,($DB20		)
  444+0323 E3           		EX	(SP),HL
  445+0324 C9           		RET
  446+0325
  447+0325 3E 0A        l0325:		LD	A,$0A
  448+0327 21 CD 03     		LD	HL,x03cd
  449+032A 22 22 DB     		LD	(	$DB22		),HL
  450+032D DD 21 29 DB  l032d:		LD	IX,	$DB29
  451+0331 DD E5        		PUSH	IX
  452+0333 CD 3C 03     		CALL	l033c
  453+0336 DD 36 00 FF  		LD	(IX+$00),$FF
  454+033A E1           		POP	HL
  455+033B C9           		RET
  456+033C
  457+033C E6 7F        l033c:		AND	$7F
  458+033E 2A 22 DB     		LD	HL,(	$DB22		)
  459+0341 47           		LD	B,A
  460+0342 04           		INC	B
  461+0343 18 05        		JR	l034a		; (+$05)
  462+0345 7E           l0345:		LD	A,(HL)
  463+0346 23           		INC	HL
  464+0347 3C           		INC	A
  465+0348 20 FB        		JR	NZ,l0345	; (-$05)
  466+034A 10 F9        l034a:		DJNZ	l0345		; (-$07)
  467+034C 7E           l034c:		LD	A,(HL)
  468+034D 23           		INC	HL
  469+034E FE FF        		CP	$FF
  470+0350 C8           		RET	Z
  471+0351
  472+0351 E5           		PUSH	HL
  473+0352 CD 58 03     		CALL	l0358
  474+0355 E1           		POP	HL
  475+0356 18 F4        		JR	l034c		; (-$0C)
  476+0358 B7           l0358:		OR	A
  477+0359 F2 C7 03     		JP	p,l03c7
  478+035C FE FE        		CP	$FE
  479+035E 28 66        		JR	Z,l03c6		; (+$66)
  480+0360 FE FD        		CP	$FD
  481+0362 28 33        		JR	Z,l0397		; (+$33)
  482+0364 FE FC        		CP	$FC
  483+0366 28 2C        		JR	Z,l0394		; (+$2C)
  484+0368 FE FB        		CP	$FB
  485+036A 28 11        		JR	Z,l037d		; (+$11)
  486+036C FE FA        		CP	$FA
  487+036E 20 CC        		JR	NZ,l033c	; (-$34)
  488+0370 DD 36 00 10  		LD	(IX+$00),$10
  489+0374 DD 23        		INC	IX
  490+0376 3A 48 5C     		LD	A,(	$5C48)
  491+0379 E6 07        		AND	$07
  492+037B 18 4A        		JR	l03c7		; (+$4A)
  493+037D DD 36 00 10  l037d:		LD	(IX+$00),$10
  494+0381 DD 23        		INC	IX
  495+0383 3A 48 5C     		LD	A,(	$5C48)
  496+0386 E6 38        		AND	$38
  497+0388 FE 20        		CP	$20
  498+038A 30 04        		JR	NC,l0390	; (+$04)
  499+038C 3E 05        		LD	A,$05
  500+038E 18 02        		JR	l0392		; (+$02)
  501+0390 3E 02        l0390:		LD	A,$02
  502+0392 18 33        l0392:		JR	l03c7		; (+$33)
  503+0394 7B           l0394:		LD	A,E
  504+0395 18 01        		JR	l0398		; (+$01)
  505+0397 7A           l0397:		LD	A,D
  506+0398 D5           l0398:		PUSH	DE
  507+0399 C5           		PUSH	BC
  508+039A 6F           		LD	L,A
  509+039B 26 00        		LD	H,$00
  510+039D 54           		LD	D,H
  511+039E 01 9C FF     		LD	BC,$FF9C
  512+03A1 CD B1 03     		CALL	l03b1
  513+03A4 01 F6 FF     		LD	BC,$FFF6
  514+03A7 CD B1 03     		CALL	l03b1
  515+03AA 7D           		LD	A,L
  516+03AB C6 30        		ADD	A,$30
  517+03AD C1           		POP	BC
  518+03AE D1           		POP	DE
  519+03AF 18 16        		JR	l03c7		; (+$16)
  520+03B1 3E FF        l03b1:		LD	A,$FF
  521+03B3 E5           l03b3:		PUSH	HL
  522+03B4 3C           		INC	A
  523+03B5 09           		ADD	HL,BC
  524+03B6 30 04        		JR	NC,l03bc	; (+$04)
  525+03B8 E3           		EX	(SP),HL
  526+03B9 E1           		POP	HL
  527+03BA 18 F7        		JR	l03b3		; (-$09)
  528+03BC E1           l03bc:		POP	HL
  529+03BD B7           		OR	A
  530+03BE 28 02        		JR	Z,l03c2		; (+$02)
  531+03C0 16 30        		LD	D,$30
  532+03C2 82           l03c2:		ADD	A,D
  533+03C3 C8           		RET	Z
  534+03C4
  535+03C4 18 01        		JR	l03c7		; (+$01)
  536+03C6 79           l03c6:		LD	A,C
  537+03C7 DD 77 00     l03c7:		LD	(IX+$00),A
  538+03CA DD 23        		INC	IX
  539+03CC C9           		RET
  540+03CD
  541+03CD 8B 6E 6F 74  x03cd:		DB	$8B, "not ready", $8F, $FF
  541+03D1 20 72 65 61
  541+03D5 64 79 8F FF
  542+03D9 8C 77 72 69  		DB	$8C,"write protected", $8F, $FF
  542+03DD 74 65 20 70
  542+03E1 72 6F 74 65
  542+03E5 63 74 65 64
  542+03E9 8F FF
  543+03EB 8D 73 65 65  		DB	$8D, "seek fail", $8F, $FF
  543+03EF 6B 20 66 61
  543+03F3 69 6C 8F FF
  544+03F7 8E 64 61 74  		DB	$8E, "data error", $8F, $FF
  544+03FB 61 20 65 72
  544+03FF 72 6F 72 8F
  544+0403 FF
  545+0404 8E 6E 6F 20  		DB	$8E, "no data", $8F, $FF
  545+0408 64 61 74 61
  545+040C 8F FF
  546+040E 8E 6D 69 73  		DB	$8E, "missing address mark", $8F, $FF
  546+0412 73 69 6E 67
  546+0416 20 61 64 64
  546+041A 72 65 73 73
  546+041E 20 6D 61 72
  546+0422 6B 8F FF
  547+0425 8B 62 61 64  		DB	$8B, "bad format", $8F, $FF
  547+0429 20 66 6F 72
  547+042D 6D 61 74 8F
  547+0431 FF
  548+0432 8E 75 6E 6B  		DB	$8E, "unknown error", $8F, $FF
  548+0436 6E 6F 77 6E
  548+043A 20 65 72 72
  548+043E 6F 72 8F FF
  549+0442 8C 63 68 61  		DB	$8C,"changed, please replace", $8F, $FF
  549+0446 6E 67 65 64
  549+044A 2C 20 70 6C
  549+044E 65 61 73 65
  549+0452 20 72 65 70
  549+0456 6C 61 63 65
  549+045A 8F FF
  550+045C 8C 75 6E 73  		DB	$8C,"unsuitable", $8F, $FF
  550+0460 75 69 74 61
  550+0464 62 6C 65 8F
  550+0468 FF
  551+0469 50 6C 65 61  		DB	"Please put the disk for ", $FE, ": into the drive then press "
  551+046D 73 65 20 70
  551+0471 75 74 20 74
  551+0475 68 65 20 64
  551+0479 69 73 6B 20
  551+047D 66 6F 72 20
  551+0481 FE 3A 20 69
  551+0485 6E 74 6F 20
  551+0489 74 68 65 20
  551+048D 64 72 69 76
  551+0491 65 20 74 68
  551+0495 65 6E 20 70
  551+0499 72 65 73 73
  551+049D 20
  552+049E 61 6E 79 20  		DB	"any key", $FF
  552+04A2 6B 65 79 FF
  553+04A6 44 72 69 76  		DB	"Drive ", $FE, ": ", $FF
  553+04AA 65 20 FE 3A
  553+04AE 20 FF
  554+04B0 8B 64 69 73  		DB	$8B, "disk ", $FF
  554+04B4 6B 20 FF
  555+04B7 8B 74 72 61  		DB	$8B, "track ", $FD, ", ", $FF
  555+04BB 63 6B 20 FD
  555+04BF 2C 20 FF
  556+04C2 8D 73 65 63  		DB	$8D, "sector ", $FC, ", ", $FF
  556+04C6 74 6F 72 20
  556+04CA FC 2C 20 FF
  557+04CE 20 2D 20 52  		DB	" - Retry, Ignore or Cancel? ", $FF
  557+04D2 65 74 72 79
  557+04D6 2C 20 49 67
  557+04DA 6E 6F 72 65
  557+04DE 20 6F 72 20
  557+04E2 43 61 6E 63
  557+04E6 65 6C 3F 20
  557+04EA FF
  558+04EB
  559+04EB B7           l04eb:		OR	A
  560+04EC C8           		RET	Z
  561+04ED
  562+04ED CB 3A        l04ed:		SRL	D
  563+04EF CB 1B        		RR	E
  564+04F1 3D           		DEC	A
  565+04F2 20 F9        		JR	NZ,l04ed	; (-$07)
  566+04F4 C9           		RET
  567+04F5
  568+04F5 B7           l04f5:		OR	A
  569+04F6 C8           		RET	Z
  570+04F7
  571+04F7 EB           		EX	DE,HL
  572+04F8 29           l04f8:		ADD	HL,HL
  573+04F9 3D           		DEC	A
  574+04FA 20 FC        		JR	NZ,l04f8	; (-$04)
  575+04FC EB           		EX	DE,HL
  576+04FD C9           		RET
  577+04FE
  578+04FE E9           l04fe:		JP	(HL)
  579+04FF FE 61        l04ff:		CP	$61
  580+0501 D8           		RET	C
  581+0502
  582+0502 FE 7B        		CP	$7B
  583+0504 D0           		RET	NC
  584+0505
  585+0505 C6 E0        		ADD	A,$E0
  586+0507 C9           		RET
  587+0508
  588+0508 01 41 10     l0508:		LD	BC,$1041
  589+050B 79           l050b:		LD	A,C
  590+050C CD CB 17     		CALL	l17cb
  591+050F 79           		LD	A,C
  592+0510 38 05        		JR	C,l0517		; (+$05)
  593+0512 0C           		INC	C
  594+0513 10 F6        		DJNZ	l050b		; (-$0A)
  595+0515 3E 41        		LD	A,$41
  596+0517 32 94 DF     l0517:		LD	(	$DF94		),A
  597+051A 32 79 5B     		LD	(	$5B79),A
  598+051D 32 7A 5B     		LD	(	$5B7A),A
  599+0520 C9           		RET
  600+0521
  601+0521 CD 32 05     x0521:		CALL	l0532
  602+0524 D0           		RET	NC
  603+0525
  604+0525 1F           		RRA
  605+0526 3E 1D        		LD	A,$1D
  606+0528 C9           		RET
  607+0529
  608+0529 CD 32 05     l0529:		CALL	l0532
  609+052C D0           		RET	NC
  610+052D
  611+052D 1F           		RRA
  612+052E 1F           		RRA
  613+052F 3E 1D        		LD	A,$1D
  614+0531 C9           		RET
  615+0532
  616+0532 CD 58 05     l0532:		CALL	l0558
  617+0535 D0           		RET	NC
  618+0536
  619+0536 07           		RLCA
  620+0537 1F           		RRA
  621+0538 D8           		RET	C
  622+0539
  623+0539 3E 1D        		LD	A,$1D
  624+053B C9           		RET
  625+053C
  626+053C CD 58 05     l053c:		CALL	l0558
  627+053F D0           		RET	NC
  628+0540
  629+0540 17           		RLA
  630+0541 3F           		CCF
  631+0542 3E 1D        		LD	A,$1D
  632+0544 D0           		RET	NC
  633+0545
  634+0545 E5           		PUSH	HL
  635+0546 D5           		PUSH	DE
  636+0547 C5           		PUSH	BC
  637+0548 60           		LD	H,B
  638+0549 69           		LD	L,C
  639+054A 36 00        		LD	(HL),$00
  640+054C 50           		LD	D,B
  641+054D 59           		LD	E,C
  642+054E 13           		INC	DE
  643+054F 01 37 00     		LD	BC,$0037
  644+0552 ED B0        		LDIR
  645+0554 C1           		POP	BC
  646+0555 D1           		POP	DE
  647+0556 E1           		POP	HL
  648+0557 C9           		RET
  649+0558
  650+0558 E5           l0558:		PUSH	HL
  651+0559 D5           		PUSH	DE
  652+055A 78           		LD	A,B
  653+055B FE 10        		CP	$10
  654+055D 3E 15        		LD	A,$15
  655+055F 30 12        		JR	NC,l0573	; (+$12)
  656+0561 21 68 DB     		LD	HL,$DB68
  657+0564 11 38 00     		LD	DE,o0038
  658+0567 04           		INC	B
  659+0568 19           l0568:		ADD	HL,DE
  660+0569 10 FD        		DJNZ	l0568		; (-$03)
  661+056B 44           		LD	B,H
  662+056C 4D           		LD	C,L
  663+056D 21 20 00     		LD	HL,$0020
  664+0570 09           		ADD	HL,BC
  665+0571 7E           		LD	A,(HL)
  666+0572 37           		SCF
  667+0573 D1           l0573:		POP	DE
  668+0574 E1           		POP	HL
  669+0575 C9           		RET
  670+0576
  671+0576 21 20 00     l0576:		LD	HL,$0020
  672+0579 09           		ADD	HL,BC
  673+057A 5E           		LD	E,(HL)
  674+057B 36 00        		LD	(HL),$00
  675+057D E5           		PUSH	HL
  676+057E D5           		PUSH	DE
  677+057F CD 86 05     		CALL	l0586
  678+0582 D1           		POP	DE
  679+0583 E1           		POP	HL
  680+0584 73           		LD	(HL),E
  681+0585 C9           		RET
  682+0586
  683+0586 21 A0 DB     l0586:		LD	HL,	$DBA0
  684+0589 1E 12        		LD	E,$12
  685+058B E5           l058b:		PUSH	HL
  686+058C C5           		PUSH	BC
  687+058D 01 20 00     		LD	BC,$0020
  688+0590 09           		ADD	HL,BC
  689+0591 56           		LD	D,(HL)
  690+0592 23           		INC	HL
  691+0593 7E           		LD	A,(HL)
  692+0594 C1           		POP	BC
  693+0595 E1           		POP	HL
  694+0596 CB 7A        		BIT	7,D
  695+0598 28 2A        		JR	Z,l05c4		; (+$2A)
  696+059A E5           		PUSH	HL
  697+059B 21 21 00     		LD	HL,$0021
  698+059E 09           		ADD	HL,BC
  699+059F BE           		CP	(HL)
  700+05A0 E1           		POP	HL
  701+05A1 20 21        		JR	NZ,l05c4	; (+$21)
  702+05A3 0A           		LD	A,(BC)
  703+05A4 FE 22        		CP	$22
  704+05A6 28 08        		JR	Z,l05b0		; (+$08)
  705+05A8 7E           		LD	A,(HL)
  706+05A9 FE 22        		CP	$22
  707+05AB C4 7A 0D     		CALL	NZ,l0d7a
  708+05AE 20 14        		JR	NZ,l05c4	; (+$14)
  709+05B0 E5           l05b0:		PUSH	HL
  710+05B1 21 20 00     		LD	HL,$0020
  711+05B4 09           		ADD	HL,BC
  712+05B5 7E           		LD	A,(HL)
  713+05B6 0F           		RRCA
  714+05B7 0F           		RRCA
  715+05B8 E6 03        		AND	$03
  716+05BA 67           		LD	H,A
  717+05BB 7A           		LD	A,D
  718+05BC E6 03        		AND	$03
  719+05BE B4           		OR	H
  720+05BF AC           		XOR	H
  721+05C0 3E 1E        		LD	A,$1E
  722+05C2 E1           		POP	HL
  723+05C3 C0           		RET	NZ
  724+05C4
  725+05C4 D5           l05c4:		PUSH	DE
  726+05C5 11 38 00     		LD	DE,o0038
  727+05C8 19           		ADD	HL,DE
  728+05C9 D1           		POP	DE
  729+05CA 1D           		DEC	E
  730+05CB 20 BE        		JR	NZ,l058b	; (-$42)
  731+05CD 37           		SCF
  732+05CE C9           		RET
  733+05CF
  734+05CF CD FF 04     l05cf:		CALL	l04ff
  735+05D2 CD 13 0C     		CALL	l0c13
  736+05D5 D0           		RET	NC
  737+05D6
  738+05D6 C5           l05d6:		PUSH	BC
  739+05D7 01 A0 DB     		LD	BC,	$DBA0
  740+05DA 1E 12        		LD	E,$12
  741+05DC 21 20 00     l05dc:		LD	HL,$0020
  742+05DF 09           		ADD	HL,BC
  743+05E0 CB 7E        		BIT	7,(HL)
  744+05E2 28 0D        		JR	Z,l05f1		; (+$0D)
  745+05E4 23           		INC	HL
  746+05E5 7E           		LD	A,(HL)
  747+05E6 DD BE 1C     		CP	(IX+$1C)
  748+05E9 37           		SCF
  749+05EA D5           		PUSH	DE
  750+05EB CC 56 07     		CALL	Z,l0756
  751+05EE D1           		POP	DE
  752+05EF 30 0A        		JR	NC,l05fb	; (+$0A)
  753+05F1 21 38 00     l05f1:		LD	HL,o0038
  754+05F4 09           		ADD	HL,BC
  755+05F5 44           		LD	B,H
  756+05F6 4D           		LD	C,L
  757+05F7 1D           		DEC	E
  758+05F8 20 E2        		JR	NZ,l05dc	; (-$1E)
  759+05FA 37           		SCF
  760+05FB C1           l05fb:		POP	BC
  761+05FC C9           		RET
  762+05FD
  763+05FD 01 A0 DB     l05fd:		LD	BC,	$DBA0
  764+0600 1E 12        		LD	E,$12
  765+0602 E5           l0602:		PUSH	HL
  766+0603 D5           		PUSH	DE
  767+0604 7A           		LD	A,D
  768+0605 EB           		EX	DE,HL
  769+0606 21 21 00     		LD	HL,$0021
  770+0609 09           		ADD	HL,BC
  771+060A BE           		CP	(HL)
  772+060B 20 1A        		JR	NZ,l0627	; (+$1A)
  773+060D 23           		INC	HL
  774+060E CB 5E        		BIT	3,(HL)
  775+0610 28 15        		JR	Z,l0627		; (+$15)
  776+0612 21 2B 00     		LD	HL,$002B
  777+0615 09           		ADD	HL,BC
  778+0616 7B           		LD	A,E
  779+0617 BE           		CP	(HL)
  780+0618 20 0D        		JR	NZ,l0627	; (+$0D)
  781+061A 23           		INC	HL
  782+061B 7A           		LD	A,D
  783+061C BE           		CP	(HL)
  784+061D 20 08        		JR	NZ,l0627	; (+$08)
  785+061F CD 0C 0C     		CALL	l0c0c
  786+0622 DC AB 12     		CALL	C,l12ab
  787+0625 30 07        		JR	NC,l062e	; (+$07)
  788+0627 21 38 00     l0627:		LD	HL,o0038
  789+062A 09           		ADD	HL,BC
  790+062B 44           		LD	B,H
  791+062C 4D           		LD	C,L
  792+062D 37           		SCF
  793+062E D1           l062e:		POP	DE
  794+062F E1           		POP	HL
  795+0630 D0           		RET	NC
  796+0631
  797+0631 1D           		DEC	E
  798+0632 20 CE        		JR	NZ,l0602	; (-$32)
  799+0634 C9           		RET
  800+0635
  801+0635 D5           l0635:		PUSH	DE
  802+0636 C5           		PUSH	BC
  803+0637 CD 3C 05     		CALL	l053c
  804+063A DC E9 0A     		CALL	C,l0ae9
  805+063D DC 0C 0C     		CALL	C,l0c0c
  806+0640 E1           		POP	HL
  807+0641 D1           		POP	DE
  808+0642 D0           		RET	NC
  809+0643
  810+0643 D5           		PUSH	DE
  811+0644 7D           		LD	A,L
  812+0645 21 20 00     		LD	HL,$0020
  813+0648 09           		ADD	HL,BC
  814+0649 77           		LD	(HL),A
  815+064A CD 86 05     		CALL	l0586
  816+064D 21 7A 0D     		LD	HL,l0d7a
  817+0650 DC 9E 0D     		CALL	C,l0d9e
  818+0653 D1           		POP	DE
  819+0654 D0           		RET	NC
  820+0655
  821+0655 20 30        		JR	NZ,l0687	; (+$30)
  822+0657 7B           		LD	A,E
  823+0658 B7           		OR	A
  824+0659 3E 18        		LD	A,$18
  825+065B C8           		RET	Z
  826+065C
  827+065C 1D           		DEC	E
  828+065D 20 08        		JR	NZ,l0667	; (+$08)
  829+065F CD CC 06     		CALL	l06cc
  830+0662 DC 0B 08     		CALL	C,l080b
  831+0665 18 3C        		JR	l06a3		; (+$3C)
  832+0667 1D           l0667:		DEC	E
  833+0668 20 08        		JR	NZ,l0672	; (+$08)
  834+066A CD CC 06     		CALL	l06cc
  835+066D DC 63 08     		CALL	C,l0863
  836+0670 18 31        		JR	l06a3		; (+$31)
  837+0672 D5           l0672:		PUSH	DE
  838+0673 1D           		DEC	E
  839+0674 20 08        		JR	NZ,l067e	; (+$08)
  840+0676 CD E8 06     		CALL	l06e8
  841+0679 DC 8D 09     		CALL	C,l098d
  842+067C 18 07        		JR	l0685		; (+$07)
  843+067E B7           l067e:		OR	A
  844+067F 3E 15        		LD	A,$15
  845+0681 1D           		DEC	E
  846+0682 CC 38 09     		CALL	Z,l0938
  847+0685 D1           l0685:		POP	DE
  848+0686 D0           		RET	NC
  849+0687
  850+0687 7A           l0687:		LD	A,D
  851+0688 B7           		OR	A
  852+0689 3E 17        		LD	A,$17
  853+068B C8           		RET	Z
  854+068C
  855+068C 15           		DEC	D
  856+068D 20 08        		JR	NZ,l0697	; (+$08)
  857+068F CD B1 06     		CALL	x06b1
  858+0692 DC E6 07     		CALL	C,l07e6
  859+0695 18 07        		JR	l069e		; (+$07)
  860+0697 B7           l0697:		OR	A
  861+0698 3E 15        		LD	A,$15
  862+069A 15           		DEC	D
  863+069B CC B1 06     		CALL	Z,x06b1
  864+069E D0           l069e:		RET	NC
  865+069F
  866+069F AF           		XOR	A
  867+06A0 37           		SCF
  868+06A1 18 02        		JR	l06a5		; (+$02)
  869+06A3 D0           l06a3:		RET	NC
  870+06A4
  871+06A4 9F           		SBC	A,A
  872+06A5 F5           l06a5:		PUSH	AF
  873+06A6 21 20 00     		LD	HL,$0020
  874+06A9 09           		ADD	HL,BC
  875+06AA CB FE        		SET	7,(HL)
  876+06AC DD 34 21     		INC	(IX+$21)
  877+06AF F1           		POP	AF
  878+06B0 C9           		RET
  879+06B1
  880+06B1 21 20 00     x06b1:		LD	HL,$0020
  881+06B4 09           		ADD	HL,BC
  882+06B5 7E           		LD	A,(HL)
  883+06B6 1F           		RRA
  884+06B7 1F           		RRA
  885+06B8 3E 1E        		LD	A,$1E
  886+06BA DC 71 18     		CALL	C,x1871
  887+06BD 21 00 00     		LD	HL,$0000
  888+06C0 DC AA 0C     		CALL	C,x0caa
  889+06C3 D0           		RET	NC
  890+06C4
  891+06C4 21 22 00     		LD	HL,$0022
  892+06C7 09           		ADD	HL,BC
  893+06C8 CB C6        		SET	0,(HL)
  894+06CA 37           		SCF
  895+06CB C9           		RET
  896+06CC
  897+06CC CD 3A 0D     l06cc:		CALL	l0d3a
  898+06CF 30 0F        		JR	NC,l06e0	; (+$0F)
  899+06D1 21 20 00     		LD	HL,$0020
  900+06D4 09           		ADD	HL,BC
  901+06D5 CB 4E        		BIT	1,(HL)
  902+06D7 37           		SCF
  903+06D8 C8           		RET	Z
  904+06D9
  905+06D9 CD B3 0E     		CALL	l0eb3
  906+06DC DC 71 18     		CALL	C,x1871
  907+06DF C9           		RET
  908+06E0
  909+06E0 FE 19        l06e0:		CP	$19
  910+06E2 37           		SCF
  911+06E3 3F           		CCF
  912+06E4 C0           		RET	NZ
  913+06E5
  914+06E5 3E 17        		LD	A,$17
  915+06E7 C9           		RET
  916+06E8
  917+06E8 C5           l06e8:		PUSH	BC
  918+06E9 60           		LD	H,B
  919+06EA 69           		LD	L,C
  920+06EB 11 20 DF     		LD	DE,	$DF20
  921+06EE 01 38 00     		LD	BC,o0038
  922+06F1 ED B0        		LDIR
  923+06F3 C1           		POP	BC
  924+06F4 3E 42        		LD	A,$42
  925+06F6 32 29 DF     		LD	($DF29),A
  926+06F9 21 41 4B     		LD	HL,$4B41
  927+06FC 22 2A DF     		LD	($DF2A),HL
  928+06FF C5           		PUSH	BC
  929+0700 01 20 DF     		LD	BC,	$DF20
  930+0703 CD 38 09     		CALL	l0938
  931+0706 C1           		POP	BC
  932+0707 D8           		RET	C
  933+0708
  934+0708 FE 17        		CP	$17
  935+070A 37           		SCF
  936+070B C8           		RET	Z
  937+070C
  938+070C B7           		OR	A
  939+070D C9           		RET
  940+070E
  941+070E CD FF 04     l070e:		CALL	l04ff
  942+0711 57           		LD	D,A
  943+0712 59           		LD	E,C
  944+0713 CD 3C 05     		CALL	l053c
  945+0716 D0           		RET	NC
  946+0717
  947+0717 3E 22        		LD	A,$22
  948+0719 02           		LD	(BC),A
  949+071A 21 20 00     		LD	HL,$0020
  950+071D 09           		ADD	HL,BC
  951+071E 73           		LD	(HL),E
  952+071F 23           		INC	HL
  953+0720 72           		LD	(HL),D
  954+0721 7A           		LD	A,D
  955+0722 CD CB 17     		CALL	l17cb
  956+0725 DC 86 05     		CALL	C,l0586
  957+0728 D0           		RET	NC
  958+0729
  959+0729 DD 5E 05     		LD	E,(IX+$05)
  960+072C DD 56 06     		LD	D,(IX+$06)
  961+072F 13           		INC	DE
  962+0730 DD 7E 02     		LD	A,(IX+$02)
  963+0733 D6 02        		SUB	$02
  964+0735 C4 F5 04     		CALL	NZ,l04f5
  965+0738 CD 96 18     		CALL	x1896
  966+073B CB 23        		SLA	E
  967+073D CB 12        		RL	D
  968+073F 21 24 00     		LD	HL,$0024
  969+0742 09           		ADD	HL,BC
  970+0743 73           		LD	(HL),E
  971+0744 23           		INC	HL
  972+0745 72           		LD	(HL),D
  973+0746 37           		SCF
  974+0747 C3 A5 06     		JP	l06a5
  975+074A CD 32 05     l074a:		CALL	l0532
  976+074D DC 0C 0C     		CALL	C,l0c0c
  977+0750 DC 56 07     		CALL	C,l0756
  978+0753 D0           		RET	NC
  979+0754
  980+0754 18 33        		JR	l0789		; (+$33)
  981+0756 21 20 00     l0756:		LD	HL,$0020
  982+0759 09           		ADD	HL,BC
  983+075A CB 4E        		BIT	1,(HL)
  984+075C 37           		SCF
  985+075D C8           		RET	Z
  986+075E
  987+075E CD A1 07     		CALL	x07a1
  988+0761 DC AB 12     		CALL	C,l12ab
  989+0764 DC 85 16     		CALL	C,l1685
  990+0767 DC B6 0C     		CALL	C,l0cb6
  991+076A C9           		RET
  992+076B
  993+076B CD 32 05     l076b:		CALL	l0532
  994+076E DC 0C 0C     		CALL	C,l0c0c
  995+0771 D0           		RET	NC
  996+0772
  997+0772 21 20 00     		LD	HL,$0020
  998+0775 09           		ADD	HL,BC
  999+0776 CB 4E        		BIT	1,(HL)
 1000+0778 28 0F        		JR	Z,l0789		; (+$0F)
 1001+077A 23           		INC	HL
 1002+077B 23           		INC	HL
 1003+077C CB 4E        		BIT	1,(HL)
 1004+077E 28 06        		JR	Z,x0786		; (+$06)
 1005+0780 CD 2D 10     		CALL	l102d
 1006+0783 CD 35 0F     		CALL	l0f35
 1007+0786 CD 32 16     x0786:		CALL	l1632
 1008+0789 21 20 00     l0789:		LD	HL,$0020
 1009+078C 09           		ADD	HL,BC
 1010+078D 36 00        		LD	(HL),$00
 1011+078F DD 35 21     		DEC	(IX+$21)
 1012+0792 CC 1B 18     		CALL	Z,l181b
 1013+0795 37           		SCF
 1014+0796 C9           		RET
 1015+0797
 1016+0797 50 4C 55 53  l0797:		DB	"PLUS3DOS", $1A, $01
 1016+079B 33 44 4F 53
 1016+079F 1A 01
 1017+07A1
 1018+07A1 21 22 00     x07a1:		LD	HL,$0022
 1019+07A4 09           		ADD	HL,BC
 1020+07A5 CB 76        		BIT	6,(HL)
 1021+07A7 37           		SCF
 1022+07A8 C8           		RET	Z
 1023+07A9
 1024+07A9 CD 63 10     		CALL	l1063
 1025+07AC E5           		PUSH	HL
 1026+07AD D5           		PUSH	DE
 1027+07AE CD B9 07     		CALL	l07b9
 1028+07B1 D1           		POP	DE
 1029+07B2 E1           		POP	HL
 1030+07B3 F5           		PUSH	AF
 1031+07B4 CD 7F 10     		CALL	l107f
 1032+07B7 F1           		POP	AF
 1033+07B8 C9           		RET
 1034+07B9
 1035+07B9 21 0B 00     l07b9:		LD	HL,$000B
 1036+07BC 5C           		LD	E,H
 1037+07BD CD 7F 10     		CALL	l107f
 1038+07C0 21 23 00     		LD	HL,$0023
 1039+07C3 09           		ADD	HL,BC
 1040+07C4 1E 03        		LD	E,$03
 1041+07C6 CD DC 07     		CALL	x07dc
 1042+07C9 D0           		RET	NC
 1043+07CA
 1044+07CA AF           		XOR	A
 1045+07CB CD 26 12     		CALL	l1226
 1046+07CE D0           		RET	NC
 1047+07CF
 1048+07CF 21 30 00     		LD	HL,$0030
 1049+07D2 09           		ADD	HL,BC
 1050+07D3 1E 08        		LD	E,$08
 1051+07D5 CD DC 07     		CALL	x07dc
 1052+07D8 D0           		RET	NC
 1053+07D9
 1054+07D9 C3 67 12     		JP	l1267
 1055+07DC 7E           x07dc:		LD	A,(HL)
 1056+07DD 23           		INC	HL
 1057+07DE CD 26 12     		CALL	l1226
 1058+07E1 D0           		RET	NC
 1059+07E2
 1060+07E2 1D           		DEC	E
 1061+07E3 20 F7        		JR	NZ,x07dc	; (-$09)
 1062+07E5 C9           		RET
 1063+07E6
 1064+07E6 1E 0A        l07e6:		LD	E,$0A
 1065+07E8 21 97 07     		LD	HL,l0797
 1066+07EB CD DC 07     		CALL	x07dc
 1067+07EE D0           		RET	NC
 1068+07EF
 1069+07EF 3E 00        		LD	A,$00
 1070+07F1 CD 26 12     		CALL	l1226
 1071+07F4 D0           		RET	NC
 1072+07F5
 1073+07F5 1E 74        		LD	E,$74
 1074+07F7 AF           l07f7:		XOR	A
 1075+07F8 CD 26 12     		CALL	l1226
 1076+07FB D0           		RET	NC
 1077+07FC
 1078+07FC 1D           		DEC	E
 1079+07FD 20 F8        		JR	NZ,l07f7	; (-$08)
 1080+07FF CD 67 12     		CALL	l1267
 1081+0802 D0           		RET	NC
 1082+0803
 1083+0803 21 22 00     l0803:		LD	HL,$0022
 1084+0806 09           		ADD	HL,BC
 1085+0807 CB F6        		SET	6,(HL)
 1086+0809 37           		SCF
 1087+080A C9           		RET
 1088+080B
 1089+080B CD 5F 12     l080b:		CALL	l125f
 1090+080E 30 47        		JR	NC,l0857	; (+$47)
 1091+0810 20 4A        		JR	NZ,l085c	; (+$4A)
 1092+0812 1E 0A        		LD	E,$0A
 1093+0814 21 97 07     		LD	HL,l0797
 1094+0817 CD 4C 11     x0817:		CALL	l114c
 1095+081A 30 3B        		JR	NC,l0857	; (+$3B)
 1096+081C BE           		CP	(HL)
 1097+081D 23           		INC	HL
 1098+081E 20 3C        		JR	NZ,l085c	; (+$3C)
 1099+0820 1D           		DEC	E
 1100+0821 20 F4        		JR	NZ,x0817	; (-$0C)
 1101+0823 CD 4C 11     		CALL	l114c
 1102+0826 30 2F        		JR	NC,l0857	; (+$2F)
 1103+0828 FE 01        		CP	$01
 1104+082A 30 30        		JR	NC,l085c	; (+$30)
 1105+082C 21 23 00     		LD	HL,$0023
 1106+082F 09           		ADD	HL,BC
 1107+0830 1E 03        		LD	E,$03
 1108+0832 CD 4C 11     l0832:		CALL	l114c
 1109+0835 D0           		RET	NC
 1110+0836
 1111+0836 77           		LD	(HL),A
 1112+0837 23           		INC	HL
 1113+0838 1D           		DEC	E
 1114+0839 20 F7        		JR	NZ,l0832	; (-$09)
 1115+083B CD 4C 11     		CALL	l114c
 1116+083E D0           		RET	NC
 1117+083F
 1118+083F 21 30 00     		LD	HL,$0030
 1119+0842 09           		ADD	HL,BC
 1120+0843 1E 08        		LD	E,$08
 1121+0845 CD 4C 11     l0845:		CALL	l114c
 1122+0848 D0           		RET	NC
 1123+0849
 1124+0849 77           		LD	(HL),A
 1125+084A 23           		INC	HL
 1126+084B 1D           		DEC	E
 1127+084C 20 F7        		JR	NZ,l0845	; (-$09)
 1128+084E 21 80 00     		LD	HL,$0080
 1129+0851 5C           		LD	E,H
 1130+0852 CD 7F 10     		CALL	l107f
 1131+0855 18 AC        		JR	l0803		; (-$54)
 1132+0857 FE 19        l0857:		CP	$19
 1133+0859 37           		SCF
 1134+085A 3F           		CCF
 1135+085B C0           		RET	NZ
 1136+085C
 1137+085C 21 00 00     l085c:		LD	HL,$0000
 1138+085F 5D           		LD	E,L
 1139+0860 CD 7F 10     		CALL	l107f
 1140+0863 21 00 00     l0863:		LD	HL,$0000
 1141+0866 22 90 DF     		LD	($DF90		),HL
 1142+0869 AF           		XOR	A
 1143+086A 32 92 DF     		LD	($DF92),A
 1144+086D 21 97 08     		LD	HL,$0897
 1145+0870 CD 9E 0D     		CALL	l0d9e
 1146+0873 D0           		RET	NC
 1147+0874
 1148+0874 ED 5B 91 DF  		LD	DE,($DF91)
 1149+0878 2A 8F DF     		LD	HL,($DF8F)
 1150+087B 2E 00        		LD	L,$00
 1151+087D CB 3A        		SRL	D
 1152+087F CB 1B        		RR	E
 1153+0881 CB 1C        		RR	H
 1154+0883 CB 1D        		RR	L
 1155+0885 7A           		LD	A,D
 1156+0886 B7           		OR	A
 1157+0887 3E 22        		LD	A,$22
 1158+0889 C0           		RET	NZ
 1159+088A
 1160+088A E5           		PUSH	HL
 1161+088B 21 25 00     		LD	HL,$0025
 1162+088E 09           		ADD	HL,BC
 1163+088F 73           		LD	(HL),E
 1164+0890 D1           		POP	DE
 1165+0891 2B           		DEC	HL
 1166+0892 72           		LD	(HL),D
 1167+0893 2B           		DEC	HL
 1168+0894 73           		LD	(HL),E
 1169+0895 37           		SCF
 1170+0896 C9           		RET
 1171+0897
 1172+0897 CD 7A 0D     		CALL	l0d7a
 1173+089A C0           		RET	NZ
 1174+089B
 1175+089B C5           		PUSH	BC
 1176+089C 44           		LD	B,H
 1177+089D 4D           		LD	C,L
 1178+089E CD 45 14     		CALL	l1445
 1179+08A1 47           		LD	B,A
 1180+08A2 EB           		EX	DE,HL
 1181+08A3 2A 90 DF     		LD	HL,($DF90		)
 1182+08A6 B7           		OR	A
 1183+08A7 ED 52        		SBC	HL,DE
 1184+08A9 3A 92 DF     		LD	A,($DF92)
 1185+08AC 98           		SBC	A,B
 1186+08AD 30 08        		JR	NC,l08b7	; (+$08)
 1187+08AF ED 53 90 DF  		LD	($DF90		),DE
 1188+08B3 78           		LD	A,B
 1189+08B4 32 92 DF     		LD	($DF92),A
 1190+08B7 C1           l08b7:		POP	BC
 1191+08B8 37           		SCF
 1192+08B9 9F           		SBC	A,A
 1193+08BA C9           		RET
 1194+08BB
 1195+08BB CD 32 05     l08bb:		CALL	l0532
 1196+08BE D0           		RET	NC
 1197+08BF
 1198+08BF DD 21 30 00  		LD	IX,$0030
 1199+08C3 DD 09        		ADD	IX,BC
 1200+08C5 21 22 00     		LD	HL,$0022
 1201+08C8 09           		ADD	HL,BC
 1202+08C9 CB 76        		BIT	6,(HL)
 1203+08CB 37           		SCF
 1204+08CC C9           		RET
 1205+08CD
 1206+08CD 59           l08cd:		LD	E,C
 1207+08CE D5           		PUSH	DE
 1208+08CF CD 32 05     		CALL	l0532
 1209+08D2 DC 0C 0C     		CALL	C,l0c0c
 1210+08D5 DC 56 07     		CALL	C,l0756
 1211+08D8 D1           		POP	DE
 1212+08D9 D0           		RET	NC
 1213+08DA
 1214+08DA 21 20 00     		LD	HL,$0020
 1215+08DD 09           		ADD	HL,BC
 1216+08DE 56           		LD	D,(HL)
 1217+08DF 73           		LD	(HL),E
 1218+08E0 E5           		PUSH	HL
 1219+08E1 D5           		PUSH	DE
 1220+08E2 CD 86 05     		CALL	l0586
 1221+08E5 D1           		POP	DE
 1222+08E6 E1           		POP	HL
 1223+08E7 30 10        		JR	NC,l08f9	; (+$10)
 1224+08E9 CB 4B        		BIT	1,E
 1225+08EB 28 08        		JR	Z,l08f5		; (+$08)
 1226+08ED CD B3 0E     		CALL	l0eb3
 1227+08F0 DC 71 18     		CALL	C,x1871
 1228+08F3 30 04        		JR	NC,l08f9	; (+$04)
 1229+08F5 CB FE        l08f5:		SET	7,(HL)
 1230+08F7 37           		SCF
 1231+08F8 C9           		RET
 1232+08F9
 1233+08F9 72           l08f9:		LD	(HL),D
 1234+08FA B7           		OR	A
 1235+08FB C9           		RET
 1236+08FC
 1237+08FC CD FF 04     l08fc:		CALL	l04ff
 1238+08FF CD 13 0C     		CALL	l0c13
 1239+0902 D0           		RET	NC
 1240+0903
 1241+0903 C3 9E 0F     		JP	l0f9e
 1242+0906 FE FF        l0906:		CP	$FF
 1243+0908 28 0A        		JR	Z,l0914		; (+$0A)
 1244+090A FE 10        		CP	$10
 1245+090C 47           		LD	B,A
 1246+090D 3E 15        		LD	A,$15
 1247+090F D0           		RET	NC
 1248+0910
 1249+0910 78           		LD	A,B
 1250+0911 32 93 DF     		LD	($DF93		),A
 1251+0914 3A 93 DF     l0914:		LD	A,($DF93		)
 1252+0917 37           		SCF
 1253+0918 C9           		RET
 1254+0919
 1255+0919 CD FF 04     l0919:		CALL	l04ff
 1256+091C FE FF        		CP	$FF
 1257+091E 28 09        		JR	Z,l0929		; (+$09)
 1258+0920 47           		LD	B,A
 1259+0921 CD CB 17     		CALL	l17cb
 1260+0924 D0           		RET	NC
 1261+0925
 1262+0925 78           		LD	A,B
 1263+0926 32 94 DF     		LD	(	$DF94		),A
 1264+0929 3A 94 DF     l0929:		LD	A,(	$DF94		)
 1265+092C 37           		SCF
 1266+092D C9           		RET
 1267+092E
 1268+092E 01 20 DF     l092e:		LD	BC,	$DF20
 1269+0931 CD FF 0A     		CALL	l0aff
 1270+0934 DC 0C 0C     		CALL	C,l0c0c
 1271+0937 D0           		RET	NC
 1272+0938
 1273+0938 CD 76 05     l0938:		CALL	l0576
 1274+093B DC 71 18     		CALL	C,x1871
 1275+093E D0           		RET	NC
 1276+093F
 1277+093F 21 45 09     		LD	HL,$0945
 1278+0942 C3 B7 09     		JP	l09b7
 1279+0945 CD 74 0D     		CALL	l0d74
 1280+0948 C0           		RET	NZ
 1281+0949
 1282+0949 CD B3 0E     		CALL	l0eb3
 1283+094C D0           		RET	NC
 1284+094D
 1285+094D E5           		PUSH	HL
 1286+094E D5           		PUSH	DE
 1287+094F AF           		XOR	A
 1288+0950 CD 38 0F     		CALL	l0f38
 1289+0953 D1           		POP	DE
 1290+0954 E1           		POP	HL
 1291+0955 36 E5        		LD	(HL),$E5
 1292+0957 CD 24 0E     		CALL	l0e24
 1293+095A D0           		RET	NC
 1294+095B
 1295+095B CD 35 10     		CALL	l1035
 1296+095E 9F           		SBC	A,A
 1297+095F 32 95 DF     		LD	(	$DF95		),A
 1298+0962 C9           		RET
 1299+0963
 1300+0963 ED 53 96 DF  l0963:		LD	(	$DF96		),DE
 1301+0967 01 20 DF     		LD	BC,	$DF20
 1302+096A CD FF 0A     		CALL	l0aff
 1303+096D DC 0C 0C     		CALL	C,l0c0c
 1304+0970 DC 71 18     		CALL	C,x1871
 1305+0973 D0           		RET	NC
 1306+0974
 1307+0974 21 C9 09     		LD	HL,$09C9
 1308+0977 18 38        		JR	l09b1		; (+$38)
 1309+0979 D5           l0979:		PUSH	DE
 1310+097A 01 58 DF     		LD	BC,	$DF58
 1311+097D CD E9 0A     		CALL	l0ae9
 1312+0980 DC 0C 0C     		CALL	C,l0c0c
 1313+0983 E1           		POP	HL
 1314+0984 C5           		PUSH	BC
 1315+0985 01 20 DF     		LD	BC,	$DF20
 1316+0988 DC E9 0A     		CALL	C,l0ae9
 1317+098B C1           		POP	BC
 1318+098C D0           		RET	NC
 1319+098D
 1320+098D 21 21 00     l098d:		LD	HL,$0021
 1321+0990 09           		ADD	HL,BC
 1322+0991 3A 41 DF     		LD	A,($DF41)
 1323+0994 AE           		XOR	(HL)
 1324+0995 3E 1F        		LD	A,$1F
 1325+0997 C0           		RET	NZ
 1326+0998
 1327+0998 CD 71 18     		CALL	x1871
 1328+099B C5           		PUSH	BC
 1329+099C 01 20 DF     		LD	BC,	$DF20
 1330+099F DC 76 05     		CALL	C,l0576
 1331+09A2 21 74 0D     		LD	HL,l0d74
 1332+09A5 DC 9E 0D     		CALL	C,l0d9e
 1333+09A8 C1           		POP	BC
 1334+09A9 D0           		RET	NC
 1335+09AA
 1336+09AA 3F           		CCF
 1337+09AB 3E 18        		LD	A,$18
 1338+09AD C8           		RET	Z
 1339+09AE
 1340+09AE 21 FE 09     		LD	HL,$09FE
 1341+09B1 E5           l09b1:		PUSH	HL
 1342+09B2 CD 76 05     		CALL	l0576
 1343+09B5 E1           		POP	HL
 1344+09B6 D0           		RET	NC
 1345+09B7
 1346+09B7 AF           l09b7:		XOR	A
 1347+09B8 32 95 DF     		LD	(	$DF95		),A
 1348+09BB CD 9E 0D     		CALL	l0d9e
 1349+09BE D0           		RET	NC
 1350+09BF
 1351+09BF 3A 95 DF     		LD	A,(	$DF95		)
 1352+09C2 B7           		OR	A
 1353+09C3 3E 17        		LD	A,$17
 1354+09C5 C4 85 16     		CALL	NZ,l1685
 1355+09C8 C9           		RET
 1356+09C9
 1357+09C9 CD 74 0D     		CALL	l0d74
 1358+09CC C0           		RET	NZ
 1359+09CD
 1360+09CD C5           		PUSH	BC
 1361+09CE 3A 97 DF     		LD	A,(	$DF97		)
 1362+09D1 0E FF        		LD	C,$FF
 1363+09D3 E5           		PUSH	HL
 1364+09D4 CD E2 09     		CALL	l09e2
 1365+09D7 E1           		POP	HL
 1366+09D8 3A 96 DF     		LD	A,(	$DF96		)
 1367+09DB 0C           		INC	C
 1368+09DC CD E2 09     		CALL	l09e2
 1369+09DF C1           		POP	BC
 1370+09E0 18 38        		JR	l0a1a		; (+$38)
 1371+09E2 17           l09e2:		RLA
 1372+09E3 06 04        		LD	B,$04
 1373+09E5 23           		INC	HL
 1374+09E6 CD EF 09     		CALL	l09ef
 1375+09E9 23           		INC	HL
 1376+09EA 23           		INC	HL
 1377+09EB 23           		INC	HL
 1378+09EC 23           		INC	HL
 1379+09ED 06 03        		LD	B,$03
 1380+09EF 17           l09ef:		RLA
 1381+09F0 30 08        		JR	NC,l09fa	; (+$08)
 1382+09F2 CB BE        		res	7,(HL)
 1383+09F4 0C           		INC	C
 1384+09F5 0D           		DEC	C
 1385+09F6 28 02        		JR	Z,l09fa		; (+$02)
 1386+09F8 CB FE        		SET	7,(HL)
 1387+09FA 23           l09fa:		INC	HL
 1388+09FB 10 F2        		DJNZ	l09ef		; (-$0E)
 1389+09FD C9           		RET
 1390+09FE
 1391+09FE CD 74 0D     		CALL	l0d74
 1392+0A01 C0           		RET	NZ
 1393+0A02
 1394+0A02 CD B3 0E     		CALL	l0eb3
 1395+0A05 D0           		RET	NC
 1396+0A06
 1397+0A06 D5           		PUSH	DE
 1398+0A07 EB           		EX	DE,HL
 1399+0A08 21 20 DF     		LD	HL,	$DF20
 1400+0A0B 1A           		LD	A,(DE)
 1401+0A0C E6 10        		AND	$10
 1402+0A0E B6           		OR	(HL)
 1403+0A0F 12           		LD	(DE),A
 1404+0A10 13           		INC	DE
 1405+0A11 23           		INC	HL
 1406+0A12 C5           		PUSH	BC
 1407+0A13 01 0B 00     		LD	BC,$000B
 1408+0A16 ED B0        		LDIR
 1409+0A18 C1           		POP	BC
 1410+0A19 D1           		POP	DE
 1411+0A1A CD 24 0E     l0a1a:		CALL	l0e24
 1412+0A1D D0           		RET	NC
 1413+0A1E
 1414+0A1E 9F           		SBC	A,A
 1415+0A1F 32 95 DF     		LD	(	$DF95		),A
 1416+0A22 C9           		RET
 1417+0A23
 1418+0A23 ED 53 98 DF  l0a23:		LD	($DF98		),DE
 1419+0A27 ED 43 9A DF  		LD	($DF9A		),BC
 1420+0A2B 3E 01        		LD	A,$01
 1421+0A2D 32 9C DF     		LD	($DF9C		),A
 1422+0A30 01 20 DF     		LD	BC,	$DF20
 1423+0A33 CD FF 0A     		CALL	l0aff
 1424+0A36 DC 0C 0C     		CALL	C,l0c0c
 1425+0A39 DC D6 05     		CALL	C,l05d6
 1426+0A3C 21 47 0A     		LD	HL,$0A47
 1427+0A3F DC 9E 0D     		CALL	C,l0d9e
 1428+0A42 ED 4B 9B DF  		LD	BC,($DF9B		)
 1429+0A46 C9           		RET
 1430+0A47
 1431+0A47 C5           		PUSH	BC
 1432+0A48 CD 4F 0A     		CALL	l0a4f
 1433+0A4B C1           		POP	BC
 1434+0A4C 37           		SCF
 1435+0A4D 9F           		SBC	A,A
 1436+0A4E C9           		RET
 1437+0A4F
 1438+0A4F CD 7A 0D     l0a4f:		CALL	l0d7a
 1439+0A52 C0           		RET	NZ
 1440+0A53
 1441+0A53 3A 9A DF     		LD	A,($DF9A		)
 1442+0A56 1F           		RRA
 1443+0A57 38 09        		JR	C,l0a62		; (+$09)
 1444+0A59 E5           		PUSH	HL
 1445+0A5A 01 0A 00     		LD	BC,$000A
 1446+0A5D 09           		ADD	HL,BC
 1447+0A5E CB 7E        		BIT	7,(HL)
 1448+0A60 E1           		POP	HL
 1449+0A61 C0           		RET	NZ
 1450+0A62
 1451+0A62 ED 5B 98 DF  l0a62:		LD	DE,($DF98		)
 1452+0A66 CD D3 0A     		CALL	l0ad3
 1453+0A69 D0           		RET	NC
 1454+0A6A
 1455+0A6A ED 4B 9B DF  		LD	BC,($DF9B		)
 1456+0A6E E5           l0a6e:		PUSH	HL
 1457+0A6F 21 0D 00     		LD	HL,$000D
 1458+0A72 19           		ADD	HL,DE
 1459+0A73 EB           		EX	DE,HL
 1460+0A74 E1           		POP	HL
 1461+0A75 0D           		DEC	C
 1462+0A76 10 03        		DJNZ	l0a7b		; (+$03)
 1463+0A78 C8           		RET	Z
 1464+0A79
 1465+0A79 18 30        		JR	l0aab		; (+$30)
 1466+0A7B CD D3 0A     l0a7b:		CALL	l0ad3
 1467+0A7E 38 EE        		JR	C,l0a6e		; (-$12)
 1468+0A80 28 41        		JR	Z,x0ac3		; (+$41)
 1469+0A82 E5           		PUSH	HL
 1470+0A83 D5           		PUSH	DE
 1471+0A84 2A 9B DF     		LD	HL,($DF9B		)
 1472+0A87 26 00        		LD	H,$00
 1473+0A89 2B           		DEC	HL
 1474+0A8A 44           		LD	B,H
 1475+0A8B 4D           		LD	C,L
 1476+0A8C 29           		ADD	HL,HL
 1477+0A8D 09           		ADD	HL,BC
 1478+0A8E 29           		ADD	HL,HL
 1479+0A8F 29           		ADD	HL,HL
 1480+0A90 09           		ADD	HL,BC
 1481+0A91 ED 4B 98 DF  		LD	BC,($DF98		)
 1482+0A95 09           		ADD	HL,BC
 1483+0A96 7D           		LD	A,L
 1484+0A97 93           		SUB	E
 1485+0A98 4F           		LD	C,A
 1486+0A99 7C           		LD	A,H
 1487+0A9A 9A           		SBC	A,D
 1488+0A9B 47           		LD	B,A
 1489+0A9C 2B           		DEC	HL
 1490+0A9D 11 0D 00     		LD	DE,$000D
 1491+0AA0 EB           		EX	DE,HL
 1492+0AA1 19           		ADD	HL,DE
 1493+0AA2 EB           		EX	DE,HL
 1494+0AA3 78           		LD	A,B
 1495+0AA4 B1           		OR	C
 1496+0AA5 28 02        		JR	Z,l0aa9		; (+$02)
 1497+0AA7 ED B8        		LDDR
 1498+0AA9 D1           l0aa9:		POP	DE
 1499+0AAA E1           		POP	HL
 1500+0AAB E5           l0aab:		PUSH	HL
 1501+0AAC D5           		PUSH	DE
 1502+0AAD 23           		INC	HL
 1503+0AAE 01 0B 00     		LD	BC,$000B
 1504+0AB1 ED B0        		LDIR
 1505+0AB3 AF           		XOR	A
 1506+0AB4 12           		LD	(DE),A
 1507+0AB5 13           		INC	DE
 1508+0AB6 12           		LD	(DE),A
 1509+0AB7 2A 9B DF     		LD	HL,($DF9B		)
 1510+0ABA 7C           		LD	A,H
 1511+0ABB BD           		CP	L
 1512+0ABC CE 00        		ADC	A,$00
 1513+0ABE 32 9C DF     		LD	($DF9C		),A
 1514+0AC1 D1           		POP	DE
 1515+0AC2 E1           		POP	HL
 1516+0AC3 CD 6A 0F     x0ac3:		CALL	l0f6a
 1517+0AC6 EB           		EX	DE,HL
 1518+0AC7 01 0B 00     		LD	BC,$000B
 1519+0ACA 09           		ADD	HL,BC
 1520+0ACB 7E           		LD	A,(HL)
 1521+0ACC 83           		ADD	A,E
 1522+0ACD 77           		LD	(HL),A
 1523+0ACE 23           		INC	HL
 1524+0ACF 7E           		LD	A,(HL)
 1525+0AD0 8A           		ADC	A,D
 1526+0AD1 77           		LD	(HL),A
 1527+0AD2 C9           		RET
 1528+0AD3
 1529+0AD3 E5           l0ad3:		PUSH	HL
 1530+0AD4 D5           		PUSH	DE
 1531+0AD5 C5           		PUSH	BC
 1532+0AD6 06 0B        		LD	B,$0B
 1533+0AD8 23           		INC	HL
 1534+0AD9 7E           l0ad9:		LD	A,(HL)
 1535+0ADA 87           		ADD	A,A
 1536+0ADB 4F           		LD	C,A
 1537+0ADC 1A           		LD	A,(DE)
 1538+0ADD 87           		ADD	A,A
 1539+0ADE B9           		CP	C
 1540+0ADF 20 04        		JR	NZ,x0ae5	; (+$04)
 1541+0AE1 13           		INC	DE
 1542+0AE2 23           		INC	HL
 1543+0AE3 10 F4        		DJNZ	l0ad9		; (-$0C)
 1544+0AE5 C1           x0ae5:		POP	BC
 1545+0AE6 D1           		POP	DE
 1546+0AE7 E1           		POP	HL
 1547+0AE8 C9           		RET
 1548+0AE9
 1549+0AE9 CD 49 0B     l0ae9:		CALL	l0b49
 1550+0AEC D0           		RET	NC
 1551+0AED
 1552+0AED 21 01 00     		LD	HL,$0001
 1553+0AF0 09           		ADD	HL,BC
 1554+0AF1 1E 0B        		LD	E,$0B
 1555+0AF3 7E           l0af3:		LD	A,(HL)
 1556+0AF4 23           		INC	HL
 1557+0AF5 FE 3F        		CP	$3F
 1558+0AF7 3E 14        		LD	A,$14
 1559+0AF9 C8           		RET	Z
 1560+0AFA
 1561+0AFA 1D           		DEC	E
 1562+0AFB 20 F6        		JR	NZ,l0af3	; (-$0A)
 1563+0AFD 37           		SCF
 1564+0AFE C9           		RET
 1565+0AFF
 1566+0AFF C3 49 0B     l0aff:		JP	l0b49
 1567+0B02 CD 0C 0B     l0b02:		CALL	l0b0c
 1568+0B05 30 24        		JR	NC,l0b2b	; (+$24)
 1569+0B07 CD 2B 0B     		CALL	l0b2b
 1570+0B0A 37           		SCF
 1571+0B0B C9           		RET
 1572+0B0C
 1573+0B0C CD 42 0B     l0b0c:		CALL	l0b42
 1574+0B0F D0           		RET	NC
 1575+0B10
 1576+0B10 5F           		LD	E,A
 1577+0B11 CD DD 0B     		CALL	l0bdd
 1578+0B14 DC 42 0B     		CALL	C,l0b42
 1579+0B17 30 0C        		JR	NC,l0b25	; (+$0C)
 1580+0B19 57           		LD	D,A
 1581+0B1A 7B           		LD	A,E
 1582+0B1B 87           		ADD	A,A
 1583+0B1C 5F           		LD	E,A
 1584+0B1D 87           		ADD	A,A
 1585+0B1E 87           		ADD	A,A
 1586+0B1F 83           		ADD	A,E
 1587+0B20 82           		ADD	A,D
 1588+0B21 5F           		LD	E,A
 1589+0B22 CD DD 0B     		CALL	l0bdd
 1590+0B25 7B           l0b25:		LD	A,E
 1591+0B26 FE 10        		CP	$10
 1592+0B28 D0           		RET	NC
 1593+0B29
 1594+0B29 02           		LD	(BC),A
 1595+0B2A C9           		RET
 1596+0B2B
 1597+0B2B CD D3 0B     l0b2b:		CALL	l0bd3
 1598+0B2E D0           		RET	NC
 1599+0B2F
 1600+0B2F FE 41        		CP	$41
 1601+0B31 3F           		CCF
 1602+0B32 D0           		RET	NC
 1603+0B33
 1604+0B33 FE 51        		CP	$51
 1605+0B35 D0           		RET	NC
 1606+0B36
 1607+0B36 E5           		PUSH	HL
 1608+0B37 21 21 00     		LD	HL,$0021
 1609+0B3A 09           		ADD	HL,BC
 1610+0B3B 77           		LD	(HL),A
 1611+0B3C E1           		POP	HL
 1612+0B3D CD DD 0B     		CALL	l0bdd
 1613+0B40 37           		SCF
 1614+0B41 C9           		RET
 1615+0B42
 1616+0B42 D6 30        l0b42:		SUB	$30
 1617+0B44 3F           		CCF
 1618+0B45 D0           		RET	NC
 1619+0B46
 1620+0B46 FE 0A        		CP	$0A
 1621+0B48 C9           		RET
 1622+0B49
 1623+0B49 C5           l0b49:		PUSH	BC
 1624+0B4A CD 51 0B     		CALL	l0b51
 1625+0B4D C1           		POP	BC
 1626+0B4E 3E 14        		LD	A,$14
 1627+0B50 C9           		RET
 1628+0B51
 1629+0B51 E5           l0b51:		PUSH	HL
 1630+0B52 21 21 00     		LD	HL,$0021
 1631+0B55 09           		ADD	HL,BC
 1632+0B56 3A 94 DF     		LD	A,(	$DF94		)
 1633+0B59 77           		LD	(HL),A
 1634+0B5A E1           		POP	HL
 1635+0B5B 3A 93 DF     		LD	A,($DF93		)
 1636+0B5E 02           		LD	(BC),A
 1637+0B5F CD D3 0B     		CALL	l0bd3
 1638+0B62 30 20        		JR	NC,l0b84	; (+$20)
 1639+0B64 5F           		LD	E,A
 1640+0B65 E5           		PUSH	HL
 1641+0B66 FE 3A        l0b66:		CP	$3A
 1642+0B68 37           		SCF
 1643+0B69 28 05        		JR	Z,l0b70		; (+$05)
 1644+0B6B CD DD 0B     		CALL	l0bdd
 1645+0B6E 38 F6        		JR	C,l0b66		; (-$0A)
 1646+0B70 E1           l0b70:		POP	HL
 1647+0B71 7B           		LD	A,E
 1648+0B72 30 16        		JR	NC,l0b8a	; (+$16)
 1649+0B74 CD 02 0B     		CALL	l0b02
 1650+0B77 D0           		RET	NC
 1651+0B78
 1652+0B78 CD D3 0B     		CALL	l0bd3
 1653+0B7B D0           		RET	NC
 1654+0B7C
 1655+0B7C EE 3A        		XOR	$3A
 1656+0B7E C0           		RET	NZ
 1657+0B7F
 1658+0B7F CD CF 0B     		CALL	l0bcf
 1659+0B82 38 06        		JR	C,l0b8a		; (+$06)
 1660+0B84 03           l0b84:		INC	BC
 1661+0B85 1E 0B        		LD	E,$0B
 1662+0B87 37           		SCF
 1663+0B88 18 3C        		JR	l0bc6		; (+$3C)
 1664+0B8A 03           l0b8a:		INC	BC
 1665+0B8B FE 2E        		CP	$2E
 1666+0B8D C8           		RET	Z
 1667+0B8E
 1668+0B8E 1E 08        		LD	E,$08
 1669+0B90 CD A0 0B     		CALL	l0ba0
 1670+0B93 3F           		CCF
 1671+0B94 1E 03        		LD	E,$03
 1672+0B96 30 25        		JR	NC,l0bbd	; (+$25)
 1673+0B98 EE 2E        		XOR	$2E
 1674+0B9A C0           		RET	NZ
 1675+0B9B
 1676+0B9B CD CF 0B     		CALL	l0bcf
 1677+0B9E 30 1D        		JR	NC,l0bbd	; (+$1D)
 1678+0BA0 E5           l0ba0:		PUSH	HL
 1679+0BA1 FE 20        		CP	$20
 1680+0BA3 21 F9 0B     		LD	HL,l0bf9
 1681+0BA6 D4 EF 0B     		CALL	NC,l0bef
 1682+0BA9 E1           		POP	HL
 1683+0BAA 38 11        		JR	C,l0bbd		; (+$11)
 1684+0BAC 1D           		DEC	E
 1685+0BAD F8           		RET	m
 1686+0BAE FE 2A        		CP	$2A
 1687+0BB0 CC C6 0B     		CALL	Z,l0bc6
 1688+0BB3 02           		LD	(BC),A
 1689+0BB4 03           		INC	BC
 1690+0BB5 CD DD 0B     		CALL	l0bdd
 1691+0BB8 20 E6        		JR	NZ,l0ba0	; (-$1A)
 1692+0BBA DC CF 0B     		CALL	C,l0bcf
 1693+0BBD F5           l0bbd:		PUSH	AF
 1694+0BBE 3E 20        		LD	A,$20
 1695+0BC0 CD C8 0B     		CALL	l0bc8
 1696+0BC3 F1           		POP	AF
 1697+0BC4 3F           		CCF
 1698+0BC5 C9           		RET
 1699+0BC6
 1700+0BC6 3E 3F        l0bc6:		LD	A,$3F
 1701+0BC8 1C           l0bc8:		INC	E
 1702+0BC9 1D           l0bc9:		DEC	E
 1703+0BCA C8           		RET	Z
 1704+0BCB
 1705+0BCB 02           		LD	(BC),A
 1706+0BCC 03           		INC	BC
 1707+0BCD 18 FA        		JR	l0bc9		; (-$06)
 1708+0BCF CD DD 0B     l0bcf:		CALL	l0bdd
 1709+0BD2 D0           		RET	NC
 1710+0BD3
 1711+0BD3 CD E2 0B     l0bd3:		CALL	l0be2
 1712+0BD6 C0           x0bd6:		RET	NZ
 1713+0BD7
 1714+0BD7 CD DD 0B     		CALL	l0bdd
 1715+0BDA 38 FA        		JR	C,x0bd6		; (-$06)
 1716+0BDC C9           		RET
 1717+0BDD
 1718+0BDD 7E           l0bdd:		LD	A,(HL)
 1719+0BDE FE FF        		CP	$FF
 1720+0BE0 C8           		RET	Z
 1721+0BE1
 1722+0BE1 23           		INC	HL
 1723+0BE2 7E           l0be2:		LD	A,(HL)
 1724+0BE3 FE FF        		CP	$FF
 1725+0BE5 C8           		RET	Z
 1726+0BE6
 1727+0BE6 E6 7F        		AND	$7F
 1728+0BE8 CD FF 04     		CALL	l04ff
 1729+0BEB FE 20        		CP	$20
 1730+0BED 37           		SCF
 1731+0BEE C9           		RET
 1732+0BEF
 1733+0BEF BE           l0bef:		CP	(HL)
 1734+0BF0 37           		SCF
 1735+0BF1 C8           		RET	Z
 1736+0BF2 23           		INC	HL
 1737+0BF3 CB 7E        		BIT	7,(HL)
 1738+0BF5 28 F8        		JR	Z,l0bef		; (-$08)
 1739+0BF7 B7           		OR	A
 1740+0BF8 C9           		RET
 1741+0BF9
 1742+0BF9 21 26 28 29  l0bf9:		DB	"!&()+,-./:"
 1742+0BFD 2B 2C 2D 2E
 1742+0C01 2F 3A
 1743+0C03 3B           		DB	$3B
 1744+0C04 3C 3D 3E 5B  		DB	"<=>[\\]|"
 1744+0C08 5C 5D 7C
 1745+0C0B 80           		DB	$80
 1746+0C0C
 1747+0C0C E5           l0c0c:		PUSH	HL
 1748+0C0D 21 21 00     		LD	HL,$0021
 1749+0C10 09           		ADD	HL,BC
 1750+0C11 7E           		LD	A,(HL)
 1751+0C12 E1           		POP	HL
 1752+0C13 CD EF 17     l0c13:		CALL	l17ef
 1753+0C16 D0           		RET	NC
 1754+0C17
 1755+0C17 DD CB 1B 46  		BIT	0,(IX+$1B)
 1756+0C1B 37           		SCF
 1757+0C1C C0           		RET	NZ
 1758+0C1D
 1759+0C1D E5           		PUSH	HL
 1760+0C1E D5           		PUSH	DE
 1761+0C1F C5           		PUSH	BC
 1762+0C20 CD C1 0E     		CALL	l0ec1
 1763+0C23 DD CB 1B CE  		SET	1,(IX+$1B)
 1764+0C27 AF           		XOR	A
 1765+0C28 DD 77 22     		LD	(IX+$22),A
 1766+0C2B DD 77 23     		LD	(IX+$23),A
 1767+0C2E CD 60 0C     		CALL	l0c60
 1768+0C31 01 00 00     		LD	BC,$0000
 1769+0C34 21 4D 0C     		LD	HL,$0C4D
 1770+0C37 CD 9E 0D     		CALL	l0d9e
 1771+0C3A DD 71 24     		LD	(IX+$24),C
 1772+0C3D DD 70 25     		LD	(IX+$25),B
 1773+0C40 C1           		POP	BC
 1774+0C41 D1           		POP	DE
 1775+0C42 E1           		POP	HL
 1776+0C43 D0           		RET	NC
 1777+0C44
 1778+0C44 DD CB 1B C6  		SET	0,(IX+$1B)
 1779+0C48 DD CB 1B 8E  		res	1,(IX+$1B)
 1780+0C4C C9           		RET
 1781+0C4D
 1782+0C4D CD 53 0C     		CALL	l0c53
 1783+0C50 37           		SCF
 1784+0C51 9F           		SBC	A,A
 1785+0C52 C9           		RET
 1786+0C53
 1787+0C53 7E           l0c53:		LD	A,(HL)
 1788+0C54 FE E5        		CP	$E5
 1789+0C56 CA 35 10     		JP	Z,l1035
 1790+0C59 42           		LD	B,D
 1791+0C5A 4B           		LD	C,E
 1792+0C5B 3E FF        		LD	A,$FF
 1793+0C5D C3 38 0F     		JP	l0f38
 1794+0C60 DD 7E 07     l0c60:		LD	A,(IX+$07)
 1795+0C63 DD 77 24     		LD	(IX+$24),A
 1796+0C66 DD 7E 08     		LD	A,(IX+$08)
 1797+0C69 DD 77 25     		LD	(IX+$25),A
 1798+0C6C C9           		RET
 1799+0C6D
 1800+0C6D CD 1E 0D     l0c6d:		CALL	l0d1e
 1801+0C70 D8           		RET	C
 1802+0C71
 1803+0C71 E5           		PUSH	HL
 1804+0C72 CD B6 0C     		CALL	l0cb6
 1805+0C75 E1           		POP	HL
 1806+0C76 D0           		RET	NC
 1807+0C77
 1808+0C77 EB           l0c77:		EX	DE,HL
 1809+0C78 21 0C 00     		LD	HL,$000C
 1810+0C7B 09           		ADD	HL,BC
 1811+0C7C 72           		LD	(HL),D
 1812+0C7D 23           		INC	HL
 1813+0C7E 23           		INC	HL
 1814+0C7F 73           		LD	(HL),E
 1815+0C80 1E 11        		LD	E,$11
 1816+0C82 AF           		XOR	A
 1817+0C83 23           l0c83:		INC	HL
 1818+0C84 77           		LD	(HL),A
 1819+0C85 1D           		DEC	E
 1820+0C86 20 FB        		JR	NZ,l0c83	; (-$05)
 1821+0C88 CD 3A 0D     		CALL	l0d3a
 1822+0C8B D8           		RET	C
 1823+0C8C
 1824+0C8C 21 22 00     		LD	HL,$0022
 1825+0C8F 09           		ADD	HL,BC
 1826+0C90 CB D6        		SET	2,(HL)
 1827+0C92 B7           		OR	A
 1828+0C93 C9           		RET
 1829+0C94
 1830+0C94 CD 1E 0D     l0c94:		CALL	l0d1e
 1831+0C97 30 0B        		JR	NC,l0ca4	; (+$0B)
 1832+0C99 21 22 00     		LD	HL,$0022
 1833+0C9C 09           		ADD	HL,BC
 1834+0C9D CB 56        		BIT	2,(HL)
 1835+0C9F C2 CB 0F     		JP	NZ,l0fcb
 1836+0CA2 37           		SCF
 1837+0CA3 C9           		RET
 1838+0CA4
 1839+0CA4 E5           l0ca4:		PUSH	HL
 1840+0CA5 CD B6 0C     		CALL	l0cb6
 1841+0CA8 E1           		POP	HL
 1842+0CA9 D0           		RET	NC
 1843+0CAA
 1844+0CAA CD 77 0C     x0caa:		CALL	l0c77
 1845+0CAD D8           		RET	C
 1846+0CAE
 1847+0CAE FE 19        		CP	$19
 1848+0CB0 37           		SCF
 1849+0CB1 3F           		CCF
 1850+0CB2 C0           		RET	NZ
 1851+0CB3
 1852+0CB3 C3 CB 0F     		JP	l0fcb
 1853+0CB6 21 22 00     l0cb6:		LD	HL,$0022
 1854+0CB9 09           		ADD	HL,BC
 1855+0CBA 7E           		LD	A,(HL)
 1856+0CBB E6 03        		AND	$03
 1857+0CBD 37           		SCF
 1858+0CBE C8           		RET	Z
 1859+0CBF
 1860+0CBF FE 02        		CP	$02
 1861+0CC1 CA 2D 10     		JP	Z,l102d
 1862+0CC4 E6 02        		AND	$02
 1863+0CC6 20 0D        		JR	NZ,l0cd5	; (+$0D)
 1864+0CC8 21 50 0D     		LD	HL,$0D50
 1865+0CCB CD 9E 0D     		CALL	l0d9e
 1866+0CCE D0           		RET	NC
 1867+0CCF
 1868+0CCF 3E 20        		LD	A,$20
 1869+0CD1 3F           		CCF
 1870+0CD2 C0           		RET	NZ
 1871+0CD3
 1872+0CD3 18 16        		JR	l0ceb		; (+$16)
 1873+0CD5 CD EB 0F     l0cd5:		CALL	l0feb
 1874+0CD8 D0           		RET	NC
 1875+0CD9
 1876+0CD9 E5           		PUSH	HL
 1877+0CDA D5           		PUSH	DE
 1878+0CDB C5           		PUSH	BC
 1879+0CDC CD 3E 10     		CALL	l103e
 1880+0CDF 20 07        		JR	NZ,l0ce8	; (+$07)
 1881+0CE1 06 0A        		LD	B,$0A
 1882+0CE3 36 00        l0ce3:		LD	(HL),$00
 1883+0CE5 23           		INC	HL
 1884+0CE6 10 FB        		DJNZ	l0ce3		; (-$05)
 1885+0CE8 C1           l0ce8:		POP	BC
 1886+0CE9 D1           		POP	DE
 1887+0CEA E1           		POP	HL
 1888+0CEB D5           l0ceb:		PUSH	DE
 1889+0CEC C5           		PUSH	BC
 1890+0CED EB           		EX	DE,HL
 1891+0CEE 60           		LD	H,B
 1892+0CEF 69           		LD	L,C
 1893+0CF0 01 20 00     		LD	BC,$0020
 1894+0CF3 ED B0        		LDIR
 1895+0CF5 C1           		POP	BC
 1896+0CF6 D1           		POP	DE
 1897+0CF7 CD 24 0E     		CALL	l0e24
 1898+0CFA DC 85 16     		CALL	C,l1685
 1899+0CFD 21 22 00     		LD	HL,$0022
 1900+0D00 09           		ADD	HL,BC
 1901+0D01 CB 86        		res	0,(HL)
 1902+0D03 37           		SCF
 1903+0D04 C9           		RET
 1904+0D05
 1905+0D05 C5           l0d05:		PUSH	BC
 1906+0D06 DD 7E 04     		LD	A,(IX+$04)
 1907+0D09 2F           		CPL
 1908+0D0A E6 1F        		AND	$1F
 1909+0D0C 47           		LD	B,A
 1910+0D0D 7A           		LD	A,D
 1911+0D0E 1F           		RRA
 1912+0D0F 1F           		RRA
 1913+0D10 1F           		RRA
 1914+0D11 1F           		RRA
 1915+0D12 E6 0F        		AND	$0F
 1916+0D14 6F           		LD	L,A
 1917+0D15 7B           		LD	A,E
 1918+0D16 87           		ADD	A,A
 1919+0D17 7A           		LD	A,D
 1920+0D18 8F           		ADC	A,A
 1921+0D19 A0           		AND	B
 1922+0D1A 67           		LD	H,A
 1923+0D1B 78           		LD	A,B
 1924+0D1C C1           		POP	BC
 1925+0D1D C9           		RET
 1926+0D1E
 1927+0D1E CD 05 0D     l0d1e:		CALL	l0d05
 1928+0D21 E5           		PUSH	HL
 1929+0D22 D5           		PUSH	DE
 1930+0D23 C5           		PUSH	BC
 1931+0D24 EB           		EX	DE,HL
 1932+0D25 21 0E 00     		LD	HL,$000E
 1933+0D28 09           		ADD	HL,BC
 1934+0D29 47           		LD	B,A
 1935+0D2A 7E           		LD	A,(HL)
 1936+0D2B AB           		XOR	E
 1937+0D2C 20 08        		JR	NZ,l0d36	; (+$08)
 1938+0D2E 2B           		DEC	HL
 1939+0D2F 2B           		DEC	HL
 1940+0D30 7E           		LD	A,(HL)
 1941+0D31 AA           		XOR	D
 1942+0D32 A0           		AND	B
 1943+0D33 20 01        		JR	NZ,l0d36	; (+$01)
 1944+0D35 37           		SCF
 1945+0D36 C1           l0d36:		POP	BC
 1946+0D37 D1           		POP	DE
 1947+0D38 E1           		POP	HL
 1948+0D39 C9           		RET
 1949+0D3A
 1950+0D3A 21 50 0D     l0d3a:		LD	HL,$0D50
 1951+0D3D CD 9E 0D     		CALL	l0d9e
 1952+0D40 D0           		RET	NC
 1953+0D41
 1954+0D41 3F           		CCF
 1955+0D42 3E 19        		LD	A,$19
 1956+0D44 C0           		RET	NZ
 1957+0D45
 1958+0D45 C5           		PUSH	BC
 1959+0D46 50           		LD	D,B
 1960+0D47 59           		LD	E,C
 1961+0D48 01 20 00     		LD	BC,$0020
 1962+0D4B ED B0        		LDIR
 1963+0D4D C1           		POP	BC
 1964+0D4E 37           		SCF
 1965+0D4F C9           		RET
 1966+0D50
 1967+0D50 E5           		PUSH	HL
 1968+0D51 D5           		PUSH	DE
 1969+0D52 C5           		PUSH	BC
 1970+0D53 0A           		LD	A,(BC)
 1971+0D54 AE           		XOR	(HL)
 1972+0D55 CC 87 0D     		CALL	Z,l0d87
 1973+0D58 20 18        		JR	NZ,l0d72	; (+$18)
 1974+0D5A 1A           		LD	A,(DE)
 1975+0D5B 3C           		INC	A
 1976+0D5C 28 0A        		JR	Z,l0d68		; (+$0A)
 1977+0D5E DD 7E 04     		LD	A,(IX+$04)
 1978+0D61 2F           		CPL
 1979+0D62 47           		LD	B,A
 1980+0D63 1A           		LD	A,(DE)
 1981+0D64 AE           		XOR	(HL)
 1982+0D65 A0           		AND	B
 1983+0D66 20 0A        		JR	NZ,l0d72	; (+$0A)
 1984+0D68 13           l0d68:		INC	DE
 1985+0D69 23           		INC	HL
 1986+0D6A 13           		INC	DE
 1987+0D6B 23           		INC	HL
 1988+0D6C 1A           		LD	A,(DE)
 1989+0D6D FE FF        		CP	$FF
 1990+0D6F 28 01        		JR	Z,l0d72		; (+$01)
 1991+0D71 AE           		XOR	(HL)
 1992+0D72 18 0E        l0d72:		JR	l0d82		; (+$0E)
 1993+0D74 0A           l0d74:		LD	A,(BC)
 1994+0D75 AE           		XOR	(HL)
 1995+0D76 E6 EF        		AND	$EF
 1996+0D78 18 02        		JR	l0d7c		; (+$02)
 1997+0D7A 0A           l0d7a:		LD	A,(BC)
 1998+0D7B AE           		XOR	(HL)
 1999+0D7C E5           l0d7c:		PUSH	HL
 2000+0D7D D5           		PUSH	DE
 2001+0D7E C5           		PUSH	BC
 2002+0D7F CC 87 0D     		CALL	Z,l0d87
 2003+0D82 C1           l0d82:		POP	BC
 2004+0D83 D1           		POP	DE
 2005+0D84 E1           		POP	HL
 2006+0D85 37           		SCF
 2007+0D86 C9           		RET
 2008+0D87
 2009+0D87 C5           l0d87:		PUSH	BC
 2010+0D88 50           		LD	D,B
 2011+0D89 59           		LD	E,C
 2012+0D8A 13           		INC	DE
 2013+0D8B 23           		INC	HL
 2014+0D8C 06 0B        		LD	B,$0B
 2015+0D8E 1A           l0d8e:		LD	A,(DE)
 2016+0D8F FE 3F        		CP	$3F
 2017+0D91 28 05        		JR	Z,l0d98		; (+$05)
 2018+0D93 AE           		XOR	(HL)
 2019+0D94 E6 7F        		AND	$7F
 2020+0D96 20 04        		JR	NZ,l0d9c	; (+$04)
 2021+0D98 13           l0d98:		INC	DE
 2022+0D99 23           		INC	HL
 2023+0D9A 10 F2        		DJNZ	l0d8e		; (-$0E)
 2024+0D9C C1           l0d9c:		POP	BC
 2025+0D9D C9           		RET
 2026+0D9E
 2027+0D9E 22 A0 DF     l0d9e:		LD	($DFA0		),HL
 2028+0DA1 CD BF 15     		CALL	l15bf
 2029+0DA4 11 00 00     		LD	DE,$0000
 2030+0DA7 F5           		PUSH	AF
 2031+0DA8 7B           l0da8:		LD	A,E
 2032+0DA9 E6 0F        		AND	$0F
 2033+0DAB 20 06        		JR	NZ,l0db3	; (+$06)
 2034+0DAD F1           		POP	AF
 2035+0DAE CD EF 0D     		CALL	l0def
 2036+0DB1 D0           		RET	NC
 2037+0DB2
 2038+0DB2 F5           		PUSH	AF
 2039+0DB3 F1           l0db3:		POP	AF
 2040+0DB4 F5           		PUSH	AF
 2041+0DB5 E5           		PUSH	HL
 2042+0DB6 DD E5        		PUSH	IX
 2043+0DB8 D5           		PUSH	DE
 2044+0DB9 C5           		PUSH	BC
 2045+0DBA 4F           		LD	C,A
 2046+0DBB 06 07        		LD	B,$07
 2047+0DBD 7B           		LD	A,E
 2048+0DBE CD 5A 0E     		CALL	l0e5a
 2049+0DC1 CD 45 02     		CALL	l0245
 2050+0DC4 C1           		POP	BC
 2051+0DC5 D1           		POP	DE
 2052+0DC6 DD E1        		POP	IX
 2053+0DC8 D5           		PUSH	DE
 2054+0DC9 CD DD 0D     		CALL	l0ddd
 2055+0DCC D1           		POP	DE
 2056+0DCD E1           		POP	HL
 2057+0DCE 30 07        		JR	NC,l0dd7	; (+$07)
 2058+0DD0 28 05        		JR	Z,l0dd7		; (+$05)
 2059+0DD2 CD E5 0D     		CALL	l0de5
 2060+0DD5 30 D1        		JR	NC,l0da8	; (-$2F)
 2061+0DD7 21 A2 DF     l0dd7:		LD	HL,$DFA2
 2062+0DDA 33           		INC	SP
 2063+0DDB 33           		INC	SP
 2064+0DDC C9           		RET
 2065+0DDD
 2066+0DDD 2A A0 DF     l0ddd:		LD	HL,($DFA0		)
 2067+0DE0 E5           		PUSH	HL
 2068+0DE1 21 A2 DF     		LD	HL,$DFA2
 2069+0DE4 C9           		RET
 2070+0DE5
 2071+0DE5 13           l0de5:		INC	DE
 2072+0DE6 DD 7E 24     		LD	A,(IX+$24)
 2073+0DE9 93           		SUB	E
 2074+0DEA DD 7E 25     		LD	A,(IX+$25)
 2075+0DED 9A           		SBC	A,D
 2076+0DEE C9           		RET
 2077+0DEF
 2078+0DEF C5           l0def:		PUSH	BC
 2079+0DF0 D5           		PUSH	DE
 2080+0DF1 3E 04        		LD	A,$04
 2081+0DF3 CD EB 04     		CALL	l04eb
 2082+0DF6 CD 96 18     		CALL	x1896
 2083+0DF9 CD 60 15     l0df9:		CALL	l1560
 2084+0DFC 30 23        		JR	NC,l0e21	; (+$23)
 2085+0DFE 47           		LD	B,A
 2086+0DFF E5           		PUSH	HL
 2087+0E00 CD 6D 0E     		CALL	l0e6d
 2088+0E03 38 18        		JR	C,l0e1d		; (+$18)
 2089+0E05 DD CB 1B 4E  		BIT	1,(IX+$1B)
 2090+0E09 28 01        		JR	Z,l0e0c		; (+$01)
 2091+0E0B 77           		LD	(HL),A
 2092+0E0C BE           l0e0c:		CP	(HL)
 2093+0E0D 37           		SCF
 2094+0E0E 28 0D        		JR	Z,l0e1d		; (+$0D)
 2095+0E10 CD D8 15     		CALL	l15d8
 2096+0E13 3E 08        		LD	A,$08
 2097+0E15 CD 9D 1A     		CALL	l1a9d
 2098+0E18 20 03        		JR	NZ,l0e1d	; (+$03)
 2099+0E1A E1           		POP	HL
 2100+0E1B 18 DC        		JR	l0df9		; (-$24)
 2101+0E1D E1           l0e1d:		POP	HL
 2102+0E1E 30 01        		JR	NC,l0e21	; (+$01)
 2103+0E20 78           		LD	A,B
 2104+0E21 D1           l0e21:		POP	DE
 2105+0E22 C1           		POP	BC
 2106+0E23 C9           		RET
 2107+0E24
 2108+0E24 E5           l0e24:		PUSH	HL
 2109+0E25 D5           		PUSH	DE
 2110+0E26 C5           		PUSH	BC
 2111+0E27 4B           		LD	C,E
 2112+0E28 3E 04        		LD	A,$04
 2113+0E2A CD EB 04     		CALL	l04eb
 2114+0E2D CD 96 18     		CALL	x1896
 2115+0E30 C5           		PUSH	BC
 2116+0E31 01 01 00     		LD	BC,$0001
 2117+0E34 CD 90 15     		CALL	x1590
 2118+0E37 C1           		POP	BC
 2119+0E38 30 1C        		JR	NC,l0e56	; (+$1C)
 2120+0E3A 47           		LD	B,A
 2121+0E3B DD E5        		PUSH	IX
 2122+0E3D E5           		PUSH	HL
 2123+0E3E D5           		PUSH	DE
 2124+0E3F C5           		PUSH	BC
 2125+0E40 79           		LD	A,C
 2126+0E41 CD 5A 0E     		CALL	l0e5a
 2127+0E44 EB           		EX	DE,HL
 2128+0E45 0E 07        		LD	C,$07
 2129+0E47 CD 45 02     		CALL	l0245
 2130+0E4A C1           		POP	BC
 2131+0E4B D1           		POP	DE
 2132+0E4C E1           		POP	HL
 2133+0E4D DD E1        		POP	IX
 2134+0E4F CD 6D 0E     		CALL	l0e6d
 2135+0E52 38 02        		JR	C,l0e56		; (+$02)
 2136+0E54 77           		LD	(HL),A
 2137+0E55 37           		SCF
 2138+0E56 C1           l0e56:		POP	BC
 2139+0E57 D1           		POP	DE
 2140+0E58 E1           		POP	HL
 2141+0E59 C9           		RET
 2142+0E5A
 2143+0E5A E6 0F        l0e5a:		AND	$0F
 2144+0E5C 28 07        		JR	Z,l0e65		; (+$07)
 2145+0E5E 11 20 00     		LD	DE,$0020
 2146+0E61 19           l0e61:		ADD	HL,DE
 2147+0E62 3D           		DEC	A
 2148+0E63 20 FC        		JR	NZ,l0e61	; (-$04)
 2149+0E65 11 A2 DF     l0e65:		LD	DE,$DFA2
 2150+0E68 DD 21 20 00  		LD	IX,$0020
 2151+0E6C C9           		RET
 2152+0E6D
 2153+0E6D E5           l0e6d:		PUSH	HL
 2154+0E6E D5           		PUSH	DE
 2155+0E6F EB           		EX	DE,HL
 2156+0E70 DD 5E 0B     		LD	E,(IX+$0B)
 2157+0E73 DD 7E 0C     		LD	A,(IX+$0C)
 2158+0E76 E6 7F        		AND	$7F
 2159+0E78 57           		LD	D,A
 2160+0E79 3E 02        		LD	A,$02
 2161+0E7B CD EB 04     		CALL	l04eb
 2162+0E7E CD 96 18     		CALL	x1896
 2163+0E81 ED 52        		SBC	HL,DE
 2164+0E83 3F           		CCF
 2165+0E84 D1           		POP	DE
 2166+0E85 E1           		POP	HL
 2167+0E86 D8           		RET	C
 2168+0E87
 2169+0E87 C5           		PUSH	BC
 2170+0E88 78           		LD	A,B
 2171+0E89 CD 1B 02     		CALL	l021b
 2172+0E8C F5           		PUSH	AF
 2173+0E8D AF           		XOR	A
 2174+0E8E 01 02 00     		LD	BC,$0002
 2175+0E91 86           l0e91:		ADD	A,(HL)
 2176+0E92 23           		INC	HL
 2177+0E93 10 FC        		DJNZ	l0e91		; (-$04)
 2178+0E95 0D           		DEC	C
 2179+0E96 20 F9        		JR	NZ,l0e91	; (-$07)
 2180+0E98 47           		LD	B,A
 2181+0E99 F1           		POP	AF
 2182+0E9A CD 1B 02     		CALL	l021b
 2183+0E9D DD 6E 26     		LD	L,(IX+$26)
 2184+0EA0 DD 66 27     		LD	H,(IX+$27)
 2185+0EA3 19           		ADD	HL,DE
 2186+0EA4 D5           		PUSH	DE
 2187+0EA5 11 00 00     		LD	DE,$0000
 2188+0EA8 CD 96 18     		CALL	x1896
 2189+0EAB B7           		OR	A
 2190+0EAC ED 52        		SBC	HL,DE
 2191+0EAE D1           		POP	DE
 2192+0EAF 78           		LD	A,B
 2193+0EB0 B7           		OR	A
 2194+0EB1 C1           		POP	BC
 2195+0EB2 C9           		RET
 2196+0EB3
 2197+0EB3 D5           l0eb3:		PUSH	DE
 2198+0EB4 EB           		EX	DE,HL
 2199+0EB5 21 09 00     		LD	HL,$0009
 2200+0EB8 19           		ADD	HL,DE
 2201+0EB9 7E           		LD	A,(HL)
 2202+0EBA 87           		ADD	A,A
 2203+0EBB EB           		EX	DE,HL
 2204+0EBC D1           		POP	DE
 2205+0EBD 3F           		CCF
 2206+0EBE 3E 1C        		LD	A,$1C
 2207+0EC0 C9           		RET
 2208+0EC1
 2209+0EC1 CD BE 0F     l0ec1:		CALL	l0fbe
 2210+0EC4 3E 03        		LD	A,$03
 2211+0EC6 CD EB 04     		CALL	l04eb
 2212+0EC9 13           		INC	DE
 2213+0ECA E5           		PUSH	HL
 2214+0ECB 36 00        l0ecb:		LD	(HL),$00
 2215+0ECD 23           		INC	HL
 2216+0ECE 1B           		DEC	DE
 2217+0ECF 7A           		LD	A,D
 2218+0ED0 B3           		OR	E
 2219+0ED1 20 F8        		JR	NZ,l0ecb	; (-$08)
 2220+0ED3 E1           		POP	HL
 2221+0ED4 DD 7E 09     		LD	A,(IX+$09)
 2222+0ED7 77           		LD	(HL),A
 2223+0ED8 23           		INC	HL
 2224+0ED9 DD 7E 0A     		LD	A,(IX+$0A)
 2225+0EDC 77           		LD	(HL),A
 2226+0EDD C9           		RET
 2227+0EDE
 2228+0EDE C5           l0ede:		PUSH	BC
 2229+0EDF E5           		PUSH	HL
 2230+0EE0 D5           		PUSH	DE
 2231+0EE1 3E 03        		LD	A,$03
 2232+0EE3 CD EB 04     		CALL	l04eb
 2233+0EE6 D5           		PUSH	DE
 2234+0EE7 CD BE 0F     		CALL	l0fbe
 2235+0EEA D1           		POP	DE
 2236+0EEB 19           		ADD	HL,DE
 2237+0EEC D1           		POP	DE
 2238+0EED 7B           		LD	A,E
 2239+0EEE E6 07        		AND	$07
 2240+0EF0 47           		LD	B,A
 2241+0EF1 3E 01        		LD	A,$01
 2242+0EF3 04           		INC	B
 2243+0EF4 0F           l0ef4:		RRCA
 2244+0EF5 10 FD        		DJNZ	l0ef4		; (-$03)
 2245+0EF7 47           		LD	B,A
 2246+0EF8 A1           		AND	C
 2247+0EF9 4F           		LD	C,A
 2248+0EFA 78           		LD	A,B
 2249+0EFB 2F           		CPL
 2250+0EFC A6           		AND	(HL)
 2251+0EFD B1           		OR	C
 2252+0EFE 77           		LD	(HL),A
 2253+0EFF E1           		POP	HL
 2254+0F00 C1           		POP	BC
 2255+0F01 C9           		RET
 2256+0F02
 2257+0F02 E5           l0f02:		PUSH	HL
 2258+0F03 C5           		PUSH	BC
 2259+0F04 CD BE 0F     		CALL	l0fbe
 2260+0F07 01 80 08     l0f07:		LD	BC,$0880
 2261+0F0A 7E           l0f0a:		LD	A,(HL)
 2262+0F0B A1           		AND	C
 2263+0F0C 28 0E        		JR	Z,l0f1c		; (+$0E)
 2264+0F0E CB 09        		RRC	C
 2265+0F10 7A           		LD	A,D
 2266+0F11 B3           		OR	E
 2267+0F12 3E 1A        		LD	A,$1A
 2268+0F14 28 1C        		JR	Z,l0f32		; (+$1C)
 2269+0F16 1B           		DEC	DE
 2270+0F17 10 F1        		DJNZ	l0f0a		; (-$0F)
 2271+0F19 23           		INC	HL
 2272+0F1A 18 EB        		JR	l0f07		; (-$15)
 2273+0F1C 7E           l0f1c:		LD	A,(HL)
 2274+0F1D B1           		OR	C
 2275+0F1E 77           		LD	(HL),A
 2276+0F1F DD 7E 05     		LD	A,(IX+$05)
 2277+0F22 93           		SUB	E
 2278+0F23 5F           		LD	E,A
 2279+0F24 DD 7E 06     		LD	A,(IX+$06)
 2280+0F27 9A           		SBC	A,D
 2281+0F28 57           		LD	D,A
 2282+0F29 C1           		POP	BC
 2283+0F2A C5           		PUSH	BC
 2284+0F2B 21 22 00     		LD	HL,$0022
 2285+0F2E 09           		ADD	HL,BC
 2286+0F2F CB C6        		SET	0,(HL)
 2287+0F31 37           		SCF
 2288+0F32 C1           l0f32:		POP	BC
 2289+0F33 E1           		POP	HL
 2290+0F34 C9           		RET
 2291+0F35
 2292+0F35 60           l0f35:		LD	H,B
 2293+0F36 69           		LD	L,C
 2294+0F37 AF           		XOR	A
 2295+0F38 C5           l0f38:		PUSH	BC
 2296+0F39 4F           		LD	C,A
 2297+0F3A 3E 0F        		LD	A,$0F
 2298+0F3C BE           		CP	(HL)
 2299+0F3D 38 28        		JR	C,l0f67		; (+$28)
 2300+0F3F 11 10 00     		LD	DE,$0010
 2301+0F42 19           		ADD	HL,DE
 2302+0F43 06 10        		LD	B,$10
 2303+0F45 04           		INC	B
 2304+0F46 18 1D        		JR	l0f65		; (+$1D)
 2305+0F48 5E           l0f48:		LD	E,(HL)
 2306+0F49 23           		INC	HL
 2307+0F4A DD 7E 06     		LD	A,(IX+$06)
 2308+0F4D B7           		OR	A
 2309+0F4E 57           		LD	D,A
 2310+0F4F 28 03        		JR	Z,l0f54		; (+$03)
 2311+0F51 05           		DEC	B
 2312+0F52 56           		LD	D,(HL)
 2313+0F53 23           		INC	HL
 2314+0F54 7A           l0f54:		LD	A,D
 2315+0F55 B3           		OR	E
 2316+0F56 28 0D        		JR	Z,l0f65		; (+$0D)
 2317+0F58 E5           		PUSH	HL
 2318+0F59 DD 7E 05     		LD	A,(IX+$05)
 2319+0F5C 93           		SUB	E
 2320+0F5D DD 7E 06     		LD	A,(IX+$06)
 2321+0F60 9A           		SBC	A,D
 2322+0F61 D4 DE 0E     		CALL	NC,l0ede
 2323+0F64 E1           		POP	HL
 2324+0F65 10 E1        l0f65:		DJNZ	l0f48		; (-$1F)
 2325+0F67 C1           l0f67:		POP	BC
 2326+0F68 37           		SCF
 2327+0F69 C9           		RET
 2328+0F6A
 2329+0F6A D5           l0f6a:		PUSH	DE
 2330+0F6B EB           		EX	DE,HL
 2331+0F6C 1A           		LD	A,(DE)
 2332+0F6D FE 10        		CP	$10
 2333+0F6F 21 00 00     		LD	HL,$0000
 2334+0F72 30 1A        		JR	NC,l0f8e	; (+$1A)
 2335+0F74 21 10 00     		LD	HL,$0010
 2336+0F77 19           		ADD	HL,DE
 2337+0F78 11 00 10     		LD	DE,$1000
 2338+0F7B DD 7E 06     l0f7b:		LD	A,(IX+$06)
 2339+0F7E B7           		OR	A
 2340+0F7F 7E           		LD	A,(HL)
 2341+0F80 23           		INC	HL
 2342+0F81 28 03        		JR	Z,l0f86		; (+$03)
 2343+0F83 B6           		OR	(HL)
 2344+0F84 15           		DEC	D
 2345+0F85 23           		INC	HL
 2346+0F86 B7           l0f86:		OR	A
 2347+0F87 28 01        		JR	Z,l0f8a		; (+$01)
 2348+0F89 1C           		INC	E
 2349+0F8A 15           l0f8a:		DEC	D
 2350+0F8B 20 EE        		JR	NZ,l0f7b	; (-$12)
 2351+0F8D EB           		EX	DE,HL
 2352+0F8E D1           l0f8e:		POP	DE
 2353+0F8F DD 7E 02     l0f8f:		LD	A,(IX+$02)
 2354+0F92 3D           		DEC	A
 2355+0F93 3D           		DEC	A
 2356+0F94 3D           l0f94:		DEC	A
 2357+0F95 28 03        		JR	Z,x0f9a		; (+$03)
 2358+0F97 29           		ADD	HL,HL
 2359+0F98 18 FA        		JR	l0f94		; (-$06)
 2360+0F9A 7C           x0f9a:		LD	A,H
 2361+0F9B B5           		OR	L
 2362+0F9C 37           		SCF
 2363+0F9D C9           		RET
 2364+0F9E
 2365+0F9E 21 00 00     l0f9e:		LD	HL,$0000
 2366+0FA1 E5           		PUSH	HL
 2367+0FA2 CD BE 0F     		CALL	l0fbe
 2368+0FA5 01 80 08     l0fa5:		LD	BC,$0880
 2369+0FA8 7E           l0fa8:		LD	A,(HL)
 2370+0FA9 A1           		AND	C
 2371+0FAA 20 03        		JR	NZ,l0faf	; (+$03)
 2372+0FAC E3           		EX	(SP),HL
 2373+0FAD 23           		INC	HL
 2374+0FAE E3           		EX	(SP),HL
 2375+0FAF CB 09        l0faf:		RRC	C
 2376+0FB1 7A           		LD	A,D
 2377+0FB2 B3           		OR	E
 2378+0FB3 28 06        		JR	Z,l0fbb		; (+$06)
 2379+0FB5 1B           		DEC	DE
 2380+0FB6 10 F0        		DJNZ	l0fa8		; (-$10)
 2381+0FB8 23           		INC	HL
 2382+0FB9 18 EA        		JR	l0fa5		; (-$16)
 2383+0FBB E1           l0fbb:		POP	HL
 2384+0FBC 18 D1        		JR	l0f8f		; (-$2F)
 2385+0FBE DD 6E 28     l0fbe:		LD	L,(IX+$28)
 2386+0FC1 DD 66 29     		LD	H,(IX+$29)
 2387+0FC4 DD 5E 05     		LD	E,(IX+$05)
 2388+0FC7 DD 56 06     		LD	D,(IX+$06)
 2389+0FCA C9           		RET
 2390+0FCB
 2391+0FCB DD 7E 22     l0fcb:		LD	A,(IX+$22)
 2392+0FCE DD B6 23     		OR	(IX+$23)
 2393+0FD1 3E 1B        		LD	A,$1B
 2394+0FD3 C8           		RET	Z
 2395+0FD4
 2396+0FD4 21 22 00     		LD	HL,$0022
 2397+0FD7 09           		ADD	HL,BC
 2398+0FD8 CB CE        		SET	1,(HL)
 2399+0FDA CB 96        		res	2,(HL)
 2400+0FDC DD 7E 22     		LD	A,(IX+$22)
 2401+0FDF D6 01        		SUB	$01
 2402+0FE1 DD 77 22     		LD	(IX+$22),A
 2403+0FE4 30 03        		JR	NC,l0fe9	; (+$03)
 2404+0FE6 DD 35 23     		DEC	(IX+$23)
 2405+0FE9 37           l0fe9:		SCF
 2406+0FEA C9           		RET
 2407+0FEB
 2408+0FEB C5           l0feb:		PUSH	BC
 2409+0FEC DD 4E 24     		LD	C,(IX+$24)
 2410+0FEF DD 46 25     		LD	B,(IX+$25)
 2411+0FF2 CD 60 0C     		CALL	l0c60
 2412+0FF5 21 28 10     		LD	HL,$1028
 2413+0FF8 CD 9E 0D     		CALL	l0d9e
 2414+0FFB 30 29        		JR	NC,l1026	; (+$29)
 2415+0FFD E3           		EX	(SP),HL
 2416+0FFE E5           		PUSH	HL
 2417+0FFF D5           		PUSH	DE
 2418+1000 F5           		PUSH	AF
 2419+1001 11 22 00     		LD	DE,$0022
 2420+1004 19           		ADD	HL,DE
 2421+1005 CB 8E        		res	1,(HL)
 2422+1007 F1           		POP	AF
 2423+1008 D1           		POP	DE
 2424+1009 E1           		POP	HL
 2425+100A E3           		EX	(SP),HL
 2426+100B 20 13        		JR	NZ,l1020	; (+$13)
 2427+100D EB           		EX	DE,HL
 2428+100E B7           		OR	A
 2429+100F ED 42        		SBC	HL,BC
 2430+1011 09           		ADD	HL,BC
 2431+1012 EB           		EX	DE,HL
 2432+1013 38 02        		JR	C,l1017		; (+$02)
 2433+1015 42           		LD	B,D
 2434+1016 4B           		LD	C,E
 2435+1017 DD 71 24     l1017:		LD	(IX+$24),C
 2436+101A DD 70 25     		LD	(IX+$25),B
 2437+101D 37           		SCF
 2438+101E 18 06        		JR	l1026		; (+$06)
 2439+1020 CD 35 10     l1020:		CALL	l1035
 2440+1023 3E 20        		LD	A,$20
 2441+1025 B7           		OR	A
 2442+1026 C1           l1026:		POP	BC
 2443+1027 C9           		RET
 2444+1028
 2445+1028 7E           		LD	A,(HL)
 2446+1029 EE E5        		XOR	$E5
 2447+102B 37           		SCF
 2448+102C C9           		RET
 2449+102D
 2450+102D E5           l102d:		PUSH	HL
 2451+102E 21 22 00     		LD	HL,$0022
 2452+1031 09           		ADD	HL,BC
 2453+1032 CB 8E        		res	1,(HL)
 2454+1034 E1           		POP	HL
 2455+1035 37           l1035:		SCF
 2456+1036 DD 34 22     		INC	(IX+$22)
 2457+1039 C0           		RET	NZ
 2458+103A
 2459+103A DD 34 23     		INC	(IX+$23)
 2460+103D C9           		RET
 2461+103E
 2462+103E 7B           l103e:		LD	A,E
 2463+103F E6 03        		AND	$03
 2464+1041 2F           		CPL
 2465+1042 C6 04        		ADD	A,$04
 2466+1044 28 07        		JR	Z,l104d		; (+$07)
 2467+1046 01 20 00     		LD	BC,$0020
 2468+1049 09           l1049:		ADD	HL,BC
 2469+104A 3D           		DEC	A
 2470+104B 20 FC        		JR	NZ,l1049	; (-$04)
 2471+104D 7E           l104d:		LD	A,(HL)
 2472+104E FE 21        		CP	$21
 2473+1050 C0           		RET	NZ
 2474+1051
 2475+1051 7B           		LD	A,E
 2476+1052 E6 03        		AND	$03
 2477+1054 28 07        		JR	Z,l105d		; (+$07)
 2478+1056 01 0A 00     		LD	BC,$000A
 2479+1059 09           l1059:		ADD	HL,BC
 2480+105A 3D           		DEC	A
 2481+105B 20 FC        		JR	NZ,l1059	; (-$04)
 2482+105D 23           l105d:		INC	HL
 2483+105E C9           		RET
 2484+105F
 2485+105F CD 32 05     l105f:		CALL	l0532
 2486+1062 D0           		RET	NC
 2487+1063
 2488+1063 21 26 00     l1063:		LD	HL,$0026
 2489+1066 18 07        		JR	l106f		; (+$07)
 2490+1068 CD 32 05     l1068:		CALL	l0532
 2491+106B D0           		RET	NC
 2492+106C
 2493+106C 21 23 00     		LD	HL,$0023
 2494+106F 09           l106f:		ADD	HL,BC
 2495+1070 5E           		LD	E,(HL)
 2496+1071 23           		INC	HL
 2497+1072 56           		LD	D,(HL)
 2498+1073 23           		INC	HL
 2499+1074 7E           		LD	A,(HL)
 2500+1075 EB           		EX	DE,HL
 2501+1076 5F           		LD	E,A
 2502+1077 16 00        		LD	D,$00
 2503+1079 37           		SCF
 2504+107A C9           		RET
 2505+107B
 2506+107B CD 32 05     l107b:		CALL	l0532
 2507+107E D0           		RET	NC
 2508+107F
 2509+107F 7D           l107f:		LD	A,L
 2510+1080 53           		LD	D,E
 2511+1081 5C           		LD	E,H
 2512+1082 21 26 00     		LD	HL,$0026
 2513+1085 09           		ADD	HL,BC
 2514+1086 18 14        		JR	l109c		; (+$14)
 2515+1088 3E 80        l1088:		LD	A,$80
 2516+108A 18 02        		JR	l108e		; (+$02)
 2517+108C 3E 01        l108c:		LD	A,$01
 2518+108E 21 26 00     l108e:		LD	HL,$0026
 2519+1091 09           		ADD	HL,BC
 2520+1092 86           		ADD	A,(HL)
 2521+1093 23           		INC	HL
 2522+1094 5E           		LD	E,(HL)
 2523+1095 23           		INC	HL
 2524+1096 56           		LD	D,(HL)
 2525+1097 30 01        		JR	NC,l109a	; (+$01)
 2526+1099 13           		INC	DE
 2527+109A 2B           l109a:		DEC	HL
 2528+109B 2B           		DEC	HL
 2529+109C E5           l109c:		PUSH	HL
 2530+109D F5           		PUSH	AF
 2531+109E AE           		XOR	(HL)
 2532+109F FA AC 10     		JP	m,l10ac
 2533+10A2 23           		INC	HL
 2534+10A3 7E           		LD	A,(HL)
 2535+10A4 BB           		CP	E
 2536+10A5 20 05        		JR	NZ,l10ac	; (+$05)
 2537+10A7 23           		INC	HL
 2538+10A8 7E           		LD	A,(HL)
 2539+10A9 BA           		CP	D
 2540+10AA 28 06        		JR	Z,l10b2		; (+$06)
 2541+10AC 21 22 00     l10ac:		LD	HL,$0022
 2542+10AF 09           		ADD	HL,BC
 2543+10B0 CB AE        		res	5,(HL)
 2544+10B2 F1           l10b2:		POP	AF
 2545+10B3 E1           		POP	HL
 2546+10B4 77           		LD	(HL),A
 2547+10B5 23           		INC	HL
 2548+10B6 73           		LD	(HL),E
 2549+10B7 23           		INC	HL
 2550+10B8 72           		LD	(HL),D
 2551+10B9 37           		SCF
 2552+10BA C9           		RET
 2553+10BB
 2554+10BB C5           l10bb:		PUSH	BC
 2555+10BC F5           		PUSH	AF
 2556+10BD 21 22 00     		LD	HL,$0022
 2557+10C0 09           		ADD	HL,BC
 2558+10C1 EB           		EX	DE,HL
 2559+10C2 21 25 00     		LD	HL,$0025
 2560+10C5 09           		ADD	HL,BC
 2561+10C6 06 03        		LD	B,$03
 2562+10C8 B7           		OR	A
 2563+10C9 13           l10c9:		INC	DE
 2564+10CA 23           		INC	HL
 2565+10CB 1A           		LD	A,(DE)
 2566+10CC 9E           		SBC	A,(HL)
 2567+10CD 10 FA        		DJNZ	l10c9		; (-$06)
 2568+10CF 30 05        		JR	NC,l10d6	; (+$05)
 2569+10D1 01 03 00     		LD	BC,$0003
 2570+10D4 ED B8        		LDDR
 2571+10D6 F1           l10d6:		POP	AF
 2572+10D7 C1           		POP	BC
 2573+10D8 C9           		RET
 2574+10D9
 2575+10D9 CD 4C 11     l10d9:		CALL	l114c
 2576+10DC D0           		RET	NC
 2577+10DD
 2578+10DD D5           		PUSH	DE
 2579+10DE 5F           		LD	E,A
 2580+10DF 3A D0 DF     		LD	A,(	$DFD0		)
 2581+10E2 2A D1 DF     		LD	HL,(	$DFD1		)
 2582+10E5 CD 1B 02     		CALL	l021b
 2583+10E8 73           		LD	(HL),E
 2584+10E9 CD 1B 02     		CALL	l021b
 2585+10EC 23           		INC	HL
 2586+10ED 22 D1 DF     		LD	(	$DFD1		),HL
 2587+10F0 D1           		POP	DE
 2588+10F1 7A           		LD	A,D
 2589+10F2 B3           		OR	E
 2590+10F3 1B           		DEC	DE
 2591+10F4 37           		SCF
 2592+10F5 C9           		RET
 2593+10F6
 2594+10F6 D5           l10f6:		PUSH	DE
 2595+10F7 CD FE 12     		CALL	l12fe
 2596+10FA D1           		POP	DE
 2597+10FB D0           		RET	NC
 2598+10FC
 2599+10FC D5           		PUSH	DE
 2600+10FD CD 88 10     		CALL	l1088
 2601+1100 21 2D 00     		LD	HL,$002D
 2602+1103 09           		ADD	HL,BC
 2603+1104 5E           		LD	E,(HL)
 2604+1105 23           		INC	HL
 2605+1106 56           		LD	D,(HL)
 2606+1107 23           		INC	HL
 2607+1108 C5           		PUSH	BC
 2608+1109 4E           		LD	C,(HL)
 2609+110A 3A D0 DF     		LD	A,(	$DFD0		)
 2610+110D 47           		LD	B,A
 2611+110E 2A D1 DF     		LD	HL,(	$DFD1		)
 2612+1111 EB           		EX	DE,HL
 2613+1112 DD 21 80 00  		LD	IX,$0080
 2614+1116 CD 45 02     		CALL	l0245
 2615+1119 C1           		POP	BC
 2616+111A ED 53 D1 DF  		LD	(	$DFD1		),DE
 2617+111E D1           		POP	DE
 2618+111F 21 81 FF     		LD	HL,$FF81
 2619+1122 19           		ADD	HL,DE
 2620+1123 EB           		EX	DE,HL
 2621+1124 7A           		LD	A,D
 2622+1125 B3           		OR	E
 2623+1126 1B           		DEC	DE
 2624+1127 37           		SCF
 2625+1128 C9           		RET
 2626+1129
 2627+1129              ; DOS_BYTE_READ
 2628+1129
 2629+1129 CD 21 05     l1129:		CALL	x0521		; get FCB & test if open for reading
 2630+112C D0           		RET	NC		; exit if error
 2631+112D 21 26 00     		LD	HL,$0026
 2632+1130 09           		ADD	HL,BC
 2633+1131 EB           		EX	DE,HL		; DE=filepointer address
 2634+1132 21 23 00     		LD	HL,$0023
 2635+1135 09           		ADD	HL,BC		; HL=filelength address
 2636+1136 C5           		PUSH	BC
 2637+1137 06 03        		LD	B,$03
 2638+1139 B7           		OR	A
 2639+113A 1A           l113a:		LD	A,(DE)		; test filepointer (carry must be set
 2640+113B 9E           		SBC	A,(HL)		; if pointer within file)
 2641+113C 13           		INC	DE
 2642+113D 23           		INC	HL
 2643+113E 10 FA        		DJNZ	l113a
 2644+1140 C1           		POP	BC
 2645+1141 3E 19        		LD	A,$19		; error "end of file"
 2646+1143 DC 4C 11     		CALL	C,l114c		; get a byte if within file
 2647+1146 D0           		RET	NC		; exit if error
 2648+1147 4F           		LD	C,A		; C=byte read
 2649+1148 FE 1A        		CP	$1A		; set Z if soft-EOF
 2650+114A 37           		SCF			; success
 2651+114B C9           		RET
 2652+114C
 2653+114C              ; Subroutine to read a byte (A) from the file
 2654+114C
 2655+114C E5           l114c:		PUSH	HL
 2656+114D D5           		PUSH	DE
 2657+114E 21 22 00     		LD	HL,$0022
 2658+1151 09           		ADD	HL,BC
 2659+1152 CB 6E        		BIT	5,(HL)		; has record been changed?
 2660+1154 20 05        		JR	NZ,l115b
 2661+1156 CD FE 12     		CALL	l12fe		; if so, get new record details into FCB
 2662+1159 30 21        		JR	NC,x117c	; exit if error
 2663+115B 21 26 00     l115b:		LD	HL,$0026
 2664+115E 09           		ADD	HL,BC
 2665+115F 7E           		LD	A,(HL)		; low byte of filepointer
 2666+1160 E6 7F        		AND	$7F		; offset into record
 2667+1162 21 2D 00     		LD	HL,$002D
 2668+1165 09           		ADD	HL,BC
 2669+1166 86           		ADD	A,(HL)
 2670+1167 5F           		LD	E,A
 2671+1168 23           		INC	HL
 2672+1169 8E           		ADC	A,(HL)
 2673+116A 93           		SUB	E
 2674+116B 57           		LD	D,A		; DE=address of byte in buffer
 2675+116C 23           		INC	HL
 2676+116D 7E           		LD	A,(HL)		; A=bank of buffer  *** de DONDE mierda sale este dato quien le manda decir que = 1????
 2677+116E EB           		EX	DE,HL
 2678+116F CD 1B 02     		CALL	l021b		; page in buffer bank
 2679+1172 56           		LD	D,(HL)		; get byte
 2680+1173 CD 1B 02     		CALL	l021b		; page back original bank
 2681+1176 D5           		PUSH	DE
 2682+1177 CD 8C 10     		CALL	l108c		; increment filepointer
 2683+117A F1           		POP	AF		; A=byte
 2684+117B 37           		SCF			; success
 2685+117C D1           x117c:		POP	DE
 2686+117D E1           		POP	HL
 2687+117E C9           		RET
 2688+117F
 2689+117F 79           l117f:		LD	A,C
 2690+1180 32 D0 DF     		LD	(	$DFD0		),A
 2691+1183 22 D1 DF     		LD	(	$DFD1		),HL
 2692+1186 CD 29 05     		CALL	l0529
 2693+1189 D0           		RET	NC
 2694+118A
 2695+118A 19           		ADD	HL,DE
 2696+118B E5           		PUSH	HL
 2697+118C CD 9F 11     		CALL	l119f
 2698+118F CD BB 10     		CALL	l10bb
 2699+1192 E1           		POP	HL
 2700+1193 D8           		RET	C
 2701+1194
 2702+1194 F5           		PUSH	AF
 2703+1195 ED 5B D1 DF  		LD	DE,(	$DFD1		)
 2704+1199 B7           		OR	A
 2705+119A ED 52        		SBC	HL,DE
 2706+119C EB           		EX	DE,HL
 2707+119D F1           		POP	AF
 2708+119E C9           		RET
 2709+119F
 2710+119F 1B           l119f:		DEC	DE
 2711+11A0 21 26 00     l11a0:		LD	HL,$0026
 2712+11A3 09           		ADD	HL,BC
 2713+11A4 7E           		LD	A,(HL)
 2714+11A5 E6 7F        		AND	$7F
 2715+11A7 28 07        		JR	Z,l11b0		; (+$07)
 2716+11A9 CD C4 11     		CALL	l11c4
 2717+11AC D0           		RET	NC
 2718+11AD
 2719+11AD C8           		RET	Z
 2720+11AE
 2721+11AE 18 F0        		JR	l11a0		; (-$10)
 2722+11B0 21 81 FF     l11b0:		LD	HL,$FF81
 2723+11B3 19           		ADD	HL,DE
 2724+11B4 30 07        		JR	NC,l11bd	; (+$07)
 2725+11B6 CD E2 11     		CALL	l11e2
 2726+11B9 D0           		RET	NC
 2727+11BA
 2728+11BA C8           		RET	Z
 2729+11BB
 2730+11BB 18 F3        		JR	l11b0		; (-$0D)
 2731+11BD CD C4 11     l11bd:		CALL	l11c4
 2732+11C0 D0           		RET	NC
 2733+11C1
 2734+11C1 C8           		RET	Z
 2735+11C2
 2736+11C2 18 F9        		JR	l11bd		; (-$07)
 2737+11C4 3A D0 DF     l11c4:		LD	A,(	$DFD0		)
 2738+11C7 2A D1 DF     		LD	HL,(	$DFD1		)
 2739+11CA CD 1B 02     		CALL	l021b
 2740+11CD 6E           		LD	L,(HL)
 2741+11CE CD 1B 02     		CALL	l021b
 2742+11D1 7D           		LD	A,L
 2743+11D2 CD 26 12     		CALL	l1226
 2744+11D5 D0           		RET	NC
 2745+11D6
 2746+11D6 2A D1 DF     		LD	HL,(	$DFD1		)
 2747+11D9 23           		INC	HL
 2748+11DA 22 D1 DF     		LD	(	$DFD1		),HL
 2749+11DD 7A           		LD	A,D
 2750+11DE B3           		OR	E
 2751+11DF 1B           		DEC	DE
 2752+11E0 37           		SCF
 2753+11E1 C9           		RET
 2754+11E2
 2755+11E2 D5           l11e2:		PUSH	DE
 2756+11E3 CD CF 12     		CALL	l12cf
 2757+11E6 D1           		POP	DE
 2758+11E7 D0           		RET	NC
 2759+11E8
 2760+11E8 21 22 00     		LD	HL,$0022
 2761+11EB 09           		ADD	HL,BC
 2762+11EC CB E6        		SET	4,(HL)
 2763+11EE D5           		PUSH	DE
 2764+11EF CD 88 10     		CALL	l1088
 2765+11F2 21 2D 00     		LD	HL,$002D
 2766+11F5 09           		ADD	HL,BC
 2767+11F6 5E           		LD	E,(HL)
 2768+11F7 23           		INC	HL
 2769+11F8 56           		LD	D,(HL)
 2770+11F9 23           		INC	HL
 2771+11FA C5           		PUSH	BC
 2772+11FB 46           		LD	B,(HL)
 2773+11FC 3A D0 DF     		LD	A,(	$DFD0		)
 2774+11FF 4F           		LD	C,A
 2775+1200 2A D1 DF     		LD	HL,(	$DFD1		)
 2776+1203 DD 21 80 00  		LD	IX,$0080
 2777+1207 CD 45 02     		CALL	l0245
 2778+120A C1           		POP	BC
 2779+120B 22 D1 DF     		LD	(	$DFD1		),HL
 2780+120E D1           		POP	DE
 2781+120F 21 81 FF     		LD	HL,$FF81
 2782+1212 19           		ADD	HL,DE
 2783+1213 EB           		EX	DE,HL
 2784+1214 7A           		LD	A,D
 2785+1215 B3           		OR	E
 2786+1216 1B           		DEC	DE
 2787+1217 37           		SCF
 2788+1218 C9           		RET
 2789+1219
 2790+1219 59           l1219:		LD	E,C
 2791+121A CD 29 05     		CALL	l0529
 2792+121D D0           		RET	NC
 2793+121E
 2794+121E 7B           		LD	A,E
 2795+121F CD 26 12     		CALL	l1226
 2796+1222 DC BB 10     		CALL	C,l10bb
 2797+1225 C9           		RET
 2798+1226
 2799+1226 E5           l1226:		PUSH	HL
 2800+1227 D5           		PUSH	DE
 2801+1228 5F           		LD	E,A
 2802+1229 21 22 00     		LD	HL,$0022
 2803+122C 09           		ADD	HL,BC
 2804+122D CB 6E        		BIT	5,(HL)
 2805+122F 20 09        		JR	NZ,l123a	; (+$09)
 2806+1231 E5           		PUSH	HL
 2807+1232 D5           		PUSH	DE
 2808+1233 CD CF 12     		CALL	l12cf
 2809+1236 D1           		POP	DE
 2810+1237 E1           		POP	HL
 2811+1238 30 22        		JR	NC,l125c	; (+$22)
 2812+123A CB E6        l123a:		SET	4,(HL)
 2813+123C 21 26 00     		LD	HL,$0026
 2814+123F 09           		ADD	HL,BC
 2815+1240 7E           		LD	A,(HL)
 2816+1241 E6 7F        		AND	$7F
 2817+1243 21 2D 00     		LD	HL,$002D
 2818+1246 09           		ADD	HL,BC
 2819+1247 D5           		PUSH	DE
 2820+1248 86           		ADD	A,(HL)
 2821+1249 5F           		LD	E,A
 2822+124A 23           		INC	HL
 2823+124B 8E           		ADC	A,(HL)
 2824+124C 93           		SUB	E
 2825+124D 57           		LD	D,A
 2826+124E 23           		INC	HL
 2827+124F 7E           		LD	A,(HL)
 2828+1250 EB           		EX	DE,HL
 2829+1251 D1           		POP	DE
 2830+1252 CD 1B 02     		CALL	l021b
 2831+1255 73           		LD	(HL),E
 2832+1256 CD 1B 02     		CALL	l021b
 2833+1259 CD 8C 10     		CALL	l108c
 2834+125C D1           l125c:		POP	DE
 2835+125D E1           		POP	HL
 2836+125E C9           		RET
 2837+125F
 2838+125F CD 78 12     l125f:		CALL	l1278
 2839+1262 D0           		RET	NC
 2840+1263
 2841+1263 7A           		LD	A,D
 2842+1264 BB           		CP	E
 2843+1265 37           		SCF
 2844+1266 C9           		RET
 2845+1267
 2846+1267 CD 78 12     l1267:		CALL	l1278
 2847+126A D0           		RET	NC
 2848+126B
 2849+126B CD 1B 02     		CALL	l021b
 2850+126E 73           		LD	(HL),E
 2851+126F CD 1B 02     		CALL	l021b
 2852+1272 CD 88 10     		CALL	l1088
 2853+1275 C3 BB 10     		JP	l10bb
 2854+1278 21 00 00     l1278:		LD	HL,$0000
 2855+127B 5C           		LD	E,H
 2856+127C CD 7F 10     		CALL	l107f
 2857+127F 21 22 00     		LD	HL,$0022
 2858+1282 09           		ADD	HL,BC
 2859+1283 CB 6E        		BIT	5,(HL)
 2860+1285 20 04        		JR	NZ,l128b	; (+$04)
 2861+1287 CD FE 12     		CALL	l12fe
 2862+128A D0           		RET	NC
 2863+128B
 2864+128B 21 2D 00     l128b:		LD	HL,$002D
 2865+128E 09           		ADD	HL,BC
 2866+128F 5E           		LD	E,(HL)
 2867+1290 23           		INC	HL
 2868+1291 56           		LD	D,(HL)
 2869+1292 23           		INC	HL
 2870+1293 7E           		LD	A,(HL)
 2871+1294 EB           		EX	DE,HL
 2872+1295 F5           		PUSH	AF
 2873+1296 CD 1B 02     		CALL	l021b
 2874+1299 F5           		PUSH	AF
 2875+129A AF           		XOR	A
 2876+129B 1E 7F        		LD	E,$7F
 2877+129D 86           l129d:		ADD	A,(HL)
 2878+129E 23           		INC	HL
 2879+129F 1D           		DEC	E
 2880+12A0 20 FB        		JR	NZ,l129d	; (-$05)
 2881+12A2 5F           		LD	E,A
 2882+12A3 56           		LD	D,(HL)
 2883+12A4 F1           		POP	AF
 2884+12A5 CD 1B 02     		CALL	l021b
 2885+12A8 F1           		POP	AF
 2886+12A9 37           		SCF
 2887+12AA C9           		RET
 2888+12AB
 2889+12AB E5           l12ab:		PUSH	HL
 2890+12AC 21 22 00     		LD	HL,$0022
 2891+12AF 09           		ADD	HL,BC
 2892+12B0 CB 5E        		BIT	3,(HL)
 2893+12B2 28 14        		JR	Z,l12c8		; (+$14)
 2894+12B4 CB 66        		BIT	4,(HL)
 2895+12B6 28 10        		JR	Z,l12c8		; (+$10)
 2896+12B8 E5           		PUSH	HL
 2897+12B9 D5           		PUSH	DE
 2898+12BA 21 2B 00     		LD	HL,$002B
 2899+12BD 09           		ADD	HL,BC
 2900+12BE 5E           		LD	E,(HL)
 2901+12BF 23           		INC	HL
 2902+12C0 56           		LD	D,(HL)
 2903+12C1 CD 90 15     		CALL	x1590
 2904+12C4 D1           		POP	DE
 2905+12C5 E1           		POP	HL
 2906+12C6 30 05        		JR	NC,l12cd	; (+$05)
 2907+12C8 7E           l12c8:		LD	A,(HL)
 2908+12C9 E6 C7        		AND	$C7
 2909+12CB 77           		LD	(HL),A
 2910+12CC 37           		SCF
 2911+12CD E1           l12cd:		POP	HL
 2912+12CE C9           		RET
 2913+12CF
 2914+12CF 0A           l12cf:		LD	A,(BC)
 2915+12D0 FE 22        		CP	$22
 2916+12D2 21 DC 12     		LD	HL,$12DC
 2917+12D5 20 32        		JR	NZ,l1309	; (+$32)
 2918+12D7 21 6E 14     		LD	HL,$146E
 2919+12DA 18 2D        		JR	l1309		; (+$2D)
 2920+12DC D5           		PUSH	DE
 2921+12DD CD 94 0C     		CALL	l0c94
 2922+12E0 D1           		POP	DE
 2923+12E1 DC 71 13     		CALL	C,l1371
 2924+12E4 D0           		RET	NC
 2925+12E5
 2926+12E5 E5           		PUSH	HL
 2927+12E6 D5           		PUSH	DE
 2928+12E7 F5           		PUSH	AF
 2929+12E8 CD 53 13     		CALL	l1353
 2930+12EB CD 33 14     		CALL	l1433
 2931+12EE D4 16 14     		CALL	NC,l1416
 2932+12F1 F1           		POP	AF
 2933+12F2 D1           		POP	DE
 2934+12F3 E1           		POP	HL
 2935+12F4 C9           		RET
 2936+12F5
 2937+12F5              ; Subroutine to get the abs log sector (DE) and address (AHL) of
 2938+12F5              ; record DE in the current file
 2939+12F5
 2940+12F5 D5           		PUSH	DE
 2941+12F6 CD 6D 0C     		CALL	l0c6d		; find extent HL for file
 2942+12F9 D1           		POP	DE
 2943+12FA DC A4 13     		CALL	C,x13a4		; if found, get address of record
 2944+12FD C9           		RET
 2945+12FE
 2946+12FE              ; Subroutine to get the current record into a buffer and update the FCB
 2947+12FE              ; with its details
 2948+12FE
 2949+12FE 0A           l12fe:		LD	A,(BC)
 2950+12FF FE 22        		CP	$22		; test for "drive open as file"
 2951+1301 21 F5 12     		LD	HL,$12F5	; routine to use for normal file
 2952+1304 20 03        		JR	NZ,l1309
 2953+1306 21 6E 14     		LD	HL,$146E	; routine to use for drive
 2954+1309 CD 5D 13     l1309:		CALL	l135d		; DE=record number for filepointer
 2955+130C D0           		RET	NC		; exit if file too big
 2956+130D E5           		PUSH	HL
 2957+130E 21 22 00     		LD	HL,$0022
 2958+1311 09           		ADD	HL,BC
 2959+1312 CB 5E        		BIT	3,(HL)
 2960+1314 E1           		POP	HL
 2961+1315 28 0C        		JR	Z,l1323		; move on if no sector currently in buffer
 2962+1317 E5           		PUSH	HL
 2963+1318 EB           		EX	DE,HL
 2964+1319 CD 53 13     		CALL	l1353		; get record number from FCB
 2965+131C EB           		EX	DE,HL
 2966+131D B7           		OR	A
 2967+131E ED 52        		SBC	HL,DE
 2968+1320 E1           		POP	HL
 2969+1321 28 26        		JR	Z,l1349		; move on if record numbers match
 2970+1323 CD 0C 0C     l1323:		CALL	l0c0c		; ensure correct disk logged in
 2971+1326 DC AB 12     		CALL	C,l12ab		; get sector in FCB to buffer
 2972+1329 D0           		RET	NC		; exit if error
 2973+132A E5           		PUSH	HL
 2974+132B 21 29 00     		LD	HL,$0029
 2975+132E 09           		ADD	HL,BC
 2976+132F 73           		LD	(HL),E
 2977+1330 23           		INC	HL
 2978+1331 72           		LD	(HL),D
 2979+1332 E1           		POP	HL
 2980+1333 CD 53 13     		CALL	l1353		; DE=record number required
 2981+1336 CD FE 04     		CALL	l04fe		; call routine in HL
 2982+1339 D0           		RET	NC		; exit if error
 2983+133A E5           		PUSH	HL
 2984+133B 21 2B 00     		LD	HL,$002B
 2985+133E 09           		ADD	HL,BC
 2986+133F 73           		LD	(HL),E
 2987+1340 23           		INC	HL
 2988+1341 72           		LD	(HL),D		; store abs logical sector number
 2989+1342 D1           		POP	DE
 2990+1343 23           		INC	HL
 2991+1344 73           		LD	(HL),E
 2992+1345 23           		INC	HL
 2993+1346 72           		LD	(HL),D		; store add of record
 2994+1347 23           		INC	HL
 2995+1348 77           		LD	(HL),A		; store bank for buffer
 2996+1349 21 22 00     l1349:		LD	HL,$0022
 2997+134C 09           		ADD	HL,BC
 2998+134D 7E           		LD	A,(HL)
 2999+134E F6 28        		OR	$28		; set bit 3 (valid sector) & bit 5
 3000+1350 77           		LD	(HL),A		; (valid filepointer)
 3001+1351 37           		SCF
 3002+1352 C9           		RET
 3003+1353
 3004+1353 E5           l1353:		PUSH	HL
 3005+1354 21 29 00     		LD	HL,$0029
 3006+1357 09           		ADD	HL,BC
 3007+1358 5E           		LD	E,(HL)
 3008+1359 23           		INC	HL
 3009+135A 56           		LD	D,(HL)
 3010+135B E1           		POP	HL
 3011+135C C9           		RET
 3012+135D
 3013+135D E5           l135d:		PUSH	HL
 3014+135E 21 26 00     		LD	HL,$0026
 3015+1361 09           		ADD	HL,BC
 3016+1362 7E           		LD	A,(HL)
 3017+1363 23           		INC	HL
 3018+1364 5E           		LD	E,(HL)
 3019+1365 23           		INC	HL
 3020+1366 56           		LD	D,(HL)
 3021+1367 EB           		EX	DE,HL
 3022+1368 87           		ADD	A,A
 3023+1369 ED 6A        		ADC	HL,HL
 3024+136B EB           		EX	DE,HL
 3025+136C 3F           		CCF
 3026+136D 3E 22        		LD	A,$22
 3027+136F E1           		POP	HL
 3028+1370 C9           		RET
 3029+1371
 3030+1371 D5           l1371:		PUSH	DE
 3031+1372 CD DC 13     		CALL	l13dc
 3032+1375 EB           		EX	DE,HL
 3033+1376 E3           		EX	(SP),HL
 3034+1377 EB           		EX	DE,HL
 3035+1378 38 11        		JR	C,x138b		; (+$11)
 3036+137A CD 02 0F     		CALL	l0f02
 3037+137D 30 15        		JR	NC,l1394	; (+$15)
 3038+137F 73           		LD	(HL),E
 3039+1380 DD 7E 06     		LD	A,(IX+$06)
 3040+1383 B7           		OR	A
 3041+1384 28 02        		JR	Z,l1388		; (+$02)
 3042+1386 23           		INC	HL
 3043+1387 72           		LD	(HL),D
 3044+1388 EB           l1388:		EX	DE,HL
 3045+1389 18 07        		JR	l1392		; (+$07)
 3046+138B 7B           x138b:		LD	A,E
 3047+138C E6 03        		AND	$03
 3048+138E 37           		SCF
 3049+138F CC 33 14     		CALL	Z,l1433
 3050+1392 9F           l1392:		SBC	A,A
 3051+1393 37           		SCF
 3052+1394 D1           l1394:		POP	DE
 3053+1395 DC BD 13     		CALL	C,l13bd
 3054+1398 E5           		PUSH	HL
 3055+1399 DC 9E 13     		CALL	C,l139e
 3056+139C 18 18        		JR	l13b6		; (+$18)
 3057+139E CA 78 15     l139e:		JP	Z,l1578
 3058+13A1 C3 60 15     		JP	l1560
 3059+13A4
 3060+13A4              ; Subroutine to find abs log sector (DE) and record address (AHL)
 3061+13A4              ; for record DE in current file
 3062+13A4
 3063+13A4 D5           x13a4:		PUSH	DE
 3064+13A5 CD DC 13     		CALL	l13dc		; get block & offset
 3065+13A8 EB           		EX	DE,HL
 3066+13A9 E3           		EX	(SP),HL
 3067+13AA EB           		EX	DE,HL
 3068+13AB DC 33 14     		CALL	C,l1433		; check record is in this extent
 3069+13AE D1           		POP	DE
 3070+13AF DC BD 13     		CALL	C,l13bd		; calculate sector & offset
 3071+13B2 E5           x13b2:		PUSH	HL		; stack offset into sector
 3072+13B3 DC 60 15     		CALL	C,l1560		; get AHL=address of sector DE
 3073+13B6 EB           l13b6:		EX	DE,HL
 3074+13B7 E3           		EX	(SP),HL		; stack sector, restore offset
 3075+13B8 F5           		PUSH	AF
 3076+13B9 19           		ADD	HL,DE		; now AHL=address of record
 3077+13BA F1           		POP	AF
 3078+13BB D1           		POP	DE		; restore sector
 3079+13BC C9           		RET
 3080+13BD
 3081+13BD C5           l13bd:		PUSH	BC
 3082+13BE F5           		PUSH	AF
 3083+13BF EB           		EX	DE,HL
 3084+13C0 DD 7E 02     		LD	A,(IX+$02)
 3085+13C3 D6 02        		SUB	$02
 3086+13C5 C4 F5 04     		CALL	NZ,l04f5
 3087+13C8 CD 96 18     		CALL	x1896
 3088+13CB EB           		EX	DE,HL
 3089+13CC 42           		LD	B,D
 3090+13CD 7A           		LD	A,D
 3091+13CE E6 01        		AND	$01
 3092+13D0 57           		LD	D,A
 3093+13D1 EB           		EX	DE,HL
 3094+13D2 A8           		XOR	B
 3095+13D3 0F           		RRCA
 3096+13D4 83           		ADD	A,E
 3097+13D5 5F           		LD	E,A
 3098+13D6 8A           		ADC	A,D
 3099+13D7 93           		SUB	E
 3100+13D8 57           		LD	D,A
 3101+13D9 F1           		POP	AF
 3102+13DA C1           		POP	BC
 3103+13DB C9           		RET
 3104+13DC
 3105+13DC C5           l13dc:		PUSH	BC
 3106+13DD 60           		LD	H,B
 3107+13DE 69           		LD	L,C
 3108+13DF DD 7E 03     		LD	A,(IX+$03)
 3109+13E2 A3           		AND	E
 3110+13E3 1F           		RRA
 3111+13E4 47           		LD	B,A
 3112+13E5 3E 00        		LD	A,$00
 3113+13E7 1F           		RRA
 3114+13E8 4F           		LD	C,A
 3115+13E9 DD 7E 02     		LD	A,(IX+$02)
 3116+13EC CD EB 04     		CALL	l04eb
 3117+13EF 16 00        		LD	D,$00
 3118+13F1 DD 7E 06     		LD	A,(IX+$06)
 3119+13F4 B7           		OR	A
 3120+13F5 7B           		LD	A,E
 3121+13F6 28 0B        		JR	Z,l1403		; (+$0B)
 3122+13F8 E6 07        		AND	$07
 3123+13FA 87           		ADD	A,A
 3124+13FB C6 11        		ADD	A,$11
 3125+13FD 5F           		LD	E,A
 3126+13FE 19           		ADD	HL,DE
 3127+13FF 56           		LD	D,(HL)
 3128+1400 2B           		DEC	HL
 3129+1401 18 06        		JR	l1409		; (+$06)
 3130+1403 E6 0F        l1403:		AND	$0F
 3131+1405 C6 10        		ADD	A,$10
 3132+1407 5F           		LD	E,A
 3133+1408 19           		ADD	HL,DE
 3134+1409 5E           l1409:		LD	E,(HL)
 3135+140A 7A           		LD	A,D
 3136+140B B3           		OR	E
 3137+140C 3E 19        		LD	A,$19
 3138+140E 28 02        		JR	Z,l1412		; (+$02)
 3139+1410 EB           		EX	DE,HL
 3140+1411 37           		SCF
 3141+1412 50           l1412:		LD	D,B
 3142+1413 59           		LD	E,C
 3143+1414 C1           		POP	BC
 3144+1415 C9           		RET
 3145+1416
 3146+1416 E5           l1416:		PUSH	HL
 3147+1417 7B           		LD	A,E
 3148+1418 E6 7F        		AND	$7F
 3149+141A 3C           		INC	A
 3150+141B 21 0F 00     		LD	HL,$000F
 3151+141E 09           		ADD	HL,BC
 3152+141F 77           		LD	(HL),A
 3153+1420 7B           		LD	A,E
 3154+1421 17           		RLA
 3155+1422 7A           		LD	A,D
 3156+1423 17           		RLA
 3157+1424 E6 1F        		AND	$1F
 3158+1426 2B           		DEC	HL
 3159+1427 2B           		DEC	HL
 3160+1428 2B           		DEC	HL
 3161+1429 77           		LD	(HL),A
 3162+142A 21 22 00     		LD	HL,$0022
 3163+142D 09           		ADD	HL,BC
 3164+142E CB C6        		SET	0,(HL)
 3165+1430 37           		SCF
 3166+1431 E1           		POP	HL
 3167+1432 C9           		RET
 3168+1433
 3169+1433 D5           l1433:		PUSH	DE
 3170+1434 E5           		PUSH	HL
 3171+1435 CD 45 14     		CALL	l1445
 3172+1438 B7           		OR	A
 3173+1439 3E 22        		LD	A,$22
 3174+143B 20 05        		JR	NZ,x1442	; (+$05)
 3175+143D EB           		EX	DE,HL
 3176+143E ED 52        		SBC	HL,DE
 3177+1440 3E 19        		LD	A,$19
 3178+1442 E1           x1442:		POP	HL
 3179+1443 D1           		POP	DE
 3180+1444 C9           		RET
 3181+1445
 3182+1445 D5           l1445:		PUSH	DE
 3183+1446 21 0C 00     		LD	HL,$000C
 3184+1449 09           		ADD	HL,BC
 3185+144A 56           		LD	D,(HL)
 3186+144B 1E 00        		LD	E,$00
 3187+144D CB 3A        		SRL	D
 3188+144F CB 1B        		RR	E
 3189+1451 23           		INC	HL
 3190+1452 23           		INC	HL
 3191+1453 23           		INC	HL
 3192+1454 7E           		LD	A,(HL)
 3193+1455 B7           		OR	A
 3194+1456 F2 5B 14     		JP	p,l145b
 3195+1459 3E 80        		LD	A,$80
 3196+145B 83           l145b:		ADD	A,E
 3197+145C 5F           		LD	E,A
 3198+145D 8A           		ADC	A,D
 3199+145E 93           		SUB	E
 3200+145F 2B           		DEC	HL
 3201+1460 6E           		LD	L,(HL)
 3202+1461 26 00        		LD	H,$00
 3203+1463 29           		ADD	HL,HL
 3204+1464 29           		ADD	HL,HL
 3205+1465 29           		ADD	HL,HL
 3206+1466 29           		ADD	HL,HL
 3207+1467 85           		ADD	A,L
 3208+1468 57           		LD	D,A
 3209+1469 8C           		ADC	A,H
 3210+146A 92           		SUB	D
 3211+146B EB           		EX	DE,HL
 3212+146C D1           		POP	DE
 3213+146D C9           		RET
 3214+146E
 3215+146E 7B           		LD	A,E
 3216+146F E6 03        		AND	$03
 3217+1471 67           		LD	H,A
 3218+1472 2E 00        		LD	L,$00
 3219+1474 CB 3C        		SRL	H
 3220+1476 CB 1D        		RR	L
 3221+1478 3E 02        		LD	A,$02
 3222+147A CD EB 04     		CALL	l04eb
 3223+147D E5           		PUSH	HL
 3224+147E D5           		PUSH	DE
 3225+147F EB           		EX	DE,HL
 3226+1480 DD 7E 02     		LD	A,(IX+$02)
 3227+1483 DD 5E 05     		LD	E,(IX+$05)
 3228+1486 DD 56 06     		LD	D,(IX+$06)
 3229+1489 13           		INC	DE
 3230+148A D6 02        		SUB	$02
 3231+148C C4 F5 04     		CALL	NZ,l04f5
 3232+148F CD 96 18     		CALL	x1896
 3233+1492 B7           		OR	A
 3234+1493 ED 52        		SBC	HL,DE
 3235+1495 D1           		POP	DE
 3236+1496 E1           		POP	HL
 3237+1497 3E 19        		LD	A,$19
 3238+1499 C3 B2 13     		JP	x13b2
 3239+149C ED 5B 90 E2  l149c:		LD	DE,($E290		)
 3240+14A0 C9           		RET
 3241+14A1
 3242+14A1 CD 72 16     l14a1:		CALL	l1672
 3243+14A4 D0           		RET	NC
 3244+14A5
 3245+14A5 21 00 00     l14a5:		LD	HL,$0000
 3246+14A8 22 92 E2     		LD	($E292		),HL
 3247+14AB 22 94 E2     		LD	($E294		),HL
 3248+14AE 62           		LD	H,D
 3249+14AF 22 90 E2     		LD	($E290		),HL
 3250+14B2 DD 21 E0 DF  		LD	IX,	$DFE0
 3251+14B6 06 10        		LD	B,$10
 3252+14B8 3E 07        		LD	A,$07
 3253+14BA 21 90 E0     		LD	HL,	$E090
 3254+14BD 18 0E        		JR	l14cd		; (+$0E)
 3255+14BF 7B           l14bf:		LD	A,E
 3256+14C0 B7           		OR	A
 3257+14C1 37           		SCF
 3258+14C2 C8           		RET	Z
 3259+14C3
 3260+14C3 21 90 E2     		LD	HL,$E290
 3261+14C6 34           		INC	(HL)
 3262+14C7 7A           		LD	A,D
 3263+14C8 14           		INC	D
 3264+14C9 1D           		DEC	E
 3265+14CA CD 33 02     		CALL	l0233
 3266+14CD DD 75 08     l14cd:		LD	(IX+$08),L
 3267+14D0 DD 74 09     		LD	(IX+$09),H
 3268+14D3 DD 77 0A     		LD	(IX+$0A),A
 3269+14D6 2A 94 E2     		LD	HL,($E294		)
 3270+14D9 DD 75 00     		LD	(IX+$00),L
 3271+14DC DD 74 01     		LD	(IX+$01),H
 3272+14DF DD 22 94 E2  		LD	($E294		),IX
 3273+14E3 EB           		EX	DE,HL
 3274+14E4 11 0B 00     		LD	DE,$000B
 3275+14E7 DD 19        		ADD	IX,DE
 3276+14E9 EB           		EX	DE,HL
 3277+14EA 10 D3        		DJNZ	l14bf		; (-$2D)
 3278+14EC 37           		SCF
 3279+14ED C9           		RET
 3280+14EE
 3281+14EE 11 92 E2     l14ee:		LD	DE,$E292
 3282+14F1 EB           l14f1:		EX	DE,HL
 3283+14F2 CD 07 17     		CALL	l1707
 3284+14F5 3F           		CCF
 3285+14F6 3E 21        		LD	A,$21
 3286+14F8 C8           		RET	Z
 3287+14F9
 3288+14F9 E5           		PUSH	HL
 3289+14FA 21 05 00     		LD	HL,$0005
 3290+14FD 19           		ADD	HL,DE
 3291+14FE 7E           		LD	A,(HL)
 3292+14FF DD BE 1C     		CP	(IX+$1C)
 3293+1502 20 08        		JR	NZ,x150c	; (+$08)
 3294+1504 23           		INC	HL
 3295+1505 7E           		LD	A,(HL)
 3296+1506 23           		INC	HL
 3297+1507 66           		LD	H,(HL)
 3298+1508 6F           		LD	L,A
 3299+1509 B7           		OR	A
 3300+150A ED 42        		SBC	HL,BC
 3301+150C E1           x150c:		POP	HL
 3302+150D 20 E2        		JR	NZ,l14f1	; (-$1E)
 3303+150F 37           		SCF
 3304+1510 C9           		RET
 3305+1511
 3306+1511 CD 04 17     l1511:		CALL	l1704
 3307+1514 20 1A        		JR	NZ,l1530	; (+$1A)
 3308+1516 11 92 E2     		LD	DE,$E292
 3309+1519 EB           l1519:		EX	DE,HL
 3310+151A CD 07 17     		CALL	l1707
 3311+151D 3F           		CCF
 3312+151E 3E 21        		LD	A,$21
 3313+1520 C8           		RET	Z
 3314+1521
 3315+1521 CD 0F 17     		CALL	l170f
 3316+1524 20 F3        		JR	NZ,l1519	; (-$0D)
 3317+1526 CD 47 15     		CALL	x1547
 3318+1529 CD 58 16     		CALL	l1658
 3319+152C D0           		RET	NC
 3320+152D
 3321+152D CD 16 17     		CALL	l1716
 3322+1530 E5           l1530:		PUSH	HL
 3323+1531 21 02 00     		LD	HL,$0002
 3324+1534 19           		ADD	HL,DE
 3325+1535 AF           		XOR	A
 3326+1536 77           		LD	(HL),A
 3327+1537 23           		INC	HL
 3328+1538 77           		LD	(HL),A
 3329+1539 23           		INC	HL
 3330+153A 77           		LD	(HL),A
 3331+153B 23           		INC	HL
 3332+153C DD 7E 1C     		LD	A,(IX+$1C)
 3333+153F 77           		LD	(HL),A
 3334+1540 23           		INC	HL
 3335+1541 71           		LD	(HL),C
 3336+1542 23           		INC	HL
 3337+1543 70           		LD	(HL),B
 3338+1544 E1           		POP	HL
 3339+1545 37           		SCF
 3340+1546 C9           		RET
 3341+1547
 3342+1547 DD E5        x1547:		PUSH	IX
 3343+1549 E5           		PUSH	HL
 3344+154A D5           		PUSH	DE
 3345+154B C5           		PUSH	BC
 3346+154C 21 05 00     		LD	HL,$0005
 3347+154F 19           		ADD	HL,DE
 3348+1550 7E           		LD	A,(HL)
 3349+1551 23           		INC	HL
 3350+1552 5E           		LD	E,(HL)
 3351+1553 23           		INC	HL
 3352+1554 56           		LD	D,(HL)
 3353+1555 EB           		EX	DE,HL
 3354+1556 57           		LD	D,A
 3355+1557 CD FD 05     		CALL	l05fd
 3356+155A C1           		POP	BC
 3357+155B D1           		POP	DE
 3358+155C E1           		POP	HL
 3359+155D DD E1        		POP	IX
 3360+155F C9           		RET
 3361+1560
 3362+1560 DD CB 1B 5E  l1560:		BIT	3,(IX+$1B)
 3363+1564 C2 35 1B     		JP	NZ,l1b35
 3364+1567 D5           		PUSH	DE
 3365+1568 C5           		PUSH	BC
 3366+1569 42           		LD	B,D
 3367+156A 4B           		LD	C,E
 3368+156B CD EE 14     		CALL	l14ee
 3369+156E 38 06        		JR	C,l1576		; (+$06)
 3370+1570 CD 11 15     		CALL	l1511
 3371+1573 DC E4 16     		CALL	C,l16e4
 3372+1576 18 11        l1576:		JR	l1589		; (+$11)
 3373+1578 DD CB 1B 5E  l1578:		BIT	3,(IX+$1B)
 3374+157C C2 35 1B     		JP	NZ,l1b35
 3375+157F D5           		PUSH	DE
 3376+1580 C5           		PUSH	BC
 3377+1581 42           		LD	B,D
 3378+1582 4B           		LD	C,E
 3379+1583 CD EE 14     		CALL	l14ee
 3380+1586 D4 11 15     		CALL	NC,l1511
 3381+1589 F5           l1589:		PUSH	AF
 3382+158A DC 1E 17     		CALL	C,l171e
 3383+158D F1           		POP	AF
 3384+158E 18 1F        		JR	l15af		; (+$1F)
 3385+1590 DD CB 1B 5E  x1590:		BIT	3,(IX+$1B)
 3386+1594 C2 35 1B     		JP	NZ,l1b35
 3387+1597 D5           		PUSH	DE
 3388+1598 C5           		PUSH	BC
 3389+1599 C5           		PUSH	BC
 3390+159A 42           		LD	B,D
 3391+159B 4B           		LD	C,E
 3392+159C CD EE 14     		CALL	l14ee
 3393+159F C1           		POP	BC
 3394+15A0 30 0D        		JR	NC,l15af	; (+$0D)
 3395+15A2 E5           		PUSH	HL
 3396+15A3 21 02 00     		LD	HL,$0002
 3397+15A6 19           		ADD	HL,DE
 3398+15A7 CB C6        		SET	0,(HL)
 3399+15A9 23           		INC	HL
 3400+15AA 71           		LD	(HL),C
 3401+15AB 23           		INC	HL
 3402+15AC 70           		LD	(HL),B
 3403+15AD E1           		POP	HL
 3404+15AE 37           		SCF
 3405+15AF 30 0B        l15af:		JR	NC,l15bc	; (+$0B)
 3406+15B1 21 08 00     		LD	HL,$0008
 3407+15B4 19           		ADD	HL,DE
 3408+15B5 5E           		LD	E,(HL)
 3409+15B6 23           		INC	HL
 3410+15B7 56           		LD	D,(HL)
 3411+15B8 23           		INC	HL
 3412+15B9 7E           		LD	A,(HL)
 3413+15BA EB           		EX	DE,HL
 3414+15BB 37           		SCF
 3415+15BC C1           l15bc:		POP	BC
 3416+15BD D1           		POP	DE
 3417+15BE C9           		RET
 3418+15BF
 3419+15BF CD 29 18     l15bf:		CALL	l1829
 3420+15C2 D8           		RET	C
 3421+15C3
 3422+15C3 E5           		PUSH	HL
 3423+15C4 D5           		PUSH	DE
 3424+15C5 C5           		PUSH	BC
 3425+15C6 DD 5E 07     		LD	E,(IX+$07)
 3426+15C9 DD 56 08     		LD	D,(IX+$08)
 3427+15CC 13           		INC	DE
 3428+15CD 3E 04        		LD	A,$04
 3429+15CF CD EB 04     		CALL	l04eb
 3430+15D2 CD 96 18     		CALL	x1896
 3431+15D5 1B           		DEC	DE
 3432+15D6 18 06        		JR	l15de		; (+$06)
 3433+15D8 E5           l15d8:		PUSH	HL
 3434+15D9 D5           		PUSH	DE
 3435+15DA C5           		PUSH	BC
 3436+15DB 11 FF FF     		LD	DE,$FFFF
 3437+15DE 42           l15de:		LD	B,D
 3438+15DF 4B           		LD	C,E
 3439+15E0 11 92 E2     		LD	DE,$E292
 3440+15E3 EB           l15e3:		EX	DE,HL
 3441+15E4 CD 07 17     x15e4:		CALL	l1707
 3442+15E7 28 6B        		JR	Z,l1654		; (+$6B)
 3443+15E9 E5           		PUSH	HL
 3444+15EA 21 05 00     		LD	HL,$0005
 3445+15ED 19           		ADD	HL,DE
 3446+15EE 7E           		LD	A,(HL)
 3447+15EF DD BE 1C     		CP	(IX+$1C)
 3448+15F2 20 1C        		JR	NZ,l1610	; (+$1C)
 3449+15F4 23           		INC	HL
 3450+15F5 79           		LD	A,C
 3451+15F6 96           		SUB	(HL)
 3452+15F7 23           		INC	HL
 3453+15F8 78           		LD	A,B
 3454+15F9 9E           		SBC	A,(HL)
 3455+15FA 38 14        		JR	C,l1610		; (+$14)
 3456+15FC CD 47 15     		CALL	x1547
 3457+15FF 2B           		DEC	HL
 3458+1600 2B           		DEC	HL
 3459+1601 2B           		DEC	HL
 3460+1602 2B           		DEC	HL
 3461+1603 2B           		DEC	HL
 3462+1604 CB 46        		BIT	0,(HL)
 3463+1606 20 08        		JR	NZ,l1610	; (+$08)
 3464+1608 E1           		POP	HL
 3465+1609 E5           		PUSH	HL
 3466+160A CD 16 17     		CALL	l1716
 3467+160D E1           		POP	HL
 3468+160E 18 D4        		JR	x15e4		; (-$2C)
 3469+1610 E1           l1610:		POP	HL
 3470+1611 18 D0        		JR	l15e3		; (-$30)
 3471+1613 E5           l1613:		PUSH	HL
 3472+1614 D5           		PUSH	DE
 3473+1615 C5           		PUSH	BC
 3474+1616 11 92 E2     		LD	DE,$E292
 3475+1619 EB           l1619:		EX	DE,HL
 3476+161A CD 07 17     l161a:		CALL	l1707
 3477+161D 28 35        		JR	Z,l1654		; (+$35)
 3478+161F E5           		PUSH	HL
 3479+1620 21 05 00     		LD	HL,$0005
 3480+1623 19           		ADD	HL,DE
 3481+1624 7E           		LD	A,(HL)
 3482+1625 E1           		POP	HL
 3483+1626 DD BE 1C     		CP	(IX+$1C)
 3484+1629 20 EE        		JR	NZ,l1619	; (-$12)
 3485+162B E5           		PUSH	HL
 3486+162C CD 16 17     		CALL	l1716
 3487+162F E1           		POP	HL
 3488+1630 18 E8        		JR	l161a		; (-$18)
 3489+1632 E5           l1632:		PUSH	HL
 3490+1633 D5           		PUSH	DE
 3491+1634 C5           		PUSH	BC
 3492+1635 11 92 E2     		LD	DE,$E292
 3493+1638 EB           l1638:		EX	DE,HL
 3494+1639 CD 07 17     l1639:		CALL	l1707
 3495+163C 28 16        		JR	Z,l1654		; (+$16)
 3496+163E E5           		PUSH	HL
 3497+163F 21 03 00     		LD	HL,$0003
 3498+1642 19           		ADD	HL,DE
 3499+1643 7E           		LD	A,(HL)
 3500+1644 23           		INC	HL
 3501+1645 66           		LD	H,(HL)
 3502+1646 6F           		LD	L,A
 3503+1647 B7           		OR	A
 3504+1648 ED 42        		SBC	HL,BC
 3505+164A E1           		POP	HL
 3506+164B 20 EB        		JR	NZ,l1638	; (-$15)
 3507+164D E5           		PUSH	HL
 3508+164E CD 16 17     		CALL	l1716
 3509+1651 E1           		POP	HL
 3510+1652 18 E5        		JR	l1639		; (-$1B)
 3511+1654 C1           l1654:		POP	BC
 3512+1655 D1           		POP	DE
 3513+1656 E1           		POP	HL
 3514+1657 C9           		RET
 3515+1658
 3516+1658 DD E5        l1658:		PUSH	IX
 3517+165A E5           		PUSH	HL
 3518+165B 21 02 00     		LD	HL,$0002
 3519+165E 19           		ADD	HL,DE
 3520+165F CB 46        		BIT	0,(HL)
 3521+1661 37           		SCF
 3522+1662 28 0A        		JR	Z,l166e		; (+$0A)
 3523+1664 23           		INC	HL
 3524+1665 23           		INC	HL
 3525+1666 23           		INC	HL
 3526+1667 7E           		LD	A,(HL)
 3527+1668 CD CB 17     		CALL	l17cb
 3528+166B CD 85 16     		CALL	l1685
 3529+166E E1           l166e:		POP	HL
 3530+166F DD E1        		POP	IX
 3531+1671 C9           		RET
 3532+1672
 3533+1672 E5           l1672:		PUSH	HL
 3534+1673 D5           		PUSH	DE
 3535+1674 11 92 E2     		LD	DE,$E292
 3536+1677 EB           l1677:		EX	DE,HL
 3537+1678 CD 07 17     		CALL	l1707
 3538+167B 28 05        		JR	Z,l1682		; (+$05)
 3539+167D CD 58 16     		CALL	l1658
 3540+1680 38 F5        		JR	C,l1677		; (-$0B)
 3541+1682 D1           l1682:		POP	DE
 3542+1683 E1           		POP	HL
 3543+1684 C9           		RET
 3544+1685
 3545+1685 E5           l1685:		PUSH	HL
 3546+1686 D5           		PUSH	DE
 3547+1687 C5           		PUSH	BC
 3548+1688 11 92 E2     l1688:		LD	DE,$E292
 3549+168B 01 FF FF     		LD	BC,$FFFF
 3550+168E CD A6 16     		CALL	l16a6
 3551+1691 28 0F        		JR	Z,l16a2		; (+$0F)
 3552+1693 D5           l1693:		PUSH	DE
 3553+1694 CD A6 16     		CALL	l16a6
 3554+1697 28 03        		JR	Z,l169c		; (+$03)
 3555+1699 F1           		POP	AF
 3556+169A 18 F7        		JR	l1693		; (-$09)
 3557+169C D1           l169c:		POP	DE
 3558+169D CD CE 16     		CALL	l16ce
 3559+16A0 38 E6        		JR	C,l1688		; (-$1A)
 3560+16A2 C1           l16a2:		POP	BC
 3561+16A3 D1           		POP	DE
 3562+16A4 E1           		POP	HL
 3563+16A5 C9           		RET
 3564+16A6
 3565+16A6 EB           l16a6:		EX	DE,HL
 3566+16A7 CD 07 17     		CALL	l1707
 3567+16AA C8           		RET	Z
 3568+16AB
 3569+16AB 21 02 00     		LD	HL,$0002
 3570+16AE 19           		ADD	HL,DE
 3571+16AF CB 46        		BIT	0,(HL)
 3572+16B1 28 F3        		JR	Z,l16a6		; (-$0D)
 3573+16B3 23           		INC	HL
 3574+16B4 23           		INC	HL
 3575+16B5 23           		INC	HL
 3576+16B6 7E           		LD	A,(HL)
 3577+16B7 DD BE 1C     		CP	(IX+$1C)
 3578+16BA 20 EA        		JR	NZ,l16a6	; (-$16)
 3579+16BC 23           		INC	HL
 3580+16BD 7E           		LD	A,(HL)
 3581+16BE 23           		INC	HL
 3582+16BF 66           		LD	H,(HL)
 3583+16C0 6F           		LD	L,A
 3584+16C1 B7           		OR	A
 3585+16C2 ED 42        		SBC	HL,BC
 3586+16C4 09           		ADD	HL,BC
 3587+16C5 28 02        		JR	Z,l16c9		; (+$02)
 3588+16C7 30 DD        		JR	NC,l16a6	; (-$23)
 3589+16C9 44           l16c9:		LD	B,H
 3590+16CA 4D           		LD	C,L
 3591+16CB 37           		SCF
 3592+16CC 9F           		SBC	A,A
 3593+16CD C9           		RET
 3594+16CE
 3595+16CE D5           l16ce:		PUSH	DE
 3596+16CF CD F1 16     		CALL	l16f1
 3597+16D2 CD E8 18     		CALL	l18e8
 3598+16D5 D1           		POP	DE
 3599+16D6 D0           		RET	NC
 3600+16D7
 3601+16D7 21 02 00     		LD	HL,$0002
 3602+16DA 19           		ADD	HL,DE
 3603+16DB CB 86        		res	0,(HL)
 3604+16DD 23           		INC	HL
 3605+16DE AF           		XOR	A
 3606+16DF 77           		LD	(HL),A
 3607+16E0 23           		INC	HL
 3608+16E1 77           		LD	(HL),A
 3609+16E2 37           		SCF
 3610+16E3 C9           		RET
 3611+16E4
 3612+16E4              ; Subroutine to read buffer (DE=BCB) from disk
 3613+16E4
 3614+16E4 E5           l16e4:		PUSH	HL
 3615+16E5 D5           		PUSH	DE
 3616+16E6 C5           		PUSH	BC
 3617+16E7 CD F1 16     		CALL	l16f1		; get buffer & sector details
 3618+16EA CD DF 18     		CALL	l18df		; read the sector
 3619+16ED C1           		POP	BC
 3620+16EE D1           		POP	DE
 3621+16EF E1           		POP	HL
 3622+16F0 C9           		RET
 3623+16F1
 3624+16F1 21 0A 00     l16f1:		LD	HL,$000A
 3625+16F4 19           		ADD	HL,DE
 3626+16F5 46           		LD	B,(HL)
 3627+16F6 2B           		DEC	HL
 3628+16F7 56           		LD	D,(HL)
 3629+16F8 2B           		DEC	HL
 3630+16F9 5E           		LD	E,(HL)
 3631+16FA D5           		PUSH	DE
 3632+16FB 2B           		DEC	HL
 3633+16FC 56           		LD	D,(HL)
 3634+16FD 2B           		DEC	HL
 3635+16FE 5E           		LD	E,(HL)
 3636+16FF CD B6 18     		CALL	l18b6
 3637+1702 E1           		POP	HL
 3638+1703 C9           		RET
 3639+1704
 3640+1704 21 94 E2     l1704:		LD	HL,$E294
 3641+1707 5E           l1707:		LD	E,(HL)
 3642+1708 23           		INC	HL
 3643+1709 56           		LD	D,(HL)
 3644+170A 2B           		DEC	HL
 3645+170B 7A           		LD	A,D
 3646+170C B3           		OR	E
 3647+170D 37           		SCF
 3648+170E C9           		RET
 3649+170F
 3650+170F EB           l170f:		EX	DE,HL
 3651+1710 7E           		LD	A,(HL)
 3652+1711 23           		INC	HL
 3653+1712 B6           		OR	(HL)
 3654+1713 2B           		DEC	HL
 3655+1714 EB           		EX	DE,HL
 3656+1715 C9           		RET
 3657+1716
 3658+1716 CD 2F 17     l1716:		CALL	l172f
 3659+1719 21 94 E2     		LD	HL,$E294
 3660+171C 18 06        		JR	l1724		; (+$06)
 3661+171E CD 2F 17     l171e:		CALL	l172f
 3662+1721 21 92 E2     		LD	HL,$E292
 3663+1724 7E           l1724:		LD	A,(HL)
 3664+1725 12           		LD	(DE),A
 3665+1726 23           		INC	HL
 3666+1727 13           		INC	DE
 3667+1728 7E           		LD	A,(HL)
 3668+1729 12           		LD	(DE),A
 3669+172A 1B           		DEC	DE
 3670+172B 72           		LD	(HL),D
 3671+172C 2B           		DEC	HL
 3672+172D 73           		LD	(HL),E
 3673+172E C9           		RET
 3674+172F
 3675+172F 1A           l172f:		LD	A,(DE)
 3676+1730 77           		LD	(HL),A
 3677+1731 23           		INC	HL
 3678+1732 13           		INC	DE
 3679+1733 1A           		LD	A,(DE)
 3680+1734 77           		LD	(HL),A
 3681+1735 1B           		DEC	DE
 3682+1736 C9           		RET
 3683+1737
 3684+1737 3E 41        l1737:		LD	A,"A"
 3685+1739 32 EA E3     		LD	(	$E3EA		),A
 3686+173C 21 6E 17     		LD	HL,l176e
 3687+173F 11 DB E2     		LD	DE,	$E2C0		+$1B
 3688+1742 01 15 00     		LD	BC,$0015
 3689+1745 ED B0        		LDIR
 3690+1747 21 C0 E2     		LD	HL,	$E2C0
 3691+174A 22 A0 E2     		LD	($E2A0		),HL
 3692+174D 21 83 17     		LD	HL,l1783
 3693+1750 11 48 E3     		LD	DE,	$E32D		+$1B
 3694+1753 01 15 00     		LD	BC,$0015
 3695+1756 ED B0        		LDIR
 3696+1758 21 2D E3     		LD	HL,	$E32D
 3697+175B 22 A2 E2     		LD	($E2A2),HL
 3698+175E 0E 01        		LD	C,$01
 3699+1760 CD 35 19     		CALL	l1935
 3700+1763 CD 4F 1F     		CALL	l1f4f
 3701+1766 D0           		RET	NC
 3702+1767
 3703+1767 3E 03        		LD	A,$03
 3704+1769 2E 42        		LD	L,$42
 3705+176B C3 27 32     		JP	l3227
 3706+176E
 3707+176E              ; The extended XDPB info for drive A:
 3708+176E
 3709+176E 04 41 00     l176e:		DB	$04,"A",$00	; flags,drive,unit
 3710+1771 00 00 00 00  		DB	$00,$00,$00,$00	; last access,filesopen
 3711+1775 00 00 00 00  		DW	$0000,$0000	; #free direntries,last used
 3712+1779 F0 E2 00 E3  		DW		$E2F0		,	$E300			; checksum vector,alloc bitmap
 3713+177D 88 19        		DW	l1988		; login disk
 3714+177F 7C 19        		DW	l197c		; read sector
 3715+1781 82 19        		DW	l1982		; write sector
 3716+1783
 3717+1783              ; The extended XDPB info for drive B:
 3718+1783
 3719+1783 04 42 01     l1783:		DB	$04,"B",$01	; flags,drive,unit
 3720+1786 00 00 00 00  		DB	$00,$00,$00,$00	; last access,filesopen
 3721+178A 00 00 00 00  		DW	$0000,$0000	; #free direntries,lastused
 3722+178E 5D E3 6D E3  		DW		$E35D		,	$E36D			; checksum vector,alloc bitmap
 3723+1792 88 19        		DW	l1988		; login disk
 3724+1794 7C 19        		DW	l197c		; read sector
 3725+1796 82 19        		DW	l1982		; write sector
 3726+1798
 3727+1798 E5           x1798:		PUSH	HL
 3728+1799 21 AE 17     		LD	HL,l17ae
 3729+179C 11 B5 E3     		LD	DE,	$E39A		+$1B
 3730+179F 01 15 00     		LD	BC,$0015
 3731+17A2 ED B0        		LDIR
 3732+17A4 21 9A E3     		LD	HL,	$E39A
 3733+17A7 22 B8 E2     		LD	($E2B8),HL
 3734+17AA E1           		POP	HL
 3735+17AB C3 C9 1A     		JP	l1ac9
 3736+17AE
 3737+17AE              ; The extended XDPB info for drive M:
 3738+17AE
 3739+17AE 08 4D FF     l17ae:		DB	$08,"M",$FF	; flags,drive,unit
 3740+17B1 00 00 00 00  		DB	$00,$00,$00,$00	; last access,filesopen
 3741+17B5 00 00 00 00  		DW	$0000,$0000	; #free direntries,lastused
 3742+17B9 00 00 CA E3  		DW	$0000,	$E3CA			; no checksum;alloc bitmap
 3743+17BD C3 17        		DW	l1845		; login disk
 3744+17BF C3 17        		DW	l1845		; read sector
 3745+17C1 C3 17        		DW	l1845		; write sector
 3746+17C3
 3747+17C3 37           l1845:		SCF
 3748+17C4 C9           		RET
 3749+17C5
 3750+17C5 CD FF 04     l17c5:		CALL	l04ff
 3751+17C8 21 A0 E2     		LD	HL,$E2A0
 3752+17CB D6 41        l17cb:		SUB	$41
 3753+17CD 38 1C        		JR	C,l17eb		; (+$1C)
 3754+17CF FE 10        		CP	$10
 3755+17D1 30 18        		JR	NC,l17eb	; (+$18)
 3756+17D3 E5           		PUSH	HL
 3757+17D4 87           		ADD	A,A
 3758+17D5 C6 A0        		ADD	A,$A0
 3759+17D7 6F           		LD	L,A
 3760+17D8 CE E2        		ADC	A,$E2
 3761+17DA 95           		SUB	L
 3762+17DB 67           		LD	H,A
 3763+17DC 7E           		LD	A,(HL)
 3764+17DD 23           		INC	HL
 3765+17DE 66           		LD	H,(HL)
 3766+17DF 6F           		LD	L,A
 3767+17E0 E5           		PUSH	HL
 3768+17E1 DD E1        		POP	IX
 3769+17E3 7C           		LD	A,H
 3770+17E4 B5           		OR	L
 3771+17E5 C6 FF        		ADD	A,$FF
 3772+17E7 E1           		POP	HL
 3773+17E8 3E 16        		LD	A,$16
 3774+17EA C9           		RET
 3775+17EB
 3776+17EB 3E 15        l17eb:		LD	A,$15
 3777+17ED B7           		OR	A
 3778+17EE C9           		RET
 3779+17EF
 3780+17EF CD CB 17     l17ef:		CALL	l17cb
 3781+17F2 D0           		RET	NC
 3782+17F3
 3783+17F3 E5           		PUSH	HL
 3784+17F4 D5           		PUSH	DE
 3785+17F5 C5           		PUSH	BC
 3786+17F6 CD 0D 18     		CALL	l180d
 3787+17F9 DD CB 1B 46  		BIT	0,(IX+$1B)
 3788+17FD 37           		SCF
 3789+17FE CC 05 18     		CALL	Z,l1805
 3790+1801 C1           		POP	BC
 3791+1802 D1           		POP	DE
 3792+1803 E1           		POP	HL
 3793+1804 C9           		RET
 3794+1805
 3795+1805 DD 7E 1A     l1805:		LD	A,(IX+$1A)
 3796+1808 17           		RLA
 3797+1809 D8           		RET	C
 3798+180A
 3799+180A C3 D3 18     		JP	l18d3
 3800+180D DD CB 1B 46  l180d:		BIT	0,(IX+$1B)
 3801+1811 C8           		RET	Z
 3802+1812
 3803+1812 DD 7E 21     		LD	A,(IX+$21)
 3804+1815 B7           		OR	A
 3805+1816 C0           		RET	NZ
 3806+1817
 3807+1817 CD 29 18     		CALL	l1829
 3808+181A D8           		RET	C
 3809+181B
 3810+181B DD 7E 21     l181b:		LD	A,(IX+$21)
 3811+181E B7           		OR	A
 3812+181F 3E 24        		LD	A,$24
 3813+1821 C0           		RET	NZ
 3814+1822
 3815+1822 DD CB 1B 86  		res	0,(IX+$1B)
 3816+1826 C3 13 16     		JP	l1613
 3817+1829 DD CB 0C 7E  l1829:		BIT	7,(IX+$0C)
 3818+182D 37           		SCF
 3819+182E C0           		RET	NZ
 3820+182F
 3821+182F E5           		PUSH	HL
 3822+1830 D5           		PUSH	DE
 3823+1831 C5           		PUSH	BC
 3824+1832 ED 5F        		LD	A,R
 3825+1834 F3           		DI
 3826+1835 3A 78 5C     		LD	A,(	$5C78)
 3827+1838 2A 79 5C     		LD	HL,($5C79)
 3828+183B E2 3F 18     		JP	po,l183f
 3829+183E FB           		EI
 3830+183F 47           l183f:		LD	B,A
 3831+1840 DD 7E 1E     		LD	A,(IX+$1E)
 3832+1843 DD 5E 1F     		LD	E,(IX+$1F)
 3833+1846 DD 56 20     		LD	D,(IX+$20)
 3834+1849 C6 64        		ADD	A,$64
 3835+184B 30 01        		JR	NC,l184e	; (+$01)
 3836+184D 13           		INC	DE
 3837+184E 4F           l184e:		LD	C,A
 3838+184F 78           		LD	A,B
 3839+1850 91           		SUB	C
 3840+1851 ED 52        		SBC	HL,DE
 3841+1853 F5           		PUSH	AF
 3842+1854 21 78 5C     		LD	HL,	$5C78
 3843+1857 ED 5F        		LD	A,R
 3844+1859 F3           		DI
 3845+185A 7E           		LD	A,(HL)
 3846+185B DD 77 1E     		LD	(IX+$1E),A
 3847+185E 23           		INC	HL
 3848+185F 7E           		LD	A,(HL)
 3849+1860 DD 77 1F     		LD	(IX+$1F),A
 3850+1863 23           		INC	HL
 3851+1864 7E           		LD	A,(HL)
 3852+1865 DD 77 20     		LD	(IX+$20),A
 3853+1868 E2 6C 18     		JP	po,l186c
 3854+186B FB           		EI
 3855+186C F1           l186c:		POP	AF
 3856+186D C1           		POP	BC
 3857+186E D1           		POP	DE
 3858+186F E1           		POP	HL
 3859+1870 C9           		RET
 3860+1871
 3861+1871 E5           x1871:		PUSH	HL
 3862+1872 D5           		PUSH	DE
 3863+1873 C5           		PUSH	BC
 3864+1874 CD 7B 18     		CALL	l187b
 3865+1877 C1           		POP	BC
 3866+1878 D1           		POP	DE
 3867+1879 E1           		POP	HL
 3868+187A C9           		RET
 3869+187B
 3870+187B DD CB 1B 56  l187b:		BIT	2,(IX+$1B)
 3871+187F 37           		SCF
 3872+1880 C8           		RET	Z
 3873+1881
 3874+1881 CD 0A 19     		CALL	l190a
 3875+1884 CD DB 1E     		CALL	l1edb
 3876+1887 D0           		RET	NC
 3877+1888
 3878+1888 CD 5B 1F     		CALL	l1f5b
 3879+188B 4F           		LD	C,A
 3880+188C E6 20        		AND	$20
 3881+188E C8           		RET	Z
 3882+188F
 3883+188F CB 71        		BIT	6,C
 3884+1891 3E 01        		LD	A,$01
 3885+1893 C0           		RET	NZ
 3886+1894
 3887+1894 37           		SCF
 3888+1895 C9           		RET
 3889+1896
 3890+1896 E5           x1896:		PUSH	HL
 3891+1897 C5           		PUSH	BC
 3892+1898 DD 4E 0D     		LD	C,(IX+$0D)
 3893+189B DD 46 0E     		LD	B,(IX+$0E)
 3894+189E EB           		EX	DE,HL
 3895+189F DD 5E 00     		LD	E,(IX+$00)
 3896+18A2 DD 56 01     		LD	D,(IX+$01)
 3897+18A5 3E 02        		LD	A,$02
 3898+18A7 CD EB 04     		CALL	l04eb
 3899+18AA 18 02        		JR	l18ae		; (+$02)
 3900+18AC 19           l18ac:		ADD	HL,DE
 3901+18AD 0B           		DEC	BC
 3902+18AE 78           l18ae:		LD	A,B
 3903+18AF B1           		OR	C
 3904+18B0 20 FA        		JR	NZ,l18ac	; (-$06)
 3905+18B2 EB           		EX	DE,HL
 3906+18B3 C1           		POP	BC
 3907+18B4 E1           		POP	HL
 3908+18B5 C9           		RET
 3909+18B6
 3910+18B6 E5           l18b6:		PUSH	HL
 3911+18B7 C5           		PUSH	BC
 3912+18B8 EB           		EX	DE,HL
 3913+18B9 DD 5E 00     		LD	E,(IX+$00)
 3914+18BC DD 56 01     		LD	D,(IX+$01)
 3915+18BF 3E 02        		LD	A,$02
 3916+18C1 CD EB 04     		CALL	l04eb
 3917+18C4 01 FF FF     		LD	BC,$FFFF
 3918+18C7 B7           		OR	A
 3919+18C8 03           l18c8:		INC	BC
 3920+18C9 ED 52        		SBC	HL,DE
 3921+18CB 30 FB        		JR	NC,l18c8	; (-$05)
 3922+18CD 19           		ADD	HL,DE
 3923+18CE EB           		EX	DE,HL
 3924+18CF 51           		LD	D,C
 3925+18D0 C1           		POP	BC
 3926+18D1 E1           		POP	HL
 3927+18D2 C9           		RET
 3928+18D3
 3929+18D3 E5           l18d3:		PUSH	HL
 3930+18D4 DD 6E 2A     		LD	L,(IX+$2A)
 3931+18D7 DD 66 2B     		LD	H,(IX+$2B)
 3932+18DA 11 00 00     		LD	DE,$0000
 3933+18DD 18 10        		JR	l18ef		; (+$10)
 3934+18DF E5           l18df:		PUSH	HL
 3935+18E0 DD 6E 2C     		LD	L,(IX+$2C)
 3936+18E3 DD 66 2D     		LD	H,(IX+$2D)
 3937+18E6 18 07        		JR	l18ef		; (+$07)
 3938+18E8 E5           l18e8:		PUSH	HL
 3939+18E9 DD 6E 2E     		LD	L,(IX+$2E)
 3940+18EC DD 66 2F     		LD	H,(IX+$2F)
 3941+18EF 22 ED E3     l18ef:		LD	(	$E3ED		),HL
 3942+18F2 E1           		POP	HL
 3943+18F3 E5           l18f3:		PUSH	HL
 3944+18F4 D5           		PUSH	DE
 3945+18F5 C5           		PUSH	BC
 3946+18F6 CD 03 19     		CALL	l1903
 3947+18F9 C1           		POP	BC
 3948+18FA D1           		POP	DE
 3949+18FB E1           		POP	HL
 3950+18FC D8           		RET	C
 3951+18FD
 3952+18FD CD 9D 1A     		CALL	l1a9d
 3953+1900 28 F1        		JR	Z,l18f3		; (-$0F)
 3954+1902 C9           		RET
 3955+1903
 3956+1903 E5           l1903:		PUSH	HL
 3957+1904 2A ED E3     		LD	HL,(	$E3ED		)
 3958+1907 E3           		EX	(SP),HL
 3959+1908 C9           		RET
 3960+1909
 3961+1909 E9           l1909:		JP	(HL)
 3962+190A E5           l190a:		PUSH	HL
 3963+190B DD 4E 1D     		LD	C,(IX+$1D)
 3964+190E 79           		LD	A,C
 3965+190F B7           		OR	A
 3966+1910 20 15        		JR	NZ,l1927	; (+$15)
 3967+1912 21 EA E3     		LD	HL,	$E3EA
 3968+1915 DD 7E 1C     		LD	A,(IX+$1C)
 3969+1918 BE           		CP	(HL)
 3970+1919 28 0C        		JR	Z,l1927		; (+$0C)
 3971+191B 77           		LD	(HL),A
 3972+191C DD E5        		PUSH	IX
 3973+191E D5           		PUSH	DE
 3974+191F C5           		PUSH	BC
 3975+1920 CD 29 19     		CALL	l1929
 3976+1923 C1           		POP	BC
 3977+1924 D1           		POP	DE
 3978+1925 DD E1        		POP	IX
 3979+1927 E1           l1927:		POP	HL
 3980+1928 C9           		RET
 3981+1929
 3982+1929 F5           l1929:		PUSH	AF
 3983+192A 4F           		LD	C,A
 3984+192B CD 25 03     		CALL	l0325
 3985+192E F1           		POP	AF
 3986+192F E5           		PUSH	HL
 3987+1930 2A EB E3     		LD	HL,($E3EB		)
 3988+1933 E3           		EX	(SP),HL
 3989+1934 C9           		RET
 3990+1935
 3991+1935 DD 21 2D E3  l1935:		LD	IX,	$E32D
 3992+1939 CD 1B 18     		CALL	l181b
 3993+193C D0           		RET	NC
 3994+193D
 3995+193D 79           		LD	A,C
 3996+193E B7           		OR	A
 3997+193F 28 03        		JR	Z,l1944		; (+$03)
 3998+1941 21 00 00     		LD	HL,$0000
 3999+1944 ED 5B EB E3  l1944:		LD	DE,($E3EB		)
 4000+1948 22 EB E3     		LD	($E3EB		),HL
 4001+194B DD 21 2D E3  		LD	IX,	$E32D
 4002+194F DD 71 1D     		LD	(IX+$1D),C
 4003+1952 CD 86 1F     		CALL	l1f86
 4004+1955 30 0C        		JR	NC,l1963	; (+$0C)
 4005+1957 79           		LD	A,C
 4006+1958 B7           		OR	A
 4007+1959 37           		SCF
 4008+195A C4 4F 1F     		CALL	NZ,l1f4f
 4009+195D 38 04        		JR	C,l1963		; (+$04)
 4010+195F DD 36 1D 00  		LD	(IX+$1D),$00
 4011+1963 37           l1963:		SCF
 4012+1964 EB           		EX	DE,HL
 4013+1965 C9           		RET
 4014+1966
 4015+1966 32 2D E4     l1966:		LD	($E42D		),A
 4016+1969 C9           		RET
 4017+196A
 4018+196A 3E 0A        l196a:		LD	A,$0A
 4019+196C B7           		OR	A
 4020+196D C3 C4 22     		JP	l22c4
 4021+1970
 4022+1970 00 00 00...  		DS	12
 4023+197C
 4024+197C              ; Low-level read sector subroutine for drives A: & B:
 4025+197C
 4026+197C CD 0A 19     l197c:		CALL	l190a		; check if disk change required
 4027+197F C3 75 1C     		JP	l1c75		; DD_READ_SECTOR
 4028+1982
 4029+1982              ; Low-level write sector subroutine for drives A: & B:
 4030+1982
 4031+1982 CD 0A 19     l1982:		CALL	l190a		; check if disk change required
 4032+1985 C3 83 1C     		JP	x1c83		; DD_WRITE_SECTOR
 4033+1988
 4034+1988              ; Low-level login disk subroutine for drives A: & B:
 4035+1988
 4036+1988 CD 0A 19     l1988:		CALL	l190a		; check if disk change required
 4037+198B CD F6 1C     		CALL	l1cf6		; DD_LOGIN
 4038+198E D0           		RET	NC		; exit if error
 4039+198F DD 7E 0F     		LD	A,(IX+$0F)
 4040+1992 EE 02        		XOR	$02
 4041+1994 3E 06        		LD	A,$06		; "unrecognised disk format"
 4042+1996 C0           		RET	NZ		; error if sectorsize <> 512
 4043+1997 CB 1A        		RR	D
 4044+1999 CB 1B        		RR	E
 4045+199B 21 D2 FF     		LD	HL,$FFD2
 4046+199E 19           		ADD	HL,DE
 4047+199F 3F           		CCF
 4048+19A0 D0           		RET	NC		; error if alloc vector size/2 >$2D
 4049+19A1 DD 5E 0B     		LD	E,(IX+$0B)
 4050+19A4 DD 7E 0C     		LD	A,(IX+$0C)
 4051+19A7 E6 7F        		AND	$7F
 4052+19A9 57           		LD	D,A
 4053+19AA 21 BF FF     		LD	HL,$FFBF
 4054+19AD 19           		ADD	HL,DE
 4055+19AE 3F           		CCF
 4056+19AF D8           		RET	C		; success if chksum size <= $40
 4057+19B0 DD 36 0B 40  		LD	(IX+$0B),$40
 4058+19B4 DD 7E 0C     		LD	A,(IX+$0C)
 4059+19B7 E6 80        		AND	$80
 4060+19B9 F6 00        		OR	$00
 4061+19BB DD 77 0C     		LD	(IX+$0C),A	; else set chksum size to $40
 4062+19BE 37           		SCF
 4063+19BF C9           		RET
 4064+19C0
 4065+19C0 79           l19c0:		LD	A,C
 4066+19C1 32 D0 DF     		LD	(	$DFD0		),A
 4067+19C4 22 D1 DF     		LD	(	$DFD1		),HL
 4068+19C7 CD 21 05     		CALL	x0521
 4069+19CA D0           		RET	NC
 4070+19CB
 4071+19CB 19           		ADD	HL,DE
 4072+19CC E5           		PUSH	HL
 4073+19CD CD DD 19     		CALL	l19dd
 4074+19D0 E1           		POP	HL
 4075+19D1 D8           		RET	C
 4076+19D2
 4077+19D2 F5           		PUSH	AF
 4078+19D3 ED 5B D1 DF  		LD	DE,(	$DFD1		)
 4079+19D7 B7           		OR	A
 4080+19D8 ED 52        		SBC	HL,DE
 4081+19DA EB           		EX	DE,HL
 4082+19DB F1           		POP	AF
 4083+19DC C9           		RET
 4084+19DD
 4085+19DD C5           l19dd:		PUSH	BC
 4086+19DE D5           		PUSH	DE
 4087+19DF 21 23 00     		LD	HL,$0023
 4088+19E2 09           		ADD	HL,BC
 4089+19E3 5E           		LD	E,(HL)
 4090+19E4 23           		INC	HL
 4091+19E5 56           		LD	D,(HL)
 4092+19E6 23           		INC	HL
 4093+19E7 46           		LD	B,(HL)
 4094+19E8 23           		INC	HL
 4095+19E9 7B           		LD	A,E
 4096+19EA 37           		SCF
 4097+19EB 9E           		SBC	A,(HL)
 4098+19EC 5F           		LD	E,A
 4099+19ED 23           		INC	HL
 4100+19EE 7A           		LD	A,D
 4101+19EF 9E           		SBC	A,(HL)
 4102+19F0 57           		LD	D,A
 4103+19F1 23           		INC	HL
 4104+19F2 78           		LD	A,B
 4105+19F3 9E           		SBC	A,(HL)
 4106+19F4 EB           		EX	DE,HL
 4107+19F5 D1           		POP	DE
 4108+19F6 C1           		POP	BC
 4109+19F7 38 0D        		JR	C,l1a06		; (+$0D)
 4110+19F9 1B           		DEC	DE
 4111+19FA ED 52        		SBC	HL,DE
 4112+19FC 19           		ADD	HL,DE
 4113+19FD DE 00        		SBC	A,$00
 4114+19FF 30 09        		JR	NC,l1a0a	; (+$09)
 4115+1A01 EB           		EX	DE,HL
 4116+1A02 CD 0A 1A     		CALL	l1a0a
 4117+1A05 D0           		RET	NC
 4118+1A06
 4119+1A06 3E 19        l1a06:		LD	A,$19
 4120+1A08 B7           		OR	A
 4121+1A09 C9           		RET
 4122+1A0A
 4123+1A0A 13           l1a0a:		INC	DE
 4124+1A0B 7A           		LD	A,D
 4125+1A0C E6 FE        		AND	$FE
 4126+1A0E 28 55        		JR	Z,l1a65		; (+$55)
 4127+1A10 C5           		PUSH	BC
 4128+1A11 D5           		PUSH	DE
 4129+1A12 AF           		XOR	A
 4130+1A13 21 16 F5     		LD	HL,$F516
 4131+1A16 CD 86 38     		CALL	l3886
 4132+1A19 D1           		POP	DE
 4133+1A1A C1           		POP	BC
 4134+1A1B 30 48        		JR	NC,l1a65	; (+$48)
 4135+1A1D DD 21 18 F5  		LD	IX,$F518
 4136+1A21 D5           		PUSH	DE
 4137+1A22 21 26 00     		LD	HL,$0026
 4138+1A25 09           		ADD	HL,BC
 4139+1A26 7E           		LD	A,(HL)
 4140+1A27 83           		ADD	A,E
 4141+1A28 77           		LD	(HL),A
 4142+1A29 23           		INC	HL
 4143+1A2A 7E           		LD	A,(HL)
 4144+1A2B 8A           		ADC	A,D
 4145+1A2C 77           		LD	(HL),A
 4146+1A2D 23           		INC	HL
 4147+1A2E 7E           		LD	A,(HL)
 4148+1A2F CE 00        		ADC	A,$00
 4149+1A31 77           		LD	(HL),A
 4150+1A32 21 22 00     		LD	HL,$0022
 4151+1A35 09           		ADD	HL,BC
 4152+1A36 CB AE        		res	5,(HL)
 4153+1A38 DD 6E FE     		LD	L,(IX-$02)
 4154+1A3B DD 66 FF     		LD	H,(IX-$01)
 4155+1A3E CD 6D 27     		CALL	l276d
 4156+1A41 CD C2 27     		CALL	x27c2
 4157+1A44 2A D1 DF     		LD	HL,(	$DFD1		)
 4158+1A47 18 03        		JR	l1a4c		; (+$03)
 4159+1A49 CD 6D 27     l1a49:		CALL	l276d
 4160+1A4C 3A D0 DF     l1a4c:		LD	A,(	$DFD0		)
 4161+1A4F CD 1B 02     		CALL	l021b
 4162+1A52 E3           		EX	(SP),HL
 4163+1A53 A7           		AND	A
 4164+1A54 ED 52        		SBC	HL,DE
 4165+1A56 38 33        		JR	C,l1a8b		; (+$33)
 4166+1A58 E3           		EX	(SP),HL
 4167+1A59 CD B0 25     		CALL	l25b0
 4168+1A5C E3           		EX	(SP),HL
 4169+1A5D 7C           		LD	A,H
 4170+1A5E B5           		OR	L
 4171+1A5F E3           		EX	(SP),HL
 4172+1A60 20 E7        		JR	NZ,l1a49	; (-$19)
 4173+1A62 D1           		POP	DE
 4174+1A63 18 33        		JR	l1a98		; (+$33)
 4175+1A65 1B           l1a65:		DEC	DE
 4176+1A66 21 26 00     		LD	HL,$0026
 4177+1A69 09           		ADD	HL,BC
 4178+1A6A 7E           		LD	A,(HL)
 4179+1A6B E6 7F        		AND	$7F
 4180+1A6D 28 08        		JR	Z,l1a77		; (+$08)
 4181+1A6F CD D9 10     		CALL	l10d9
 4182+1A72 D0           		RET	NC
 4183+1A73
 4184+1A73 C8           		RET	Z
 4185+1A74
 4186+1A74 C3 0A 1A     		JP	l1a0a
 4187+1A77 21 81 FF     l1a77:		LD	HL,$FF81
 4188+1A7A 19           		ADD	HL,DE
 4189+1A7B 30 07        		JR	NC,l1a84	; (+$07)
 4190+1A7D CD F6 10     		CALL	l10f6
 4191+1A80 D0           		RET	NC
 4192+1A81
 4193+1A81 C8           		RET	Z
 4194+1A82
 4195+1A82 18 F3        		JR	l1a77		; (-$0D)
 4196+1A84 CD D9 10     l1a84:		CALL	l10d9
 4197+1A87 D0           		RET	NC
 4198+1A88
 4199+1A88 C8           		RET	Z
 4200+1A89
 4201+1A89 18 F9        		JR	l1a84		; (-$07)
 4202+1A8B 19           l1a8b:		ADD	HL,DE
 4203+1A8C EB           		EX	DE,HL
 4204+1A8D A7           		AND	A
 4205+1A8E ED 52        		SBC	HL,DE
 4206+1A90 E3           		EX	(SP),HL
 4207+1A91 CD B0 25     		CALL	l25b0
 4208+1A94 D1           		POP	DE
 4209+1A95 CD CE 27     		CALL	l27ce
 4210+1A98 22 D1 DF     l1a98:		LD	(	$DFD1		),HL
 4211+1A9B 37           		SCF
 4212+1A9C C9           		RET
 4213+1A9D
 4214+1A9D DD E5        l1a9d:		PUSH	IX
 4215+1A9F E5           		PUSH	HL
 4216+1AA0 D5           		PUSH	DE
 4217+1AA1 C5           		PUSH	BC
 4218+1AA2 CD E6 3E     		CALL	l3ee6
 4219+1AA5 DD 4E 1C     		LD	C,(IX+$1C)
 4220+1AA8 CD FF 02     		CALL	l02ff
 4221+1AAB C1           		POP	BC
 4222+1AAC D1           		POP	DE
 4223+1AAD E1           		POP	HL
 4224+1AAE DD E1        		POP	IX
 4225+1AB0 C9           		RET
 4226+1AB1
 4227+1AB1 3A F4 E3     l1ab1:		LD	A,($E3F4)
 4228+1AB4 67           		LD	H,A
 4229+1AB5 3A F1 E3     		LD	A,($E3F1)
 4230+1AB8 94           		SUB	H
 4231+1AB9 6F           		LD	L,A
 4232+1ABA C9           		RET
 4233+1ABB
 4234+1ABB DD 21 9A E3  l1abb:		LD	IX,	$E39A
 4235+1ABF DD 7E 1C     		LD	A,(IX+$1C)
 4236+1AC2 A7           		AND	A
 4237+1AC3 28 04        		JR	Z,l1ac9		; (+$04)
 4238+1AC5 CD 1B 18     		CALL	l181b
 4239+1AC8 D0           		RET	NC
 4240+1AC9
 4241+1AC9 E5           l1ac9:		PUSH	HL
 4242+1ACA 21 2D 1B     		LD	HL,l1b2d
 4243+1ACD 11 EF E3     		LD	DE,	$E3EF
 4244+1AD0 01 08 00     		LD	BC,$0008
 4245+1AD3 ED B0        		LDIR
 4246+1AD5 D1           		POP	DE
 4247+1AD6 7B           		LD	A,E
 4248+1AD7 FE 04        		CP	$04
 4249+1AD9 38 36        		JR	C,l1b11		; (+$36)
 4250+1ADB 82           		ADD	A,D
 4251+1ADC 32 F1 E3     		LD	($E3F1),A
 4252+1ADF 7A           		LD	A,D
 4253+1AE0 32 F4 E3     		LD	($E3F4),A
 4254+1AE3 7A           l1ae3:		LD	A,D
 4255+1AE4 D5           		PUSH	DE
 4256+1AE5 CD 33 02     		CALL	l0233
 4257+1AE8 CD 1B 02     		CALL	l021b
 4258+1AEB 54           		LD	D,H
 4259+1AEC 5D           		LD	E,L
 4260+1AED 13           		INC	DE
 4261+1AEE 36 E5        		LD	(HL),$E5
 4262+1AF0 01 FF 01     		LD	BC,$01FF
 4263+1AF3 ED B0        		LDIR
 4264+1AF5 CD 1B 02     		CALL	l021b
 4265+1AF8 D1           		POP	DE
 4266+1AF9 14           		INC	D
 4267+1AFA 1D           		DEC	E
 4268+1AFB 20 E6        		JR	NZ,l1ae3	; (-$1A)
 4269+1AFD DD 21 9A E3  		LD	IX,	$E39A
 4270+1B01 21 EF E3     		LD	HL,	$E3EF
 4271+1B04 CD A6 1D     		CALL	l1da6
 4272+1B07 DD 36 0B 00  		LD	(IX+$0B),$00
 4273+1B0B DD 36 0C 80  		LD	(IX+$0C),$80
 4274+1B0F 37           		SCF
 4275+1B10 C9           		RET
 4276+1B11
 4277+1B11 DD 7E 1C     l1b11:		LD	A,(IX+$1C)
 4278+1B14 DD 36 1C 00  		LD	(IX+$1C),$00
 4279+1B18 CD FF 04     		CALL	l04ff
 4280+1B1B D6 41        		SUB	$41
 4281+1B1D D8           		RET	C
 4282+1B1E
 4283+1B1E 5F           		LD	E,A
 4284+1B1F 16 00        		LD	D,$00
 4285+1B21 21 A0 E2     		LD	HL,$E2A0
 4286+1B24 19           		ADD	HL,DE
 4287+1B25 19           		ADD	HL,DE
 4288+1B26 36 00        		LD	(HL),$00
 4289+1B28 23           		INC	HL
 4290+1B29 36 00        		LD	(HL),$00
 4291+1B2B 37           		SCF
 4292+1B2C C9           		RET
 4293+1B2D
 4294+1B2D 00 00 00 01  l1b2d:		DB	$00,$00,$00,$01
 4295+1B31 02 00 03 00  		DB	$02,$00,$03,$00
 4296+1B35
 4297+1B35 D5           l1b35:		PUSH	DE
 4298+1B36 CD B6 18     		CALL	l18b6
 4299+1B39 7B           		LD	A,E
 4300+1B3A B7           		OR	A
 4301+1B3B 20 0B        		JR	NZ,x1b48	; (+$0B)
 4302+1B3D 7A           		LD	A,D
 4303+1B3E 21 F1 E3     		LD	HL,$E3F1
 4304+1B41 BE           		CP	(HL)
 4305+1B42 30 04        		JR	NC,x1b48	; (+$04)
 4306+1B44 CD 33 02     		CALL	l0233
 4307+1B47 37           		SCF
 4308+1B48 D1           x1b48:		POP	DE
 4309+1B49 D8           		RET	C
 4310+1B4A
 4311+1B4A 3E 02        		LD	A,$02
 4312+1B4C C9           		RET
 4313+1B4D
 4314+1B4D 3E 41        l1b4d:		LD	A,$41
 4315+1B4F CD EF 17     		CALL	l17ef
 4316+1B52 DC 1B 18     		CALL	C,l181b
 4317+1B55 11 00 00     		LD	DE,$0000
 4318+1B58 DC 60 15     		CALL	C,l1560
 4319+1B5B D0           		RET	NC
 4320+1B5C
 4321+1B5C 4F           		LD	C,A
 4322+1B5D E5           		PUSH	HL
 4323+1B5E CD 1B 02     		CALL	l021b
 4324+1B61 F5           		PUSH	AF
 4325+1B62 AF           		XOR	A
 4326+1B63 47           		LD	B,A
 4327+1B64 1E 02        		LD	E,$02
 4328+1B66 86           l1b66:		ADD	A,(HL)
 4329+1B67 23           		INC	HL
 4330+1B68 10 FC        		DJNZ	l1b66		; (-$04)
 4331+1B6A 1D           		DEC	E
 4332+1B6B 20 F9        		JR	NZ,l1b66	; (-$07)
 4333+1B6D 5F           		LD	E,A
 4334+1B6E F1           		POP	AF
 4335+1B6F CD 1B 02     		CALL	l021b
 4336+1B72 E1           		POP	HL
 4337+1B73 7B           		LD	A,E
 4338+1B74 EE 03        		XOR	$03
 4339+1B76 3E 23        		LD	A,$23
 4340+1B78 C0           		RET	NZ
 4341+1B79
 4342+1B79 F3           		DI
 4343+1B7A 06 03        		LD	B,$03
 4344+1B7C 11 00 FE     		LD	DE,$FE00
 4345+1B7F DD 21 00 02  		LD	IX,$0200
 4346+1B83 CD 45 02     		CALL	l0245
 4347+1B86 3E 03        		LD	A,$03
 4348+1B88 CD 1B 02     		CALL	l021b
 4349+1B8B 21 A1 1B     		LD	HL,$1BA1
 4350+1B8E 11 FB FD     		LD	DE,$FDFB
 4351+1B91 01 05 00     		LD	BC,$0005
 4352+1B94 ED B0        		LDIR
 4353+1B96 01 FD 1F     		LD	BC,PBANK678
 4354+1B99 3E 07        		LD	A,$07
 4355+1B9B 31 00 FE     		LD	SP,$FE00
 4356+1B9E C3 FB FD     		JP	$FDFB
 4357+1BA1 ED 79        		OUT	(C),A
 4358+1BA3 C3 10 FE     		JP	$FE10
 4359+1BA6 DD 7E 19     l1ba6:		LD	A,(IX+$19)
 4360+1BA9 E6 40        		AND	$40
 4361+1BAB F6 0D        		OR	$0D
 4362+1BAD CD 12 1C     		CALL	x1c12
 4363+1BB0 DD 6E 0F     		LD	L,(IX+$0F)
 4364+1BB3 DD 66 13     		LD	H,(IX+$13)
 4365+1BB6 22 08 E4     		LD	($E408),HL
 4366+1BB9 63           		LD	H,E
 4367+1BBA DD 6E 18     		LD	L,(IX+$18)
 4368+1BBD 22 0A E4     		LD	($E40A),HL
 4369+1BC0 3E 06        		LD	A,$06
 4370+1BC2 32 05 E4     		LD	($E405),A
 4371+1BC5 C9           		RET
 4372+1BC6
 4373+1BC6 DD 7E 19     l1bc6:		LD	A,(IX+$19)
 4374+1BC9 F6 11        		OR	$11
 4375+1BCB CD DF 1B     		CALL	l1bdf
 4376+1BCE 36 01        		LD	(HL),$01
 4377+1BD0 C9           		RET
 4378+1BD1
 4379+1BD1 DD 7E 19     l1bd1:		LD	A,(IX+$19)
 4380+1BD4 F6 06        		OR	$06
 4381+1BD6 18 07        		JR	l1bdf		; (+$07)
 4382+1BD8 DD 7E 19     l1bd8:		LD	A,(IX+$19)
 4383+1BDB E6 C0        		AND	$C0
 4384+1BDD F6 05        		OR	$05
 4385+1BDF CD 12 1C     l1bdf:		CALL	x1c12
 4386+1BE2 7B           		LD	A,E
 4387+1BE3 DD 86 14     		ADD	A,(IX+$14)
 4388+1BE6 5F           		LD	E,A
 4389+1BE7 D5           		PUSH	DE
 4390+1BE8 2A 19 E4     		LD	HL,($E419		)
 4391+1BEB 7C           		LD	A,H
 4392+1BEC B5           		OR	L
 4393+1BED C4 09 19     		CALL	NZ,l1909
 4394+1BF0 7B           		LD	A,E
 4395+1BF1 32 0A E4     		LD	($E40A),A
 4396+1BF4 DD 6E 0F     		LD	L,(IX+$0F)
 4397+1BF7 63           		LD	H,E
 4398+1BF8 22 0B E4     		LD	($E40B),HL
 4399+1BFB DD 7E 17     		LD	A,(IX+$17)
 4400+1BFE 32 0D E4     		LD	($E40D),A
 4401+1C01 60           		LD	H,B
 4402+1C02 6A           		LD	L,D
 4403+1C03 22 08 E4     		LD	($E408),HL
 4404+1C06 3E 09        		LD	A,$09
 4405+1C08 32 05 E4     		LD	($E405),A
 4406+1C0B 21 0E E4     		LD	HL,$E40E
 4407+1C0E 36 FF        		LD	(HL),$FF
 4408+1C10 D1           		POP	DE
 4409+1C11 C9           		RET
 4410+1C12
 4411+1C12 22 01 E4     x1c12:		LD	($E401),HL
 4412+1C15 6F           		LD	L,A
 4413+1C16 78           		LD	A,B
 4414+1C17 32 00 E4     		LD	($E400		),A
 4415+1C1A CD 2B 1C     		CALL	l1c2b
 4416+1C1D 61           		LD	H,C
 4417+1C1E 22 06 E4     		LD	($E406),HL
 4418+1C21 DD 6E 15     		LD	L,(IX+$15)
 4419+1C24 DD 66 16     		LD	H,(IX+$16)
 4420+1C27 22 03 E4     		LD	($E403),HL
 4421+1C2A C9           		RET
 4422+1C2B
 4423+1C2B DD 7E 11     l1c2b:		LD	A,(IX+$11)
 4424+1C2E E6 7F        		AND	$7F
 4425+1C30 06 00        		LD	B,$00
 4426+1C32 C8           		RET	Z
 4427+1C33
 4428+1C33 3D           		DEC	A
 4429+1C34 20 08        		JR	NZ,x1c3e	; (+$08)
 4430+1C36 7A           		LD	A,D
 4431+1C37 1F           		RRA
 4432+1C38 57           		LD	D,A
 4433+1C39 78           		LD	A,B
 4434+1C3A 17           		RLA
 4435+1C3B 47           		LD	B,A
 4436+1C3C 18 0C        		JR	l1c4a		; (+$0C)
 4437+1C3E 7A           x1c3e:		LD	A,D
 4438+1C3F DD 96 12     		SUB	(IX+$12)
 4439+1C42 38 06        		JR	C,l1c4a		; (+$06)
 4440+1C44 DD 96 12     		SUB	(IX+$12)
 4441+1C47 2F           		CPL
 4442+1C48 57           		LD	D,A
 4443+1C49 04           		INC	B
 4444+1C4A 78           l1c4a:		LD	A,B
 4445+1C4B 87           		ADD	A,A
 4446+1C4C 87           		ADD	A,A
 4447+1C4D B1           		OR	C
 4448+1C4E 4F           		LD	C,A
 4449+1C4F C9           		RET
 4450+1C50
 4451+1C50 B7           l1c50:		OR	A
 4452+1C51 20 03        		JR	NZ,l1c56	; (+$03)
 4453+1C53 21 00 00     		LD	HL,$0000
 4454+1C56 ED 5B 19 E4  l1c56:		LD	DE,($E419		)
 4455+1C5A 22 19 E4     		LD	($E419		),HL
 4456+1C5D EB           		EX	DE,HL
 4457+1C5E C9           		RET
 4458+1C5F
 4459+1C5F F5           l1c5f:		PUSH	AF
 4460+1C60 CD D1 1B     		CALL	l1bd1
 4461+1C63 F1           		POP	AF
 4462+1C64 6F           		LD	L,A
 4463+1C65 26 00        		LD	H,$00
 4464+1C67 22 03 E4     		LD	($E403),HL
 4465+1C6A 21 6F 1C     		LD	HL,$1C6F
 4466+1C6D 18 56        		JR	l1cc5		; (+$56)
 4467+1C6F 21 00 E4     		LD	HL,$E400
 4468+1C72 C3 19 21     		JP	l2119
 4469+1C75 CD D1 1B     l1c75:		CALL	l1bd1
 4470+1C78 21 7D 1C     		LD	HL,$1C7D
 4471+1C7B 18 48        		JR	l1cc5		; (+$48)
 4472+1C7D 21 00 E4     		LD	HL,$E400
 4473+1C80 C3 F5 3E     		JP	l3ef5
 4474+1C83 CD DB 1E     x1c83:		CALL	l1edb
 4475+1C86 D0           		RET	NC
 4476+1C87
 4477+1C87 CD D8 1B     		CALL	l1bd8
 4478+1C8A 18 15        		JR	l1ca1		; (+$15)
 4479+1C8C CD C6 1B     x1c8c:		CALL	l1bc6
 4480+1C8F CD A1 1C     		CALL	l1ca1
 4481+1C92 D0           		RET	NC
 4482+1C93
 4483+1C93 3A 33 E4     		LD	A,($E433)
 4484+1C96 FE 08        		CP	$08
 4485+1C98 37           		SCF
 4486+1C99 C9           		RET
 4487+1C9A
 4488+1C9A CD DB 1E     l1c9a:		CALL	l1edb
 4489+1C9D D0           		RET	NC
 4490+1C9E
 4491+1C9E CD A6 1B     		CALL	l1ba6
 4492+1CA1 21 A6 1C     l1ca1:		LD	HL,$1CA6
 4493+1CA4 18 1F        		JR	l1cc5		; (+$1F)
 4494+1CA6 21 00 E4     		LD	HL,$E400
 4495+1CA9 C3 22 21     		JP	l2122
 4496+1CAC CD B7 1C     l1cac:		CALL	l1cb7
 4497+1CAF 21 30 E4     		LD	HL,	$E430
 4498+1CB2 D0           		RET	NC
 4499+1CB3
 4500+1CB3 3A 36 E4     		LD	A,($E436)
 4501+1CB6 C9           		RET
 4502+1CB7
 4503+1CB7 CD 2B 1C     l1cb7:		CALL	l1c2b
 4504+1CBA 21 BF 1C     		LD	HL,$1CBF
 4505+1CBD 18 06        		JR	l1cc5		; (+$06)
 4506+1CBF DD 7E 19     		LD	A,(IX+$19)
 4507+1CC2 C3 59 21     		JP	l2159
 4508+1CC5
 4509+1CC5              ; Routine to turn on motor, try an operation in HL on track D multiple
 4510+1CC5              ; times & then start the motor off timeout
 4511+1CC5
 4512+1CC5 CD 81 21     l1cc5:		CALL	l2181		; turn on motor
 4513+1CC8 CD F2 1E     		CALL	l1ef2		; try the operation multiple times
 4514+1CCB C3 A6 21     		JP	l21a6		; start motor off timeout & exit
 4515+1CCE
 4516+1CCE              ; Tables of specifications for disk types 0-3
 4517+1CCE              ; Format as on p215 of +3 Manual
 4518+1CCE
 4519+1CCE              ; Type 0 - Spectrum +3 format
 4520+1CCE
 4521+1CCE 00 00 28 09  l1cce:		DB	$00,$00,$28,$09
 4522+1CD2 02 01 03 02  		DB	$02,$01,$03,$02
 4523+1CD6 2A 52        		DB	$2A,$52
 4524+1CD8
 4525+1CD8              ; Type 1 - CPC system format
 4526+1CD8
 4527+1CD8 01 00 28 09  		DB	$01,$00,$28,$09
 4528+1CDC 02 02 03 02  		DB	$02,$02,$03,$02
 4529+1CE0 2A 52        		DB	$2A,$52
 4530+1CE2
 4531+1CE2              ; Type 2 - CPC data format
 4532+1CE2
 4533+1CE2 02 00 28 09  		DB	$02,$00,$28,$09
 4534+1CE6 02 00 03 02  		DB	$02,$00,$03,$02
 4535+1CEA 2A 52        		DB	$2A,$52
 4536+1CEC
 4537+1CEC              ; Type 3 - PCW format
 4538+1CEC
 4539+1CEC 03 81 50 09  		DB	$03,$81,$50,$09
 4540+1CF0 02 01 04 04  		DB	$02,$01,$04,$04
 4541+1CF4 2A 52        		DB	$2A,$52
 4542+1CF6
 4543+1CF6 AF           l1cf6:		XOR	A
 4544+1CF7 CD 51 1D     		CALL	l1d51
 4545+1CFA 16 00        		LD	D,$00
 4546+1CFC C5           		PUSH	BC
 4547+1CFD DC AC 1C     		CALL	C,l1cac
 4548+1D00 C1           		POP	BC
 4549+1D01 D0           		RET	NC
 4550+1D02
 4551+1D02 E6 C0        		AND	$C0
 4552+1D04 1E 01        		LD	E,$01
 4553+1D06 FE 40        		CP	$40
 4554+1D08 28 05        		JR	Z,l1d0f		; (+$05)
 4555+1D0A 1C           		INC	E
 4556+1D0B FE C0        		CP	$C0
 4557+1D0D 20 06        		JR	NZ,l1d15	; (+$06)
 4558+1D0F 7B           l1d0f:		LD	A,E
 4559+1D10 CD 51 1D     		CALL	l1d51
 4560+1D13 18 34        		JR	x1d49		; (+$34)
 4561+1D15 C5           l1d15:		PUSH	BC
 4562+1D16 21 0F E4     		LD	HL,$E40F
 4563+1D19 11 00 00     		LD	DE,$0000
 4564+1D1C 06 07        		LD	B,$07
 4565+1D1E 3E 0A        		LD	A,$0A
 4566+1D20 E5           		PUSH	HL
 4567+1D21 CD 5F 1C     		CALL	l1c5f
 4568+1D24 E1           		POP	HL
 4569+1D25 C1           		POP	BC
 4570+1D26 38 08        		JR	C,l1d30		; (+$08)
 4571+1D28 FE 08        		CP	$08
 4572+1D2A 37           		SCF
 4573+1D2B 3F           		CCF
 4574+1D2C C0           		RET	NZ
 4575+1D2D
 4576+1D2D 3E 06        		LD	A,$06
 4577+1D2F C9           		RET
 4578+1D30
 4579+1D30 C5           l1d30:		PUSH	BC
 4580+1D31 54           		LD	D,H
 4581+1D32 5D           		LD	E,L
 4582+1D33 4E           		LD	C,(HL)
 4583+1D34 06 0A        		LD	B,$0A
 4584+1D36 1A           l1d36:		LD	A,(DE)
 4585+1D37 13           		INC	DE
 4586+1D38 B9           		CP	C
 4587+1D39 20 05        		JR	NZ,l1d40	; (+$05)
 4588+1D3B 10 F9        		DJNZ	l1d36		; (-$07)
 4589+1D3D 21 CE 1C     		LD	HL,l1cce
 4590+1D40 C1           l1d40:		POP	BC
 4591+1D41 7E           		LD	A,(HL)
 4592+1D42 FE 04        		CP	$04
 4593+1D44 3E 06        		LD	A,$06
 4594+1D46 DC 64 1D     		CALL	C,l1d64
 4595+1D49 E5           x1d49:		PUSH	HL
 4596+1D4A C5           		PUSH	BC
 4597+1D4B DC 64 1E     		CALL	C,l1e64
 4598+1D4E C1           		POP	BC
 4599+1D4F E1           		POP	HL
 4600+1D50 C9           		RET
 4601+1D51
 4602+1D51 5F           l1d51:		LD	E,A
 4603+1D52 FE 04        		CP	$04
 4604+1D54 3E 06        		LD	A,$06
 4605+1D56 D0           		RET	NC
 4606+1D57
 4607+1D57 7B           		LD	A,E
 4608+1D58 87           		ADD	A,A
 4609+1D59 5F           		LD	E,A
 4610+1D5A 87           		ADD	A,A
 4611+1D5B 87           		ADD	A,A
 4612+1D5C 83           		ADD	A,E
 4613+1D5D CE CE        		ADC	A,l1cce AND $FF
 4614+1D5F 6F           		LD	L,A
 4615+1D60 CE 1C        		ADC	A,l1cce/$100
 4616+1D62 95           		SUB	L
 4617+1D63 67           		LD	H,A
 4618+1D64 E5           l1d64:		PUSH	HL
 4619+1D65 C5           		PUSH	BC
 4620+1D66 7E           		LD	A,(HL)
 4621+1D67 06 41        		LD	B,$41
 4622+1D69 3D           		DEC	A
 4623+1D6A 28 07        		JR	Z,l1d73		; (+$07)
 4624+1D6C 06 C1        		LD	B,$C1
 4625+1D6E 3D           		DEC	A
 4626+1D6F 28 02        		JR	Z,l1d73		; (+$02)
 4627+1D71 06 01        		LD	B,$01
 4628+1D73 DD 70 14     l1d73:		LD	(IX+$14),B
 4629+1D76 23           		INC	HL
 4630+1D77 7E           		LD	A,(HL)
 4631+1D78 DD 77 11     		LD	(IX+$11),A
 4632+1D7B 23           		INC	HL
 4633+1D7C 7E           		LD	A,(HL)
 4634+1D7D DD 77 12     		LD	(IX+$12),A
 4635+1D80 23           		INC	HL
 4636+1D81 7E           		LD	A,(HL)
 4637+1D82 DD 77 13     		LD	(IX+$13),A
 4638+1D85 23           		INC	HL
 4639+1D86 46           		LD	B,(HL)
 4640+1D87 23           		INC	HL
 4641+1D88 23           		INC	HL
 4642+1D89 23           		INC	HL
 4643+1D8A 23           		INC	HL
 4644+1D8B 7E           		LD	A,(HL)
 4645+1D8C DD 77 17     		LD	(IX+$17),A
 4646+1D8F 23           		INC	HL
 4647+1D90 7E           		LD	A,(HL)
 4648+1D91 DD 77 18     		LD	(IX+$18),A
 4649+1D94 21 80 00     		LD	HL,$0080
 4650+1D97 CD 6E 1F     		CALL	l1f6e
 4651+1D9A DD 75 15     		LD	(IX+$15),L
 4652+1D9D DD 74 16     		LD	(IX+$16),H
 4653+1DA0 DD 36 19 60  		LD	(IX+$19),$60
 4654+1DA4 C1           		POP	BC
 4655+1DA5 E1           		POP	HL
 4656+1DA6 C5           l1da6:		PUSH	BC
 4657+1DA7 E5           		PUSH	HL
 4658+1DA8 EB           		EX	DE,HL
 4659+1DA9 21 04 00     		LD	HL,$0004
 4660+1DAC 19           		ADD	HL,DE
 4661+1DAD 7E           		LD	A,(HL)
 4662+1DAE DD 77 0F     		LD	(IX+$0F),A
 4663+1DB1 F5           		PUSH	AF
 4664+1DB2 CD 64 1F     		CALL	l1f64
 4665+1DB5 DD 77 10     		LD	(IX+$10),A
 4666+1DB8 2B           		DEC	HL
 4667+1DB9 6E           		LD	L,(HL)
 4668+1DBA 26 00        		LD	H,$00
 4669+1DBC C1           		POP	BC
 4670+1DBD CD 6E 1F     		CALL	l1f6e
 4671+1DC0 DD 75 00     		LD	(IX+$00),L
 4672+1DC3 DD 74 01     		LD	(IX+$01),H
 4673+1DC6 21 06 00     		LD	HL,$0006
 4674+1DC9 19           		ADD	HL,DE
 4675+1DCA 7E           		LD	A,(HL)
 4676+1DCB DD 77 02     		LD	(IX+$02),A
 4677+1DCE 4F           		LD	C,A
 4678+1DCF E5           		PUSH	HL
 4679+1DD0 CD 64 1F     		CALL	l1f64
 4680+1DD3 DD 77 03     		LD	(IX+$03),A
 4681+1DD6 2B           		DEC	HL
 4682+1DD7 5E           		LD	E,(HL)
 4683+1DD8 DD 73 0D     		LD	(IX+$0D),E
 4684+1DDB DD 36 0E 00  		LD	(IX+$0E),$00
 4685+1DDF 2B           		DEC	HL
 4686+1DE0 2B           		DEC	HL
 4687+1DE1 46           		LD	B,(HL)
 4688+1DE2 2B           		DEC	HL
 4689+1DE3 56           		LD	D,(HL)
 4690+1DE4 2B           		DEC	HL
 4691+1DE5 7E           		LD	A,(HL)
 4692+1DE6 6A           		LD	L,D
 4693+1DE7 26 00        		LD	H,$00
 4694+1DE9 54           		LD	D,H
 4695+1DEA E6 7F        		AND	$7F
 4696+1DEC 28 01        		JR	Z,l1def		; (+$01)
 4697+1DEE 29           		ADD	HL,HL
 4698+1DEF ED 52        l1def:		SBC	HL,DE
 4699+1DF1 EB           		EX	DE,HL
 4700+1DF2 21 00 00     		LD	HL,$0000
 4701+1DF5 19           l1df5:		ADD	HL,DE
 4702+1DF6 10 FD        		DJNZ	l1df5		; (-$03)
 4703+1DF8 79           		LD	A,C
 4704+1DF9 DD 96 0F     		SUB	(IX+$0F)
 4705+1DFC 47           		LD	B,A
 4706+1DFD CD 75 1F     		CALL	l1f75
 4707+1E00 2B           		DEC	HL
 4708+1E01 DD 75 05     		LD	(IX+$05),L
 4709+1E04 DD 74 06     		LD	(IX+$06),H
 4710+1E07 06 03        		LD	B,$03
 4711+1E09 7C           		LD	A,H
 4712+1E0A B7           		OR	A
 4713+1E0B 28 01        		JR	Z,l1e0e		; (+$01)
 4714+1E0D 04           		INC	B
 4715+1E0E 79           l1e0e:		LD	A,C
 4716+1E0F 90           		SUB	B
 4717+1E10 CD 64 1F     		CALL	l1f64
 4718+1E13 DD 77 04     		LD	(IX+$04),A
 4719+1E16 D1           		POP	DE
 4720+1E17 E5           		PUSH	HL
 4721+1E18 06 02        		LD	B,$02
 4722+1E1A CD 75 1F     		CALL	l1f75
 4723+1E1D 23           		INC	HL
 4724+1E1E 23           		INC	HL
 4725+1E1F E3           		EX	(SP),HL
 4726+1E20 13           		INC	DE
 4727+1E21 1A           		LD	A,(DE)
 4728+1E22 B7           		OR	A
 4729+1E23 20 08        		JR	NZ,l1e2d	; (+$08)
 4730+1E25 29           		ADD	HL,HL
 4731+1E26 7C           		LD	A,H
 4732+1E27 3C           		INC	A
 4733+1E28 FE 02        		CP	$02
 4734+1E2A 30 01        		JR	NC,l1e2d	; (+$01)
 4735+1E2C 3C           		INC	A
 4736+1E2D 47           l1e2d:		LD	B,A
 4737+1E2E 21 00 00     		LD	HL,$0000
 4738+1E31 37           l1e31:		SCF
 4739+1E32 CB 1C        		RR	H
 4740+1E34 CB 1D        		RR	L
 4741+1E36 10 F9        		DJNZ	l1e31		; (-$07)
 4742+1E38 DD 74 09     		LD	(IX+$09),H
 4743+1E3B DD 75 0A     		LD	(IX+$0A),L
 4744+1E3E 26 00        		LD	H,$00
 4745+1E40 6F           		LD	L,A
 4746+1E41 41           		LD	B,C
 4747+1E42 04           		INC	B
 4748+1E43 04           		INC	B
 4749+1E44 CD 6E 1F     		CALL	l1f6e
 4750+1E47 E5           		PUSH	HL
 4751+1E48 2B           		DEC	HL
 4752+1E49 DD 75 07     		LD	(IX+$07),L
 4753+1E4C DD 74 08     		LD	(IX+$08),H
 4754+1E4F 06 02        		LD	B,$02
 4755+1E51 CD 75 1F     		CALL	l1f75
 4756+1E54 23           		INC	HL
 4757+1E55 DD 75 0B     		LD	(IX+$0B),L
 4758+1E58 DD 74 0C     		LD	(IX+$0C),H
 4759+1E5B E1           		POP	HL
 4760+1E5C 29           		ADD	HL,HL
 4761+1E5D 29           		ADD	HL,HL
 4762+1E5E D1           		POP	DE
 4763+1E5F C1           		POP	BC
 4764+1E60 0A           		LD	A,(BC)
 4765+1E61 37           		SCF
 4766+1E62 C1           		POP	BC
 4767+1E63 C9           		RET
 4768+1E64
 4769+1E64 47           l1e64:		LD	B,A
 4770+1E65 D5           		PUSH	DE
 4771+1E66 C5           		PUSH	BC
 4772+1E67 CD 86 1E     		CALL	l1e86
 4773+1E6A C1           		POP	BC
 4774+1E6B D1           		POP	DE
 4775+1E6C D0           		RET	NC
 4776+1E6D
 4777+1E6D DD 7E 11     		LD	A,(IX+$11)
 4778+1E70 E6 03        		AND	$03
 4779+1E72 28 04        		JR	Z,l1e78		; (+$04)
 4780+1E74 CB 4E        		BIT	1,(HL)
 4781+1E76 28 0A        		JR	Z,l1e82		; (+$0A)
 4782+1E78 78           l1e78:		LD	A,B
 4783+1E79 37           		SCF
 4784+1E7A DD CB 11 7E  		BIT	7,(IX+$11)
 4785+1E7E C8           		RET	Z
 4786+1E7F
 4787+1E7F CB 5E        		BIT	3,(HL)
 4788+1E81 C0           		RET	NZ
 4789+1E82
 4790+1E82 3E 09        l1e82:		LD	A,$09
 4791+1E84 B7           		OR	A
 4792+1E85 C9           		RET
 4793+1E86
 4794+1E86 CD C9 1F     l1e86:		CALL	l1fc9
 4795+1E89 7E           		LD	A,(HL)
 4796+1E8A E6 0C        		AND	$0C
 4797+1E8C 28 0C        		JR	Z,l1e9a		; (+$0C)
 4798+1E8E 7E           		LD	A,(HL)
 4799+1E8F E6 03        		AND	$03
 4800+1E91 37           		SCF
 4801+1E92 C0           		RET	NZ
 4802+1E93
 4803+1E93 DD 7E 11     		LD	A,(IX+$11)
 4804+1E96 E6 03        		AND	$03
 4805+1E98 37           		SCF
 4806+1E99 C8           		RET	Z
 4807+1E9A
 4808+1E9A DD 7E 11     l1e9a:		LD	A,(IX+$11)
 4809+1E9D E6 03        		AND	$03
 4810+1E9F 16 02        		LD	D,$02
 4811+1EA1 28 0C        		JR	Z,l1eaf		; (+$0C)
 4812+1EA3 3D           		DEC	A
 4813+1EA4 16 05        		LD	D,$05
 4814+1EA6 28 07        		JR	Z,l1eaf		; (+$07)
 4815+1EA8 DD 7E 12     		LD	A,(IX+$12)
 4816+1EAB 87           		ADD	A,A
 4817+1EAC D6 03        		SUB	$03
 4818+1EAE 57           		LD	D,A
 4819+1EAF E5           l1eaf:		PUSH	HL
 4820+1EB0 CD AC 1C     		CALL	l1cac
 4821+1EB3 E1           		POP	HL
 4822+1EB4 D0           		RET	NC
 4823+1EB5
 4824+1EB5 ED 5B 34 E4  		LD	DE,($E434)
 4825+1EB9 DD 7E 11     		LD	A,(IX+$11)
 4826+1EBC E6 03        		AND	$03
 4827+1EBE 28 09        		JR	Z,l1ec9		; (+$09)
 4828+1EC0 15           		DEC	D
 4829+1EC1 28 04        		JR	Z,l1ec7		; (+$04)
 4830+1EC3 CB C6        		SET	0,(HL)
 4831+1EC5 18 02        		JR	l1ec9		; (+$02)
 4832+1EC7 CB CE        l1ec7:		SET	1,(HL)
 4833+1EC9 DD 7E 11     l1ec9:		LD	A,(IX+$11)
 4834+1ECC 1D           		DEC	E
 4835+1ECD 1D           		DEC	E
 4836+1ECE 28 01        		JR	Z,l1ed1		; (+$01)
 4837+1ED0 2F           		CPL
 4838+1ED1 17           l1ed1:		RLA
 4839+1ED2 30 03        		JR	NC,l1ed7	; (+$03)
 4840+1ED4 CB DE        		SET	3,(HL)
 4841+1ED6 C9           		RET
 4842+1ED7
 4843+1ED7 CB D6        l1ed7:		SET	2,(HL)
 4844+1ED9 37           		SCF
 4845+1EDA C9           		RET
 4846+1EDB
 4847+1EDB E5           l1edb:		PUSH	HL
 4848+1EDC CD C9 1F     		CALL	l1fc9
 4849+1EDF CB 5E        		BIT	3,(HL)
 4850+1EE1 E1           		POP	HL
 4851+1EE2 37           		SCF
 4852+1EE3 C8           		RET	Z
 4853+1EE4
 4854+1EE4 DD 7E 11     		LD	A,(IX+$11)
 4855+1EE7 17           		RLA
 4856+1EE8 3E 09        		LD	A,$09
 4857+1EEA C9           		RET
 4858+1EEB
 4859+1EEB CD C9 1F     l1eeb:		CALL	l1fc9
 4860+1EEE 7E           		LD	A,(HL)
 4861+1EEF E6 0F        		AND	$0F
 4862+1EF1 C9           		RET
 4863+1EF2
 4864+1EF2 3A 2D E4     l1ef2:		LD	A,($E42D		)
 4865+1EF5 47           		LD	B,A
 4866+1EF6 C5           l1ef6:		PUSH	BC
 4867+1EF7 CD 22 1F     		CALL	x1f22
 4868+1EFA C1           		POP	BC
 4869+1EFB C8           		RET	Z
 4870+1EFC
 4871+1EFC FE 04        		CP	$04
 4872+1EFE 20 1E        		JR	NZ,l1f1e	; (+$1E)
 4873+1F00 E5           		PUSH	HL
 4874+1F01 D5           		PUSH	DE
 4875+1F02 C5           		PUSH	BC
 4876+1F03 DD 7E 19     		LD	A,(IX+$19)
 4877+1F06 CD 59 21     		CALL	l2159
 4878+1F09 CD A9 20     		CALL	l20a9
 4879+1F0C C1           		POP	BC
 4880+1F0D D1           		POP	DE
 4881+1F0E E1           		POP	HL
 4882+1F0F 20 0D        		JR	NZ,l1f1e	; (+$0D)
 4883+1F11 D0           		RET	NC
 4884+1F12
 4885+1F12 3A 36 E4     		LD	A,($E436)
 4886+1F15 DD AE 14     		XOR	(IX+$14)
 4887+1F18 E6 C0        		AND	$C0
 4888+1F1A 3E 08        		LD	A,$08
 4889+1F1C C0           		RET	NZ
 4890+1F1D
 4891+1F1D 1F           		RRA
 4892+1F1E 10 D6        l1f1e:		DJNZ	l1ef6		; (-$2A)
 4893+1F20 B7           		OR	A
 4894+1F21 C9           		RET
 4895+1F22
 4896+1F22 78           x1f22:		LD	A,B
 4897+1F23 E6 07        		AND	$07
 4898+1F25 28 0D        		JR	Z,l1f34		; (+$0D)
 4899+1F27 E6 03        		AND	$03
 4900+1F29 20 13        		JR	NZ,l1f3e	; (+$13)
 4901+1F2B E5           		PUSH	HL
 4902+1F2C CD C9 1F     		CALL	l1fc9
 4903+1F2F CB B6        		res	6,(HL)
 4904+1F31 E1           		POP	HL
 4905+1F32 18 0A        		JR	l1f3e		; (+$0A)
 4906+1F34 D5           l1f34:		PUSH	DE
 4907+1F35 DD 56 12     		LD	D,(IX+$12)
 4908+1F38 15           		DEC	D
 4909+1F39 CD D5 1F     		CALL	l1fd5
 4910+1F3C D1           		POP	DE
 4911+1F3D D0           		RET	NC
 4912+1F3E
 4913+1F3E CD D5 1F     l1f3e:		CALL	l1fd5
 4914+1F41 D0           		RET	NC
 4915+1F42
 4916+1F42 E5           		PUSH	HL
 4917+1F43 D5           		PUSH	DE
 4918+1F44 C5           		PUSH	BC
 4919+1F45 CD 09 19     		CALL	l1909
 4920+1F48 C1           		POP	BC
 4921+1F49 D1           		POP	DE
 4922+1F4A CD A9 20     		CALL	l20a9
 4923+1F4D E1           		POP	HL
 4924+1F4E C9           		RET
 4925+1F4F
 4926+1F4F C5           l1f4f:		PUSH	BC
 4927+1F50 0E 01        		LD	C,$01
 4928+1F52 CD 5B 1F     		CALL	l1f5b
 4929+1F55 C1           		POP	BC
 4930+1F56 E6 60        		AND	$60
 4931+1F58 C8           		RET	Z
 4932+1F59
 4933+1F59 37           		SCF
 4934+1F5A C9           		RET
 4935+1F5B
 4936+1F5B CD 81 21     l1f5b:		CALL	l2181
 4937+1F5E CD E6 20     		CALL	l20e6
 4938+1F61 C3 A6 21     		JP	l21a6
 4939+1F64 B7           l1f64:		OR	A
 4940+1F65 C8           		RET	Z
 4941+1F66
 4942+1F66 47           		LD	B,A
 4943+1F67 3E 01        		LD	A,$01
 4944+1F69 87           l1f69:		ADD	A,A
 4945+1F6A 10 FD        		DJNZ	l1f69		; (-$03)
 4946+1F6C 3D           		DEC	A
 4947+1F6D C9           		RET
 4948+1F6E
 4949+1F6E 78           l1f6e:		LD	A,B
 4950+1F6F B7           		OR	A
 4951+1F70 C8           		RET	Z
 4952+1F71
 4953+1F71 29           l1f71:		ADD	HL,HL
 4954+1F72 10 FD        		DJNZ	l1f71		; (-$03)
 4955+1F74 C9           		RET
 4956+1F75
 4957+1F75 78           l1f75:		LD	A,B
 4958+1F76 B7           		OR	A
 4959+1F77 C8           		RET	Z
 4960+1F78
 4961+1F78 CB 3C        l1f78:		SRL	H
 4962+1F7A CB 1D        		RR	L
 4963+1F7C 10 FA        		DJNZ	l1f78		; (-$06)
 4964+1F7E C9           		RET
 4965+1F7F
 4966+1F7F 0A           l1f7f:		DB	$0A		; motor on time
 4967+1F80 32           		DB	$32		; motor off time
 4968+1F81 AF           		DB	$AF		; write off time
 4969+1F82 1E           		DB	$1E		; head settle time
 4970+1F83 0C           		DB	$0C		; step rate
 4971+1F84 0F           		DB	$0F		; head unload time
 4972+1F85 03           		DB	$03		; head load time x2+1
 4973+1F86
 4974+1F86 C5           l1f86:		PUSH	BC
 4975+1F87 01 FD 2F     		LD	BC,$2FFD
 4976+1F8A ED 78        		IN	A,(C)
 4977+1F8C C6 01        		ADD	A,$01
 4978+1F8E 3F           		CCF
 4979+1F8F C1           		POP	BC
 4980+1F90 C9           		RET
 4981+1F91
 4982+1F91 21 20 E4     l1f91:		LD	HL,$E420
 4983+1F94 06 10        		LD	B,$10
 4984+1F96 36 00        x1f96:		LD	(HL),$00
 4985+1F98 23           		INC	HL
 4986+1F99 10 FB        		DJNZ	x1f96		; (-$05)
 4987+1F9B 3E 0F        		LD	A,$0F
 4988+1F9D 32 2D E4     		LD	($E42D		),A
 4989+1FA0 CD E6 3E     		CALL	l3ee6
 4990+1FA3 21 7F 1F     		LD	HL,l1f7f
 4991+1FA6 11 28 E4     x1fa6:		LD	DE,$E428
 4992+1FA9 01 05 00     		LD	BC,$0005
 4993+1FAC ED B0        		LDIR
 4994+1FAE 3A 2C E4     		LD	A,(	$E42C		)
 4995+1FB1 3D           		DEC	A
 4996+1FB2 07           		RLCA
 4997+1FB3 07           		RLCA
 4998+1FB4 07           		RLCA
 4999+1FB5 2F           		CPL
 5000+1FB6 E6 F0        		AND	$F0
 5001+1FB8 B6           		OR	(HL)
 5002+1FB9 23           		INC	HL
 5003+1FBA 66           		LD	H,(HL)
 5004+1FBB 6F           		LD	L,A
 5005+1FBC 3E 03        		LD	A,$03
 5006+1FBE CD 6A 21     		CALL	x216a
 5007+1FC1 7D           		LD	A,L
 5008+1FC2 CD 6A 21     		CALL	x216a
 5009+1FC5 7C           		LD	A,H
 5010+1FC6 C3 6A 21     		JP	x216a
 5011+1FC9 79           l1fc9:		LD	A,C
 5012+1FCA E6 03        		AND	$03
 5013+1FCC 87           		ADD	A,A
 5014+1FCD C6 20        		ADD	A,$20
 5015+1FCF 6F           		LD	L,A
 5016+1FD0 CE E4        		ADC	A,$E4
 5017+1FD2 95           		SUB	L
 5018+1FD3 67           		LD	H,A
 5019+1FD4 C9           		RET
 5020+1FD5
 5021+1FD5 E5           l1fd5:		PUSH	HL
 5022+1FD6 CD C9 1F     		CALL	l1fc9
 5023+1FD9 CD DE 1F     		CALL	l1fde
 5024+1FDC E1           		POP	HL
 5025+1FDD C9           		RET
 5026+1FDE
 5027+1FDE 3A 2D E4     l1fde:		LD	A,($E42D		)
 5028+1FE1 47           		LD	B,A
 5029+1FE2 CB 76        l1fe2:		BIT	6,(HL)
 5030+1FE4 20 0B        		JR	NZ,l1ff1	; (+$0B)
 5031+1FE6 23           		INC	HL
 5032+1FE7 36 00        		LD	(HL),$00
 5033+1FE9 2B           		DEC	HL
 5034+1FEA CD 16 20     		CALL	l2016
 5035+1FED 30 18        		JR	NC,x2007	; (+$18)
 5036+1FEF CB F6        		SET	6,(HL)
 5037+1FF1 7A           l1ff1:		LD	A,D
 5038+1FF2 23           		INC	HL
 5039+1FF3 BE           		CP	(HL)
 5040+1FF4 2B           		DEC	HL
 5041+1FF5 37           		SCF
 5042+1FF6 C8           		RET	Z
 5043+1FF7
 5044+1FF7 B7           		OR	A
 5045+1FF8 20 05        		JR	NZ,l1fff	; (+$05)
 5046+1FFA CD 16 20     		CALL	l2016
 5047+1FFD 18 03        		JR	l2002		; (+$03)
 5048+1FFF CD 3A 20     l1fff:		CALL	l203a
 5049+2002 30 08        l2002:		JR	NC,l200c	; (+$08)
 5050+2004 23           		INC	HL
 5051+2005 72           		LD	(HL),D
 5052+2006 C9           		RET
 5053+2007
 5054+2007 D5           x2007:		PUSH	DE
 5055+2008 C4 36 20     		CALL	NZ,l2036
 5056+200B D1           		POP	DE
 5057+200C CB B6        l200c:		res	6,(HL)
 5058+200E C8           		RET	Z
 5059+200F
 5060+200F CD CE 20     		CALL	l20ce
 5061+2012 10 CE        		DJNZ	l1fe2		; (-$32)
 5062+2014 BF           		CP	A
 5063+2015 C9           		RET
 5064+2016
 5065+2016 CD 1A 20     l2016:		CALL	l201a
 5066+2019 C8           		RET	Z
 5067+201A
 5068+201A C5           l201a:		PUSH	BC
 5069+201B DD 46 12     		LD	B,(IX+$12)
 5070+201E 05           		DEC	B
 5071+201F DD CB 11 7E  		BIT	7,(IX+$11)
 5072+2023 20 07        		JR	NZ,x202c	; (+$07)
 5073+2025 CB 5E        		BIT	3,(HL)
 5074+2027 28 03        		JR	Z,x202c		; (+$03)
 5075+2029 78           		LD	A,B
 5076+202A 87           		ADD	A,A
 5077+202B 47           		LD	B,A
 5078+202C 3E 07        x202c:		LD	A,$07
 5079+202E CD 6A 21     		CALL	x216a
 5080+2031 79           		LD	A,C
 5081+2032 E6 03        		AND	$03
 5082+2034 18 27        		JR	l205d		; (+$27)
 5083+2036 DD 56 12     l2036:		LD	D,(IX+$12)
 5084+2039 15           		DEC	D
 5085+203A C5           l203a:		PUSH	BC
 5086+203B 7A           		LD	A,D
 5087+203C 23           		INC	HL
 5088+203D 96           		SUB	(HL)
 5089+203E 2B           		DEC	HL
 5090+203F 30 02        		JR	NC,l2043	; (+$02)
 5091+2041 2F           		CPL
 5092+2042 3C           		INC	A
 5093+2043 47           l2043:		LD	B,A
 5094+2044 3E 0F        		LD	A,$0F
 5095+2046 CD 6A 21     		CALL	x216a
 5096+2049 79           		LD	A,C
 5097+204A CD 6A 21     		CALL	x216a
 5098+204D 7A           		LD	A,D
 5099+204E DD CB 11 7E  		BIT	7,(IX+$11)
 5100+2052 20 09        		JR	NZ,l205d	; (+$09)
 5101+2054 CB 5E        		BIT	3,(HL)
 5102+2056 28 05        		JR	Z,l205d		; (+$05)
 5103+2058 78           		LD	A,B
 5104+2059 87           		ADD	A,A
 5105+205A 47           		LD	B,A
 5106+205B 7A           		LD	A,D
 5107+205C 87           		ADD	A,A
 5108+205D E5           l205d:		PUSH	HL
 5109+205E CD 6A 21     		CALL	x216a
 5110+2061 3A 2C E4     l2061:		LD	A,(	$E42C		)
 5111+2064 CD 7B 20     		CALL	l207b
 5112+2067 10 F8        		DJNZ	l2061		; (-$08)
 5113+2069 3A 2B E4     		LD	A,($E42B		)
 5114+206C CD 7B 20     		CALL	l207b
 5115+206F 21 30 E4     		LD	HL,	$E430
 5116+2072 CD DF 20     		CALL	l20df
 5117+2075 CD 84 20     		CALL	l2084
 5118+2078 E1           		POP	HL
 5119+2079 C1           		POP	BC
 5120+207A C9           		RET
 5121+207B
 5122+207B 2E DC        l207b:		LD	L,$DC
 5123+207D 2D           l207d:		DEC	L
 5124+207E 20 FD        		JR	NZ,l207d	; (-$03)
 5125+2080 3D           		DEC	A
 5126+2081 20 F8        		JR	NZ,l207b	; (-$08)
 5127+2083 C9           		RET
 5128+2084
 5129+2084 79           l2084:		LD	A,C
 5130+2085 F6 20        		OR	$20
 5131+2087 23           		INC	HL
 5132+2088 AE           		XOR	(HL)
 5133+2089 E6 FB        		AND	$FB
 5134+208B 37           		SCF
 5135+208C C8           		RET	Z
 5136+208D
 5137+208D 7E           		LD	A,(HL)
 5138+208E E6 C0        		AND	$C0
 5139+2090 EE 80        		XOR	$80
 5140+2092 28 11        		JR	Z,l20a5		; (+$11)
 5141+2094 7E           		LD	A,(HL)
 5142+2095 A9           		XOR	C
 5143+2096 E6 03        		AND	$03
 5144+2098 28 05        		JR	Z,l209f		; (+$05)
 5145+209A CD DF 20     		CALL	l20df
 5146+209D 18 E5        		JR	l2084		; (-$1B)
 5147+209F 7E           l209f:		LD	A,(HL)
 5148+20A0 E6 08        		AND	$08
 5149+20A2 EE 08        		XOR	$08
 5150+20A4 C8           		RET	Z
 5151+20A5
 5152+20A5 3E 02        l20a5:		LD	A,$02
 5153+20A7 B7           		OR	A
 5154+20A8 C9           		RET
 5155+20A9
 5156+20A9 23           l20a9:		INC	HL
 5157+20AA 7E           		LD	A,(HL)
 5158+20AB A9           		XOR	C
 5159+20AC 37           		SCF
 5160+20AD C8           		RET	Z
 5161+20AE
 5162+20AE E6 08        		AND	$08
 5163+20B0 EE 08        		XOR	$08
 5164+20B2 C8           		RET	Z
 5165+20B3
 5166+20B3 23           		INC	HL
 5167+20B4 7E           		LD	A,(HL)
 5168+20B5 FE 80        		CP	$80
 5169+20B7 37           		SCF
 5170+20B8 C8           		RET	Z
 5171+20B9
 5172+20B9 EE 02        		XOR	$02
 5173+20BB 3E 01        		LD	A,$01
 5174+20BD C8           		RET	Z
 5175+20BE
 5176+20BE 3E 03        		LD	A,$03
 5177+20C0 CB 6E        		BIT	5,(HL)
 5178+20C2 C0           		RET	NZ
 5179+20C3
 5180+20C3 3C           		INC	A
 5181+20C4 CB 56        		BIT	2,(HL)
 5182+20C6 C0           		RET	NZ
 5183+20C7
 5184+20C7 3C           		INC	A
 5185+20C8 CB 46        		BIT	0,(HL)
 5186+20CA C0           		RET	NZ
 5187+20CB
 5188+20CB 3C           		INC	A
 5189+20CC 3C           		INC	A
 5190+20CD C9           		RET
 5191+20CE
 5192+20CE E5           l20ce:		PUSH	HL
 5193+20CF F5           		PUSH	AF
 5194+20D0 21 30 E4     		LD	HL,	$E430
 5195+20D3 CD DF 20     l20d3:		CALL	l20df
 5196+20D6 E6 C0        		AND	$C0
 5197+20D8 FE 80        		CP	$80
 5198+20DA 20 F7        		JR	NZ,l20d3	; (-$09)
 5199+20DC F1           		POP	AF
 5200+20DD E1           		POP	HL
 5201+20DE C9           		RET
 5202+20DF
 5203+20DF 3E 08        l20df:		LD	A,$08
 5204+20E1 CD 6A 21     		CALL	x216a
 5205+20E4 18 0C        		JR	l20f2		; (+$0C)
 5206+20E6 3E 04        l20e6:		LD	A,$04
 5207+20E8 CD 6A 21     		CALL	x216a
 5208+20EB 79           		LD	A,C
 5209+20EC CD 6A 21     		CALL	x216a
 5210+20EF 21 30 E4     l20ef:		LD	HL,	$E430
 5211+20F2 D5           l20f2:		PUSH	DE
 5212+20F3 C5           		PUSH	BC
 5213+20F4 01 FD 2F     		LD	BC,$2FFD
 5214+20F7 16 00        		LD	D,$00
 5215+20F9 23           		INC	HL
 5216+20FA E5           		PUSH	HL
 5217+20FB ED 78        l20fb:		IN	A,(C)
 5218+20FD 87           		ADD	A,A
 5219+20FE 30 FB        		JR	NC,l20fb	; (-$05)
 5220+2100 F2 12 21     		JP	p,l2112
 5221+2103 06 3F        		LD	B,$3F
 5222+2105 ED 78        		IN	A,(C)
 5223+2107 06 2F        		LD	B,$2F
 5224+2109 77           		LD	(HL),A
 5225+210A 23           		INC	HL
 5226+210B 14           		INC	D
 5227+210C E3           		EX	(SP),HL
 5228+210D E3           		EX	(SP),HL
 5229+210E E3           		EX	(SP),HL
 5230+210F E3           		EX	(SP),HL
 5231+2110 18 E9        		JR	l20fb		; (-$17)
 5232+2112 E1           l2112:		POP	HL
 5233+2113 7E           		LD	A,(HL)
 5234+2114 2B           		DEC	HL
 5235+2115 72           		LD	(HL),D
 5236+2116 C1           		POP	BC
 5237+2117 D1           		POP	DE
 5238+2118 C9           		RET
 5239+2119
 5240+2119 CD 34 21     l2119:		CALL	l2134
 5241+211C CD C5 21     		CALL	l21c5
 5242+211F C3 EF 20     		JP	l20ef
 5243+2122 CD 34 21     l2122:		CALL	l2134
 5244+2125 CD 14 22     		CALL	l2214
 5245+2128 3A 2A E4     		LD	A,($E42A		)
 5246+212B 3D           l212b:		DEC	A
 5247+212C 03           		INC	BC
 5248+212D 03           		INC	BC
 5249+212E 03           		INC	BC
 5250+212F 20 FA        		JR	NZ,l212b	; (-$06)
 5251+2131 C3 EF 20     		JP	l20ef
 5252+2134
 5253+2134              ; Subroutine to get page (D) and address (HL) of buffer for low-level
 5254+2134              ; command, and output all command bytes except last (in A)
 5255+2134              ; On entry, HL=address of parameter block
 5256+2134
 5257+2134 CD CE 20     l2134:		CALL	l20ce		; wait until ready for new command
 5258+2137 3A 5C 5B     		LD	A,(	$5B5C)	; get old BANKM
 5259+213A E6 F8        		AND	$F8
 5260+213C B6           		OR	(HL)		; set page required
 5261+213D 47           		LD	B,A
 5262+213E 23           		INC	HL
 5263+213F 5E           		LD	E,(HL)
 5264+2140 23           		INC	HL
 5265+2141 56           		LD	D,(HL)		; DE=buffer address
 5266+2142 23           		INC	HL
 5267+2143 4E           		LD	C,(HL)		; C=# bytes to transfer (low)
 5268+2144 C5           		PUSH	BC
 5269+2145 23           		INC	HL
 5270+2146 23           		INC	HL
 5271+2147 46           		LD	B,(HL)		; B=# command bytes
 5272+2148 23           		INC	HL
 5273+2149 05           		DEC	B
 5274+214A 7E           l214a:		LD	A,(HL)		; get next command byte
 5275+214B 23           		INC	HL
 5276+214C CD 6A 21     		CALL	x216a		; send it
 5277+214F 10 F9        		DJNZ	l214a		; back for all except last
 5278+2151 7E           		LD	A,(HL)
 5279+2152 EB           		EX	DE,HL
 5280+2153 D1           		POP	DE		; D=page required, E=#bytes to transfer (low)
 5281+2154 01 FD 7F     		LD	BC,PBANKM
 5282+2157 F3           		DI			; turn off interrupts
 5283+2158 C9           		RET
 5284+2159
 5285+2159 CD CE 20     l2159:		CALL	l20ce
 5286+215C E6 40        		AND	$40
 5287+215E F6 0A        		OR	$0A
 5288+2160 CD 6A 21     		CALL	x216a
 5289+2163 79           		LD	A,C
 5290+2164 CD 6A 21     		CALL	x216a
 5291+2167 C3 EF 20     		JP	l20ef
 5292+216A D5           x216a:		PUSH	DE
 5293+216B C5           		PUSH	BC
 5294+216C 57           		LD	D,A
 5295+216D 01 FD 2F     		LD	BC,$2FFD
 5296+2170 ED 78        l2170:		IN	A,(C)
 5297+2172 87           		ADD	A,A
 5298+2173 30 FB        		JR	NC,l2170	; (-$05)
 5299+2175 87           		ADD	A,A
 5300+2176 38 06        		JR	C,l217e		; (+$06)
 5301+2178 06 3F        		LD	B,$3F
 5302+217A ED 51        		OUT	(C),D
 5303+217C E3           		EX	(SP),HL
 5304+217D E3           		EX	(SP),HL
 5305+217E C1           l217e:		POP	BC
 5306+217F D1           		POP	DE
 5307+2180 C9           		RET
 5308+2181
 5309+2181 C5           l2181:		PUSH	BC
 5310+2182 F5           		PUSH	AF
 5311+2183 AF           		XOR	A
 5312+2184 32 00 E6     		LD	(	$E600		),A
 5313+2187 3A 67 5B     		LD	A,(	$5B67)
 5314+218A CB 5F        		BIT	3,A
 5315+218C 20 15        		JR	NZ,l21a3	; (+$15)
 5316+218E F6 08        		OR	$08
 5317+2190 CD BA 21     		CALL	l21ba
 5318+2193 3A 28 E4     		LD	A,($E428		)
 5319+2196 F5           l2196:		PUSH	AF
 5320+2197 01 48 35     		LD	BC,$3548
 5321+219A 0B           l219a:		DEC	BC
 5322+219B 78           		LD	A,B
 5323+219C B1           		OR	C
 5324+219D 20 FB        		JR	NZ,l219a	; (-$05)
 5325+219F F1           		POP	AF
 5326+21A0 3D           		DEC	A
 5327+21A1 20 F3        		JR	NZ,l2196	; (-$0D)
 5328+21A3 F1           l21a3:		POP	AF
 5329+21A4 C1           		POP	BC
 5330+21A5 C9           		RET
 5331+21A6
 5332+21A6 F5           l21a6:		PUSH	AF
 5333+21A7 AF           		XOR	A
 5334+21A8 32 00 E6     		LD	(	$E600		),A
 5335+21AB 3A 67 5B     		LD	A,(	$5B67)
 5336+21AE E6 08        		AND	$08
 5337+21B0 28 06        		JR	Z,l21b8		; (+$06)
 5338+21B2 3A 29 E4     		LD	A,($E429		)
 5339+21B5 32 00 E6     		LD	(	$E600		),A
 5340+21B8 F1           l21b8:		POP	AF
 5341+21B9 C9           		RET
 5342+21BA
 5343+21BA C5           l21ba:		PUSH	BC
 5344+21BB 01 FD 1F     		LD	BC,PBANK678
 5345+21BE 32 67 5B     		LD	(	$5B67),A
 5346+21C1 ED 79        		OUT	(C),A
 5347+21C3 C1           		POP	BC
 5348+21C4 C9           		RET
 5349+21C5
 5350+21C5 CD 6A 21     l21c5:		CALL	x216a
 5351+21C8 ED 51        		OUT	(C),D
 5352+21CA 01 FD 2F     		LD	BC,$2FFD
 5353+21CD 16 20        		LD	D,$20
 5354+21CF 18 0A        		JR	l21db		; (+$0A)
 5355+21D1
 5356+21D1 06 3F        l21d1:		LD	B,$3F
 5357+21D3 ED A2        		INI
 5358+21D5 06 2F        		LD	B,$2F
 5359+21D7 1D           		DEC	E
 5360+21D8 CA EC 21     		JP	Z,l21ec
 5361+21DB ED 78        l21db:		IN	A,(C)
 5362+21DD F2 DB 21     		JP	p,l21db
 5363+21E0 A2           		AND	D
 5364+21E1 C2 D1 21     		JP	NZ,l21d1
 5365+21E4 18 49        		JR	l222f		; (+$49)
 5366+21E6
 5367+21E6 06 3F        l21e6:		LD	B,$3F
 5368+21E8 ED 78        		IN	A,(C)
 5369+21EA 06 2F        		LD	B,$2F
 5370+21EC ED 78        l21ec:		IN	A,(C)
 5371+21EE F2 EC 21     		JP	p,l21ec
 5372+21F1 A2           		AND	D
 5373+21F2 C2 E6 21     		JP	NZ,l21e6
 5374+21F5 18 38        		JR	l222f		; (+$38)
 5375+21F7
 5376+21F7              ; Subroutine to output last byte of command to FDC and read bytes to buffer
 5377+21F7
 5378+21F7 CD 6A 21     l21f7:		CALL	x216a		; send command
 5379+21FA ED 51        		OUT	(C),D		; page in required bank  **** AVERIGUAR DE DONDE SALE "D" ****
 5380+21FC 01 FD 2F     		LD	BC,$2FFD
 5381+21FF 16 20        		LD	D,$20
 5382+2201 18 06        		JR	l2209
 5383+2203 06 3F        l2203:		LD	B,$3F
 5384+2205 ED A2        		INI			; read a byte
 5385+2207 06 2F        		LD	B,$2F
 5386+2209 ED 78        l2209:		IN	A,(C)
 5387+220B F2 09 22     		JP	p,l2209		; wait until FDC ready
 5388+220E A2           		AND	D
 5389+220F C2 03 22     		JP	NZ,l2203	; loop back if more bytes to read
 5390+2212 18 1B        		JR	l222f		; go to repage bank 7 & exit
 5391+2214
 5392+2214 CD 6A 21     l2214:		CALL	x216a
 5393+2217 ED 51        		OUT	(C),D
 5394+2219 01 FD 2F     		LD	BC,$2FFD
 5395+221C 16 20        		LD	D,$20
 5396+221E 18 06        		JR	l2226		; (+$06)
 5397+2220
 5398+2220 06 40        l2220:		LD	B,$40
 5399+2222 ED A3        		OUTI
 5400+2224 06 2F        		LD	B,$2F
 5401+2226 ED 78        l2226:		IN	A,(C)
 5402+2228 F2 26 22     		JP	p,l2226
 5403+222B A2           		AND	D
 5404+222C C2 20 22     		JP	NZ,l2220
 5405+222F 3A 5C 5B     l222f:		LD	A,(	$5B5C)
 5406+2232 01 FD 7F     		LD	BC,PBANKM
 5407+2235 ED 79        		OUT	(C),A
 5408+2237 FB           		EI
 5409+2238 C9           		RET
 5410+2239
 5411+2239              ; ******************** KEYBOARD SCANNING ROUTINES *****************
 5412+2239
 5413+2239              ; These are copies of the keytables from ROM 3
 5414+2239
 5415+2239              ; The L-mode keytable with CAPS-SHIFT
 5416+2239
 5417+2239 42 48 59 36  l2239:		DB	"BHY65TGV"
 5417+223D 35 54 47 56
 5418+2241 4E 4A 55 37  		DB	"NJU74RFC"
 5418+2245 34 52 46 43
 5419+2249 4D 4B 49 38  		DB	"MKI83EDX"
 5419+224D 33 45 44 58
 5420+2251 0E 4C 4F 39  		DB	$0E, "LO92WSZ"
 5420+2255 32 57 53 5A
 5421+2259 20 0D 50 30  		DB	" ", $0D, "P01QA"
 5421+225D 31 51 41
 5422+2260
 5423+2260              ; The extended-mode keytable (unshifted letters)
 5424+2260
 5425+2260 E3 C4 E0 E4  n22c5:		DB	$E3,$C4,$E0,$E4
 5426+2264 B4 BC BD BB  		DB	$B4,$BC,$BD,$BB
 5427+2268 AF B0 B1 C0  		DB	$AF,$B0,$B1,$C0
 5428+226C A7 A6 BE AD  		DB	$A7,$A6,$BE,$AD
 5429+2270 B2 BA E5 A5  		DB	$B2,$BA,$E5,$A5
 5430+2274 C2 E1 B3 B9  		DB	$C2,$E1,$B3,$B9
 5431+2278 C1 B8        		DB	$C1,$B8
 5432+227A
 5433+227A              ; The extended mode keytable (shifted letters)
 5434+227A
 5435+227A 7E DC DA 5C  n22df:		DB	$7E,$DC,$DA,$5C
 5436+227E B7 7B 7D D8  		DB	$B7,$7B,$7D,$D8
 5437+2282 BF AE AA AB  		DB	$BF,$AE,$AA,$AB
 5438+2286 DD DE DF 7F  		DB	$DD,$DE,$DF,$7F
 5439+228A B5 D6 7C D5  		DB	$B5,$D6,$7C,$D5
 5440+228E 5D DB B6 D9  		DB	$5D,$DB,$B6,$D9
 5441+2292 5B D7        		DB	$5B,$D7
 5442+2294
 5443+2294              ; The control code keytable (CAPS-SHIFTed digits)
 5444+2294
 5445+2294 0C 07 06 04  n22f9:		DB	$0C,$07,$06,$04
 5446+2298 05 08 0A 0B  		DB	$05,$08,$0A,$0B
 5447+229C 09 0F        		DB	$09,$0F
 5448+229E
 5449+229E              ; The symbol code keytable (letters with symbol shift)
 5450+229E
 5451+229E E2 2A 3F CD  n2303:		DB	$E2,$2A,$3F,$CD
 5452+22A2 C8 CC CB 5E  		DB	$C8,$CC,$CB,$5E
 5453+22A6 AC 2D 2B 3D  		DB	$AC,$2D,$2B,$3D
 5454+22AA 2E 2C 3B 22  		DB	$2E,$2C,$3B,$22
 5455+22AE C7 3C C3 3E  		DB	$C7,$3C,$C3,$3E
 5456+22B2 C5 2F C9 60  		DB	$C5,$2F,$C9,$60
 5457+22B6 C6 3A        		DB	$C6,$3A
 5458+22B8
 5459+22B8              ; The extended mode keytable (SYM-SHIFTed digits)
 5460+22B8
 5461+22B8 D0 CE A8 CA  n231d:		DB	$D0,$CE,$A8,$CA
 5462+22BC D3 D4 D1 D2  		DB	$D3,$D4,$D1,$D2
 5463+22C0 A9 CF        		DB	$A9,$CF
 5464+22C2
 5465+22C2 AF           l22c2:		XOR	A
 5466+22C3 78           		LD	A,B
 5467+22C4 E5           l22c4:		PUSH	HL
 5468+22C5 2A 51 5C     		LD	HL,(	$5C51)
 5469+22C8 E3           		EX	(SP),HL
 5470+22C9 E5           		PUSH	HL
 5471+22CA 2A 3B 5C     		LD	HL,(	$5C3B)
 5472+22CD E3           		EX	(SP),HL
 5473+22CE E5           		PUSH	HL
 5474+22CF 2A 6A 5C     		LD	HL,(	$5C6A)
 5475+22D2 E3           		EX	(SP),HL
 5476+22D3 21 F0 22     		LD	HL,o22F0
 5477+22D6 22 22 DB     		LD	(	$DB22		),HL
 5478+22D9 F5           		PUSH	AF
 5479+22DA CD 2D 03     		CALL	l032d
 5480+22DD F1           		POP	AF
 5481+22DE CD 00 3E     		CALL	n3e00
 5482+22E1 F7           		RST	30H
 5483+22E2 3F           		CCF
 5484+22E3 E1           		POP	HL
 5485+22E4 22 6A 5C     		LD	(	$5C6A),HL
 5486+22E7 E1           		POP	HL
 5487+22E8 22 3B 5C     		LD	(	$5C3B),HL
 5488+22EB E1           		POP	HL
 5489+22EC 22 51 5C     		LD	(	$5C51),HL
 5490+22EF C9           		RET
 5491+22F0
 5492+22F0 8B 0D FB     		DB	$8B,13,$FB
 5493+22F3 4E 6F 74 20  		DB	"Not ready", 13
 5493+22F7 72 65 61 64
 5493+22FB 79 0D
 5494+22FD
 5495+22FD 8E FF 8B 0D  		DB	$8E,$FF,$8B,13,$FB
 5495+2301 FB
 5496+2302 57 72 69 74  		DB	"Write protected", 13
 5496+2306 65 20 70 72
 5496+230A 6F 74 65 63
 5496+230E 74 65 64 0D
 5497+2312
 5498+2312 8E FF 8C 0D  		DB	$8E,$FF,$8C,13,$FB
 5498+2316 FB
 5499+2317 53 65 65 6B  		DB	"Seek fail", 13
 5499+231B 20 66 61 69
 5499+231F 6C 0D
 5500+2321
 5501+2321 8E FF 8D     		DB	$8E,$FF,$8D
 5502+2324 44 61 74 61  		DB	"Data error", 13
 5502+2328 20 65 72 72
 5502+232C 6F 72 0D
 5503+232F
 5504+232F 8E FF 8D     		DB	$8E,$FF,$8D
 5505+2332 4E 6F 20 64  		DB	"No data", 13
 5505+2336 61 74 61 0D
 5506+233A
 5507+233A 8E FF 8D     		DB	$8E,$FF,$8D
 5508+233D 4D 69 73 73  		DB	"Missing address mark", 13
 5508+2341 69 6E 67 20
 5508+2345 61 64 64 72
 5508+2349 65 73 73 20
 5508+234D 6D 61 72 6B
 5508+2351 0D
 5509+2352
 5510+2352 8E FF 8B 0D  		DB	$8E,$FF,$8B,13,$FB
 5510+2356 FB
 5511+2357 42 61 64 20  		DB	"Bad format", 13
 5511+235B 66 6F 72 6D
 5511+235F 61 74 0D
 5512+2362
 5513+2362 8E FF 8D     		DB	$8E,$FF,$8D
 5514+2365 55 6E 6B 6E  		DB	"Unknown error", 13
 5514+2369 6F 77 6E 20
 5514+236D 65 72 72 6F
 5514+2371 72 0D
 5515+2373
 5516+2373 8E FF 8B 0D  		DB	$8E,$FF,$8B,13,$FB
 5516+2377 FB
 5517+2378 44 69 73 6B  		DB	"Disk changed, please replace", 13
 5517+237C 20 63 68 61
 5517+2380 6E 67 65 64
 5517+2384 2C 20 70 6C
 5517+2388 65 61 73 65
 5517+238C 20 72 65 70
 5517+2390 6C 61 63 65
 5517+2394 0D
 5518+2395
 5519+2395 8E FF 8B 0D  		DB	$8E,$FF,$8B,13,$FB
 5519+2399 FB
 5520+239A 44 69 73 6B  		DB	"Disk unsuitable", 13
 5520+239E 20 75 6E 73
 5520+23A2 75 69 74 61
 5520+23A6 62 6C 65 0D
 5521+23AA
 5522+23AA              		; EJ:
 5523+23AA              		; Please put the disk for A: into
 5524+23AA              		; the drive then press any key
 5525+23AA
 5526+23AA 8E FF        		DB	$8E,$FF
 5527+23AC 50 6C 65 61  		DB	"Please put the disk for ", $FE
 5527+23B0 73 65 20 70
 5527+23B4 75 74 20 74
 5527+23B8 68 65 20 64
 5527+23BC 69 73 6B 20
 5527+23C0 66 6F 72 20
 5527+23C4 FE
 5528+23C5 3A 20 69 6E  		DB	": into the drive then press any key", $FF
 5528+23C9 74 6F 20 74
 5528+23CD 68 65 20 64
 5528+23D1 72 69 76 65
 5528+23D5 20 74 68 65
 5528+23D9 6E 20 70 72
 5528+23DD 65 73 73 20
 5528+23E1 61 6E 79 20
 5528+23E5 6B 65 79 FF
 5529+23E9
 5530+23E9              		; EJ:
 5531+23E9              		; Drive A: track t sector s
 5532+23E9              		; Retry, Ignore or Cancel?
 5533+23E9
 5534+23E9 44 72 69 76  		DB	"Drive ",$FE,":",$FF,$8B," track ",$FD,$FF,$8C
 5534+23ED 65 20 FE 3A
 5534+23F1 FF 8B 20 74
 5534+23F5 72 61 63 6B
 5534+23F9 20 FD FF 8C
 5535+23FD 20 73 65 63  		DB	" sector ",$FC,$0D,$FB,$FF,$FA
 5535+2401 74 6F 72 20
 5535+2405 FC 0D FB FF
 5535+2409 FA
 5536+240A 52 65 74 72  		DB	"Retry, Ignore or Cancel?",$FF
 5536+240E 79 2C 20 49
 5536+2412 67 6E 6F 72
 5536+2416 65 20 6F 72
 5536+241A 20 43 61 6E
 5536+241E 63 65 6C 3F
 5536+2422 FF
 5537+2423
 5538+2423              FREE_ROM2_0:	EQU	$
 5539+2423
 5540+2423              		;...
 5541+2423              		;...
 5542+2423
 5543+2423              R2_FREE_0:	EQU	119-($-FREE_ROM2_0)
 5544+2423 00 00 00...  ROM2_SPARE0:	DS	R2_FREE_0
 5545+249A
 5546+249A 01 00 02     l249a:		LD	BC,$0200
 5547+249D C5           l249d:		PUSH	BC
 5548+249E 3E 02        		LD	A,$02
 5549+24A0 90           		SUB	B
 5550+24A1 4F           		LD	C,A
 5551+24A2 06 00        		LD	B,$00
 5552+24A4 21 11 ED     		LD	HL,$ED11
 5553+24A7 CD BF 24     		CALL	l24bf
 5554+24AA C1           		POP	BC
 5555+24AB FE 42        		CP	$42
 5556+24AD 20 01        		JR	NZ,l24b0	; (+$01)
 5557+24AF 0C           		INC	C
 5558+24B0 10 EB        l24b0:		DJNZ	l249d		; (-$15)
 5559+24B2 79           		LD	A,C
 5560+24B3 32 9D DF     		LD	($DF9D),A
 5561+24B6 C9           		RET
 5562+24B7
 5563+24B7 01 EF FE     l24b7:		LD	BC,$FEEF
 5564+24BA 3E A0        		LD	A,$A0
 5565+24BC ED 79        		OUT	(C),A
 5566+24BE C9           		RET
 5567+24BF
 5568+24BF C5           l24bf:		PUSH	BC
 5569+24C0 D5           		PUSH	DE
 5570+24C1 11 D0 07     		LD	DE,$07D0
 5571+24C4 ED 53 9E DF  		LD	($DF9E),DE
 5572+24C8 79           		LD	A,C
 5573+24C9 A7           		AND	A
 5574+24CA 3E A0        		LD	A,$A0
 5575+24CC 28 02        		JR	Z,l24d0		; (+$02)
 5576+24CE 3E B0        		LD	A,$B0
 5577+24D0 CD 38 27     l24d0:		CALL	l2738
 5578+24D3 30 17        		JR	NC,l24ec	; (+$17)
 5579+24D5 1E 00        		LD	E,$00
 5580+24D7 01 EF DE     l24d7:		LD	BC,$DEEF
 5581+24DA ED 59        		OUT	(C),E
 5582+24DC ED 78        		IN	A,(C)
 5583+24DE BB           		CP	E
 5584+24DF 20 72        		JR	NZ,l2553	; (+$72)
 5585+24E1 1C           		INC	E
 5586+24E2 20 F3        		JR	NZ,l24d7	; (-$0D)
 5587+24E4 3E EC        		LD	A,$EC
 5588+24E6 01 EF FF     		LD	BC,$FFEF
 5589+24E9 ED 79        		OUT	(C),A
 5590+24EB 37           		SCF
 5591+24EC D1           l24ec:		POP	DE
 5592+24ED C1           		POP	BC
 5593+24EE DC 7E 25     		CALL	C,l257e
 5594+24F1 30 57        		JR	NC,l254a	; (+$57)
 5595+24F3 D5           		PUSH	DE
 5596+24F4 C5           		PUSH	BC
 5597+24F5 E5           		PUSH	HL
 5598+24F6 16 00        		LD	D,$00
 5599+24F8 AF           l24f8:		XOR	A
 5600+24F9 01 EF EE     		LD	BC,$EEEF
 5601+24FC ED 79        		OUT	(C),A
 5602+24FE 01 EF DF     		LD	BC,$DFEF
 5603+2501 3C           		INC	A
 5604+2502 ED 79        		OUT	(C),A
 5605+2504 01 EF DE     		LD	BC,$DEEF
 5606+2507 ED 79        		OUT	(C),A
 5607+2509 14           		INC	D
 5608+250A 01 EF EF     		LD	BC,$EFEF
 5609+250D ED 51        		OUT	(C),D
 5610+250F 28 27        		JR	Z,l2538		; (+$27)
 5611+2511 01 EF FF     		LD	BC,$FFEF
 5612+2514 3E 20        		LD	A,$20
 5613+2516 ED 79        		OUT	(C),A
 5614+2518 00           		NOP
 5615+2519 ED 78        l2519:		IN	A,(C)
 5616+251B 07           		RLCA
 5617+251C 38 FB        		JR	C,l2519		; (-$05)
 5618+251E E6 12        		AND	$12
 5619+2520 FE 10        		CP	$10
 5620+2522 20 14        		JR	NZ,l2538	; (+$14)
 5621+2524 06 CE        		LD	B,$CE
 5622+2526 D5           		PUSH	DE
 5623+2527 11 00 01     		LD	DE,$0100
 5624+252A 63           		LD	H,E
 5625+252B 6B           		LD	L,E
 5626+252C CD B0 25     		CALL	l25b0
 5627+252F 21 00 89     		LD	HL,$8900
 5628+2532 CD 78 26     		CALL	l2678
 5629+2535 D1           		POP	DE
 5630+2536 38 C0        		JR	C,l24f8		; (-$40)
 5631+2538 15           l2538:		DEC	D
 5632+2539 E1           		POP	HL
 5633+253A C1           		POP	BC
 5634+253B 78           		LD	A,B
 5635+253C CD 1B 02     		CALL	l021b
 5636+253F 72           		LD	(HL),D
 5637+2540 24           		INC	H
 5638+2541 D1           		POP	DE
 5639+2542 3E 07        		LD	A,$07
 5640+2544 CD 1B 02     		CALL	l021b
 5641+2547 3E 42        		LD	A,$42
 5642+2549 A7           		AND	A
 5643+254A E5           l254a:		PUSH	HL
 5644+254B 21 00 00     		LD	HL,$0000
 5645+254E 22 9E DF     		LD	($DF9E),HL
 5646+2551 E1           		POP	HL
 5647+2552 C9           		RET
 5648+2553
 5649+2553 3E 00        l2553:		LD	A,$00
 5650+2555 A7           		AND	A
 5651+2556 18 94        		JR	l24ec		; (-$6C)
 5652+2558 CB 79        l2558:		BIT	7,C
 5653+255A 3E 02        		LD	A,$02
 5654+255C C0           		RET	NZ
 5655+255D
 5656+255D C5           		PUSH	BC
 5657+255E D5           		PUSH	DE
 5658+255F CB 23        		SLA	E
 5659+2561 CB 12        		RL	D
 5660+2563 CB 11        		RL	C
 5661+2565 CD 71 25     		CALL	l2571
 5662+2568 30 04        		JR	NC,l256e	; (+$04)
 5663+256A 1C           		INC	E
 5664+256B CD 71 25     		CALL	l2571
 5665+256E D1           l256e:		POP	DE
 5666+256F C1           		POP	BC
 5667+2570 C9           		RET
 5668+2571
 5669+2571 CD A8 26     l2571:		CALL	l26a8
 5670+2574 D0           		RET	NC
 5671+2575
 5672+2575 3E 20        		LD	A,$20
 5673+2577 C5           		PUSH	BC
 5674+2578 01 EF FF     		LD	BC,$FFEF
 5675+257B ED 79        		OUT	(C),A
 5676+257D C1           		POP	BC
 5677+257E E5           l257e:		PUSH	HL
 5678+257F 21 08 89     		LD	HL,$8908
 5679+2582 CD 78 26     		CALL	l2678
 5680+2585 E1           		POP	HL
 5681+2586 D0           		RET	NC
 5682+2587
 5683+2587 C5           		PUSH	BC
 5684+2588 D5           		PUSH	DE
 5685+2589 78           		LD	A,B
 5686+258A CD 1B 02     		CALL	l021b
 5687+258D 01 EF CE     		LD	BC,$CEEF
 5688+2590 11 00 01     		LD	DE,$0100
 5689+2593 CD B0 25     		CALL	l25b0
 5690+2596 D1           		POP	DE
 5691+2597 C1           		POP	BC
 5692+2598 E5           		PUSH	HL
 5693+2599 21 00 89     		LD	HL,$8900
 5694+259C CD 78 26     		CALL	l2678
 5695+259F E1           		POP	HL
 5696+25A0 D0           		RET	NC
 5697+25A1
 5698+25A1 C5           		PUSH	BC
 5699+25A2 01 EF FF     		LD	BC,$FFEF
 5700+25A5 ED 78        		IN	A,(C)
 5701+25A7 C1           		POP	BC
 5702+25A8 E6 01        		AND	$01
 5703+25AA 37           		SCF
 5704+25AB C8           		RET	Z
 5705+25AC
 5706+25AC 3E 07        		LD	A,$07
 5707+25AE A7           		AND	A
 5708+25AF C9           		RET
 5709+25B0
 5710+25B0 78           l25b0:		LD	A,B
 5711+25B1 1C           		INC	E
 5712+25B2 1D           		DEC	E
 5713+25B3 28 09        		JR	Z,l25BE		; (+$09)
 5714+25B5 ED A2        l25b5:		INI
 5715+25B7 47           		LD	B,A
 5716+25B8 1D           		DEC	E
 5717+25B9 20 FA        		JR	NZ,l25b5	; (-$06)
 5718+25BB 14           		INC	D
 5719+25BC 18 35        		JR	l25f3		; (+$35)
 5720+25BE 1E 10        l25BE:		LD	E,$10
 5721+25C0 ED A2        l25c0:		INI
 5722+25C2 47           		LD	B,A
 5723+25C3 ED A2        		INI
 5724+25C5 47           		LD	B,A
 5725+25C6 ED A2        		INI
 5726+25C8 47           		LD	B,A
 5727+25C9 ED A2        		INI
 5728+25CB 47           		LD	B,A
 5729+25CC ED A2        		INI
 5730+25CE 47           		LD	B,A
 5731+25CF ED A2        		INI
 5732+25D1 47           		LD	B,A
 5733+25D2 ED A2        		INI
 5734+25D4 47           		LD	B,A
 5735+25D5 ED A2        		INI
 5736+25D7 47           		LD	B,A
 5737+25D8 ED A2        		INI
 5738+25DA 47           		LD	B,A
 5739+25DB ED A2        		INI
 5740+25DD 47           		LD	B,A
 5741+25DE ED A2        		INI
 5742+25E0 47           		LD	B,A
 5743+25E1 ED A2        		INI
 5744+25E3 47           		LD	B,A
 5745+25E4 ED A2        		INI
 5746+25E6 47           		LD	B,A
 5747+25E7 ED A2        		INI
 5748+25E9 47           		LD	B,A
 5749+25EA ED A2        		INI
 5750+25EC 47           		LD	B,A
 5751+25ED ED A2        		INI
 5752+25EF 47           		LD	B,A
 5753+25F0 1D           		DEC	E
 5754+25F1 20 CD        		JR	NZ,l25c0	; (-$33)
 5755+25F3 15           l25f3:		DEC	D
 5756+25F4 20 C8        		JR	NZ,l25BE	; (-$38)
 5757+25F6 3E 07        		LD	A,$07
 5758+25F8 C3 1B 02     		JP	l021b
 5759+25FB CB 79        l25fb:		BIT	7,C
 5760+25FD 3E 02        		LD	A,$02
 5761+25FF C0           		RET	NZ
 5762+2600
 5763+2600 C5           		PUSH	BC
 5764+2601 D5           		PUSH	DE
 5765+2602 CB 23        		SLA	E
 5766+2604 CB 12        		RL	D
 5767+2606 CB 11        		RL	C
 5768+2608 CD 14 26     		CALL	l2614
 5769+260B 30 04        		JR	NC,l2611	; (+$04)
 5770+260D 1C           		INC	E
 5771+260E CD 14 26     		CALL	l2614
 5772+2611 D1           l2611:		POP	DE
 5773+2612 C1           		POP	BC
 5774+2613 C9           		RET
 5775+2614
 5776+2614 CD A8 26     l2614:		CALL	l26a8
 5777+2617 D0           		RET	NC
 5778+2618
 5779+2618 3E 30        		LD	A,$30
 5780+261A C5           		PUSH	BC
 5781+261B 01 EF FF     		LD	BC,$FFEF
 5782+261E ED 79        		OUT	(C),A
 5783+2620 C1           		POP	BC
 5784+2621 E5           		PUSH	HL
 5785+2622 21 08 89     		LD	HL,$8908
 5786+2625 CD 78 26     		CALL	l2678
 5787+2628 E1           		POP	HL
 5788+2629 38 12        		JR	C,l263d		; (+$12)
 5789+262B FE 00        		CP	$00
 5790+262D C8           		RET	Z
 5791+262E
 5792+262E C5           		PUSH	BC
 5793+262F 01 EF CF     		LD	BC,$CFEF
 5794+2632 ED 78        		IN	A,(C)
 5795+2634 C1           		POP	BC
 5796+2635 E6 40        		AND	$40
 5797+2637 3E 07        		LD	A,$07
 5798+2639 C8           		RET	Z
 5799+263A
 5800+263A 3E 01        		LD	A,$01
 5801+263C C9           		RET
 5802+263D
 5803+263D C5           l263d:		PUSH	BC
 5804+263E D5           		PUSH	DE
 5805+263F 78           		LD	A,B
 5806+2640 CD 1B 02     		CALL	l021b
 5807+2643 1E 40        		LD	E,$40
 5808+2645 01 EF CF     		LD	BC,$CFEF
 5809+2648 78           		LD	A,B
 5810+2649 ED A3        l2649:		OUTI
 5811+264B 47           		LD	B,A
 5812+264C ED A3        		OUTI
 5813+264E 47           		LD	B,A
 5814+264F ED A3        		OUTI
 5815+2651 47           		LD	B,A
 5816+2652 ED A3        		OUTI
 5817+2654 47           		LD	B,A
 5818+2655 1D           		DEC	E
 5819+2656 C2 49 26     		JP	NZ,l2649
 5820+2659 3E 07        		LD	A,$07
 5821+265B CD 1B 02     		CALL	l021b
 5822+265E D1           		POP	DE
 5823+265F C1           		POP	BC
 5824+2660 E5           		PUSH	HL
 5825+2661 21 00 89     		LD	HL,$8900
 5826+2664 CD 78 26     		CALL	l2678
 5827+2667 E1           		POP	HL
 5828+2668 D0           		RET	NC
 5829+2669
 5830+2669 C5           		PUSH	BC
 5831+266A 01 EF FF     		LD	BC,$FFEF
 5832+266D ED 78        		IN	A,(C)
 5833+266F C1           		POP	BC
 5834+2670 E6 01        		AND	$01
 5835+2672 37           		SCF
 5836+2673 C8           		RET	Z
 5837+2674
 5838+2674 3E 07        		LD	A,$07
 5839+2676 A7           		AND	A
 5840+2677 C9           		RET
 5841+2678
 5842+2678 C5           l2678:		PUSH	BC
 5843+2679 D5           		PUSH	DE
 5844+267A 1E 09        		LD	E,$09
 5845+267C D5           x267c:		PUSH	DE
 5846+267D ED 5B 9E DF  		LD	DE,($DF9E)
 5847+2681 01 EF FF     		LD	BC,$FFEF
 5848+2684 ED 78        l2684:		IN	A,(C)
 5849+2686 A4           		AND	H
 5850+2687 BD           		CP	L
 5851+2688 37           		SCF
 5852+2689 28 15        		JR	Z,l26a0		; (+$15)
 5853+268B CB 7F        		BIT	7,A
 5854+268D 20 04        		JR	NZ,l2693	; (+$04)
 5855+268F CB 47        		BIT	0,A
 5856+2691 20 11        		JR	NZ,l26a4	; (+$11)
 5857+2693 1B           l2693:		DEC	DE
 5858+2694 7A           		LD	A,D
 5859+2695 B3           		OR	E
 5860+2696 20 EC        		JR	NZ,l2684	; (-$14)
 5861+2698 D1           		POP	DE
 5862+2699 1D           		DEC	E
 5863+269A 20 E0        		JR	NZ,x267c	; (-$20)
 5864+269C D5           		PUSH	DE
 5865+269D 3E 00        		LD	A,$00
 5866+269F A7           x269f:		AND	A
 5867+26A0 D1           l26a0:		POP	DE
 5868+26A1 D1           		POP	DE
 5869+26A2 C1           		POP	BC
 5870+26A3 C9           		RET
 5871+26A4
 5872+26A4 3E 07        l26a4:		LD	A,$07
 5873+26A6 18 F7        		JR	x269f		; (-$09)
 5874+26A8 E5           l26a8:		PUSH	HL
 5875+26A9 D5           		PUSH	DE
 5876+26AA C5           		PUSH	BC
 5877+26AB AF           		XOR	A
 5878+26AC CD 35 27     		CALL	l2735
 5879+26AF D2 2C 27     		JP	NC,x272c
 5880+26B2 69           		LD	L,C
 5881+26B3 26 00        		LD	H,$00
 5882+26B5 01 83 E8     		LD	BC,$E883
 5883+26B8 DD CB 10 66  		BIT	4,(IX+$10)
 5884+26BC 28 03        		JR	Z,l26c1		; (+$03)
 5885+26BE 01 8D E8     		LD	BC,$E88D
 5886+26C1 C5           l26c1:		PUSH	BC
 5887+26C2 DD E3        		EX	(SP),IX
 5888+26C4 DD 4E 04     		LD	C,(IX+$04)
 5889+26C7 DD 46 05     		LD	B,(IX+$05)
 5890+26CA CD 48 27     		CALL	l2748
 5891+26CD C5           		PUSH	BC
 5892+26CE 21 00 00     		LD	HL,$0000
 5893+26D1 DD 4E 03     		LD	C,(IX+$03)
 5894+26D4 06 00        		LD	B,$00
 5895+26D6 CD 48 27     		CALL	l2748
 5896+26D9 51           		LD	D,C
 5897+26DA C1           		POP	BC
 5898+26DB DD E3        		EX	(SP),IX
 5899+26DD DD 7E 03     		LD	A,(IX+$03)
 5900+26E0 82           		ADD	A,D
 5901+26E1 DD E3        		EX	(SP),IX
 5902+26E3 DD BE 02     		CP	(IX+$02)
 5903+26E6 38 04        		JR	C,l26ec		; (+$04)
 5904+26E8 DD 96 02     		SUB	(IX+$02)
 5905+26EB 03           		INC	BC
 5906+26EC DD E1        l26ec:		POP	IX
 5907+26EE DD 6E 01     		LD	L,(IX+$01)
 5908+26F1 DD 66 02     		LD	H,(IX+$02)
 5909+26F4 09           		ADD	HL,BC
 5910+26F5 44           		LD	B,H
 5911+26F6 4D           		LD	C,L
 5912+26F7 DD 6E 04     		LD	L,(IX+$04)
 5913+26FA DD 66 05     		LD	H,(IX+$05)
 5914+26FD A7           		AND	A
 5915+26FE ED 42        		SBC	HL,BC
 5916+2700 38 2E        		JR	C,x2730		; (+$2E)
 5917+2702 20 07        		JR	NZ,l270b	; (+$07)
 5918+2704 DD 6E 06     		LD	L,(IX+$06)
 5919+2707 2C           		INC	L
 5920+2708 BD           		CP	L
 5921+2709 30 25        		JR	NC,x2730	; (+$25)
 5922+270B CD 35 27     l270b:		CALL	l2735
 5923+270E C5           		PUSH	BC
 5924+270F 4B           		LD	C,E
 5925+2710 D1           		POP	DE
 5926+2711 30 19        		JR	NC,x272c	; (+$19)
 5927+2713 79           		LD	A,C
 5928+2714 3C           		INC	A
 5929+2715 01 EF DF     		LD	BC,$DFEF
 5930+2718 ED 79        		OUT	(C),A
 5931+271A 3E 01        		LD	A,$01
 5932+271C 01 EF DE     		LD	BC,$DEEF
 5933+271F ED 79        		OUT	(C),A
 5934+2721 01 EF EE     		LD	BC,$EEEF
 5935+2724 ED 59        		OUT	(C),E
 5936+2726 01 EF EF     		LD	BC,$EFEF
 5937+2729 ED 51        		OUT	(C),D
 5938+272B 37           		SCF
 5939+272C C1           x272c:		POP	BC
 5940+272D D1           		POP	DE
 5941+272E E1           		POP	HL
 5942+272F C9           		RET
 5943+2730
 5944+2730 A7           x2730:		AND	A
 5945+2731 3E 02        		LD	A,$02
 5946+2733 18 F7        		JR	x272c		; (-$09)
 5947+2735 DD B6 10     l2735:		OR	(IX+$10)
 5948+2738 C5           l2738:		PUSH	BC
 5949+2739 01 EF FE     		LD	BC,$FEEF
 5950+273C ED 79        		OUT	(C),A
 5951+273E E5           		PUSH	HL
 5952+273F 21 40 C0     		LD	HL,$C040
 5953+2742 CD 78 26     		CALL	l2678
 5954+2745 E1           		POP	HL
 5955+2746 C1           		POP	BC
 5956+2747 C9           		RET
 5957+2748
 5958+2748 3E 10        l2748:		LD	A,$10
 5959+274A CB 23        		SLA	E
 5960+274C CB 12        		RL	D
 5961+274E ED 6A        l274e:		ADC	HL,HL
 5962+2750 30 06        		JR	NC,l2758	; (+$06)
 5963+2752 B7           		OR	A
 5964+2753 ED 42        		SBC	HL,BC
 5965+2755 B7           		OR	A
 5966+2756 18 06        		JR	l275e		; (+$06)
 5967+2758 ED 42        l2758:		SBC	HL,BC
 5968+275A 30 02        		JR	NC,l275e	; (+$02)
 5969+275C 09           		ADD	HL,BC
 5970+275D 37           		SCF
 5971+275E CB 13        l275e:		RL	E
 5972+2760 CB 12        		RL	D
 5973+2762 3D           		DEC	A
 5974+2763 20 E9        		JR	NZ,l274e	; (-$17)
 5975+2765 7A           		LD	A,D
 5976+2766 2F           		CPL
 5977+2767 47           		LD	B,A
 5978+2768 7B           		LD	A,E
 5979+2769 2F           		CPL
 5980+276A 4F           		LD	C,A
 5981+276B EB           		EX	DE,HL
 5982+276C C9           		RET
 5983+276D
 5984+276D DD CB 00 7E  l276d:		BIT	7,(IX+$00)
 5985+2771 20 05        		JR	NZ,l2778	; (+$05)
 5986+2773 CD B9 27     		CALL	l27b9
 5987+2776 18 2F        		JR	l27a7		; (+$2F)
 5988+2778 DD E5        l2778:		PUSH	IX
 5989+277A E3           		EX	(SP),HL
 5990+277B 7E           l277b:		LD	A,(HL)
 5991+277C CD 38 27     		CALL	l2738
 5992+277F 30 FA        		JR	NC,l277b	; (-$06)
 5993+2781 23           		INC	HL
 5994+2782 01 EF F0     		LD	BC,$F0EF
 5995+2785 ED A3        		OUTI
 5996+2787 01 EF EF     		LD	BC,$EFEF
 5997+278A ED A3        		OUTI
 5998+278C 01 EF E0     		LD	BC,$E0EF
 5999+278F ED A3        		OUTI
 6000+2791 5E           		LD	E,(HL)
 6001+2792 23           		INC	HL
 6002+2793 CB BE        		res	7,(HL)
 6003+2795 E3           		EX	(SP),HL
 6004+2796 DD E1        		POP	IX
 6005+2798 CD B9 27     		CALL	l27b9
 6006+279B 01 EF DE     l279b:		LD	BC,$DEEF
 6007+279E ED 59        		OUT	(C),E
 6008+27A0 16 20        		LD	D,$20
 6009+27A2 01 EF FF     		LD	BC,$FFEF
 6010+27A5 ED 51        		OUT	(C),D
 6011+27A7 11 00 01     l27a7:		LD	DE,$0100
 6012+27AA 01 EF FF     l27aa:		LD	BC,$FFEF
 6013+27AD ED 78        		IN	A,(C)
 6014+27AF E6 89        		AND	$89
 6015+27B1 FE 08        		CP	$08
 6016+27B3 20 F5        		JR	NZ,l27aa	; (-$0B)
 6017+27B5 01 EF CE     		LD	BC,$CEEF
 6018+27B8 C9           		RET
 6019+27B9
 6020+27B9 DD 35 FF     l27b9:		DEC	(IX-$01)
 6021+27BC C0           		RET	NZ
 6022+27BD
 6023+27BD DD CB 00 FE  		SET	7,(IX+$00)
 6024+27C1 C9           		RET
 6025+27C2
 6026+27C2 01 EF CE     x27c2:		LD	BC,$CEEF
 6027+27C5 7C           l27c5:		LD	A,H
 6028+27C6 B5           		OR	L
 6029+27C7 C8           		RET	Z
 6030+27C8
 6031+27C8 ED 78        		IN	A,(C)
 6032+27CA 2B           		DEC	HL
 6033+27CB 1B           		DEC	DE
 6034+27CC 18 F7        		JR	l27c5		; (-$09)
 6035+27CE ED 78        l27ce:		IN	A,(C)
 6036+27D0 1B           		DEC	DE
 6037+27D1 7A           		LD	A,D
 6038+27D2 B3           		OR	E
 6039+27D3 20 F9        		JR	NZ,l27ce	; (-$07)
 6040+27D5 C9           		RET
 6041+27D6
 6042+27D6 37           		SCF
 6043+27D7 C9           		RET
 6044+27D8
 6045+27D8 CB 23        		SLA	E
 6046+27DA CB 3A        		SRL	D
 6047+27DC CB 1B        		RR	E
 6048+27DE 0E 00        		LD	C,$00
 6049+27E0 E5           		PUSH	HL
 6050+27E1 DD 6E 17     		LD	L,(IX+$17)
 6051+27E4 DD 66 18     		LD	H,(IX+$18)
 6052+27E7 E3           		EX	(SP),HL
 6053+27E8 DD E3        		EX	(SP),IX
 6054+27EA CD 58 25     		CALL	l2558
 6055+27ED DD E1        		POP	IX
 6056+27EF C9           		RET
 6057+27F0
 6058+27F0 CB 23        		SLA	E
 6059+27F2 CB 3A        		SRL	D
 6060+27F4 CB 1B        		RR	E
 6061+27F6 0E 00        		LD	C,$00
 6062+27F8 E5           		PUSH	HL
 6063+27F9 DD 6E 17     		LD	L,(IX+$17)
 6064+27FC DD 66 18     		LD	H,(IX+$18)
 6065+27FF E3           		EX	(SP),HL
 6066+2800 DD E3        		EX	(SP),IX
 6067+2802 CD FB 25     		CALL	l25fb
 6068+2805 DD E1        		POP	IX
 6069+2807 C9           		RET
 6070+2808
 6071+2808 11 06 01     l2808:		LD	DE,l0106
 6072+280B 37           		SCF
 6073+280C C9           		RET
 6074+280D
 6075+280D CB 3F        l280d:		SRL	A
 6076+280F DD 21 83 E8  		LD	IX,$E883
 6077+2813 30 04        		JR	NC,l2819	; (+$04)
 6078+2815 DD 21 8D E8  		LD	IX,$E88D
 6079+2819 A7           l2819:		AND	A
 6080+281A 3E 16        		LD	A,$16
 6081+281C C0           		RET	NZ
 6082+281D
 6083+281D DD 7E 00     		LD	A,(IX+$00)
 6084+2820 DD B6 01     		OR	(IX+$01)
 6085+2823 3E 16        		LD	A,$16
 6086+2825 C8           		RET	Z
 6087+2826
 6088+2826 37           		SCF
 6089+2827 C9           		RET
 6090+2828
 6091+2828 21 97 E8     l2828:		LD	HL,$E897
 6092+282B 11 98 E8     		LD	DE,$E898
 6093+282E 01 4B 00     		LD	BC,$004B
 6094+2831 36 00        		LD	(HL),$00
 6095+2833 ED B0        		LDIR
 6096+2835 21 E3 E8     		LD	HL,$E8E3
 6097+2838 11 E4 E8     		LD	DE,$E8E4
 6098+283B 01 5F 02     		LD	BC,$025F
 6099+283E 36 00        		LD	(HL),$00
 6100+2840 ED B0        		LDIR
 6101+2842 21 D0 07     		LD	HL,$07D0
 6102+2845 22 9E DF     		LD	($DF9E),HL
 6103+2848 21 83 E8     		LD	HL,$E883
 6104+284B 11 97 E8     		LD	DE,$E897
 6105+284E 3E A0        		LD	A,$A0
 6106+2850 CD 37 29     		CALL	l2937
 6107+2853 21 8D E8     		LD	HL,$E88D
 6108+2856 11 AA E8     		LD	DE,$E8AA
 6109+2859 3E B0        		LD	A,$B0
 6110+285B CD 37 29     		CALL	l2937
 6111+285E CD B7 24     		CALL	l24b7
 6112+2861 21 00 00     		LD	HL,$0000
 6113+2864 22 9E DF     		LD	($DF9E),HL
 6114+2867 01 FE FE     		LD	BC,$FEFE
 6115+286A ED 78        		IN	A,(C)
 6116+286C 1F           		RRA
 6117+286D 3F           		CCF
 6118+286E D8           		RET	C
 6119+286F
 6120+286F AF           		XOR	A
 6121+2870 47           		LD	B,A
 6122+2871 4F           		LD	C,A
 6123+2872 2E 08        		LD	L,$08
 6124+2874 CD 6C 30     		CALL	l306c
 6125+2877 30 26        		JR	NC,l289f	; (+$26)
 6126+2879 32 0F EC     		LD	($EC0F		),A
 6127+287C 32 11 EC     		LD	($EC11		),A
 6128+287F 32 8F 5C     		LD	(	$5C8F),A
 6129+2882 32 48 5C     		LD	(	$5C48),A
 6130+2885 57           		LD	D,A
 6131+2886 1F           		RRA
 6132+2887 1F           		RRA
 6133+2888 1F           		RRA
 6134+2889 E6 07        		AND	$07
 6135+288B D3 FE        		OUT	($FE),A
 6136+288D 21 00 58     		LD	HL,$5800
 6137+2890 01 00 03     		LD	BC,$0300
 6138+2893 7E           x2893:		LD	A,(HL)
 6139+2894 FE 38        		CP	$38
 6140+2896 20 01        		JR	NZ,l2899	; (+$01)
 6141+2898 72           		LD	(HL),D
 6142+2899 23           l2899:		INC	HL
 6143+289A 0B           		DEC	BC
 6144+289B 78           		LD	A,B
 6145+289C B1           		OR	C
 6146+289D 20 F4        		JR	NZ,x2893	; (-$0C)
 6147+289F AF           l289f:		XOR	A
 6148+28A0 47           		LD	B,A
 6149+28A1 4F           		LD	C,A
 6150+28A2 2E 09        		LD	L,$09
 6151+28A4 CD 6C 30     		CALL	l306c
 6152+28A7 30 03        		JR	NC,l28ac	; (+$03)
 6153+28A9 32 8D 5C     		LD	(	$5C8D),A
 6154+28AC 21 66 5B     l28ac:		LD	HL,	$5B66
 6155+28AF CB B6        		res	6,(HL)
 6156+28B1 AF           		XOR	A
 6157+28B2 47           		LD	B,A
 6158+28B3 4F           		LD	C,A
 6159+28B4 21 11 EF     		LD	HL,$EF11
 6160+28B7 CD 69 2B     		CALL	l2b69
 6161+28BA 30 32        		JR	NC,l28ee	; (+$32)
 6162+28BC 21 3B EF     		LD	HL,$EF3B
 6163+28BF 11 34 29     		LD	DE,o2934
 6164+28C2 06 03        		LD	B,$03
 6165+28C4 7E           l28c4:		LD	A,(HL)
 6166+28C5 A7           		AND	A
 6167+28C6 28 0B        		JR	Z,l28d3		; (+$0B)
 6168+28C8
 6169+28C8 E5           		PUSH	HL
 6170+28C9 D5           		PUSH	DE
 6171+28CA C5           		PUSH	BC
 6172+28CB 1A           		LD	A,(DE)
 6173+28CC 6F           		LD	L,A
 6174+28CD CD 70 33     		CALL	l3370
 6175+28D0 C1           		POP	BC
 6176+28D1 D1           		POP	DE
 6177+28D2 E1           		POP	HL
 6178+28D3 23           l28d3:		INC	HL
 6179+28D4 13           		INC	DE
 6180+28D5 10 ED        		DJNZ	l28c4		; (-$13)
 6181+28D7 21 3E EF     		LD	HL,$EF3E
 6182+28DA 06 03        		LD	B,$03
 6183+28DC 7E           l28dc:		LD	A,(HL)
 6184+28DD A7           		AND	A
 6185+28DE 28 0B        		JR	Z,l28eb		; (+$0B)
 6186+28E0 E5           		PUSH	HL
 6187+28E1 C5           		PUSH	BC
 6188+28E2 6F           		LD	L,A
 6189+28E3 3E 05        		LD	A,$05
 6190+28E5 90           		SUB	B
 6191+28E6 CD 27 32     		CALL	l3227
 6192+28E9 C1           		POP	BC
 6193+28EA E1           		POP	HL
 6194+28EB 23           l28eb:		INC	HL
 6195+28EC 10 EE        		DJNZ	l28dc		; (-$12)
 6196+28EE AF           l28ee:		XOR	A
 6197+28EF 01 00 00     l28ef:		LD	BC,$0000
 6198+28F2 F5           		PUSH	AF
 6199+28F3 F1           l28f3:		POP	AF
 6200+28F4 F5           		PUSH	AF
 6201+28F5 2E 1C        		LD	L,$1C
 6202+28F7 CD 6C 30     		CALL	l306c
 6203+28FA 30 2E        		JR	NC,l292a	; (+$2E)
 6204+28FC 28 08        		JR	Z,l2906		; (+$08)
 6205+28FE 6F           		LD	L,A
 6206+28FF F1           		POP	AF
 6207+2900 F5           		PUSH	AF
 6208+2901 C5           		PUSH	BC
 6209+2902 CD 27 32     		CALL	l3227
 6210+2905 C1           		POP	BC
 6211+2906 03           l2906:		INC	BC
 6212+2907 78           		LD	A,B
 6213+2908 B1           		OR	C
 6214+2909 20 E8        		JR	NZ,l28f3	; (-$18)
 6215+290B F1           l290b:		POP	AF
 6216+290C 3C           		INC	A
 6217+290D FE 02        		CP	$02
 6218+290F 20 DE        		JR	NZ,l28ef	; (-$22)
 6219+2911 AF           		XOR	A
 6220+2912 47           		LD	B,A
 6221+2913 4F           		LD	C,A
 6222+2914 2E 10        		LD	L,$10
 6223+2916 CD 6C 30     		CALL	l306c
 6224+2919 30 0D        		JR	NC,l2928	; (+$0D)
 6225+291B 28 0B        		JR	Z,l2928		; (+$0B)
 6226+291D CD 2D 01     		CALL	l012d
 6227+2920 30 06        		JR	NC,l2928	; (+$06)
 6228+2922 32 79 5B     		LD	(	$5B79),A
 6229+2925 32 7A 5B     		LD	(	$5B7A),A
 6230+2928 37           l2928:		SCF
 6231+2929 C9           		RET
 6232+292A
 6233+292A FE 38        l292a:		CP	$38
 6234+292C 28 DD        		JR	Z,l290b		; (-$23)
 6235+292E FE 16        		CP	$16
 6236+2930 28 D9        		JR	Z,l290b		; (-$27)
 6237+2932 18 D2        		JR	l2906		; (-$2E)
 6238+2934 41           		LD	B,C
 6239+2935 42           		LD	B,D
 6240+2936 4D           		LD	C,L
 6241+2937 E5           l2937:		PUSH	HL
 6242+2938 D5           		PUSH	DE
 6243+2939 21 A7 29     		LD	HL,l29a7
 6244+293C 01 10 00     		LD	BC,$0010
 6245+293F ED B0        		LDIR
 6246+2941 EB           		EX	DE,HL
 6247+2942 77           		LD	(HL),A
 6248+2943 23           		INC	HL
 6249+2944 36 00        		LD	(HL),$00
 6250+2946 23           		INC	HL
 6251+2947 36 00        		LD	(HL),$00
 6252+2949 E1           		POP	HL
 6253+294A D1           		POP	DE
 6254+294B D5           		PUSH	DE
 6255+294C E5           		PUSH	HL
 6256+294D 21 B2 29     		LD	HL,l29b2
 6257+2950 01 08 00     		LD	BC,$0008
 6258+2953 ED B0        		LDIR
 6259+2955 EB           		EX	DE,HL
 6260+2956 D1           		POP	DE
 6261+2957 D5           		PUSH	DE
 6262+2958 73           		LD	(HL),E
 6263+2959 23           		INC	HL
 6264+295A 72           		LD	(HL),D
 6265+295B 07           		RLCA
 6266+295C 07           		RLCA
 6267+295D 07           		RLCA
 6268+295E 07           		RLCA
 6269+295F E6 01        		AND	$01
 6270+2961 F5           		PUSH	AF
 6271+2962 21 BA 29     		LD	HL,x29ba
 6272+2965 CD C8 2B     		CALL	l2bc8
 6273+2968 C1           		POP	BC
 6274+2969 30 07        		JR	NC,l2972	; (+$07)
 6275+296B 3A 21 EF     		LD	A,($EF21)
 6276+296E FE 01        		CP	$01
 6277+2970 28 1A        		JR	Z,l298c		; (+$1A)
 6278+2972 78           l2972:		LD	A,B
 6279+2973 DD E3        		EX	(SP),IX
 6280+2975 DD 34 03     		INC	(IX+$03)
 6281+2978 DD 34 06     		INC	(IX+$06)
 6282+297B DD E3        		EX	(SP),IX
 6283+297D 21 BA 29     		LD	HL,$29BA
 6284+2980 CD C8 2B     		CALL	l2bc8
 6285+2983 30 1A        		JR	NC,l299f	; (+$1A)
 6286+2985 3A 21 EF     		LD	A,($EF21)
 6287+2988 FE 01        		CP	$01
 6288+298A 20 13        		JR	NZ,l299f	; (+$13)
 6289+298C 21 21 EF     l298c:		LD	HL,$EF21
 6290+298F D1           		POP	DE
 6291+2990 01 10 00     		LD	BC,$0010
 6292+2993 ED B0        		LDIR
 6293+2995 21 31 EF     		LD	HL,$EF31
 6294+2998 D1           		POP	DE
 6295+2999 01 08 00     		LD	BC,$0008
 6296+299C ED B0        		LDIR
 6297+299E C9           		RET
 6298+299F
 6299+299F AF           l299f:		XOR	A
 6300+29A0 E1           		POP	HL
 6301+29A1 77           		LD	(HL),A
 6302+29A2 E1           		POP	HL
 6303+29A3 77           		LD	(HL),A
 6304+29A4 23           		INC	HL
 6305+29A5 77           		LD	(HL),A
 6306+29A6 C9           		RET
 6307+29A7
 6308+29A7 01 00 00 00  l29a7:		DB	1,0,0,0,0,0,0,0,0,0,0
 6308+29AB 00 00 00 00
 6308+29AF 00 00 00
 6309+29B2 01 00 02 02  l29b2:		DB	1,0,2,2,4,0,0,0
 6309+29B6 04 00 00 00
 6310+29BA 50 4C 55 53  x29ba:		DB	"PLUSIDEDOS      "
 6310+29BE 49 44 45 44
 6310+29C2 4F 53 20 20
 6310+29C6 20 20 20 20
 6311+29CA
 6312+29CA 07           l29ca:		RLCA
 6313+29CB 07           		RLCA
 6314+29CC 07           		RLCA
 6315+29CD 07           		RLCA
 6316+29CE 4F           		LD	C,A
 6317+29CF DD 21 97 E8  		LD	IX,$E897
 6318+29D3 06 04        		LD	B,$04
 6319+29D5 1E 00        		LD	E,$00
 6320+29D7 63           		LD	H,E
 6321+29D8 6B           		LD	L,E
 6322+29D9 DD 7E 00     l29d9:		LD	A,(IX+$00)
 6323+29DC A7           		AND	A
 6324+29DD 28 1D        		JR	Z,l29fc		; (+$1D)
 6325+29DF DD 7E 10     		LD	A,(IX+$10)
 6326+29E2 E6 10        		AND	$10
 6327+29E4 B9           		CP	C
 6328+29E5 20 09        		JR	NZ,x29f0	; (+$09)
 6329+29E7 DD 7E 11     		LD	A,(IX+$11)
 6330+29EA DD B6 12     		OR	(IX+$12)
 6331+29ED 28 01        		JR	Z,x29f0		; (+$01)
 6332+29EF 1C           		INC	E
 6333+29F0 D5           x29f0:		PUSH	DE
 6334+29F1 11 13 00     		LD	DE,$0013
 6335+29F4 DD 19        		ADD	IX,DE
 6336+29F6 D1           		POP	DE
 6337+29F7 10 E0        		DJNZ	l29d9		; (-$20)
 6338+29F9 7B           		LD	A,E
 6339+29FA 37           		SCF
 6340+29FB C9           		RET
 6341+29FC
 6342+29FC DD E5        l29fc:		PUSH	IX
 6343+29FE E1           		POP	HL
 6344+29FF 18 EF        		JR	x29f0		; (-$11)
 6345+2A01 C5           l2a01:		PUSH	BC
 6346+2A02 E5           		PUSH	HL
 6347+2A03 DD E5        		PUSH	IX
 6348+2A05 F5           		PUSH	AF
 6349+2A06 CD CA 29     		CALL	l29ca
 6350+2A09 A7           		AND	A
 6351+2A0A 28 07        		JR	Z,l2a13		; (+$07)
 6352+2A0C 3E 3B        		LD	A,$3B
 6353+2A0E C1           l2a0e:		POP	BC
 6354+2A0F C1           		POP	BC
 6355+2A10 C1           l2a10:		POP	BC
 6356+2A11 C1           		POP	BC
 6357+2A12 C9           		RET
 6358+2A13
 6359+2A13 F1           l2a13:		POP	AF
 6360+2A14 F5           		PUSH	AF
 6361+2A15 CD 0D 28     		CALL	l280d
 6362+2A18 38 0C        		JR	C,l2a26		; (+$0C)
 6363+2A1A 7C           		LD	A,H
 6364+2A1B B5           		OR	L
 6365+2A1C 3E 3C        		LD	A,$3C
 6366+2A1E 28 EE        		JR	Z,l2a0e		; (-$12)
 6367+2A20 DD 75 08     		LD	(IX+$08),L
 6368+2A23 DD 74 09     		LD	(IX+$09),H
 6369+2A26 F1           l2a26:		POP	AF
 6370+2A27 D1           		POP	DE
 6371+2A28 DD 73 00     		LD	(IX+$00),E
 6372+2A2B DD 72 01     		LD	(IX+$01),D
 6373+2A2E C1           		POP	BC
 6374+2A2F DD 70 02     		LD	(IX+$02),B
 6375+2A32 DD 71 03     		LD	(IX+$03),C
 6376+2A35 21 00 00     		LD	HL,$0000
 6377+2A38 54           		LD	D,H
 6378+2A39 59           		LD	E,C
 6379+2A3A CB B8        		res	7,B
 6380+2A3C 19           l2a3c:		ADD	HL,DE
 6381+2A3D 10 FD        		DJNZ	l2a3c		; (-$03)
 6382+2A3F DD 75 04     		LD	(IX+$04),L
 6383+2A42 DD 74 05     		LD	(IX+$05),H
 6384+2A45 E1           		POP	HL
 6385+2A46 DD 75 06     		LD	(IX+$06),L
 6386+2A49 DD 74 07     		LD	(IX+$07),H
 6387+2A4C F5           		PUSH	AF
 6388+2A4D CB 3C        		SRL	H
 6389+2A4F CB 1D        		RR	L
 6390+2A51 CB 3C        		SRL	H
 6391+2A53 CB 1D        		RR	L
 6392+2A55 CB 3C        		SRL	H
 6393+2A57 CB 1D        		RR	L
 6394+2A59 AF           		XOR	A
 6395+2A5A CD CD 2E     		CALL	l2ecd
 6396+2A5D DD CB 02 7E  		BIT	7,(IX+$02)
 6397+2A61 DD CB 02 BE  		res	7,(IX+$02)
 6398+2A65 DD 6E 08     		LD	L,(IX+$08)
 6399+2A68 DD 66 09     		LD	H,(IX+$09)
 6400+2A6B E5           		PUSH	HL
 6401+2A6C DD E3        		EX	(SP),IX
 6402+2A6E F5           		PUSH	AF
 6403+2A6F 3E 00        		LD	A,$00
 6404+2A71 DD 77 01     		LD	(IX+$01),A
 6405+2A74 DD 77 02     		LD	(IX+$02),A
 6406+2A77 28 01        		JR	Z,l2a7a		; (+$01)
 6407+2A79 3C           		INC	A
 6408+2A7A DD 77 03     l2a7a:		LD	(IX+$03),A
 6409+2A7D F1           		POP	AF
 6410+2A7E DD E3        		EX	(SP),IX
 6411+2A80 C4 F4 2E     		CALL	NZ,l2ef4
 6412+2A83 DD E3        		EX	(SP),IX
 6413+2A85 DD 36 00 01  		LD	(IX+$00),$01
 6414+2A89 DD 73 04     		LD	(IX+$04),E
 6415+2A8C DD 72 05     		LD	(IX+$05),D
 6416+2A8F DD 77 06     		LD	(IX+$06),A
 6417+2A92 DD E3        		EX	(SP),IX
 6418+2A94 11 10 00     		LD	DE,$0010
 6419+2A97 A7           		AND	A
 6420+2A98 ED 52        		SBC	HL,DE
 6421+2A9A CD FC 2E     		CALL	l2efc
 6422+2A9D DD E3        		EX	(SP),IX
 6423+2A9F D1           		POP	DE
 6424+2AA0 F1           		POP	AF
 6425+2AA1 F5           		PUSH	AF
 6426+2AA2 07           		RLCA
 6427+2AA3 07           		RLCA
 6428+2AA4 07           		RLCA
 6429+2AA5 07           		RLCA
 6430+2AA6 F6 A0        		OR	$A0
 6431+2AA8 DD 77 10     		LD	(IX+$10),A
 6432+2AAB AF           		XOR	A
 6433+2AAC DD 77 11     		LD	(IX+$11),A
 6434+2AAF DD 77 12     		LD	(IX+$12),A
 6435+2AB2 D5           		PUSH	DE
 6436+2AB3 57           		LD	D,A
 6437+2AB4 5F           		LD	E,A
 6438+2AB5 CD 07 2D     		CALL	l2d07
 6439+2AB8 D2 10 2A     		JP	NC,l2a10
 6440+2ABB 21 11 EF     		LD	HL,$EF11
 6441+2ABE 54           		LD	D,H
 6442+2ABF 5D           		LD	E,L
 6443+2AC0 13           		INC	DE
 6444+2AC1 01 3F 00     		LD	BC,$003F
 6445+2AC4 70           		LD	(HL),B
 6446+2AC5 ED B0        		LDIR
 6447+2AC7 3E FF        		LD	A,$FF
 6448+2AC9 32 21 EF     		LD	($EF21),A
 6449+2ACC DD 5E 04     		LD	E,(IX+$04)
 6450+2ACF DD 56 05     		LD	D,(IX+$05)
 6451+2AD2 DD 7E 06     		LD	A,(IX+$06)
 6452+2AD5 DD E3        		EX	(SP),IX
 6453+2AD7 CD F4 2E     		CALL	l2ef4
 6454+2ADA ED 53 22 EF  		LD	($EF22),DE
 6455+2ADE 32 24 EF     		LD	($EF24),A
 6456+2AE1 DD 6E 00     		LD	L,(IX+$00)
 6457+2AE4 DD 66 01     		LD	H,(IX+$01)
 6458+2AE7 2B           		DEC	HL
 6459+2AE8 22 25 EF     		LD	($EF25),HL
 6460+2AEB DD 7E 02     		LD	A,(IX+$02)
 6461+2AEE 3D           		DEC	A
 6462+2AEF 32 27 EF     		LD	($EF27),A
 6463+2AF2 21 11 EF     		LD	HL,$EF11
 6464+2AF5 CD FC 2E     		CALL	l2efc
 6465+2AF8 DD E3        		EX	(SP),IX
 6466+2AFA D1           		POP	DE
 6467+2AFB F1           		POP	AF
 6468+2AFC F5           		PUSH	AF
 6469+2AFD D5           		PUSH	DE
 6470+2AFE 01 01 00     		LD	BC,$0001
 6471+2B01 CD 92 2B     		CALL	l2b92
 6472+2B04 D2 10 2A     		JP	NC,l2a10
 6473+2B07 21 BA 29     		LD	HL,$29BA
 6474+2B0A 11 11 EF     		LD	DE,$EF11
 6475+2B0D 01 10 00     		LD	BC,$0010
 6476+2B10 ED B0        		LDIR
 6477+2B12 DD E5        		PUSH	IX
 6478+2B14 E1           		POP	HL
 6479+2B15 01 0B 00     		LD	BC,$000B
 6480+2B18 ED B0        		LDIR
 6481+2B1A E1           		POP	HL
 6482+2B1B 11 31 EF     		LD	DE,$EF31
 6483+2B1E 01 08 00     		LD	BC,$0008
 6484+2B21 ED B0        		LDIR
 6485+2B23 EB           		EX	DE,HL
 6486+2B24 36 38        		LD	(HL),$38
 6487+2B26 23           		INC	HL
 6488+2B27 36 38        		LD	(HL),$38
 6489+2B29 F1           		POP	AF
 6490+2B2A 21 11 EF     		LD	HL,$EF11
 6491+2B2D CD 92 2B     		CALL	l2b92
 6492+2B30 C9           		RET
 6493+2B31
 6494+2B31 CD 0D 28     l2b31:		CALL	l280d
 6495+2B34 D0           		RET	NC
 6496+2B35
 6497+2B35 DD 6E 06     		LD	L,(IX+$06)
 6498+2B38 DD 66 07     		LD	H,(IX+$07)
 6499+2B3B A7           		AND	A
 6500+2B3C ED 42        		SBC	HL,BC
 6501+2B3E 3E 38        		LD	A,$38
 6502+2B40 3F           		CCF
 6503+2B41 D0           		RET	NC
 6504+2B42
 6505+2B42 DD 6E 08     		LD	L,(IX+$08)
 6506+2B45 DD 66 09     		LD	H,(IX+$09)
 6507+2B48 E5           		PUSH	HL
 6508+2B49 DD E1        		POP	IX
 6509+2B4B C5           		PUSH	BC
 6510+2B4C CB 38        		SRL	B
 6511+2B4E CB 19        		RR	C
 6512+2B50 CB 38        		SRL	B
 6513+2B52 CB 19        		RR	C
 6514+2B54 CB 38        		SRL	B
 6515+2B56 CB 19        		RR	C
 6516+2B58 50           		LD	D,B
 6517+2B59 59           		LD	E,C
 6518+2B5A C1           		POP	BC
 6519+2B5B 79           		LD	A,C
 6520+2B5C E6 07        		AND	$07
 6521+2B5E 0E 00        		LD	C,$00
 6522+2B60 1F           		RRA
 6523+2B61 CB 19        		RR	C
 6524+2B63 1F           		RRA
 6525+2B64 CB 19        		RR	C
 6526+2B66 47           		LD	B,A
 6527+2B67 37           		SCF
 6528+2B68 C9           		RET
 6529+2B69
 6530+2B69 C5           l2b69:		PUSH	BC
 6531+2B6A DD E5        		PUSH	IX
 6532+2B6C E5           		PUSH	HL
 6533+2B6D CD 31 2B     		CALL	l2b31
 6534+2B70 30 1B        		JR	NC,l2b8d	; (+$1B)
 6535+2B72 C5           		PUSH	BC
 6536+2B73 0E 00        		LD	C,$00
 6537+2B75 06 07        		LD	B,$07
 6538+2B77 21 11 ED     		LD	HL,$ED11
 6539+2B7A CD 58 25     		CALL	l2558
 6540+2B7D C1           		POP	BC
 6541+2B7E 30 0D        		JR	NC,l2b8d	; (+$0D)
 6542+2B80 21 11 ED     		LD	HL,$ED11
 6543+2B83 09           		ADD	HL,BC
 6544+2B84 D1           		POP	DE
 6545+2B85 01 40 00     		LD	BC,$0040
 6546+2B88 ED B0        		LDIR
 6547+2B8A 37           		SCF
 6548+2B8B 18 01        		JR	l2b8e		; (+$01)
 6549+2B8D E1           l2b8d:		POP	HL
 6550+2B8E DD E1        l2b8e:		POP	IX
 6551+2B90 C1           		POP	BC
 6552+2B91 C9           		RET
 6553+2B92
 6554+2B92 C5           l2b92:		PUSH	BC
 6555+2B93 DD E5        		PUSH	IX
 6556+2B95 E5           		PUSH	HL
 6557+2B96 CD 31 2B     		CALL	l2b31
 6558+2B99 30 28        		JR	NC,l2bc3	; (+$28)
 6559+2B9B D5           		PUSH	DE
 6560+2B9C C5           		PUSH	BC
 6561+2B9D 0E 00        		LD	C,$00
 6562+2B9F 06 07        		LD	B,$07
 6563+2BA1 21 11 ED     		LD	HL,$ED11
 6564+2BA4 CD 58 25     		CALL	l2558
 6565+2BA7 C1           		POP	BC
 6566+2BA8 D1           		POP	DE
 6567+2BA9 30 18        		JR	NC,l2bc3	; (+$18)
 6568+2BAB 21 11 ED     		LD	HL,$ED11
 6569+2BAE 09           		ADD	HL,BC
 6570+2BAF EB           		EX	DE,HL
 6571+2BB0 E3           		EX	(SP),HL
 6572+2BB1 01 40 00     		LD	BC,$0040
 6573+2BB4 ED B0        		LDIR
 6574+2BB6 0E 00        		LD	C,$00
 6575+2BB8 06 07        		LD	B,$07
 6576+2BBA 21 11 ED     		LD	HL,$ED11
 6577+2BBD D1           		POP	DE
 6578+2BBE CD FB 25     		CALL	l25fb
 6579+2BC1 18 01        		JR	l2bc4		; (+$01)
 6580+2BC3 E1           l2bc3:		POP	HL
 6581+2BC4 DD E1        l2bc4:		POP	IX
 6582+2BC6 C1           		POP	BC
 6583+2BC7 C9           		RET
 6584+2BC8
 6585+2BC8 DD E5        l2bc8:		PUSH	IX
 6586+2BCA 01 00 00     		LD	BC,$0000
 6587+2BCD F5           l2bcd:		PUSH	AF
 6588+2BCE C5           		PUSH	BC
 6589+2BCF E5           		PUSH	HL
 6590+2BD0 21 11 EF     		LD	HL,$EF11
 6591+2BD3 CD 69 2B     		CALL	l2b69
 6592+2BD6 30 25        		JR	NC,l2bfd	; (+$25)
 6593+2BD8 E1           		POP	HL
 6594+2BD9 E5           		PUSH	HL
 6595+2BDA 11 11 EF     		LD	DE,$EF11
 6596+2BDD 06 10        		LD	B,$10
 6597+2BDF 1A           l2bdf:		LD	A,(DE)
 6598+2BE0 BE           		CP	(HL)
 6599+2BE1 28 15        		JR	Z,l2bf8		; (+$15)
 6600+2BE3 FE 41        		CP	$41
 6601+2BE5 38 04        		JR	C,l2beb		; (+$04)
 6602+2BE7 FE 5B        		CP	$5B
 6603+2BE9 38 08        		JR	C,l2bf3		; (+$08)
 6604+2BEB FE 61        l2beb:		CP	$61
 6605+2BED 38 14        		JR	C,l2c03		; (+$14)
 6606+2BEF FE 7B        		CP	$7B
 6607+2BF1 30 10        		JR	NC,l2c03	; (+$10)
 6608+2BF3 EE 20        l2bf3:		XOR	$20
 6609+2BF5 BE           		CP	(HL)
 6610+2BF6 20 0B        		JR	NZ,l2c03	; (+$0B)
 6611+2BF8 13           l2bf8:		INC	DE
 6612+2BF9 23           		INC	HL
 6613+2BFA 10 E3        		DJNZ	l2bdf		; (-$1D)
 6614+2BFC 37           		SCF
 6615+2BFD E1           l2bfd:		POP	HL
 6616+2BFE C1           		POP	BC
 6617+2BFF E1           l2bff:		POP	HL
 6618+2C00 DD E1        		POP	IX
 6619+2C02 C9           		RET
 6620+2C03
 6621+2C03 E1           l2c03:		POP	HL
 6622+2C04 C1           		POP	BC
 6623+2C05 03           		INC	BC
 6624+2C06 78           		LD	A,B
 6625+2C07 B1           		OR	C
 6626+2C08 3E 38        		LD	A,$38
 6627+2C0A 28 F3        		JR	Z,l2bff		; (-$0D)
 6628+2C0C F1           		POP	AF
 6629+2C0D 18 BE        		JR	l2bcd		; (-$42)
 6630+2C0F E5           l2c0f:		PUSH	HL
 6631+2C10 F5           		PUSH	AF
 6632+2C11 C5           		PUSH	BC
 6633+2C12 CD C8 2B     		CALL	l2bc8
 6634+2C15 C1           		POP	BC
 6635+2C16 3F           		CCF
 6636+2C17 3E 39        		LD	A,$39
 6637+2C19 30 1D        		JR	NC,l2c38	; (+$1D)
 6638+2C1B F1           		POP	AF
 6639+2C1C F5           		PUSH	AF
 6640+2C1D 21 11 EF     		LD	HL,$EF11
 6641+2C20 CD 69 2B     		CALL	l2b69
 6642+2C23 30 13        		JR	NC,l2c38	; (+$13)
 6643+2C25 F1           		POP	AF
 6644+2C26 E1           		POP	HL
 6645+2C27 11 11 EF     		LD	DE,$EF11
 6646+2C2A C5           		PUSH	BC
 6647+2C2B 01 10 00     		LD	BC,$0010
 6648+2C2E ED B0        		LDIR
 6649+2C30 C1           		POP	BC
 6650+2C31 21 11 EF     		LD	HL,$EF11
 6651+2C34 CD 92 2B     		CALL	l2b92
 6652+2C37 C9           		RET
 6653+2C38
 6654+2C38 E1           l2c38:		POP	HL
 6655+2C39 E1           		POP	HL
 6656+2C3A C9           		RET
 6657+2C3B
 6658+2C3B E5           l2c3b:		PUSH	HL
 6659+2C3C F5           		PUSH	AF
 6660+2C3D 21 11 EF     		LD	HL,$EF11
 6661+2C40 CD 69 2B     		CALL	l2b69
 6662+2C43 30 13        		JR	NC,l2c58	; (+$13)
 6663+2C45 F1           		POP	AF
 6664+2C46 E1           		POP	HL
 6665+2C47 11 31 EF     		LD	DE,$EF31
 6666+2C4A C5           		PUSH	BC
 6667+2C4B 01 20 00     		LD	BC,$0020
 6668+2C4E ED B0        		LDIR
 6669+2C50 C1           		POP	BC
 6670+2C51 21 11 EF     		LD	HL,$EF11
 6671+2C54 CD 92 2B     		CALL	l2b92
 6672+2C57 C9           		RET
 6673+2C58
 6674+2C58 E1           l2c58:		POP	HL
 6675+2C59 E1           		POP	HL
 6676+2C5A C9           		RET
 6677+2C5B
 6678+2C5B DD E5        l2c5b:		PUSH	IX
 6679+2C5D D5           		PUSH	DE
 6680+2C5E E5           		PUSH	HL
 6681+2C5F 87           		ADD	A,A
 6682+2C60 87           		ADD	A,A
 6683+2C61 87           		ADD	A,A
 6684+2C62 87           		ADD	A,A
 6685+2C63 57           		LD	D,A
 6686+2C64 DD 21 97 E8  		LD	IX,$E897
 6687+2C68 1E 04        		LD	E,$04
 6688+2C6A DD 7E 00     l2c6a:		LD	A,(IX+$00)
 6689+2C6D A7           		AND	A
 6690+2C6E 28 14        		JR	Z,l2c84		; (+$14)
 6691+2C70 DD 7E 10     		LD	A,(IX+$10)
 6692+2C73 E6 10        		AND	$10
 6693+2C75 BA           		CP	D
 6694+2C76 20 0C        		JR	NZ,l2c84	; (+$0C)
 6695+2C78 DD 6E 11     		LD	L,(IX+$11)
 6696+2C7B DD 66 12     		LD	H,(IX+$12)
 6697+2C7E ED 42        		SBC	HL,BC
 6698+2C80 3E 3B        		LD	A,$3B
 6699+2C82 28 0B        		JR	Z,l2c8f		; (+$0B)
 6700+2C84 C5           l2c84:		PUSH	BC
 6701+2C85 01 13 00     		LD	BC,$0013
 6702+2C88 DD 09        		ADD	IX,BC
 6703+2C8A C1           		POP	BC
 6704+2C8B 1D           		DEC	E
 6705+2C8C 20 DC        		JR	NZ,l2c6a	; (-$24)
 6706+2C8E 37           		SCF
 6707+2C8F E1           l2c8f:		POP	HL
 6708+2C90 D1           		POP	DE
 6709+2C91 DD E1        		POP	IX
 6710+2C93 C9           		RET
 6711+2C94
 6712+2C94 F5           l2c94:		PUSH	AF
 6713+2C95 CD 5B 2C     		CALL	l2c5b
 6714+2C98 30 3F        		JR	NC,l2cd9	; (+$3F)
 6715+2C9A DD 21 97 E8  		LD	IX,$E897
 6716+2C9E 1E 04        		LD	E,$04
 6717+2CA0 DD 7E 00     l2ca0:		LD	A,(IX+$00)
 6718+2CA3 A7           		AND	A
 6719+2CA4 28 0E        		JR	Z,l2cb4		; (+$0E)
 6720+2CA6 C5           		PUSH	BC
 6721+2CA7 01 13 00     		LD	BC,$0013
 6722+2CAA DD 09        		ADD	IX,BC
 6723+2CAC C1           		POP	BC
 6724+2CAD 1D           		DEC	E
 6725+2CAE 20 F0        		JR	NZ,l2ca0	; (-$10)
 6726+2CB0 3E 3C        		LD	A,$3C
 6727+2CB2 18 25        		JR	l2cd9		; (+$25)
 6728+2CB4 F1           l2cb4:		POP	AF
 6729+2CB5 F5           		PUSH	AF
 6730+2CB6 21 11 EF     		LD	HL,$EF11
 6731+2CB9 CD 69 2B     		CALL	l2b69
 6732+2CBC 30 1B        		JR	NC,l2cd9	; (+$1B)
 6733+2CBE 3A 21 EF     		LD	A,($EF21)
 6734+2CC1 3D           		DEC	A
 6735+2CC2 FE FD        		CP	$FD
 6736+2CC4 3E 38        		LD	A,$38
 6737+2CC6 30 11        		JR	NC,l2cd9	; (+$11)
 6738+2CC8 F1           		POP	AF
 6739+2CC9 CD E1 2C     		CALL	l2ce1
 6740+2CCC 21 21 EF     		LD	HL,$EF21
 6741+2CCF DD E5        		PUSH	IX
 6742+2CD1 D1           		POP	DE
 6743+2CD2 01 10 00     		LD	BC,$0010
 6744+2CD5 ED B0        		LDIR
 6745+2CD7 37           		SCF
 6746+2CD8 C9           		RET
 6747+2CD9
 6748+2CD9 E1           l2cd9:		POP	HL
 6749+2CDA C9           		RET
 6750+2CDB
 6751+2CDB DD 36 00 00  l2cdb:		LD	(IX+$00),$00
 6752+2CDF 37           		SCF
 6753+2CE0 C9           		RET
 6754+2CE1
 6755+2CE1 F5           l2ce1:		PUSH	AF
 6756+2CE2 DD E5        		PUSH	IX
 6757+2CE4 CD 0D 28     		CALL	l280d
 6758+2CE7 DD 7E 02     		LD	A,(IX+$02)
 6759+2CEA E6 40        		AND	$40
 6760+2CEC DD E1        		POP	IX
 6761+2CEE DD 77 10     		LD	(IX+$10),A
 6762+2CF1 F1           		POP	AF
 6763+2CF2 E6 01        		AND	$01
 6764+2CF4 87           		ADD	A,A
 6765+2CF5 87           		ADD	A,A
 6766+2CF6 87           		ADD	A,A
 6767+2CF7 87           		ADD	A,A
 6768+2CF8 C6 A0        		ADD	A,$A0
 6769+2CFA DD B6 10     		OR	(IX+$10)
 6770+2CFD DD 77 10     		LD	(IX+$10),A
 6771+2D00 DD 71 11     		LD	(IX+$11),C
 6772+2D03 DD 70 12     		LD	(IX+$12),B
 6773+2D06 C9           		RET
 6774+2D07
 6775+2D07 DD E5        l2d07:		PUSH	IX
 6776+2D09 18 20        		JR	l2d2b		; (+$20)
 6777+2D0B DD E5        l2d0b:		PUSH	IX
 6778+2D0D E5           		PUSH	HL
 6779+2D0E F5           		PUSH	AF
 6780+2D0F CD 5B 2C     		CALL	l2c5b
 6781+2D12 30 4F        		JR	NC,l2d63	; (+$4F)
 6782+2D14 F1           		POP	AF
 6783+2D15 F5           		PUSH	AF
 6784+2D16 21 11 EF     		LD	HL,$EF11
 6785+2D19 CD 69 2B     		CALL	l2b69
 6786+2D1C 30 45        		JR	NC,l2d63	; (+$45)
 6787+2D1E F1           		POP	AF
 6788+2D1F E1           		POP	HL
 6789+2D20 DD E5        		PUSH	IX
 6790+2D22 D1           		POP	DE
 6791+2D23 DD 21 21 EF  		LD	IX,$EF21
 6792+2D27 CD E1 2C     		CALL	l2ce1
 6793+2D2A 7D           		LD	A,L
 6794+2D2B D5           l2d2b:		PUSH	DE
 6795+2D2C 21 11 ED     		LD	HL,$ED11
 6796+2D2F 77           		LD	(HL),A
 6797+2D30 11 12 ED     		LD	DE,$ED12
 6798+2D33 01 FF 01     		LD	BC,$01FF
 6799+2D36 ED B0        		LDIR
 6800+2D38 D1           		POP	DE
 6801+2D39 0E 00        		LD	C,$00
 6802+2D3B 7A           		LD	A,D
 6803+2D3C B3           		OR	E
 6804+2D3D 20 09        		JR	NZ,l2d48	; (+$09)
 6805+2D3F DD 5E 07     		LD	E,(IX+$07)
 6806+2D42 DD 56 08     		LD	D,(IX+$08)
 6807+2D45 DD 4E 09     		LD	C,(IX+$09)
 6808+2D48 06 07        l2d48:		LD	B,$07
 6809+2D4A 21 11 ED     		LD	HL,$ED11
 6810+2D4D D5           		PUSH	DE
 6811+2D4E CD FB 25     		CALL	l25fb
 6812+2D51 D1           		POP	DE
 6813+2D52 30 11        		JR	NC,l2d65	; (+$11)
 6814+2D54 79           		LD	A,C
 6815+2D55 B2           		OR	D
 6816+2D56 B3           		OR	E
 6817+2D57 37           		SCF
 6818+2D58 28 0B        		JR	Z,l2d65		; (+$0B)
 6819+2D5A 1B           		DEC	DE
 6820+2D5B 7A           		LD	A,D
 6821+2D5C A3           		AND	E
 6822+2D5D 3C           		INC	A
 6823+2D5E 20 E8        		JR	NZ,l2d48	; (-$18)
 6824+2D60 0D           		DEC	C
 6825+2D61 18 E5        		JR	l2d48		; (-$1B)
 6826+2D63 E1           l2d63:		POP	HL
 6827+2D64 E1           		POP	HL
 6828+2D65 DD E1        l2d65:		POP	IX
 6829+2D67 C9           		RET
 6830+2D68
 6831+2D68 01 FF FF     l2d68:		LD	BC,$FFFF
 6832+2D6B ED 43 92 EF  		LD	($EF92),BC
 6833+2D6F ED 43 94 EF  		LD	($EF94),BC
 6834+2D73 03           		INC	BC
 6835+2D74 ED 43 96 EF  		LD	($EF96),BC
 6836+2D78 F5           l2d78:		PUSH	AF
 6837+2D79 D5           		PUSH	DE
 6838+2D7A E5           		PUSH	HL
 6839+2D7B 21 11 EF     		LD	HL,$EF11
 6840+2D7E CD 69 2B     		CALL	l2b69
 6841+2D81 E1           		POP	HL
 6842+2D82 D1           		POP	DE
 6843+2D83 30 53        		JR	NC,l2dd8	; (+$53)
 6844+2D85 3A 21 EF     		LD	A,($EF21)
 6845+2D88 BC           		CP	H
 6846+2D89 20 45        		JR	NZ,l2dd0	; (+$45)
 6847+2D8B 3A 2B EF     		LD	A,($EF2B)
 6848+2D8E A7           		AND	A
 6849+2D8F 20 0F        		JR	NZ,l2da0	; (+$0F)
 6850+2D91 7D           		LD	A,L
 6851+2D92 E5           		PUSH	HL
 6852+2D93 2A 28 EF     		LD	HL,($EF28)
 6853+2D96 ED 52        		SBC	HL,DE
 6854+2D98 6F           		LD	L,A
 6855+2D99 3A 2A EF     		LD	A,($EF2A)
 6856+2D9C 9D           		SBC	A,L
 6857+2D9D E1           		POP	HL
 6858+2D9E 38 30        		JR	C,l2dd0		; (+$30)
 6859+2DA0 F1           l2da0:		POP	AF
 6860+2DA1 F5           		PUSH	AF
 6861+2DA2 CD 5B 2C     		CALL	l2c5b
 6862+2DA5 30 29        		JR	NC,l2dd0	; (+$29)
 6863+2DA7 D5           		PUSH	DE
 6864+2DA8 E5           		PUSH	HL
 6865+2DA9 ED 5B 92 EF  		LD	DE,($EF92)
 6866+2DAD 2A 28 EF     		LD	HL,($EF28)
 6867+2DB0 A7           		AND	A
 6868+2DB1 ED 52        		SBC	HL,DE
 6869+2DB3 ED 5B 94 EF  		LD	DE,($EF94)
 6870+2DB7 2A 2A EF     		LD	HL,($EF2A)
 6871+2DBA ED 52        		SBC	HL,DE
 6872+2DBC 30 10        		JR	NC,l2dce	; (+$10)
 6873+2DBE 2A 28 EF     		LD	HL,($EF28)
 6874+2DC1 22 92 EF     		LD	($EF92),HL
 6875+2DC4 2A 2A EF     		LD	HL,($EF2A)
 6876+2DC7 22 94 EF     		LD	($EF94),HL
 6877+2DCA ED 43 96 EF  		LD	($EF96),BC
 6878+2DCE E1           l2dce:		POP	HL
 6879+2DCF D1           		POP	DE
 6880+2DD0 03           l2dd0:		INC	BC
 6881+2DD1 78           		LD	A,B
 6882+2DD2 B1           		OR	C
 6883+2DD3 28 03        		JR	Z,l2dd8		; (+$03)
 6884+2DD5 F1           		POP	AF
 6885+2DD6 18 A0        		JR	l2d78		; (-$60)
 6886+2DD8 F1           l2dd8:		POP	AF
 6887+2DD9 ED 4B 96 EF  		LD	BC,($EF96)
 6888+2DDD 78           		LD	A,B
 6889+2DDE B1           		OR	C
 6890+2DDF C8           		RET	Z
 6891+2DE0
 6892+2DE0 37           		SCF
 6893+2DE1 C9           		RET
 6894+2DE2
 6895+2DE2 DD E5        l2de2:		PUSH	IX
 6896+2DE4 F5           		PUSH	AF
 6897+2DE5 E5           		PUSH	HL
 6898+2DE6 CD C8 2B     		CALL	l2bc8
 6899+2DE9 3E 39        		LD	A,$39
 6900+2DEB 3F           		CCF
 6901+2DEC D2 C8 2E     		JP	NC,l2ec8
 6902+2DEF DD E1        		POP	IX
 6903+2DF1 DD 5E 17     		LD	E,(IX+$17)
 6904+2DF4 DD 56 18     		LD	D,(IX+$18)
 6905+2DF7 DD 6E 19     		LD	L,(IX+$19)
 6906+2DFA 26 FF        		LD	H,$FF
 6907+2DFC F1           		POP	AF
 6908+2DFD F5           		PUSH	AF
 6909+2DFE CD 68 2D     		CALL	l2d68
 6910+2E01 3E 1A        		LD	A,$1A
 6911+2E03 D2 C9 2E     		JP	NC,l2ec9
 6912+2E06 F1           		POP	AF
 6913+2E07 F5           		PUSH	AF
 6914+2E08 21 11 EF     		LD	HL,$EF11
 6915+2E0B CD 69 2B     		CALL	l2b69
 6916+2E0E D2 C9 2E     		JP	NC,l2ec9
 6917+2E11 DD 6E 17     		LD	L,(IX+$17)
 6918+2E14 DD 66 18     		LD	H,(IX+$18)
 6919+2E17 DD 5E 19     		LD	E,(IX+$19)
 6920+2E1A F1           		POP	AF
 6921+2E1B F5           		PUSH	AF
 6922+2E1C DD E5        		PUSH	IX
 6923+2E1E CD 0D 28     		CALL	l280d
 6924+2E21 D2 C8 2E     		JP	NC,l2ec8
 6925+2E24 7B           		LD	A,E
 6926+2E25 CD CD 2E     		CALL	l2ecd
 6927+2E28 2A 22 EF     		LD	HL,($EF22)
 6928+2E2B 19           		ADD	HL,DE
 6929+2E2C 5F           		LD	E,A
 6930+2E2D 3A 24 EF     		LD	A,($EF24)
 6931+2E30 83           		ADD	A,E
 6932+2E31 DD BE 02     		CP	(IX+$02)
 6933+2E34 38 04        		JR	C,l2e3a		; (+$04)
 6934+2E36 DD 96 02     		SUB	(IX+$02)
 6935+2E39 23           		INC	HL
 6936+2E3A EB           l2e3a:		EX	DE,HL
 6937+2E3B 6F           		LD	L,A
 6938+2E3C 3A 27 EF     		LD	A,($EF27)
 6939+2E3F BD           		CP	L
 6940+2E40 7D           		LD	A,L
 6941+2E41 20 07        		JR	NZ,l2e4a	; (+$07)
 6942+2E43 2A 25 EF     		LD	HL,($EF25)
 6943+2E46 ED 52        		SBC	HL,DE
 6944+2E48 28 53        		JR	Z,l2e9d		; (+$53)
 6945+2E4A E1           l2e4a:		POP	HL
 6946+2E4B E3           		EX	(SP),HL
 6947+2E4C 6F           		LD	L,A
 6948+2E4D C5           		PUSH	BC
 6949+2E4E D5           		PUSH	DE
 6950+2E4F E5           		PUSH	HL
 6951+2E50 01 00 00     		LD	BC,$0000
 6952+2E53 F1           l2e53:		POP	AF
 6953+2E54 F5           		PUSH	AF
 6954+2E55 21 51 EF     		LD	HL,$EF51
 6955+2E58 CD 69 2B     		CALL	l2b69
 6956+2E5B 30 67        		JR	NC,l2ec4	; (+$67)
 6957+2E5D 3A 61 EF     		LD	A,($EF61)
 6958+2E60 A7           		AND	A
 6959+2E61 28 07        		JR	Z,l2e6a		; (+$07)
 6960+2E63 03           		INC	BC
 6961+2E64 78           		LD	A,B
 6962+2E65 B1           		OR	C
 6963+2E66 20 EB        		JR	NZ,l2e53	; (-$15)
 6964+2E68 18 5A        		JR	l2ec4		; (+$5A)
 6965+2E6A 3E FF        l2e6a:		LD	A,$FF
 6966+2E6C 32 61 EF     		LD	($EF61),A
 6967+2E6F 3A 27 EF     		LD	A,($EF27)
 6968+2E72 32 67 EF     		LD	($EF67),A
 6969+2E75 2A 25 EF     		LD	HL,($EF25)
 6970+2E78 22 65 EF     		LD	($EF65),HL
 6971+2E7B E1           		POP	HL
 6972+2E7C D1           		POP	DE
 6973+2E7D D5           		PUSH	DE
 6974+2E7E E5           		PUSH	HL
 6975+2E7F 7D           		LD	A,L
 6976+2E80 CD F4 2E     		CALL	l2ef4
 6977+2E83 32 64 EF     		LD	($EF64),A
 6978+2E86 ED 53 62 EF  		LD	($EF62),DE
 6979+2E8A 21 51 EF     		LD	HL,$EF51
 6980+2E8D CD FC 2E     		CALL	l2efc
 6981+2E90 F1           		POP	AF
 6982+2E91 F5           		PUSH	AF
 6983+2E92 CD 92 2B     		CALL	l2b92
 6984+2E95 30 2F        		JR	NC,l2ec6	; (+$2F)
 6985+2E97 E1           		POP	HL
 6986+2E98 7D           		LD	A,L
 6987+2E99 D1           		POP	DE
 6988+2E9A C1           		POP	BC
 6989+2E9B E3           		EX	(SP),HL
 6990+2E9C E5           		PUSH	HL
 6991+2E9D 32 27 EF     l2e9d:		LD	($EF27),A
 6992+2EA0 ED 53 25 EF  		LD	($EF25),DE
 6993+2EA4 21 11 EF     		LD	HL,$EF11
 6994+2EA7 CD FC 2E     		CALL	l2efc
 6995+2EAA D1           		POP	DE
 6996+2EAB D5           		PUSH	DE
 6997+2EAC C5           		PUSH	BC
 6998+2EAD 21 22 EF     		LD	HL,$EF22
 6999+2EB0 01 11 00     		LD	BC,$0011
 7000+2EB3 EB           		EX	DE,HL
 7001+2EB4 09           		ADD	HL,BC
 7002+2EB5 EB           		EX	DE,HL
 7003+2EB6 01 0F 00     		LD	BC,$000F
 7004+2EB9 ED B0        		LDIR
 7005+2EBB C1           		POP	BC
 7006+2EBC E1           		POP	HL
 7007+2EBD F1           		POP	AF
 7008+2EBE CD 92 2B     		CALL	l2b92
 7009+2EC1 DD E1        		POP	IX
 7010+2EC3 C9           		RET
 7011+2EC4
 7012+2EC4 3E 1A        l2ec4:		LD	A,$1A
 7013+2EC6 E1           l2ec6:		POP	HL
 7014+2EC7 E1           		POP	HL
 7015+2EC8 E1           l2ec8:		POP	HL
 7016+2EC9 E1           l2ec9:		POP	HL
 7017+2ECA DD E1        		POP	IX
 7018+2ECC C9           		RET
 7019+2ECD
 7020+2ECD C5           l2ecd:		PUSH	BC
 7021+2ECE 37           		SCF
 7022+2ECF CB 15        		RL	L
 7023+2ED1 CB 14        		RL	H
 7024+2ED3 17           		RLA
 7025+2ED4 DD 4E 04     		LD	C,(IX+$04)
 7026+2ED7 DD 46 05     		LD	B,(IX+$05)
 7027+2EDA 11 00 00     		LD	DE,$0000
 7028+2EDD A7           		AND	A
 7029+2EDE ED 42        l2ede:		SBC	HL,BC
 7030+2EE0 DE 00        		SBC	A,$00
 7031+2EE2 13           		INC	DE
 7032+2EE3 30 F9        		JR	NC,l2ede	; (-$07)
 7033+2EE5 09           		ADD	HL,BC
 7034+2EE6 1B           		DEC	DE
 7035+2EE7 AF           		XOR	A
 7036+2EE8 DD 4E 03     		LD	C,(IX+$03)
 7037+2EEB 47           		LD	B,A
 7038+2EEC ED 42        l2eec:		SBC	HL,BC
 7039+2EEE 3C           		INC	A
 7040+2EEF 30 FB        		JR	NC,l2eec	; (-$05)
 7041+2EF1 3D           		DEC	A
 7042+2EF2 C1           		POP	BC
 7043+2EF3 C9           		RET
 7044+2EF4
 7045+2EF4 3C           l2ef4:		INC	A
 7046+2EF5 DD BE 02     		CP	(IX+$02)
 7047+2EF8 D8           		RET	C
 7048+2EF9
 7049+2EF9 13           		INC	DE
 7050+2EFA AF           		XOR	A
 7051+2EFB C9           		RET
 7052+2EFC
 7053+2EFC C5           l2efc:		PUSH	BC
 7054+2EFD D5           		PUSH	DE
 7055+2EFE E5           		PUSH	HL
 7056+2EFF DD E3        		EX	(SP),IX
 7057+2F01 DD 5E 14     		LD	E,(IX+$14)
 7058+2F04 DD 56 15     		LD	D,(IX+$15)
 7059+2F07 DD 4E 16     		LD	C,(IX+$16)
 7060+2F0A 0C           		INC	C
 7061+2F0B DD E3        		EX	(SP),IX
 7062+2F0D CD 63 2F     		CALL	l2f63
 7063+2F10 EB           		EX	DE,HL
 7064+2F11 79           		LD	A,C
 7065+2F12 DD E3        		EX	(SP),IX
 7066+2F14 DD 5E 11     		LD	E,(IX+$11)
 7067+2F17 DD 56 12     		LD	D,(IX+$12)
 7068+2F1A DD 4E 13     		LD	C,(IX+$13)
 7069+2F1D DD E3        		EX	(SP),IX
 7070+2F1F CD 63 2F     		CALL	l2f63
 7071+2F22 A7           		AND	A
 7072+2F23 ED 52        		SBC	HL,DE
 7073+2F25 99           		SBC	A,C
 7074+2F26 EB           		EX	DE,HL
 7075+2F27 4F           		LD	C,A
 7076+2F28 06 00        		LD	B,$00
 7077+2F2A DD 7E 03     		LD	A,(IX+$03)
 7078+2F2D DD E5        		PUSH	IX
 7079+2F2F DD 21 00 00  		LD	IX,$0000
 7080+2F33 60           		LD	H,B
 7081+2F34 68           		LD	L,B
 7082+2F35 DD 19        l2f35:		ADD	IX,DE
 7083+2F37 ED 4A        		ADC	HL,BC
 7084+2F39 3D           		DEC	A
 7085+2F3A 20 F9        		JR	NZ,l2f35	; (-$07)
 7086+2F3C DD E5        		PUSH	IX
 7087+2F3E C1           		POP	BC
 7088+2F3F CB 3C        		SRL	H
 7089+2F41 CB 1D        		RR	L
 7090+2F43 CB 18        		RR	B
 7091+2F45 CB 19        		RR	C
 7092+2F47 78           		LD	A,B
 7093+2F48 B1           		OR	C
 7094+2F49 20 01        		JR	NZ,l2f4c	; (+$01)
 7095+2F4B 2B           		DEC	HL
 7096+2F4C 0B           l2f4c:		DEC	BC
 7097+2F4D DD E1        		POP	IX
 7098+2F4F DD E3        		EX	(SP),IX
 7099+2F51 DD 71 17     		LD	(IX+$17),C
 7100+2F54 DD 70 18     		LD	(IX+$18),B
 7101+2F57 DD 75 19     		LD	(IX+$19),L
 7102+2F5A DD 74 1A     		LD	(IX+$1A),H
 7103+2F5D DD E3        		EX	(SP),IX
 7104+2F5F E1           		POP	HL
 7105+2F60 D1           		POP	DE
 7106+2F61 C1           		POP	BC
 7107+2F62 C9           		RET
 7108+2F63
 7109+2F63 F5           l2f63:		PUSH	AF
 7110+2F64 E5           		PUSH	HL
 7111+2F65 C5           		PUSH	BC
 7112+2F66 DD 46 02     		LD	B,(IX+$02)
 7113+2F69 CD 77 2F     		CALL	l2f77
 7114+2F6C C1           		POP	BC
 7115+2F6D 06 00        		LD	B,$00
 7116+2F6F EB           		EX	DE,HL
 7117+2F70 09           		ADD	HL,BC
 7118+2F71 EB           		EX	DE,HL
 7119+2F72 88           		ADC	A,B
 7120+2F73 4F           		LD	C,A
 7121+2F74 E1           		POP	HL
 7122+2F75 F1           		POP	AF
 7123+2F76 C9           		RET
 7124+2F77
 7125+2F77 EB           l2f77:		EX	DE,HL
 7126+2F78 AF           		XOR	A
 7127+2F79 08           		EX	AF,AF'
 7128+2F7A F5           		PUSH	AF
 7129+2F7B AF           		XOR	A
 7130+2F7C 57           		LD	D,A
 7131+2F7D 5F           		LD	E,A
 7132+2F7E CB 38        l2f7e:		SRL	B
 7133+2F80 30 07        		JR	NC,l2f89	; (+$07)
 7134+2F82 4F           		LD	C,A
 7135+2F83 08           		EX	AF,AF'
 7136+2F84 EB           		EX	DE,HL
 7137+2F85 19           		ADD	HL,DE
 7138+2F86 EB           		EX	DE,HL
 7139+2F87 89           		ADC	A,C
 7140+2F88 08           		EX	AF,AF'
 7141+2F89 28 05        l2f89:		JR	Z,l2f90		; (+$05)
 7142+2F8B 29           		ADD	HL,HL
 7143+2F8C 8F           		ADC	A,A
 7144+2F8D C3 7E 2F     		JP	l2f7e
 7145+2F90 F1           l2f90:		POP	AF
 7146+2F91 08           		EX	AF,AF'
 7147+2F92 C9           		RET
 7148+2F93
 7149+2F93 DD E5        l2f93:		PUSH	IX
 7150+2F95 C5           		PUSH	BC
 7151+2F96 F5           		PUSH	AF
 7152+2F97 CD 0D 28     		CALL	l280d
 7153+2F9A D2 47 30     		JP	NC,l3047
 7154+2F9D F1           		POP	AF
 7155+2F9E F5           		PUSH	AF
 7156+2F9F CD 5B 2C     		CALL	l2c5b
 7157+2FA2 D2 47 30     		JP	NC,l3047
 7158+2FA5 F1           		POP	AF
 7159+2FA6 F5           		PUSH	AF
 7160+2FA7 21 11 EF     		LD	HL,$EF11
 7161+2FAA CD 69 2B     		CALL	l2b69
 7162+2FAD D2 47 30     		JP	NC,l3047
 7163+2FB0 01 00 00     l2fb0:		LD	BC,$0000
 7164+2FB3 F1           l2fb3:		POP	AF
 7165+2FB4 F5           		PUSH	AF
 7166+2FB5 21 51 EF     		LD	HL,$EF51
 7167+2FB8 CD 69 2B     		CALL	l2b69
 7168+2FBB D2 52 30     		JP	NC,l3052
 7169+2FBE 3A 61 EF     		LD	A,($EF61)
 7170+2FC1 FE FF        		CP	$FF
 7171+2FC3 C2 4C 30     		JP	NZ,l304c
 7172+2FC6 3A 67 EF     		LD	A,($EF67)
 7173+2FC9 ED 5B 65 EF  		LD	DE,($EF65)
 7174+2FCD CD F4 2E     		CALL	l2ef4
 7175+2FD0 6F           		LD	L,A
 7176+2FD1 3A 24 EF     		LD	A,($EF24)
 7177+2FD4 95           		SUB	L
 7178+2FD5 20 07        		JR	NZ,l2fde	; (+$07)
 7179+2FD7 2A 22 EF     		LD	HL,($EF22)
 7180+2FDA ED 52        		SBC	HL,DE
 7181+2FDC 28 1A        		JR	Z,l2ff8		; (+$1A)
 7182+2FDE 3A 27 EF     l2fde:		LD	A,($EF27)
 7183+2FE1 ED 5B 25 EF  		LD	DE,($EF25)
 7184+2FE5 CD F4 2E     		CALL	l2ef4
 7185+2FE8 6F           		LD	L,A
 7186+2FE9 3A 64 EF     		LD	A,($EF64)
 7187+2FEC 95           		SUB	L
 7188+2FED 20 5D        		JR	NZ,l304c	; (+$5D)
 7189+2FEF 2A 62 EF     		LD	HL,($EF62)
 7190+2FF2 ED 52        		SBC	HL,DE
 7191+2FF4 28 10        		JR	Z,l3006		; (+$10)
 7192+2FF6 18 54        		JR	l304c		; (+$54)
 7193+2FF8 3A 27 EF     l2ff8:		LD	A,($EF27)
 7194+2FFB 32 67 EF     		LD	($EF67),A
 7195+2FFE 2A 25 EF     		LD	HL,($EF25)
 7196+3001 22 65 EF     		LD	($EF65),HL
 7197+3004 18 0C        		JR	l3012		; (+$0C)
 7198+3006 3A 24 EF     l3006:		LD	A,($EF24)
 7199+3009 32 64 EF     		LD	($EF64),A
 7200+300C 2A 22 EF     		LD	HL,($EF22)
 7201+300F 22 62 EF     		LD	($EF62),HL
 7202+3012 21 51 EF     l3012:		LD	HL,$EF51
 7203+3015 CD FC 2E     		CALL	l2efc
 7204+3018 F1           		POP	AF
 7205+3019 F5           		PUSH	AF
 7206+301A CD 92 2B     		CALL	l2b92
 7207+301D 30 28        		JR	NC,l3047	; (+$28)
 7208+301F F1           		POP	AF
 7209+3020 D1           		POP	DE
 7210+3021 C5           		PUSH	BC
 7211+3022 F5           		PUSH	AF
 7212+3023 D5           		PUSH	DE
 7213+3024 06 40        		LD	B,$40
 7214+3026 21 11 EF     		LD	HL,$EF11
 7215+3029 36 00        l3029:		LD	(HL),$00
 7216+302B 23           		INC	HL
 7217+302C 10 FB        		DJNZ	l3029		; (-$05)
 7218+302E C1           		POP	BC
 7219+302F F1           		POP	AF
 7220+3030 F5           		PUSH	AF
 7221+3031 21 11 EF     		LD	HL,$EF11
 7222+3034 CD 92 2B     		CALL	l2b92
 7223+3037 30 0E        		JR	NC,l3047	; (+$0E)
 7224+3039 21 51 EF     		LD	HL,$EF51
 7225+303C 11 11 EF     		LD	DE,$EF11
 7226+303F 01 40 00     		LD	BC,$0040
 7227+3042 ED B0        		LDIR
 7228+3044 C3 B0 2F     		JP	l2fb0
 7229+3047 C1           l3047:		POP	BC
 7230+3048 C1           		POP	BC
 7231+3049 DD E1        		POP	IX
 7232+304B C9           		RET
 7233+304C
 7234+304C 03           l304c:		INC	BC
 7235+304D 78           		LD	A,B
 7236+304E B1           		OR	C
 7237+304F C2 B3 2F     		JP	NZ,l2fb3
 7238+3052 3E FF        l3052:		LD	A,$FF
 7239+3054 32 21 EF     		LD	($EF21),A
 7240+3057 21 11 EF     		LD	HL,$EF11
 7241+305A 06 10        		LD	B,$10
 7242+305C 36 00        l305c:		LD	(HL),$00
 7243+305E 23           		INC	HL
 7244+305F 10 FB        		DJNZ	l305c		; (-$05)
 7245+3061 21 11 EF     		LD	HL,$EF11
 7246+3064 F1           		POP	AF
 7247+3065 C1           		POP	BC
 7248+3066 CD 92 2B     		CALL	l2b92
 7249+3069 DD E1        		POP	IX
 7250+306B C9           		RET
 7251+306C
 7252+306C E5           l306c:		PUSH	HL
 7253+306D 21 11 EF     		LD	HL,$EF11
 7254+3070 CD 69 2B     		CALL	l2b69
 7255+3073 E1           		POP	HL
 7256+3074 D0           		RET	NC
 7257+3075
 7258+3075 7D           		LD	A,L
 7259+3076 E6 1F        		AND	$1F
 7260+3078 6F           		LD	L,A
 7261+3079 26 00        		LD	H,$00
 7262+307B 11 31 EF     		LD	DE,$EF31
 7263+307E 19           		ADD	HL,DE
 7264+307F 7E           		LD	A,(HL)
 7265+3080 A7           		AND	A
 7266+3081 37           		SCF
 7267+3082 C9           		RET
 7268+3083
 7269+3083 F5           l3083:		PUSH	AF
 7270+3084 E5           		PUSH	HL
 7271+3085 21 11 EF     		LD	HL,$EF11
 7272+3088 CD 69 2B     		CALL	l2b69
 7273+308B E1           		POP	HL
 7274+308C 30 14        		JR	NC,l30a2	; (+$14)
 7275+308E 7D           		LD	A,L
 7276+308F E6 1F        		AND	$1F
 7277+3091 6F           		LD	L,A
 7278+3092 7C           		LD	A,H
 7279+3093 26 00        		LD	H,$00
 7280+3095 11 31 EF     		LD	DE,$EF31
 7281+3098 19           		ADD	HL,DE
 7282+3099 77           		LD	(HL),A
 7283+309A F1           		POP	AF
 7284+309B 21 11 EF     		LD	HL,$EF11
 7285+309E CD 92 2B     		CALL	l2b92
 7286+30A1 C9           		RET
 7287+30A2
 7288+30A2 E1           l30a2:		POP	HL
 7289+30A3 C9           		RET
 7290+30A4
 7291+30A4 DD 7E 00     l30a4:		LD	A,(IX+$00)
 7292+30A7 FE 02        		CP	$02
 7293+30A9 37           		SCF
 7294+30AA C8           		RET	Z
 7295+30AB
 7296+30AB 3E 3D        		LD	A,$3D
 7297+30AD A7           		AND	A
 7298+30AE C9           		RET
 7299+30AF
 7300+30AF CD A4 30     l30af:		CALL	l30a4
 7301+30B2 D0           		RET	NC
 7302+30B3
 7303+30B3 DD 4E 0C     		LD	C,(IX+$0C)
 7304+30B6 DD 46 0D     		LD	B,(IX+$0D)
 7305+30B9 37           		SCF
 7306+30BA C9           		RET
 7307+30BB
 7308+30BB CD A4 30     l30bb:		CALL	l30a4
 7309+30BE D0           		RET	NC
 7310+30BF
 7311+30BF E5           		PUSH	HL
 7312+30C0 DD 6E 0E     		LD	L,(IX+$0E)
 7313+30C3 DD 66 0F     		LD	H,(IX+$0F)
 7314+30C6 A7           		AND	A
 7315+30C7 ED 42        		SBC	HL,BC
 7316+30C9 E1           		POP	HL
 7317+30CA 3F           		CCF
 7318+30CB 3E 15        		LD	A,$15
 7319+30CD D0           		RET	NC
 7320+30CE
 7321+30CE DD 71 0C     		LD	(IX+$0C),C
 7322+30D1 DD 70 0D     		LD	(IX+$0D),B
 7323+30D4 37           		SCF
 7324+30D5 C9           		RET
 7325+30D6
 7326+30D6 CD A4 30     l30d6:		CALL	l30a4
 7327+30D9 D0           		RET	NC
 7328+30DA
 7329+30DA 78           		LD	A,B
 7330+30DB F5           		PUSH	AF
 7331+30DC E5           		PUSH	HL
 7332+30DD DD 5E 0C     		LD	E,(IX+$0C)
 7333+30E0 DD 56 0D     		LD	D,(IX+$0D)
 7334+30E3 DD 6E 0E     		LD	L,(IX+$0E)
 7335+30E6 DD 66 0F     		LD	H,(IX+$0F)
 7336+30E9 A7           		AND	A
 7337+30EA ED 52        		SBC	HL,DE
 7338+30EC 30 03        		JR	NC,l30f1	; (+$03)
 7339+30EE 11 00 00     		LD	DE,$0000
 7340+30F1 D5           l30f1:		PUSH	DE
 7341+30F2 DD 46 0B     		LD	B,(IX+$0B)
 7342+30F5 CD 77 2F     		CALL	l2f77
 7343+30F8 4F           		LD	C,A
 7344+30F9 E1           		POP	HL
 7345+30FA 23           		INC	HL
 7346+30FB DD 75 0C     		LD	(IX+$0C),L
 7347+30FE DD 74 0D     		LD	(IX+$0D),H
 7348+3101 E1           		POP	HL
 7349+3102 F1           		POP	AF
 7350+3103 47           		LD	B,A
 7351+3104 37           		SCF
 7352+3105 C9           		RET
 7353+3106
 7354+3106 CD D6 30     l3106:		CALL	l30d6
 7355+3109 D0           		RET	NC
 7356+310A
 7357+310A CD A8 26     		CALL	l26a8
 7358+310D D0           		RET	NC
 7359+310E
 7360+310E C5           		PUSH	BC
 7361+310F DD 5E 0B     		LD	E,(IX+$0B)
 7362+3112 78           		LD	A,B
 7363+3113 CD 1B 02     		CALL	l021b
 7364+3116 CB 23        		SLA	E
 7365+3118 D5           		PUSH	DE
 7366+3119 CD 9B 27     		CALL	l279b
 7367+311C CD B0 25     l311c:		CALL	l25b0
 7368+311F D1           		POP	DE
 7369+3120 1D           		DEC	E
 7370+3121 28 06        		JR	Z,l3129		; (+$06)
 7371+3123 D5           		PUSH	DE
 7372+3124 CD A7 27     		CALL	l27a7
 7373+3127 18 F3        		JR	l311c		; (-$0D)
 7374+3129 3E 07        l3129:		LD	A,$07
 7375+312B CD 1B 02     		CALL	l021b
 7376+312E C1           		POP	BC
 7377+312F 37           		SCF
 7378+3130 C9           		RET
 7379+3131
 7380+3131 CD D6 30     l3131:		CALL	l30d6
 7381+3134 D0           		RET	NC
 7382+3135
 7383+3135 DD 7E 0B     		LD	A,(IX+$0B)
 7384+3138 F5           l3138:		PUSH	AF
 7385+3139 D5           		PUSH	DE
 7386+313A CD FB 25     		CALL	l25fb
 7387+313D D1           		POP	DE
 7388+313E 30 0C        		JR	NC,l314c	; (+$0C)
 7389+3140 13           		INC	DE
 7390+3141 7A           		LD	A,D
 7391+3142 B3           		OR	E
 7392+3143 20 01        		JR	NZ,l3146	; (+$01)
 7393+3145 0C           		INC	C
 7394+3146 F1           l3146:		POP	AF
 7395+3147 3D           		DEC	A
 7396+3148 20 EE        		JR	NZ,l3138	; (-$12)
 7397+314A 37           		SCF
 7398+314B C9           		RET
 7399+314C
 7400+314C D1           l314c:		POP	DE
 7401+314D C9           		RET
 7402+314E
 7403+314E CD D6 30     l314e:		CALL	l30d6
 7404+3151 D0           		RET	NC
 7405+3152
 7406+3152 DD 7E 0B     		LD	A,(IX+$0B)
 7407+3155 F5           l3155:		PUSH	AF
 7408+3156 C5           		PUSH	BC
 7409+3157 D5           		PUSH	DE
 7410+3158 E5           		PUSH	HL
 7411+3159 21 11 ED     		LD	HL,$ED11
 7412+315C 06 07        		LD	B,$07
 7413+315E CD 58 25     		CALL	l2558
 7414+3161 E1           		POP	HL
 7415+3162 D1           		POP	DE
 7416+3163 C1           		POP	BC
 7417+3164 30 23        		JR	NC,l3189	; (+$23)
 7418+3166 D5           		PUSH	DE
 7419+3167 E5           		PUSH	HL
 7420+3168 CD FB 25     		CALL	l25fb
 7421+316B E1           		POP	HL
 7422+316C D1           		POP	DE
 7423+316D 30 1A        		JR	NC,l3189	; (+$1A)
 7424+316F C5           		PUSH	BC
 7425+3170 D5           		PUSH	DE
 7426+3171 11 11 ED     		LD	DE,$ED11
 7427+3174 01 00 02     		LD	BC,$0200
 7428+3177 EB           		EX	DE,HL
 7429+3178 ED B0        		LDIR
 7430+317A EB           		EX	DE,HL
 7431+317B D1           		POP	DE
 7432+317C C1           		POP	BC
 7433+317D 13           		INC	DE
 7434+317E 7A           		LD	A,D
 7435+317F B3           		OR	E
 7436+3180 20 01        		JR	NZ,l3183	; (+$01)
 7437+3182 0C           		INC	C
 7438+3183 F1           l3183:		POP	AF
 7439+3184 3D           		DEC	A
 7440+3185 20 CE        		JR	NZ,l3155	; (-$32)
 7441+3187 37           		SCF
 7442+3188 C9           		RET
 7443+3189
 7444+3189 D1           l3189:		POP	DE
 7445+318A C9           		RET
 7446+318B
 7447+318B F5           l318b:		PUSH	AF
 7448+318C C5           		PUSH	BC
 7449+318D CD C7 31     		CALL	l31c7
 7450+3190 26 02        		LD	H,$02
 7451+3192 D5           		PUSH	DE
 7452+3193 E5           		PUSH	HL
 7453+3194 3E 00        		LD	A,$00
 7454+3196 CD 68 2D     		CALL	l2d68
 7455+3199 E1           		POP	HL
 7456+319A D1           		POP	DE
 7457+319B 3E 00        		LD	A,$00
 7458+319D 38 0A        		JR	C,l31a9		; (+$0A)
 7459+319F 3C           		INC	A
 7460+31A0 CD 68 2D     		CALL	l2d68
 7461+31A3 3E 40        		LD	A,$40
 7462+31A5 30 1D        		JR	NC,l31c4	; (+$1D)
 7463+31A7 3E 01        		LD	A,$01
 7464+31A9 CD 94 2C     l31a9:		CALL	l2c94
 7465+31AC 30 16        		JR	NC,l31c4	; (+$16)
 7466+31AE C1           l31ae:		POP	BC
 7467+31AF DD 71 0E     		LD	(IX+$0E),C
 7468+31B2 DD 70 0F     		LD	(IX+$0F),B
 7469+31B5 F1           		POP	AF
 7470+31B6 DD 77 0B     		LD	(IX+$0B),A
 7471+31B9 DD 36 0C 00  		LD	(IX+$0C),$00
 7472+31BD DD 36 0D 00  		LD	(IX+$0D),$00
 7473+31C1 37           		SCF
 7474+31C2 C9           		RET
 7475+31C3
 7476+31C3 C1           l31c3:		POP	BC
 7477+31C4 C1           l31c4:		POP	BC
 7478+31C5 C1           		POP	BC
 7479+31C6 C9           		RET
 7480+31C7
 7481+31C7 21 00 00     l31c7:		LD	HL,$0000
 7482+31CA 5F           		LD	E,A
 7483+31CB 1D           		DEC	E
 7484+31CC 57           		LD	D,A
 7485+31CD 3D           		DEC	A
 7486+31CE FE 20        		CP	$20
 7487+31D0 3E 15        		LD	A,$15
 7488+31D2 30 EF        		JR	NC,l31c3	; (-$11)
 7489+31D4 7C           		LD	A,H
 7490+31D5 09           l31d5:		ADD	HL,BC
 7491+31D6 CE 00        		ADC	A,$00
 7492+31D8 15           		DEC	D
 7493+31D9 20 FA        		JR	NZ,l31d5	; (-$06)
 7494+31DB 19           		ADD	HL,DE
 7495+31DC CE 00        		ADC	A,$00
 7496+31DE EB           		EX	DE,HL
 7497+31DF 6F           		LD	L,A
 7498+31E0 C9           		RET
 7499+31E1
 7500+31E1 57           l31e1:		LD	D,A
 7501+31E2 CD A4 30     		CALL	l30a4
 7502+31E5 D0           		RET	NC
 7503+31E6
 7504+31E6 7A           		LD	A,D
 7505+31E7 F5           		PUSH	AF
 7506+31E8 C5           		PUSH	BC
 7507+31E9 CD C7 31     		CALL	l31c7
 7508+31EC DD 7E 09     		LD	A,(IX+$09)
 7509+31EF BD           		CP	L
 7510+31F0 38 10        		JR	C,l3202		; (+$10)
 7511+31F2 20 BA        		JR	NZ,l31ae	; (-$46)
 7512+31F4 DD 7E 08     		LD	A,(IX+$08)
 7513+31F7 BA           		CP	D
 7514+31F8 38 08        		JR	C,l3202		; (+$08)
 7515+31FA 20 B2        		JR	NZ,l31ae	; (-$4E)
 7516+31FC DD 7E 07     		LD	A,(IX+$07)
 7517+31FF BB           		CP	E
 7518+3200 30 AC        		JR	NC,l31ae	; (-$54)
 7519+3202 C1           l3202:		POP	BC
 7520+3203 C1           		POP	BC
 7521+3204 3E 15        		LD	A,$15
 7522+3206 A7           		AND	A
 7523+3207 C9           		RET
 7524+3208
 7525+3208 7D           l3208:		LD	A,L
 7526+3209 32 91 EF     		LD	($EF91),A
 7527+320C D6 41        		SUB	$41
 7528+320E 38 13        		JR	C,l3223		; (+$13)
 7529+3210 FE 10        		CP	$10
 7530+3212 30 0F        		JR	NC,l3223	; (+$0F)
 7531+3214 6F           		LD	L,A
 7532+3215 26 00        		LD	H,$00
 7533+3217 29           		ADD	HL,HL
 7534+3218 11 A1 E2     		LD	DE,$E2A1
 7535+321B 19           		ADD	HL,DE
 7536+321C 56           		LD	D,(HL)
 7537+321D 2B           		DEC	HL
 7538+321E 5E           		LD	E,(HL)
 7539+321F 7A           		LD	A,D
 7540+3220 B3           		OR	E
 7541+3221 37           		SCF
 7542+3222 C9           		RET
 7543+3223
 7544+3223 A7           l3223:		AND	A
 7545+3224 3E 15        		LD	A,$15
 7546+3226 C9           		RET
 7547+3227
 7548+3227 FE 02        l3227:		CP	$02
 7549+3229 D2 F5 32     		JP	NC,l32f5
 7550+322C DD E5        		PUSH	IX
 7551+322E F5           		PUSH	AF
 7552+322F C5           		PUSH	BC
 7553+3230 E5           		PUSH	HL
 7554+3231 21 E3 E8     		LD	HL,$E8E3
 7555+3234 06 02        		LD	B,$02
 7556+3236 11 30 01     		LD	DE,$0130
 7557+3239 7E           l3239:		LD	A,(HL)
 7558+323A 23           		INC	HL
 7559+323B B6           		OR	(HL)
 7560+323C 2B           		DEC	HL
 7561+323D 28 0C        		JR	Z,l324b		; (+$0C)
 7562+323F 19           		ADD	HL,DE
 7563+3240 10 F7        		DJNZ	l3239		; (-$09)
 7564+3242 3E 3F        		LD	A,$3F
 7565+3244 A7           		AND	A
 7566+3245 D1           l3245:		POP	DE
 7567+3246 D1           		POP	DE
 7568+3247 D1           		POP	DE
 7569+3248 DD E1        		POP	IX
 7570+324A C9           		RET
 7571+324B
 7572+324B E3           l324b:		EX	(SP),HL
 7573+324C CD 08 32     		CALL	l3208
 7574+324F 30 F4        		JR	NC,l3245	; (-$0C)
 7575+3251 3E 3E        		LD	A,$3E
 7576+3253 3F           		CCF
 7577+3254 20 EF        		JR	NZ,l3245	; (-$11)
 7578+3256 D1           		POP	DE
 7579+3257 C1           		POP	BC
 7580+3258 F1           		POP	AF
 7581+3259 E5           		PUSH	HL
 7582+325A F5           		PUSH	AF
 7583+325B D5           		PUSH	DE
 7584+325C 21 11 EF     		LD	HL,$EF11
 7585+325F CD 69 2B     		CALL	l2b69
 7586+3262 30 E1        		JR	NC,l3245	; (-$1F)
 7587+3264 3A 21 EF     		LD	A,($EF21)
 7588+3267 FE 03        		CP	$03
 7589+3269 28 05        		JR	Z,l3270		; (+$05)
 7590+326B A7           		AND	A
 7591+326C 3E 38        		LD	A,$38
 7592+326E 18 D5        		JR	l3245		; (-$2B)
 7593+3270 21 31 EF     l3270:		LD	HL,$EF31
 7594+3273 D1           		POP	DE
 7595+3274 F1           		POP	AF
 7596+3275 D5           		PUSH	DE
 7597+3276 C5           		PUSH	BC
 7598+3277 F5           		PUSH	AF
 7599+3278 01 1C 00     		LD	BC,o001C
 7600+327B ED B0        		LDIR
 7601+327D EB           		EX	DE,HL
 7602+327E 3A 91 EF     		LD	A,($EF91)
 7603+3281 77           		LD	(HL),A
 7604+3282 23           		INC	HL
 7605+3283 F1           		POP	AF
 7606+3284 F5           		PUSH	AF
 7607+3285 07           		RLCA
 7608+3286 07           		RLCA
 7609+3287 07           		RLCA
 7610+3288 07           		RLCA
 7611+3289 F6 A0        		OR	$A0
 7612+328B 77           		LD	(HL),A
 7613+328C 23           		INC	HL
 7614+328D 06 0A        		LD	B,$0A
 7615+328F 36 00        l328f:		LD	(HL),$00
 7616+3291 23           		INC	HL
 7617+3292 10 FB        		DJNZ	l328f		; (-$05)
 7618+3294 11 08 00     		LD	DE,$0008
 7619+3297 EB           		EX	DE,HL
 7620+3298 19           		ADD	HL,DE
 7621+3299 EB           		EX	DE,HL
 7622+329A 73           		LD	(HL),E
 7623+329B 23           		INC	HL
 7624+329C 72           		LD	(HL),D
 7625+329D 23           		INC	HL
 7626+329E 36 D6        		LD	(HL),$D6
 7627+32A0 23           		INC	HL
 7628+32A1 36 27        		LD	(HL),$27
 7629+32A3 23           		INC	HL
 7630+32A4 36 D8        		LD	(HL),$D8
 7631+32A6 23           		INC	HL
 7632+32A7 36 27        		LD	(HL),$27
 7633+32A9 23           		INC	HL
 7634+32AA 36 F0        		LD	(HL),$F0
 7635+32AC 23           		INC	HL
 7636+32AD 36 27        		LD	(HL),$27
 7637+32AF F1           		POP	AF
 7638+32B0 C1           		POP	BC
 7639+32B1 C5           		PUSH	BC
 7640+32B2 F5           		PUSH	AF
 7641+32B3 CD 94 2C     		CALL	l2c94
 7642+32B6 30 31        		JR	NC,l32e9	; (+$31)
 7643+32B8 F1           		POP	AF
 7644+32B9 C1           		POP	BC
 7645+32BA E1           		POP	HL
 7646+32BB E5           		PUSH	HL
 7647+32BC 11 17 00     		LD	DE,$0017
 7648+32BF 19           		ADD	HL,DE
 7649+32C0 DD E5        		PUSH	IX
 7650+32C2 D1           		POP	DE
 7651+32C3 73           		LD	(HL),E
 7652+32C4 23           		INC	HL
 7653+32C5 72           		LD	(HL),D
 7654+32C6 D1           		POP	DE
 7655+32C7 E1           		POP	HL
 7656+32C8 73           		LD	(HL),E
 7657+32C9 23           		INC	HL
 7658+32CA 72           		LD	(HL),D
 7659+32CB DD E1        		POP	IX
 7660+32CD 21 66 5B     		LD	HL,	$5B66
 7661+32D0 CB 76        		BIT	6,(HL)
 7662+32D2 37           		SCF
 7663+32D3 C8           		RET	Z
 7664+32D4
 7665+32D4 F5           		PUSH	AF
 7666+32D5 C5           		PUSH	BC
 7667+32D6 3A 91 EF     		LD	A,($EF91)
 7668+32D9 6F           		LD	L,A
 7669+32DA CD AC 34     		CALL	l34ac
 7670+32DD 3A 91 EF     		LD	A,($EF91)
 7671+32E0 67           		LD	H,A
 7672+32E1 2E 1C        		LD	L,$1C
 7673+32E3 C1           		POP	BC
 7674+32E4 F1           		POP	AF
 7675+32E5 CD 83 30     		CALL	l3083
 7676+32E8 C9           		RET
 7677+32E9
 7678+32E9 E1           l32e9:		POP	HL
 7679+32EA E1           		POP	HL
 7680+32EB E1           		POP	HL
 7681+32EC 36 00        		LD	(HL),$00
 7682+32EE 23           		INC	HL
 7683+32EF 36 00        		LD	(HL),$00
 7684+32F1 D1           		POP	DE
 7685+32F2 DD E1        		POP	IX
 7686+32F4 C9           		RET
 7687+32F5
 7688+32F5 E5           l32f5:		PUSH	HL
 7689+32F6 D6 02        		SUB	$02
 7690+32F8 5F           		LD	E,A
 7691+32F9 16 00        		LD	D,$00
 7692+32FB FE 02        		CP	$02
 7693+32FD 28 07        		JR	Z,l3306		; (+$07)
 7694+32FF 30 6B        		JR	NC,l336c	; (+$6B)
 7695+3301 CD 57 01     		CALL	l0157
 7696+3304 30 66        		JR	NC,l336c	; (+$66)
 7697+3306 62           l3306:		LD	H,D
 7698+3307 6B           		LD	L,E
 7699+3308 D5           		PUSH	DE
 7700+3309 29           		ADD	HL,HL
 7701+330A 19           		ADD	HL,DE
 7702+330B 29           		ADD	HL,HL
 7703+330C 11 6F 34     		LD	DE,l346f
 7704+330F 19           		ADD	HL,DE
 7705+3310 4E           		LD	C,(HL)
 7706+3311 23           		INC	HL
 7707+3312 46           		LD	B,(HL)
 7708+3313 21 A0 E2     		LD	HL,$E2A0
 7709+3316 1E 10        		LD	E,$10
 7710+3318 7E           l3318:		LD	A,(HL)
 7711+3319 23           		INC	HL
 7712+331A B9           		CP	C
 7713+331B 20 06        		JR	NZ,l3323	; (+$06)
 7714+331D 7E           		LD	A,(HL)
 7715+331E B8           		CP	B
 7716+331F 3E 3B        		LD	A,$3B
 7717+3321 28 46        		JR	Z,l3369		; (+$46)
 7718+3323 23           l3323:		INC	HL
 7719+3324 1D           		DEC	E
 7720+3325 20 F1        		JR	NZ,l3318	; (-$0F)
 7721+3327 D1           		POP	DE
 7722+3328 E1           		POP	HL
 7723+3329 D5           		PUSH	DE
 7724+332A CD 08 32     		CALL	l3208
 7725+332D D1           		POP	DE
 7726+332E D0           		RET	NC
 7727+332F
 7728+332F 3E 3E        		LD	A,$3E
 7729+3331 3F           		CCF
 7730+3332 C0           		RET	NZ
 7731+3333
 7732+3333 71           		LD	(HL),C
 7733+3334 23           		INC	HL
 7734+3335 70           		LD	(HL),B
 7735+3336 21 1C 00     		LD	HL,o001C
 7736+3339 09           		ADD	HL,BC
 7737+333A 3A EA E3     		LD	A,(	$E3EA		)
 7738+333D A7           		AND	A
 7739+333E 20 0A        		JR	NZ,l334a	; (+$0A)
 7740+3340 7B           		LD	A,E
 7741+3341 A7           		AND	A
 7742+3342 20 06        		JR	NZ,l334a	; (+$06)
 7743+3344 3A 91 EF     		LD	A,($EF91)
 7744+3347 32 EA E3     		LD	(	$E3EA		),A
 7745+334A 3A 91 EF     l334a:		LD	A,($EF91)
 7746+334D 77           		LD	(HL),A
 7747+334E 21 66 5B     		LD	HL,	$5B66
 7748+3351 CB 76        		BIT	6,(HL)
 7749+3353 37           		SCF
 7750+3354 C8           		RET	Z
 7751+3355
 7752+3355 F5           		PUSH	AF
 7753+3356 D5           		PUSH	DE
 7754+3357 6F           		LD	L,A
 7755+3358 CD AC 34     		CALL	l34ac
 7756+335B D1           		POP	DE
 7757+335C F1           		POP	AF
 7758+335D 21 0D 00     		LD	HL,$000D
 7759+3360 19           		ADD	HL,DE
 7760+3361 67           		LD	H,A
 7761+3362 AF           		XOR	A
 7762+3363 47           		LD	B,A
 7763+3364 4F           		LD	C,A
 7764+3365 CD 83 30     		CALL	l3083
 7765+3368 C9           		RET
 7766+3369
 7767+3369 E1           l3369:		POP	HL
 7768+336A E1           		POP	HL
 7769+336B C9           		RET
 7770+336C
 7771+336C 3E 41        l336c:		LD	A,$41
 7772+336E E1           		POP	HL
 7773+336F C9           		RET
 7774+3370
 7775+3370 CD 08 32     l3370:		CALL	l3208
 7776+3373 D0           		RET	NC
 7777+3374
 7778+3374 DD E5        		PUSH	IX
 7779+3376 28 43        		JR	Z,l33bb		; (+$43)
 7780+3378 D5           		PUSH	DE
 7781+3379 DD E1        		POP	IX
 7782+337B CD 1B 18     		CALL	l181b
 7783+337E 30 4A        		JR	NC,l33ca	; (+$4A)
 7784+3380 AF           		XOR	A
 7785+3381 77           		LD	(HL),A
 7786+3382 23           		INC	HL
 7787+3383 77           		LD	(HL),A
 7788+3384 EB           		EX	DE,HL
 7789+3385 DD 7E 1B     		LD	A,(IX+$1B)
 7790+3388 E6 0C        		AND	$0C
 7791+338A 20 03        		JR	NZ,l338f	; (+$03)
 7792+338C 77           		LD	(HL),A
 7793+338D 23           		INC	HL
 7794+338E 77           		LD	(HL),A
 7795+338F 3A EA E3     l338f:		LD	A,(	$E3EA		)
 7796+3392 DD BE 1C     		CP	(IX+$1C)
 7797+3395 20 04        		JR	NZ,l339b	; (+$04)
 7798+3397 AF           		XOR	A
 7799+3398 32 EA E3     		LD	(	$E3EA		),A
 7800+339B DD 36 1C 00  l339b:		LD	(IX+$1C),$00
 7801+339F DD 5E 2A     		LD	E,(IX+$2A)
 7802+33A2 DD 56 2B     		LD	D,(IX+$2B)
 7803+33A5 21 D6 27     		LD	HL,$27D6
 7804+33A8 A7           		AND	A
 7805+33A9 ED 52        		SBC	HL,DE
 7806+33AB 20 0E        		JR	NZ,l33bb	; (+$0E)
 7807+33AD DD 5E 17     		LD	E,(IX+$17)
 7808+33B0 DD 56 18     		LD	D,(IX+$18)
 7809+33B3 D5           		PUSH	DE
 7810+33B4 DD E1        		POP	IX
 7811+33B6 CD DB 2C     		CALL	l2cdb
 7812+33B9 30 0F        		JR	NC,l33ca	; (+$0F)
 7813+33BB 21 66 5B     l33bb:		LD	HL,	$5B66
 7814+33BE CB 76        		BIT	6,(HL)
 7815+33C0 37           		SCF
 7816+33C1 28 07        		JR	Z,l33ca		; (+$07)
 7817+33C3 3A 91 EF     		LD	A,($EF91)
 7818+33C6 6F           		LD	L,A
 7819+33C7 CD AC 34     		CALL	l34ac
 7820+33CA DD E1        l33ca:		POP	IX
 7821+33CC C9           		RET
 7822+33CD
 7823+33CD C5           l33cd:		PUSH	BC
 7824+33CE 3E 20        		LD	A,$20
 7825+33D0 1E 12        		LD	E,$12
 7826+33D2 02           l33d2:		LD	(BC),A
 7827+33D3 03           		INC	BC
 7828+33D4 1D           		DEC	E
 7829+33D5 20 FB        		JR	NZ,l33d2	; (-$05)
 7830+33D7 CD 08 32     		CALL	l3208
 7831+33DA EB           		EX	DE,HL
 7832+33DB C1           		POP	BC
 7833+33DC D0           		RET	NC
 7834+33DD
 7835+33DD C8           		RET	Z
 7836+33DE
 7837+33DE DD E5        		PUSH	IX
 7838+33E0 C5           		PUSH	BC
 7839+33E1 E5           		PUSH	HL
 7840+33E2 DD E1        		POP	IX
 7841+33E4 DD 5E 2A     		LD	E,(IX+$2A)
 7842+33E7 DD 56 2B     		LD	D,(IX+$2B)
 7843+33EA 21 D6 27     		LD	HL,$27D6
 7844+33ED A7           		AND	A
 7845+33EE ED 52        		SBC	HL,DE
 7846+33F0 20 46        		JR	NZ,l3438	; (+$46)
 7847+33F2 DD 5E 17     		LD	E,(IX+$17)
 7848+33F5 DD 56 18     		LD	D,(IX+$18)
 7849+33F8 D5           		PUSH	DE
 7850+33F9 DD E1        		POP	IX
 7851+33FB DD 7E 10     		LD	A,(IX+$10)
 7852+33FE 1F           		RRA
 7853+33FF 1F           		RRA
 7854+3400 1F           		RRA
 7855+3401 1F           		RRA
 7856+3402 E6 01        		AND	$01
 7857+3404 DD 4E 11     		LD	C,(IX+$11)
 7858+3407 DD 46 12     		LD	B,(IX+$12)
 7859+340A C5           		PUSH	BC
 7860+340B F5           		PUSH	AF
 7861+340C 21 11 EF     		LD	HL,$EF11
 7862+340F CD 69 2B     		CALL	l2b69
 7863+3412 30 1E        		JR	NC,l3432	; (+$1E)
 7864+3414 F1           		POP	AF
 7865+3415 C1           		POP	BC
 7866+3416 D1           		POP	DE
 7867+3417 C5           		PUSH	BC
 7868+3418 F5           		PUSH	AF
 7869+3419 C6 30        		ADD	A,$30
 7870+341B 12           		LD	(DE),A
 7871+341C 13           		INC	DE
 7872+341D 3E 3E        		LD	A,$3E
 7873+341F 12           		LD	(DE),A
 7874+3420 13           		INC	DE
 7875+3421 21 11 EF     		LD	HL,$EF11
 7876+3424 01 10 00     		LD	BC,$0010
 7877+3427 ED B0        		LDIR
 7878+3429 AF           		XOR	A
 7879+342A DE 01        		SBC	A,$01
 7880+342C C1           		POP	BC
 7881+342D 78           		LD	A,B
 7882+342E C1           		POP	BC
 7883+342F DD E1        		POP	IX
 7884+3431 C9           		RET
 7885+3432
 7886+3432 D1           l3432:		POP	DE
 7887+3433 D1           		POP	DE
 7888+3434 D1           l3434:		POP	DE
 7889+3435 DD E1        		POP	IX
 7890+3437 C9           		RET
 7891+3438
 7892+3438 DD E5        l3438:		PUSH	IX
 7893+343A D1           		POP	DE
 7894+343B DD 21 6F 34  		LD	IX,l346f
 7895+343F 3E 03        		LD	A,$03
 7896+3441 DD 6E 00     l3441:		LD	L,(IX+$00)
 7897+3444 DD 66 01     		LD	H,(IX+$01)
 7898+3447 A7           		AND	A
 7899+3448 ED 52        		SBC	HL,DE
 7900+344A 28 0C        		JR	Z,l3458		; (+$0C)
 7901+344C 01 06 00     		LD	BC,$0006
 7902+344F DD 09        		ADD	IX,BC
 7903+3451 3D           		DEC	A
 7904+3452 20 ED        		JR	NZ,l3441	; (-$13)
 7905+3454 3E 41        		LD	A,$41
 7906+3456 18 DC        		JR	l3434		; (-$24)
 7907+3458 DD 6E 02     l3458:		LD	L,(IX+$02)
 7908+345B DD 66 03     		LD	H,(IX+$03)
 7909+345E D1           		POP	DE
 7910+345F DD 4E 04     		LD	C,(IX+$04)
 7911+3462 06 00        		LD	B,$00
 7912+3464 ED B0        		LDIR
 7913+3466 AF           		XOR	A
 7914+3467 DE 01        		SBC	A,$01
 7915+3469 DD 7E 05     		LD	A,(IX+$05)
 7916+346C DD E1        		POP	IX
 7917+346E C9           		RET
 7918+346F
 7919+346F C0 E2 81 34  l346f:		DB	$C0,$E2,$81,$34,$11,$02,$2D,$E3
 7919+3473 11 02 2D E3
 7920+3477 92 34 11 03  		DB	$92,$34,$11,$03,$9A,$E3,$A3,$34
 7920+347B 9A E3 A3 34
 7921+347F 09 04        		DB	$09,$04
 7922+3481
 7923+3481 32 3E 46 6C  l3474:		DB	"2>Floppy device 0"
 7923+3485 6F 70 70 79
 7923+3489 20 64 65 76
 7923+348D 69 63 65 20
 7923+3491 30
 7924+3492 33 3E 46 6C  l3485:		DB	"3>Floppy device 1"
 7924+3496 6F 70 70 79
 7924+349A 20 64 65 76
 7924+349E 69 63 65 20
 7924+34A2 31
 7925+34A3 34 3E 52 41  l3496:		DB	"4>RAMdisk"
 7925+34A7 4D 64 69 73
 7925+34AB 6B
 7926+34AC
 7927+34AC E5           l34ac:		PUSH	HL
 7928+34AD AF           		XOR	A
 7929+34AE 47           		LD	B,A
 7930+34AF 4F           		LD	C,A
 7931+34B0 21 11 EF     		LD	HL,$EF11
 7932+34B3 CD 69 2B     		CALL	l2b69
 7933+34B6 D1           		POP	DE
 7934+34B7 30 32        		JR	NC,l34eb	; (+$32)
 7935+34B9 21 3B EF     		LD	HL,$EF3B
 7936+34BC 7B           		LD	A,E
 7937+34BD FE 41        		CP	$41
 7938+34BF 20 02        		JR	NZ,l34c3	; (+$02)
 7939+34C1 36 01        		LD	(HL),$01
 7940+34C3 23           l34c3:		INC	HL
 7941+34C4 FE 42        		CP	$42
 7942+34C6 20 02        		JR	NZ,l34ca	; (+$02)
 7943+34C8 36 01        		LD	(HL),$01
 7944+34CA 23           l34ca:		INC	HL
 7945+34CB FE 4D        		CP	$4D
 7946+34CD 20 02        		JR	NZ,l34d1	; (+$02)
 7947+34CF 36 01        		LD	(HL),$01
 7948+34D1 21 3E EF     l34d1:		LD	HL,$EF3E
 7949+34D4 06 03        		LD	B,$03
 7950+34D6 7E           l34d6:		LD	A,(HL)
 7951+34D7 BB           		CP	E
 7952+34D8 20 02        		JR	NZ,l34dc	; (+$02)
 7953+34DA 36 00        		LD	(HL),$00
 7954+34DC 23           l34dc:		INC	HL
 7955+34DD 10 F7        		DJNZ	l34d6		; (-$09)
 7956+34DF AF           		XOR	A
 7957+34E0 47           		LD	B,A
 7958+34E1 4F           		LD	C,A
 7959+34E2 D5           		PUSH	DE
 7960+34E3 21 11 EF     		LD	HL,$EF11
 7961+34E6 CD 92 2B     		CALL	l2b92
 7962+34E9 D1           		POP	DE
 7963+34EA D0           		RET	NC
 7964+34EB
 7965+34EB AF           l34eb:		XOR	A
 7966+34EC 01 00 00     l34ec:		LD	BC,$0000
 7967+34EF F5           		PUSH	AF
 7968+34F0 F1           l34f0:		POP	AF
 7969+34F1 F5           		PUSH	AF
 7970+34F2 D5           		PUSH	DE
 7971+34F3 21 11 EF     		LD	HL,$EF11
 7972+34F6 CD 69 2B     		CALL	l2b69
 7973+34F9 D1           		POP	DE
 7974+34FA 30 2A        		JR	NC,l3526	; (+$2A)
 7975+34FC 3A 21 EF     		LD	A,($EF21)
 7976+34FF FE 03        		CP	$03
 7977+3501 20 16        		JR	NZ,l3519	; (+$16)
 7978+3503 3A 4D EF     		LD	A,($EF4D)
 7979+3506 BB           		CP	E
 7980+3507 20 10        		JR	NZ,l3519	; (+$10)
 7981+3509 AF           		XOR	A
 7982+350A 32 4D EF     		LD	($EF4D),A
 7983+350D F1           		POP	AF
 7984+350E F5           		PUSH	AF
 7985+350F D5           		PUSH	DE
 7986+3510 21 11 EF     		LD	HL,$EF11
 7987+3513 CD 92 2B     		CALL	l2b92
 7988+3516 D1           		POP	DE
 7989+3517 30 0D        		JR	NC,l3526	; (+$0D)
 7990+3519 03           l3519:		INC	BC
 7991+351A 78           		LD	A,B
 7992+351B B1           		OR	C
 7993+351C 20 D2        		JR	NZ,l34f0	; (-$2E)
 7994+351E F1           l351e:		POP	AF
 7995+351F 3C           		INC	A
 7996+3520 FE 02        		CP	$02
 7997+3522 20 C8        		JR	NZ,l34ec	; (-$38)
 7998+3524 37           		SCF
 7999+3525 C9           		RET
 8000+3526
 8001+3526 FE 38        l3526:		CP	$38
 8002+3528 28 F4        		JR	Z,l351e		; (-$0C)
 8003+352A FE 16        		CP	$16
 8004+352C 28 F0        		JR	Z,l351e		; (-$10)
 8005+352E D1           		POP	DE
 8006+352F A7           		AND	A
 8007+3530 C9           		RET
 8008+3531
 8009+3531 54           l3531:		LD	D,H		; CREO QUE ACA COMIENZA LA CARGA DE UN Z80
 8010+3532 5D           		LD	E,L
 8011+3533 1A           l3533:		LD	A,(DE)
 8012+3534 13           		INC	DE
 8013+3535 FE FF        		CP	$FF
 8014+3537 20 FA        		JR	NZ,l3533	; (-$06)
 8015+3539 1B           		DEC	DE
 8016+353A 1B           		DEC	DE
 8017+353B 1A           		LD	A,(DE)
 8018+353C 32 1D 40     		LD	($401D),A
 8019+353F 01 01 00     		LD	BC,$0001	; NRO DE HANDLE $00 ?
 8020+3542 50           		LD	D,B
 8021+3543 1E 01        		LD	E,$01
 8022+3545 CD 06 01     		CALL	l0106		; ABRE ARCHIVO
 8023+3548 D0           		RET	NC
 8024+3549
 8025+3549 21 00 50     		LD	HL,$5000
 8026+354C 11 1E 00     		LD	DE,$001E	; NRO DE HANDLE $00 ?
 8027+354F 42           		LD	B,D
 8028+3550 0E 07        		LD	C,$07
 8029+3552 CD 12 01     		CALL	l0112
 8030+3555 D0           		RET	NC
 8031+3556
 8032+3556 06 00        		LD	B,$00		; NRO DE HANDLE $00 ?
 8033+3558 CD 33 01     		CALL	l0133
 8034+355B D5           		PUSH	DE
 8035+355C E5           		PUSH	HL
 8036+355D 06 00        		LD	B,$00		; NRO DE HANDLE $00 ?
 8037+355F CD 39 01     		CALL	l0139
 8038+3562 C1           		POP	BC
 8039+3563 A7           		AND	A
 8040+3564 ED 42        		SBC	HL,BC
 8041+3566 C1           		POP	BC
 8042+3567 7B           		LD	A,E
 8043+3568 99           		SBC	A,C
 8044+3569 01 01 00     		LD	BC,$0001
 8045+356C 09           		ADD	HL,BC
 8046+356D 88           		ADC	A,B
 8047+356E EB           		EX	DE,HL
 8048+356F 32 15 40     		LD	($4015),A
 8049+3572 F5           		PUSH	AF
 8050+3573 CD 21 05     		CALL	x0521
 8051+3576 F1           		POP	AF
 8052+3577 21 6B 50     		LD	HL,$506B
 8053+357A CD 86 38     		CALL	l3886
 8054+357D D0           		RET	NC
 8055+357E
 8056+357E 22 3F 50     		LD	($503F),HL
 8057+3581 06 00        		LD	B,$00		; NRO DE HANDLE $00 ?
 8058+3583 CD 09 01     		CALL	l0109
 8059+3586 F3           		DI
 8060+3587 31 67 50     		LD	SP,$5067
 8061+358A DD 21 6D 50  		LD	IX,$506D
 8062+358E DD 6E FE     		LD	L,(IX-$02)
 8063+3591 DD 66 FF     		LD	H,(IX-$01)
 8064+3594 CD 6D 27     		CALL	l276d
 8065+3597 CD C2 27     		CALL	x27c2
 8066+359A D9           		EXX
 8067+359B 21 1D 40     		LD	HL,$401D
 8068+359E CB 76        		BIT	6,(HL)
 8069+35A0 CA 21 36     		JP	Z,l3621
 8070+35A3 3A 1A 50     		LD	A,($501A)
 8071+35A6 D3 FE        		OUT	($FE),A
 8072+35A8 3A 13 50     		LD	A,($5013)
 8073+35AB E6 04        		AND	$04
 8074+35AD 32 13 50     		LD	($5013),A
 8075+35B0 3A 15 40     		LD	A,($4015)
 8076+35B3 A7           		AND	A
 8077+35B4 21 10 00     		LD	HL,$0010
 8078+35B7 D9           		EXX
 8079+35B8 FD 2E 00     		LD	IYL,$00
 8080+35BB 2E 03        		LD	L,$03
 8081+35BD CA 4C 36     		JP	Z,l364c
 8082+35C0 CD 72 37     		CALL	l3772
 8083+35C3 31 47 40     		LD	SP,$4047
 8084+35C6 CD 29 38     		CALL	l3829
 8085+35C9 CD 75 38     		CALL	l3875
 8086+35CC 6F           		LD	L,A
 8087+35CD CD 75 38     		CALL	l3875
 8088+35D0 67           		LD	H,A
 8089+35D1 22 27 40     		LD	($4027),HL
 8090+35D4 3E C3        		LD	A,$C3
 8091+35D6 32 26 40     		LD	($4026),A
 8092+35D9 CD 75 38     		CALL	l3875
 8093+35DC 32 1D 40     		LD	($401D),A
 8094+35DF E6 07        		AND	$07
 8095+35E1 28 15        		JR	Z,l35f8		; (+$15)
 8096+35E3 D9           		EXX
 8097+35E4 21 00 C0     		LD	HL,	$C000
 8098+35E7 5F           		LD	E,A
 8099+35E8 AF           l35e8:		XOR	A
 8100+35E9 CD DD 37     		CALL	l37dd
 8101+35EC 56           		LD	D,(HL)
 8102+35ED 7B           		LD	A,E
 8103+35EE CD DD 37     		CALL	l37dd
 8104+35F1 72           		LD	(HL),D
 8105+35F2 23           		INC	HL
 8106+35F3 CB 7C        		BIT	7,H
 8107+35F5 20 F1        		JR	NZ,l35e8	; (-$0F)
 8108+35F7 D9           		EXX
 8109+35F8 CD 75 38     l35f8:		CALL	l3875
 8110+35FB AF           		XOR	A
 8111+35FC FE 02        l35fc:		CP	$02
 8112+35FE 28 1A        		JR	Z,l361a		; (+$1A)
 8113+3600 FE 05        		CP	$05
 8114+3602 28 16        		JR	Z,l361a		; (+$16)
 8115+3604 2A 1D 40     		LD	HL,($401D)
 8116+3607 67           		LD	H,A
 8117+3608 7D           		LD	A,L
 8118+3609 E6 07        		AND	$07
 8119+360B BC           		CP	H
 8120+360C 7C           		LD	A,H
 8121+360D 28 0B        		JR	Z,l361a		; (+$0B)
 8122+360F CD DD 37     		CALL	l37dd
 8123+3612 F5           		PUSH	AF
 8124+3613 21 00 C0     		LD	HL,	$C000
 8125+3616 CD 29 38     		CALL	l3829
 8126+3619 F1           		POP	AF
 8127+361A 3C           l361a:		INC	A
 8128+361B FE 08        		CP	$08
 8129+361D 38 DD        		JR	C,l35fc		; (-$23)
 8130+361F 18 34        		JR	l3655		; (+$34)
 8131+3621 21 0C 50     l3621:		LD	HL,$500C
 8132+3624 7E           		LD	A,(HL)
 8133+3625 FE FF        		CP	$FF
 8134+3627 20 03        		JR	NZ,l362c	; (+$03)
 8135+3629 3E 01        		LD	A,$01
 8136+362B 77           		LD	(HL),A
 8137+362C 1F           l362c:		RRA
 8138+362D D3 FE        		OUT	($FE),A
 8139+362F 2B           		DEC	HL
 8140+3630 7E           		LD	A,(HL)
 8141+3631 CB BF        		res	7,A
 8142+3633 30 02        		JR	NC,l3637	; (+$02)
 8143+3635 CB FF        		SET	7,A
 8144+3637 77           l3637:		LD	(HL),A
 8145+3638 23           		INC	HL
 8146+3639 7E           		LD	A,(HL)
 8147+363A E6 20        		AND	$20
 8148+363C FD 6F        		LD	IYL,A
 8149+363E 21 E5 37     		LD	HL,l37e5
 8150+3641 D9           		EXX
 8151+3642 2A 06 50     		LD	HL,($5006)
 8152+3645 7C           		LD	A,H
 8153+3646 B5           		OR	L
 8154+3647 CA 91 36     		JP	Z,l3691
 8155+364A 2E 00        		LD	L,$00
 8156+364C CD 72 37     l364c:		CALL	l3772
 8157+364F 31 47 40     		LD	SP,$4047
 8158+3652 CD 29 38     		CALL	l3829
 8159+3655 CD CE 27     l3655:		CALL	l27ce
 8160+3658 ED 46        		IM	0
 8161+365A 3A 10 40     		LD	A,($4010)
 8162+365D E6 03        		AND	$03
 8163+365F 28 07        		JR	Z,l3668		; (+$07)
 8164+3661 ED 56        		IM	1
 8165+3663 3D           		DEC	A
 8166+3664 28 02        		JR	Z,l3668		; (+$02)
 8167+3666 ED 5E        		IM	2
 8168+3668 31 00 40     l3668:		LD	SP,$4000
 8169+366B E1           		POP	HL
 8170+366C D1           		POP	DE
 8171+366D C1           		POP	BC
 8172+366E D9           		EXX
 8173+366F F1           		POP	AF
 8174+3670 08           		EX	AF,AF'
 8175+3671 E1           		POP	HL
 8176+3672 D1           		POP	DE
 8177+3673 FD E1        		POP	IY
 8178+3675 DD E1        		POP	IX
 8179+3677 C1           		POP	BC
 8180+3678 78           		LD	A,B
 8181+3679 D6 09        		SUB	$09
 8182+367B 17           		RLA
 8183+367C CB 10        		RL	B
 8184+367E 1F           		RRA
 8185+367F ED 4F        		LD	R,A
 8186+3681 F1           		POP	AF
 8187+3682 ED 47        		LD	I,A
 8188+3684 ED 7B 16 40  		LD	SP,($4016)
 8189+3688 01 FD 1F     		LD	BC,PBANK678
 8190+368B 3A 15 40     		LD	A,($4015)
 8191+368E C3 18 40     		JP	$4018
 8192+3691 CD 75 38     l3691:		CALL	l3875
 8193+3694 6F           		LD	L,A
 8194+3695 CD 75 38     		CALL	l3875
 8195+3698 A7           		AND	A
 8196+3699 C2 35 37     		JP	NZ,l3735
 8197+369C CD 75 38     		CALL	l3875
 8198+369F 32 06 50     		LD	($5006),A
 8199+36A2 CD 75 38     		CALL	l3875
 8200+36A5 32 07 50     		LD	($5007),A
 8201+36A8 CD 75 38     		CALL	l3875
 8202+36AB 67           		LD	H,A
 8203+36AC CD 75 38     		CALL	l3875
 8204+36AF 32 69 50     		LD	($5069),A
 8205+36B2 CD 75 38     		CALL	l3875
 8206+36B5 CD 75 38     		CALL	l3875
 8207+36B8 CD 75 38     		CALL	l3875
 8208+36BB F5           		PUSH	AF
 8209+36BC D9           		EXX
 8210+36BD 11 10 00     		LD	DE,$0010
 8211+36C0 D9           l36c0:		EXX
 8212+36C1 CD 75 38     		CALL	l3875
 8213+36C4 D9           		EXX
 8214+36C5 01 FD FF     		LD	BC,$FFFD
 8215+36C8 ED 51        		OUT	(C),D
 8216+36CA 06 BF        		LD	B,$BF
 8217+36CC ED 79        		OUT	(C),A
 8218+36CE 14           		INC	D
 8219+36CF 1D           		DEC	E
 8220+36D0 20 EE        		JR	NZ,l36c0	; (-$12)
 8221+36D2 06 FF        		LD	B,$FF
 8222+36D4 F1           		POP	AF
 8223+36D5 ED 79        		OUT	(C),A
 8224+36D7 D9           		EXX
 8225+36D8 7D           		LD	A,L
 8226+36D9 D6 17        		SUB	$17
 8227+36DB 20 08        		JR	NZ,l36e5	; (+$08)
 8228+36DD 7C           		LD	A,H
 8229+36DE FE 03        		CP	$03
 8230+36E0 38 11        		JR	C,l36f3		; (+$11)
 8231+36E2 24           		INC	H
 8232+36E3 18 0E        		JR	l36f3		; (+$0E)
 8233+36E5 FE 20        l36e5:		CP	$20
 8234+36E7 F5           l36e7:		PUSH	AF
 8235+36E8 CD 75 38     		CALL	l3875
 8236+36EB 6F           		LD	L,A
 8237+36EC F1           		POP	AF
 8238+36ED 3D           		DEC	A
 8239+36EE 20 F7        		JR	NZ,l36e7	; (-$09)
 8240+36F0 7D           		LD	A,L
 8241+36F1 30 02        		JR	NC,l36f5	; (+$02)
 8242+36F3 3E 04        l36f3:		LD	A,$04
 8243+36F5 32 6A 50     l36f5:		LD	($506A),A
 8244+36F8 7C           		LD	A,H
 8245+36F9 FE 04        		CP	$04
 8246+36FB D2 36 37     		JP	NC,l3736
 8247+36FE AF           		XOR	A
 8248+36FF CD DD 37     		CALL	l37dd
 8249+3702 26 03        		LD	H,$03
 8250+3704 A7           		AND	A
 8251+3705 E5           l3705:		PUSH	HL
 8252+3706 CD 6A 38     		CALL	l386a
 8253+3709 21 00 80     		LD	HL,$8000
 8254+370C FD 26 C0     		LD	IYH,$C0
 8255+370F FE 04        		CP	$04
 8256+3711 28 18        		JR	Z,l372b		; (+$18)
 8257+3713 26 C0        		LD	H,$C0
 8258+3715 FD 26 00     		LD	IYH,$00
 8259+3718 FE 05        		CP	$05
 8260+371A 28 0F        		JR	Z,l372b		; (+$0F)
 8261+371C FE 08        		CP	$08
 8262+371E 20 15        		JR	NZ,l3735	; (+$15)
 8263+3720 CD 7D 37     		CALL	l377d
 8264+3723 F1           		POP	AF
 8265+3724 31 47 40     		LD	SP,$4047
 8266+3727 F5           		PUSH	AF
 8267+3728 FD 26 80     		LD	IYH,$80
 8268+372B CD 29 38     l372b:		CALL	l3829
 8269+372E E1           		POP	HL
 8270+372F 25           		DEC	H
 8271+3730 20 D3        		JR	NZ,l3705	; (-$2D)
 8272+3732 C3 55 36     		JP	l3655
 8273+3735 C7           l3735:		RST	00H
 8274+3736 26 08        l3736:		LD	H,$08
 8275+3738 A7           		AND	A
 8276+3739 E5           l3739:		PUSH	HL
 8277+373A CD 6A 38     		CALL	l386a
 8278+373D D6 03        		SUB	$03
 8279+373F 38 F4        		JR	C,l3735		; (-$0C)
 8280+3741 FE 08        		CP	$08
 8281+3743 30 F0        		JR	NC,l3735	; (-$10)
 8282+3745 21 00 C0     		LD	HL,	$C000
 8283+3748 CD DD 37     		CALL	l37dd
 8284+374B FE 05        		CP	$05
 8285+374D 20 16        		JR	NZ,l3765	; (+$16)
 8286+374F CD 7D 37     		CALL	l377d
 8287+3752 F1           		POP	AF
 8288+3753 31 47 40     		LD	SP,$4047
 8289+3756 F5           		PUSH	AF
 8290+3757 3A 69 50     		LD	A,($5069)
 8291+375A 32 1D 40     		LD	($401D),A
 8292+375D 3A 6A 50     		LD	A,($506A)
 8293+3760 32 15 40     		LD	($4015),A
 8294+3763 CB FC        		SET	7,H
 8295+3765 FD 26 00     l3765:		LD	IYH,$00
 8296+3768 CD 29 38     		CALL	l3829
 8297+376B E1           		POP	HL
 8298+376C 25           		DEC	H
 8299+376D 20 CA        		JR	NZ,l3739	; (-$36)
 8300+376F C3 55 36     		JP	l3655
 8301+3772 AF           l3772:		XOR	A
 8302+3773 CD DD 37     		CALL	l37dd
 8303+3776 CD 7F 37     		CALL	l377f
 8304+3779 FD 26 00     		LD	IYH,$00
 8305+377C C9           		RET
 8306+377D
 8307+377D 2E 00        l377d:		LD	L,$00
 8308+377F 26 40        l377f:		LD	H,$40
 8309+3781 FD 26 48     		LD	IYH,$48
 8310+3784 CD 29 38     		CALL	l3829
 8311+3787 D9           		EXX
 8312+3788 E5           		PUSH	HL
 8313+3789 2A 3F 50     		LD	HL,($503F)
 8314+378C DD 2B        		DEC	IX
 8315+378E DD E5        		PUSH	IX
 8316+3790 D1           		POP	DE
 8317+3791 A7           		AND	A
 8318+3792 ED 52        		SBC	HL,DE
 8319+3794 44           		LD	B,H
 8320+3795 4D           		LD	C,L
 8321+3796 21 47 40     		LD	HL,$4047
 8322+3799 E5           		PUSH	HL
 8323+379A DD E1        		POP	IX
 8324+379C DD 23        		INC	IX
 8325+379E EB           		EX	DE,HL
 8326+379F ED B0        		LDIR
 8327+37A1 E1           		POP	HL
 8328+37A2 16 00        		LD	D,$00
 8329+37A4 CD BF 37     		CALL	l37bf
 8330+37A7 16 50        		LD	D,$50
 8331+37A9 CD BF 37     		CALL	l37bf
 8332+37AC 21 1D 40     		LD	HL,$401D
 8333+37AF 36 10        		LD	(HL),$10
 8334+37B1 2E 15        		LD	L,$15
 8335+37B3 36 04        		LD	(HL),$04
 8336+37B5 D9           		EXX
 8337+37B6 3A 14 40     		LD	A,($4014)
 8338+37B9 A7           		AND	A
 8339+37BA C0           		RET	NZ
 8340+37BB
 8341+37BB 32 25 40     		LD	($4025),A
 8342+37BE C9           		RET
 8343+37BF
 8344+37BF 06 40        l37bf:		LD	B,$40
 8345+37C1 5E           l37c1:		LD	E,(HL)
 8346+37C2 23           		INC	HL
 8347+37C3 CB 7B        		BIT	7,E
 8348+37C5 C0           		RET	NZ
 8349+37C6
 8350+37C6 7E           		LD	A,(HL)
 8351+37C7 E6 3F        		AND	$3F
 8352+37C9 4F           		LD	C,A
 8353+37CA 7E           		LD	A,(HL)
 8354+37CB 07           		RLCA
 8355+37CC 07           		RLCA
 8356+37CD E6 03        		AND	$03
 8357+37CF 23           		INC	HL
 8358+37D0 E5           		PUSH	HL
 8359+37D1 6F           		LD	L,A
 8360+37D2 2C           		INC	L
 8361+37D3 1A           l37d3:		LD	A,(DE)
 8362+37D4 1C           		INC	E
 8363+37D5 02           		LD	(BC),A
 8364+37D6 0C           		INC	C
 8365+37D7 2D           		DEC	L
 8366+37D8 20 F9        		JR	NZ,l37d3	; (-$07)
 8367+37DA E1           		POP	HL
 8368+37DB 18 E4        		JR	l37c1		; (-$1C)
 8369+37DD
 8370+37DD C5           l37dd:		PUSH	BC
 8371+37DE 01 FD 7F     		LD	BC,PBANKM
 8372+37E1 ED 79        		OUT	(C),A
 8373+37E3 C1           		POP	BC
 8374+37E4 C9           		RET
 8375+37E5
 8376+37E5 2F 58 32 9A  l37e5:		DB	$2F,$58,$32,$9A,$2F,$9E,$34,$A3
 8376+37E9 2F 9E 34 A3
 8377+37ED 35 26 80 0A  		DB	$35,$26,$80,$0A,$13,$0B,$11,$17
 8377+37F1 13 0B 11 17
 8378+37F5 CC 04 48 0D  		DB	$CC,$04,$48,$0D,$4A,$02,$61,$08
 8378+37F9 4A 02 61 08
 8379+37FD 56 01 12 00  		DB	$56,$01,$12,$00,$24,$16,$06,$15
 8379+3801 24 16 06 15
 8380+3805 07 13 40 11  		DB	$07,$13,$40,$11,$42,$0F,$44,$06
 8380+3809 42 0F 44 06
 8381+380D 67 1D 10 1B  		DB	$67,$1D,$10,$1B,$14,$80
 8381+3811 14 80
 8382+3813
 8383+3813 7A           l3813:		LD	A,D
 8384+3814 B3           		OR	E
 8385+3815 CC 7E 38     		CALL	Z,n3871
 8386+3818 1B           		DEC	DE
 8387+3819 ED 78        		IN	A,(C)
 8388+381B 77           		LD	(HL),A
 8389+381C 2C           		INC	L
 8390+381D C2 13 38     		JP	NZ,l3813
 8391+3820 24           		INC	H
 8392+3821 7C           		LD	A,H
 8393+3822 E6 F8        		AND	$F8
 8394+3824 FD BC        		CP	IYH
 8395+3826 20 EB        		JR	NZ,l3813	; (-$15)
 8396+3828 C9           		RET
 8397+3829
 8398+3829 FD 7D        l3829:		LD	A,iyl
 8399+382B A7           		AND	A
 8400+382C 28 E5        l382c:		JR	Z,l3813		; (-$1B)
 8401+382E
 8402+382E 7A           l382e:		LD	A,D
 8403+382F B3           		OR	E
 8404+3830 CC 7E 38     		CALL	Z,n3871
 8405+3833 1B           		DEC	DE
 8406+3834 ED 78        		IN	A,(C)
 8407+3836 FE ED        		CP	$ED
 8408+3838 28 0E        		JR	Z,l3848		; (+$0E)
 8409+383A 77           l383a:		LD	(HL),A
 8410+383B 2C           		INC	L
 8411+383C C2 2E 38     		JP	NZ,l382e
 8412+383F 24           		INC	H
 8413+3840 7C           l3840:		LD	A,H
 8414+3841 E6 F8        		AND	$F8
 8415+3843 FD BC        		CP	IYH
 8416+3845 20 E7        		JR	NZ,l382e	; (-$19)
 8417+3847 C9           		RET
 8418+3848
 8419+3848 CD 75 38     l3848:		CALL	l3875
 8420+384B FE ED        		CP	$ED
 8421+384D 20 11        		JR	NZ,l3860	; (+$11)
 8422+384F CD 75 38     		CALL	l3875
 8423+3852 F5           		PUSH	AF
 8424+3853 CD 75 38     		CALL	l3875
 8425+3856 C1           		POP	BC
 8426+3857 77           l3857:		LD	(HL),A
 8427+3858 23           		INC	HL
 8428+3859 10 FC        		DJNZ	l3857		; (-$04)
 8429+385B 01 EF CE     		LD	BC,$CEEF
 8430+385E 18 E0        		JR	l3840		; (-$20)
 8431+3860 36 ED        l3860:		LD	(HL),$ED
 8432+3862 2C           		INC	L
 8433+3863 20 D5        		JR	NZ,l383a	; (-$2B)
 8434+3865 24           		INC	H
 8435+3866 20 D2        		JR	NZ,l383a	; (-$2E)
 8436+3868 37           		SCF
 8437+3869 C9           		RET
 8438+386A
 8439+386A D4 75 38     l386a:		CALL	NC,l3875
 8440+386D 6F           		LD	L,A
 8441+386E CD 75 38     		CALL	l3875
 8442+3871 A5           		AND	L
 8443+3872 3C           		INC	A
 8444+3873 FD 6F        		LD	IYL,A
 8445+3875 7A           l3875:		LD	A,D
 8446+3876 B3           		OR	E
 8447+3877 CC 7E 38     		CALL	Z,n3871
 8448+387A 1B           		DEC	DE
 8449+387B ED 78        		IN	A,(C)
 8450+387D C9           		RET
 8451+387E
 8452+387E DD 7E 00     n3871:		LD	A,(IX+$00)
 8453+3881 3C           		INC	A
 8454+3882 C4 6D 27     		CALL	NZ,l276d
 8455+3885 C9           		RET
 8456+3886
 8457+3886 D5           l3886:		PUSH	DE
 8458+3887 F5           		PUSH	AF
 8459+3888 22 14 F5     		LD	($F514),HL
 8460+388B 21 20 00     		LD	HL,$0020
 8461+388E 09           		ADD	HL,BC
 8462+388F 7E           		LD	A,(HL)
 8463+3890 E6 03        		AND	$03
 8464+3892 3D           		DEC	A
 8465+3893 3E 1D        		LD	A,$1D
 8466+3895 20 1D        		JR	NZ,l38b4	; (+$1D)
 8467+3897 23           		INC	HL
 8468+3898 7E           		LD	A,(HL)
 8469+3899 CD C5 17     		CALL	l17c5
 8470+389C 30 16        		JR	NC,l38b4	; (+$16)
 8471+389E DD 7E 06     		LD	A,(IX+$06)
 8472+38A1 A7           		AND	A
 8473+38A2 28 0D        		JR	Z,l38b1		; (+$0D)
 8474+38A4 DD 6E 2C     		LD	L,(IX+$2C)
 8475+38A7 DD 66 2D     		LD	H,(IX+$2D)
 8476+38AA 11 D8 27     		LD	DE,$27D8
 8477+38AD ED 52        		SBC	HL,DE
 8478+38AF 28 06        		JR	Z,l38b7		; (+$06)
 8479+38B1 3E 1D        l38b1:		LD	A,$1D
 8480+38B3 A7           		AND	A
 8481+38B4 D1           l38b4:		POP	DE
 8482+38B5 D1           		POP	DE
 8483+38B6 C9           		RET
 8484+38B7
 8485+38B7 CD 63 10     l38b7:		CALL	l1063
 8486+38BA DD E5        		PUSH	IX
 8487+38BC DD 2A 14 F5  		LD	IX,($F514)
 8488+38C0 DD 75 00     		LD	(IX+$00),L
 8489+38C3 DD 36 01 00  		LD	(IX+$01),$00
 8490+38C7 6C           		LD	L,H
 8491+38C8 63           		LD	H,E
 8492+38C9 DD 5E 00     		LD	E,(IX+$00)
 8493+38CC DD 56 01     		LD	D,(IX+$01)
 8494+38CF DD 23        		INC	IX
 8495+38D1 DD 23        		INC	IX
 8496+38D3 DD 22 14 F5  		LD	($F514),IX
 8497+38D7 DD E1        		POP	IX
 8498+38D9 F1           		POP	AF
 8499+38DA E3           		EX	(SP),HL
 8500+38DB E5           		PUSH	HL
 8501+38DC 21 00 01     		LD	HL,$0100
 8502+38DF A7           		AND	A
 8503+38E0 ED 52        		SBC	HL,DE
 8504+38E2 EB           		EX	DE,HL
 8505+38E3 E1           		POP	HL
 8506+38E4 A7           		AND	A
 8507+38E5 ED 52        		SBC	HL,DE
 8508+38E7 DE 00        		SBC	A,$00
 8509+38E9 5F           		LD	E,A
 8510+38EA 7D           		LD	A,L
 8511+38EB A7           		AND	A
 8512+38EC 6C           		LD	L,H
 8513+38ED 63           		LD	H,E
 8514+38EE 11 01 00     		LD	DE,$0001
 8515+38F1 28 01        		JR	Z,l38f4		; (+$01)
 8516+38F3 13           		INC	DE
 8517+38F4 19           l38f4:		ADD	HL,DE
 8518+38F5 22 11 F5     		LD	($F511),HL
 8519+38F8 D1           		POP	DE
 8520+38F9 DD 7E 03     		LD	A,(IX+$03)
 8521+38FC CB 3F        		SRL	A
 8522+38FE A3           		AND	E
 8523+38FF 32 13 F5     		LD	($F513),A
 8524+3902 DD 7E 02     		LD	A,(IX+$02)
 8525+3905 3D           		DEC	A
 8526+3906 C4 EB 04     		CALL	NZ,l04eb
 8527+3909 D5           l3909:		PUSH	DE
 8528+390A DD 7E 02     		LD	A,(IX+$02)
 8529+390D CD F5 04     		CALL	l04f5
 8530+3910 CD 05 0D     		CALL	l0d05
 8531+3913 EB           		EX	DE,HL
 8532+3914 21 0C 00     		LD	HL,$000C
 8533+3917 09           		ADD	HL,BC
 8534+3918 2F           		CPL
 8535+3919 A6           		AND	(HL)
 8536+391A B2           		OR	D
 8537+391B 77           		LD	(HL),A
 8538+391C 23           		INC	HL
 8539+391D 23           		INC	HL
 8540+391E 73           		LD	(HL),E
 8541+391F CD 3A 0D     		CALL	l0d3a
 8542+3922 D1           		POP	DE
 8543+3923 D0           		RET	NC
 8544+3924
 8545+3924 7B           		LD	A,E
 8546+3925 E6 07        		AND	$07
 8547+3927 87           		ADD	A,A
 8548+3928 C6 10        		ADD	A,$10
 8549+392A 6F           		LD	L,A
 8550+392B 26 00        		LD	H,$00
 8551+392D 09           		ADD	HL,BC
 8552+392E D5           l392e:		PUSH	DE
 8553+392F 5E           		LD	E,(HL)
 8554+3930 23           		INC	HL
 8555+3931 56           		LD	D,(HL)
 8556+3932 23           		INC	HL
 8557+3933 E5           		PUSH	HL
 8558+3934 C5           		PUSH	BC
 8559+3935 DD 7E 02     		LD	A,(IX+$02)
 8560+3938 3D           		DEC	A
 8561+3939 F5           		PUSH	AF
 8562+393A C4 F5 04     		CALL	NZ,l04f5
 8563+393D 0E 00        		LD	C,$00
 8564+393F 3A 13 F5     		LD	A,($F513)
 8565+3942 83           		ADD	A,E
 8566+3943 5F           		LD	E,A
 8567+3944 7A           		LD	A,D
 8568+3945 89           		ADC	A,C
 8569+3946 57           		LD	D,A
 8570+3947 DD E5        		PUSH	IX
 8571+3949 DD 6E 17     		LD	L,(IX+$17)
 8572+394C DD 66 18     		LD	H,(IX+$18)
 8573+394F E5           		PUSH	HL
 8574+3950 DD E1        		POP	IX
 8575+3952 CD A8 26     		CALL	l26a8
 8576+3955 DD E1        		POP	IX
 8577+3957 30 57        		JR	NC,l39b0	; (+$57)
 8578+3959 2A 14 F5     		LD	HL,($F514)
 8579+395C 01 EF FE     		LD	BC,$FEEF
 8580+395F CD B8 39     		CALL	l39b8
 8581+3962 01 EF EF     		LD	BC,$EFEF
 8582+3965 CD B8 39     		CALL	l39b8
 8583+3968 01 EF EE     		LD	BC,$EEEF
 8584+396B CD B8 39     		CALL	l39b8
 8585+396E 01 EF DF     		LD	BC,$DFEF
 8586+3971 CD B8 39     		CALL	l39b8
 8587+3974 C1           		POP	BC
 8588+3975 3A 13 F5     		LD	A,($F513)
 8589+3978 4F           		LD	C,A
 8590+3979 3E 01        		LD	A,$01
 8591+397B 87           l397b:		ADD	A,A
 8592+397C 10 FD        		DJNZ	l397b		; (-$03)
 8593+397E 91           		SUB	C
 8594+397F 06 00        		LD	B,$00
 8595+3981 4F           		LD	C,A
 8596+3982 E5           		PUSH	HL
 8597+3983 2A 11 F5     		LD	HL,($F511)
 8598+3986 7D           		LD	A,L
 8599+3987 A7           		AND	A
 8600+3988 ED 42        		SBC	HL,BC
 8601+398A 30 02        		JR	NC,l398e	; (+$02)
 8602+398C 4F           		LD	C,A
 8603+398D AF           		XOR	A
 8604+398E 22 11 F5     l398e:		LD	($F511),HL
 8605+3991 E1           		POP	HL
 8606+3992 71           		LD	(HL),C
 8607+3993 23           		INC	HL
 8608+3994 22 14 F5     		LD	($F514),HL
 8609+3997 C1           		POP	BC
 8610+3998 37           		SCF
 8611+3999 28 17        		JR	Z,l39b2		; (+$17)
 8612+399B E1           		POP	HL
 8613+399C D1           		POP	DE
 8614+399D AF           		XOR	A
 8615+399E 32 13 F5     		LD	($F513),A
 8616+39A1 13           		INC	DE
 8617+39A2 E5           		PUSH	HL
 8618+39A3 A7           		AND	A
 8619+39A4 ED 42        		SBC	HL,BC
 8620+39A6 7D           		LD	A,L
 8621+39A7 E1           		POP	HL
 8622+39A8 FE 20        		CP	$20
 8623+39AA DA 2E 39     		JP	C,l392e
 8624+39AD C3 09 39     		JP	l3909
 8625+39B0 C1           l39b0:		POP	BC
 8626+39B1 C1           		POP	BC
 8627+39B2 36 FF        l39b2:		LD	(HL),$FF
 8628+39B4 23           		INC	HL
 8629+39B5 C1           		POP	BC
 8630+39B6 C1           		POP	BC
 8631+39B7 C9           		RET
 8632+39B8
 8633+39B8 ED 78        l39b8:		IN	A,(C)
 8634+39BA 77           		LD	(HL),A
 8635+39BB 23           		INC	HL
 8636+39BC C9           		RET
 8637+39BD
 8638+39BD 3E 3A        l39bd:		LD	A,$3A
 8639+39BF A7           		AND	A
 8640+39C0 C9           		RET
 8641+39C1
 8642+39C1 C6 03        l39c1:		ADD	A,$03
 8643+39C3 FE 13        		CP	$13
 8644+39C5 30 0F        		JR	NC,l39d6	; (+$0F)
 8645+39C7 07           		RLCA
 8646+39C8 21 10 5C     		LD	HL,	$5C10
 8647+39CB 4F           		LD	C,A
 8648+39CC 06 00        		LD	B,$00
 8649+39CE 09           		ADD	HL,BC
 8650+39CF 4E           		LD	C,(HL)
 8651+39D0 23           		INC	HL
 8652+39D1 46           		LD	B,(HL)
 8653+39D2 2B           		DEC	HL
 8654+39D3 37           		SCF
 8655+39D4 C9           		RET
 8656+39D5
 8657+39D5 C1           l39d5:		POP	BC
 8658+39D6 3E 17        l39d6:		LD	A,$17
 8659+39D8 A7           		AND	A
 8660+39D9 C9           		RET
 8661+39DA
 8662+39DA 23           l39da:		INC	HL
 8663+39DB 23           		INC	HL
 8664+39DC 7E           l39dc:		LD	A,(HL)
 8665+39DD 23           		INC	HL
 8666+39DE A7           		AND	A
 8667+39DF C8           		RET	Z
 8668+39E0
 8669+39E0 B9           		CP	C
 8670+39E1 20 F7        		JR	NZ,l39da	; (-$09)
 8671+39E3 37           		SCF
 8672+39E4 C9           		RET
 8673+39E5
 8674+39E5 E5           l39e5:		PUSH	HL
 8675+39E6 CD F6 39     		CALL	l39f6
 8676+39E9 30 09        		JR	NC,l39f4	; (+$09)
 8677+39EB EB           		EX	DE,HL
 8678+39EC E3           		EX	(SP),HL
 8679+39ED A7           		AND	A
 8680+39EE ED 52        		SBC	HL,DE
 8681+39F0 3F           		CCF
 8682+39F1 E1           		POP	HL
 8683+39F2 EB           		EX	DE,HL
 8684+39F3 C9           		RET
 8685+39F4
 8686+39F4 E1           l39f4:		POP	HL
 8687+39F5 C9           		RET
 8688+39F6
 8689+39F6 78           l39f6:		LD	A,B
 8690+39F7 B1           		OR	C
 8691+39F8 C8           		RET	Z
 8692+39F9
 8693+39F9 1A           		LD	A,(DE)
 8694+39FA FE 2C        		CP	$2C
 8695+39FC 37           		SCF
 8696+39FD 3F           		CCF
 8697+39FE C0           		RET	NZ
 8698+39FF
 8699+39FF 13           		INC	DE
 8700+3A00 0B           		DEC	BC
 8701+3A01 21 00 00     l3a01:		LD	HL,$0000
 8702+3A04 78           l3a04:		LD	A,B
 8703+3A05 B1           		OR	C
 8704+3A06 37           		SCF
 8705+3A07 C8           		RET	Z
 8706+3A08
 8707+3A08 1A           		LD	A,(DE)
 8708+3A09 FE 20        		CP	$20
 8709+3A0B 28 13        		JR	Z,l3a20		; (+$13)
 8710+3A0D D6 30        		SUB	$30
 8711+3A0F D8           		RET	C
 8712+3A10
 8713+3A10 FE 0A        		CP	$0A
 8714+3A12 3F           		CCF
 8715+3A13 D8           		RET	C
 8716+3A14
 8717+3A14 D5           		PUSH	DE
 8718+3A15 29           		ADD	HL,HL
 8719+3A16 54           		LD	D,H
 8720+3A17 5D           		LD	E,L
 8721+3A18 29           		ADD	HL,HL
 8722+3A19 29           		ADD	HL,HL
 8723+3A1A 19           		ADD	HL,DE
 8724+3A1B 16 00        		LD	D,$00
 8725+3A1D 5F           		LD	E,A
 8726+3A1E 19           		ADD	HL,DE
 8727+3A1F D1           		POP	DE
 8728+3A20 13           l3a20:		INC	DE
 8729+3A21 0B           		DEC	BC
 8730+3A22 18 E0        		JR	l3a04		; (-$20)
 8731+3A24 C5           l3a24:		PUSH	BC
 8732+3A25 CD C1 39     		CALL	l39c1
 8733+3A28 30 AB        		JR	NC,l39d5	; (-$55)
 8734+3A2A 78           		LD	A,B
 8735+3A2B B1           		OR	C
 8736+3A2C 28 16        		JR	Z,l3a44		; (+$16)
 8737+3A2E E5           		PUSH	HL
 8738+3A2F 2A 4F 5C     		LD	HL,(	$5C4F)
 8739+3A32 09           		ADD	HL,BC
 8740+3A33 23           		INC	HL
 8741+3A34 23           		INC	HL
 8742+3A35 23           		INC	HL
 8743+3A36 7E           		LD	A,(HL)
 8744+3A37 E1           		POP	HL
 8745+3A38 FE 4B        		CP	$4B
 8746+3A3A 28 08        		JR	Z,l3a44		; (+$08)
 8747+3A3C FE 53        		CP	$53
 8748+3A3E 28 04        		JR	Z,l3a44		; (+$04)
 8749+3A40 FE 50        		CP	$50
 8750+3A42 20 91        		JR	NZ,l39d5	; (-$6F)
 8751+3A44 C1           l3a44:		POP	BC
 8752+3A45 E5           		PUSH	HL
 8753+3A46 21 84 3A     		LD	HL,l3a84
 8754+3A49 78           		LD	A,B
 8755+3A4A B1           		OR	C
 8756+3A4B 28 32        		JR	Z,l3a7f		; (+$32)
 8757+3A4D 0B           		DEC	BC
 8758+3A4E 78           		LD	A,B
 8759+3A4F B1           		OR	C
 8760+3A50 03           		INC	BC
 8761+3A51 1A           		LD	A,(DE)
 8762+3A52 28 11        		JR	Z,l3a65		; (+$11)
 8763+3A54 21 9C 3A     		LD	HL,l3a9c
 8764+3A57 13           		INC	DE
 8765+3A58 1A           		LD	A,(DE)
 8766+3A59 1B           		DEC	DE
 8767+3A5A FE 3E        		CP	$3E
 8768+3A5C 3E 49        		LD	A,$49
 8769+3A5E 20 05        		JR	NZ,l3a65	; (+$05)
 8770+3A60 1A           		LD	A,(DE)
 8771+3A61 13           		INC	DE
 8772+3A62 13           		INC	DE
 8773+3A63 0B           		DEC	BC
 8774+3A64 0B           		DEC	BC
 8775+3A65 E6 DF        l3a65:		AND	$DF
 8776+3A67 C5           		PUSH	BC
 8777+3A68 4F           		LD	C,A
 8778+3A69 CD DC 39     		CALL	l39dc
 8779+3A6C C1           		POP	BC
 8780+3A6D 30 10        		JR	NC,l3a7f	; (+$10)
 8781+3A6F 7E           		LD	A,(HL)
 8782+3A70 23           		INC	HL
 8783+3A71 66           		LD	H,(HL)
 8784+3A72 6F           		LD	L,A
 8785+3A73 CD 7E 3A     		CALL	l3a7e
 8786+3A76 E1           		POP	HL
 8787+3A77 30 07        		JR	NC,l3a80	; (+$07)
 8788+3A79 73           		LD	(HL),E
 8789+3A7A 23           		INC	HL
 8790+3A7B 72           		LD	(HL),D
 8791+3A7C 37           		SCF
 8792+3A7D C9           		RET
 8793+3A7E
 8794+3A7E E9           l3a7e:		JP	(HL)
 8795+3A7F
 8796+3A7F C1           l3a7f:		POP	BC
 8797+3A80
 8798+3A80 3E 0E        l3a80:		LD	A,$0E
 8799+3A82 A7           		AND	A
 8800+3A83 C9           		RET
 8801+3A84
 8802+3A84 4B 8E 3A 53  l3a84:		DB	$4B,$8E,$3A,$53,$92,$3A,$50,$96
 8802+3A88 92 3A 50 96
 8803+3A8C 3A 00 1E 01  		DB	$3A,$00,$1E,$01,$18,$06,$1E,$06
 8803+3A90 18 06 1E 06
 8804+3A94 18 02 1E 10  		DB	$18,$02,$1E,$10,$16,$00,$37,$C9
 8804+3A98 16 00 37 C9
 8805+3A9C
 8806+3A9C 49 BD 3A 4F  l3a9c:		DB	$49,$BD,$3A,$4F,$B6,$3A,$55,$AF
 8806+3AA0 B6 3A 55 AF
 8807+3AA4 3A 4D 41 3B  		DB	$3A,$4D,$41,$3B,$56,$7C,$3B,$57
 8807+3AA8 56 7C 3B 57
 8808+3AAC BC 3B 00     		DB	$BC,$3B,$00
 8809+3AAF
 8810+3AAF 21 02 02     l3aaf:		LD	HL,$0202
 8811+3AB2 3E 03        		LD	A,$03
 8812+3AB4 18 0C        		JR	l3ac2		; (+$0C)
 8813+3AB6 21 04 02     		LD	HL,$0204
 8814+3AB9 3E 02        		LD	A,$02
 8815+3ABB 18 05        		JR	l3ac2		; (+$05)
 8816+3ABD 21 02 00     		LD	HL,$0002
 8817+3AC0 3E 01        		LD	A,$01
 8818+3AC2 F5           l3ac2:		PUSH	AF
 8819+3AC3 E5           		PUSH	HL
 8820+3AC4 21 22 C0     		LD	HL,$C022
 8821+3AC7 78           		LD	A,B
 8822+3AC8 A7           		AND	A
 8823+3AC9 20 06        		JR	NZ,l3ad1	; (+$06)
 8824+3ACB 79           		LD	A,C
 8825+3ACC 41           		LD	B,C
 8826+3ACD FE 12        		CP	$12
 8827+3ACF 38 02        		JR	C,l3ad3		; (+$02)
 8828+3AD1 06 11        l3ad1:		LD	B,$11
 8829+3AD3 EB           l3ad3:		EX	DE,HL
 8830+3AD4 7E           l3ad4:		LD	A,(HL)
 8831+3AD5 23           		INC	HL
 8832+3AD6 CD 8E 3D     		CALL	l3d8e
 8833+3AD9 12           		LD	(DE),A
 8834+3ADA 13           		INC	DE
 8835+3ADB CD 6A 3D     		CALL	l3d6a
 8836+3ADE 10 F4        		DJNZ	l3ad4		; (-$0C)
 8837+3AE0 CD 8E 3D     		CALL	l3d8e
 8838+3AE3 3E FF        		LD	A,$FF
 8839+3AE5 12           		LD	(DE),A
 8840+3AE6 CD 6A 3D     		CALL	l3d6a
 8841+3AE9 06 02        		LD	B,$02
 8842+3AEB C5           l3aeb:		PUSH	BC
 8843+3AEC CD 8E 3D     		CALL	l3d8e
 8844+3AEF CD A8 3D     		CALL	l3da8
 8845+3AF2 CD 3C 05     		CALL	l053c
 8846+3AF5 CD E4 3D     		CALL	l3de4
 8847+3AF8 CD 6A 3D     		CALL	l3d6a
 8848+3AFB C1           		POP	BC
 8849+3AFC 38 09        		JR	C,l3b07		; (+$09)
 8850+3AFE 04           		INC	B
 8851+3AFF 78           		LD	A,B
 8852+3B00 FE 10        		CP	$10
 8853+3B02 38 E7        		JR	C,l3aeb		; (-$19)
 8854+3B04 E1           		POP	HL
 8855+3B05 E1           		POP	HL
 8856+3B06 C9           		RET
 8857+3B07
 8858+3B07 21 22 C0     l3b07:		LD	HL,$C022
 8859+3B0A D1           		POP	DE
 8860+3B0B F1           		POP	AF
 8861+3B0C 4F           		LD	C,A
 8862+3B0D C5           		PUSH	BC
 8863+3B0E CD 8E 3D     		CALL	l3d8e
 8864+3B11 CD A8 3D     		CALL	l3da8
 8865+3B14 CD 06 01     		CALL	l0106
 8866+3B17 CD E4 3D     		CALL	l3de4
 8867+3B1A CD 6A 3D     		CALL	l3d6a
 8868+3B1D C1           		POP	BC
 8869+3B1E D0           		RET	NC
 8870+3B1F
 8871+3B1F C5           		PUSH	BC
 8872+3B20 21 34 3B     		LD	HL,l3b34
 8873+3B23 01 0E 00     		LD	BC,$000E
 8874+3B26 11 0D 00     		LD	DE,$000D
 8875+3B29 CD 99 3C     		CALL	l3c99
 8876+3B2C 01 0D 00     		LD	BC,$000D
 8877+3B2F 09           		ADD	HL,BC
 8878+3B30 C1           		POP	BC
 8879+3B31 70           		LD	(HL),B
 8880+3B32 37           		SCF
 8881+3B33 C9           		RET
 8882+3B34
 8883+3B34 00 5B 00 5B  l3b34:		DB	$00,$5B,$00,$5B,$46,$E0,$3E,$73
 8883+3B38 46 E0 3E 73
 8884+3B3C 3E 4E 3E 0E  		DB	$3E,$4E,$3E,$0E,$00
 8884+3B40 00
 8885+3B41
 8886+3B41 CD 01 3A     l3b41:		CALL	l3a01
 8887+3B44 E5           		PUSH	HL
 8888+3B45 CD F6 39     		CALL	l39f6
 8889+3B48 D1           		POP	DE
 8890+3B49 D0           		RET	NC
 8891+3B4A
 8892+3B4A 78           		LD	A,B
 8893+3B4B B1           		OR	C
 8894+3B4C C0           		RET	NZ
 8895+3B4D
 8896+3B4D 7C           		LD	A,H
 8897+3B4E B5           		OR	L
 8898+3B4F C8           		RET	Z
 8899+3B50
 8900+3B50 D5           		PUSH	DE
 8901+3B51 E5           		PUSH	HL
 8902+3B52 21 6F 3B     		LD	HL,l3b6f
 8903+3B55 01 13 00     		LD	BC,$0013
 8904+3B58 11 0D 00     		LD	DE,$000D
 8905+3B5B CD 99 3C     		CALL	l3c99
 8906+3B5E 01 0D 00     		LD	BC,$000D
 8907+3B61 09           		ADD	HL,BC
 8908+3B62 C1           		POP	BC
 8909+3B63 71           		LD	(HL),C
 8910+3B64 23           		INC	HL
 8911+3B65 70           		LD	(HL),B
 8912+3B66 23           		INC	HL
 8913+3B67 23           		INC	HL
 8914+3B68 23           		INC	HL
 8915+3B69 C1           		POP	BC
 8916+3B6A 71           		LD	(HL),C
 8917+3B6B 23           		INC	HL
 8918+3B6C 70           		LD	(HL),B
 8919+3B6D 37           		SCF
 8920+3B6E C9           		RET
 8921+3B6F
 8922+3B6F 00 5B 00 5B  l3b6f:		DB	$00,$5B,$00,$5B,$4D,$1C,$03,$21
 8922+3B73 4D 1C 03 21
 8923+3B77 03 26 03 13  		DB	$03,$26,$03,$13,$00
 8923+3B7B 00
 8924+3B7C
 8925+3B7C 78           l3b7c:		LD	A,B
 8926+3B7D A7           		AND	A
 8927+3B7E C0           		RET	NZ
 8928+3B7F
 8929+3B7F 79           		LD	A,C
 8930+3B80 A7           		AND	A
 8931+3B81 C8           		RET	Z
 8932+3B82
 8933+3B82 1A           		LD	A,(DE)
 8934+3B83 13           		INC	DE
 8935+3B84 0D           		DEC	C
 8936+3B85 C8           		RET	Z
 8937+3B86
 8938+3B86 E6 DF        		AND	$DF
 8939+3B88 FE 41        		CP	$41
 8940+3B8A 3F           		CCF
 8941+3B8B D0           		RET	NC
 8942+3B8C
 8943+3B8C FE 5B        		CP	$5B
 8944+3B8E D0           		RET	NC
 8945+3B8F
 8946+3B8F 6F           		LD	L,A
 8947+3B90 1A           		LD	A,(DE)
 8948+3B91 FE 24        		CP	$24
 8949+3B93 37           		SCF
 8950+3B94 3F           		CCF
 8951+3B95 C0           		RET	NZ
 8952+3B96
 8953+3B96 0D           		DEC	C
 8954+3B97 C0           		RET	NZ
 8955+3B98
 8956+3B98 CB FD        		SET	7,L
 8957+3B9A E5           		PUSH	HL
 8958+3B9B 21 AF 3B     		LD	HL,l3baf
 8959+3B9E 01 10 00     		LD	BC,$0010
 8960+3BA1 11 0D 00     		LD	DE,$000D
 8961+3BA4 CD 99 3C     		CALL	l3c99
 8962+3BA7 01 0D 00     		LD	BC,$000D
 8963+3BAA 09           		ADD	HL,BC
 8964+3BAB C1           		POP	BC
 8965+3BAC 71           		LD	(HL),C
 8966+3BAD 37           		SCF
 8967+3BAE C9           		RET
 8968+3BAF
 8969+3BAF 00 5B 00 5B  l3baf:		DB	$00,$5B,$00,$5B,$56,$EF,$39,$D7
 8969+3BB3 56 EF 39 D7
 8970+3BB7 39 FB 39 10  		DB	$39,$FB,$39,$10,$00
 8970+3BBB 00
 8971+3BBC
 8972+3BBC CD 01 3A     l3bbc:		CALL	l3a01
 8973+3BBF 7C           		LD	A,H
 8974+3BC0 A7           		AND	A
 8975+3BC1 C0           		RET	NZ
 8976+3BC2
 8977+3BC2 7D           		LD	A,L
 8978+3BC3 FE 18        		CP	$18
 8979+3BC5 D0           		RET	NC
 8980+3BC6
 8981+3BC6 E5           		PUSH	HL
 8982+3BC7 21 1F 00     		LD	HL,$001F
 8983+3BCA CD E5 39     		CALL	l39e5
 8984+3BCD D2 7E 3C     		JP	NC,l3c7e
 8985+3BD0 7D           		LD	A,L
 8986+3BD1 E1           		POP	HL
 8987+3BD2 67           		LD	H,A
 8988+3BD3 E5           		PUSH	HL
 8989+3BD4 3E 18        		LD	A,$18
 8990+3BD6 95           		SUB	L
 8991+3BD7 6F           		LD	L,A
 8992+3BD8 26 00        		LD	H,$00
 8993+3BDA CD E5 39     		CALL	l39e5
 8994+3BDD D2 7E 3C     		JP	NC,l3c7e
 8995+3BE0 E3           		EX	(SP),HL
 8996+3BE1 E5           		PUSH	HL
 8997+3BE2 3E 20        		LD	A,$20
 8998+3BE4 94           		SUB	H
 8999+3BE5 6F           		LD	L,A
 9000+3BE6 26 00        		LD	H,$00
 9001+3BE8 CD E5 39     		CALL	l39e5
 9002+3BEB 7D           		LD	A,L
 9003+3BEC E1           		POP	HL
 9004+3BED E3           		EX	(SP),HL
 9005+3BEE 67           		LD	H,A
 9006+3BEF E5           		PUSH	HL
 9007+3BF0 CD F6 39     		CALL	l39f6
 9008+3BF3 3E 08        		LD	A,$08
 9009+3BF5 30 16        		JR	NC,l3c0d	; (+$16)
 9010+3BF7 7C           		LD	A,H
 9011+3BF8 A7           		AND	A
 9012+3BF9 C2 7D 3C     		JP	NZ,l3c7d
 9013+3BFC 7D           		LD	A,L
 9014+3BFD FE 03        		CP	$03
 9015+3BFF 3F           		CCF
 9016+3C00 30 7B        		JR	NC,l3c7d	; (+$7B)
 9017+3C02 FE 09        		CP	$09
 9018+3C04 30 77        		JR	NC,l3c7d	; (+$77)
 9019+3C06 F5           		PUSH	AF
 9020+3C07 CD F6 39     		CALL	l39f6
 9021+3C0A 38 14        		JR	C,l3c20		; (+$14)
 9022+3C0C F1           		POP	AF
 9023+3C0D F5           l3c0d:		PUSH	AF
 9024+3C0E 21 80 3C     		LD	HL,l3c80
 9025+3C11 D6 03        		SUB	$03
 9026+3C13 28 05        		JR	Z,l3c1a		; (+$05)
 9027+3C15 23           l3c15:		INC	HL
 9028+3C16 23           		INC	HL
 9029+3C17 3D           		DEC	A
 9030+3C18 20 FB        		JR	NZ,l3c15	; (-$05)
 9031+3C1A 7E           l3c1a:		LD	A,(HL)
 9032+3C1B 23           		INC	HL
 9033+3C1C 66           		LD	H,(HL)
 9034+3C1D 6F           		LD	L,A
 9035+3C1E 18 06        		JR	l3c26		; (+$06)
 9036+3C20 7C           l3c20:		LD	A,H
 9037+3C21 E6 C0        		AND	$C0
 9038+3C23 28 57        		JR	Z,l3c7c		; (+$57)
 9039+3C25 25           		DEC	H
 9040+3C26 78           l3c26:		LD	A,B
 9041+3C27 B1           		OR	C
 9042+3C28 20 52        		JR	NZ,l3c7c	; (+$52)
 9043+3C2A E5           		PUSH	HL
 9044+3C2B 21 8C 3C     		LD	HL,l3c8c
 9045+3C2E 01 4D 00     		LD	BC,$004D
 9046+3C31 11 0D 00     		LD	DE,$000D
 9047+3C34 CD 99 3C     		CALL	l3c99
 9048+3C37 01 15 00     		LD	BC,$0015
 9049+3C3A 09           		ADD	HL,BC
 9050+3C3B C1           		POP	BC
 9051+3C3C 70           		LD	(HL),B
 9052+3C3D 2B           		DEC	HL
 9053+3C3E 71           		LD	(HL),C
 9054+3C3F 2B           		DEC	HL
 9055+3C40 F1           		POP	AF
 9056+3C41 77           		LD	(HL),A
 9057+3C42 2B           		DEC	HL
 9058+3C43 C1           		POP	BC
 9059+3C44 EB           		EX	DE,HL
 9060+3C45 E3           		EX	(SP),HL
 9061+3C46 EB           		EX	DE,HL
 9062+3C47 F5           		PUSH	AF
 9063+3C48 7B           		LD	A,E
 9064+3C49 87           		ADD	A,A
 9065+3C4A 87           		ADD	A,A
 9066+3C4B 87           		ADD	A,A
 9067+3C4C 77           		LD	(HL),A
 9068+3C4D 2B           		DEC	HL
 9069+3C4E 72           		LD	(HL),D
 9070+3C4F 2B           		DEC	HL
 9071+3C50 79           		LD	A,C
 9072+3C51 83           		ADD	A,E
 9073+3C52 3D           		DEC	A
 9074+3C53 77           		LD	(HL),A
 9075+3C54 2B           		DEC	HL
 9076+3C55 78           		LD	A,B
 9077+3C56 82           		ADD	A,D
 9078+3C57 3D           		DEC	A
 9079+3C58 77           		LD	(HL),A
 9080+3C59 2B           		DEC	HL
 9081+3C5A 73           		LD	(HL),E
 9082+3C5B 2B           		DEC	HL
 9083+3C5C 72           		LD	(HL),D
 9084+3C5D 58           		LD	E,B
 9085+3C5E 16 00        		LD	D,$00
 9086+3C60 EB           		EX	DE,HL
 9087+3C61 29           		ADD	HL,HL
 9088+3C62 29           		ADD	HL,HL
 9089+3C63 29           		ADD	HL,HL
 9090+3C64 F1           		POP	AF
 9091+3C65 4F           		LD	C,A
 9092+3C66 06 00        		LD	B,$00
 9093+3C68 AF           		XOR	A
 9094+3C69 ED 42        l3c69:		SBC	HL,BC
 9095+3C6B 3C           		INC	A
 9096+3C6C 30 FB        		JR	NC,l3c69	; (-$05)
 9097+3C6E 3D           		DEC	A
 9098+3C6F 21 0B 00     		LD	HL,$000B
 9099+3C72 19           		ADD	HL,DE
 9100+3C73 77           		LD	(HL),A
 9101+3C74 23           		INC	HL
 9102+3C75 3A 8D 5C     		LD	A,(	$5C8D)
 9103+3C78 77           		LD	(HL),A
 9104+3C79 D1           		POP	DE
 9105+3C7A 37           		SCF
 9106+3C7B C9           		RET
 9107+3C7C
 9108+3C7C E1           l3c7c:		POP	HL
 9109+3C7D E1           l3c7d:		POP	HL
 9110+3C7E E1           l3c7e:		POP	HL
 9111+3C7F C9           		RET
 9112+3C80
 9113+3C80 62 2B 62 2B  l3c80:		DB	$62,$2B,$62,$2B,$7B,$2B,$7B,$2B
 9113+3C84 7B 2B 7B 2B
 9114+3C88 3E 2B 1F 2B  		DB	$3E,$2B,$1F,$2B
 9115+3C8C
 9116+3C8C 00 5B 00 5B  l3c8c:		DB	$00,$5B,$00,$5B,$57,$D0,$27,$9C
 9116+3C90 57 D0 27 9C
 9117+3C94 39 9C 39 4D  		DB	$39,$9C,$39,$4D,$00
 9117+3C98 00
 9118+3C99
 9119+3C99 E5           l3c99:		PUSH	HL
 9120+3C9A D5           		PUSH	DE
 9121+3C9B C5           		PUSH	BC
 9122+3C9C 2A 53 5C     		LD	HL,(	$5C53)
 9123+3C9F 2B           		DEC	HL
 9124+3CA0 E5           		PUSH	HL
 9125+3CA1 D9           		EXX
 9126+3CA2 CD 00 3E     		CALL	n3e00
 9127+3CA5 AF           		XOR	A
 9128+3CA6 3F           		CCF
 9129+3CA7 D1           		POP	DE
 9130+3CA8 E1           		POP	HL
 9131+3CA9 C1           		POP	BC
 9132+3CAA A7           		AND	A
 9133+3CAB ED 42        		SBC	HL,BC
 9134+3CAD E3           		EX	(SP),HL
 9135+3CAE D5           		PUSH	DE
 9136+3CAF ED B0        		LDIR
 9137+3CB1 E1           		POP	HL
 9138+3CB2 C1           		POP	BC
 9139+3CB3 78           l3cb3:		LD	A,B
 9140+3CB4 B1           		OR	C
 9141+3CB5 28 06        		JR	Z,l3cbd		; (+$06)
 9142+3CB7 AF           		XOR	A
 9143+3CB8 12           		LD	(DE),A
 9144+3CB9 13           		INC	DE
 9145+3CBA 0B           		DEC	BC
 9146+3CBB 18 F6        		JR	l3cb3		; (-$0A)
 9147+3CBD E5           l3cbd:		PUSH	HL
 9148+3CBE ED 5B 4F 5C  		LD	DE,(	$5C4F)
 9149+3CC2 A7           		AND	A
 9150+3CC3 ED 52        		SBC	HL,DE
 9151+3CC5 23           		INC	HL
 9152+3CC6 EB           		EX	DE,HL
 9153+3CC7 E1           		POP	HL
 9154+3CC8 C9           		RET
 9155+3CC9
 9156+3CC9 CD C1 39     l3cc9:		CALL	l39c1
 9157+3CCC D0           		RET	NC
 9158+3CCD
 9159+3CCD 78           		LD	A,B
 9160+3CCE B1           		OR	C
 9161+3CCF 37           		SCF
 9162+3CD0 C8           		RET	Z
 9163+3CD1
 9164+3CD1 E5           		PUSH	HL
 9165+3CD2 2A 4F 5C     		LD	HL,(	$5C4F)
 9166+3CD5 09           		ADD	HL,BC
 9167+3CD6 23           		INC	HL
 9168+3CD7 23           		INC	HL
 9169+3CD8 23           		INC	HL
 9170+3CD9 4E           		LD	C,(HL)
 9171+3CDA EB           		EX	DE,HL
 9172+3CDB 21 06 3D     		LD	HL,l3d06
 9173+3CDE CD DC 39     		CALL	l39dc
 9174+3CE1 D2 D6 39     		JP	NC,l39d6
 9175+3CE4 7E           		LD	A,(HL)
 9176+3CE5 23           		INC	HL
 9177+3CE6 66           		LD	H,(HL)
 9178+3CE7 6F           		LD	L,A
 9179+3CE8 CD 7E 3A     		CALL	l3a7e
 9180+3CEB E1           		POP	HL
 9181+3CEC 3E 12        		LD	A,$12
 9182+3CEE D0           		RET	NC
 9183+3CEF
 9184+3CEF 01 00 00     		LD	BC,$0000
 9185+3CF2 11 E2 A3     		LD	DE,$A3E2
 9186+3CF5 EB           		EX	DE,HL
 9187+3CF6 19           		ADD	HL,DE
 9188+3CF7 38 07        		JR	C,l3d00		; (+$07)
 9189+3CF9 01 2A 3D     		LD	BC,l3d2a
 9190+3CFC 09           		ADD	HL,BC
 9191+3CFD 4E           		LD	C,(HL)
 9192+3CFE 23           		INC	HL
 9193+3CFF 46           		LD	B,(HL)
 9194+3D00 EB           l3d00:		EX	DE,HL
 9195+3D01 71           		LD	(HL),C
 9196+3D02 23           		INC	HL
 9197+3D03 70           		LD	(HL),B
 9198+3D04 37           		SCF
 9199+3D05 C9           		RET
 9200+3D06
 9201+3D06 4B 04 3D 53  l3d06:		DB	$4B,$04,$3D,$53,$04,$3D,$50,$04
 9201+3D0A 04 3D 50 04
 9202+3D0E 3D 46 2A 3D  		DB	$3D,$46,$2A,$3D,$4D,$41,$3D,$56
 9202+3D12 4D 41 3D 56
 9203+3D16 41 3D 57 41  		DB	$41,$3D,$57,$41,$3D,$00,$01,$00
 9203+3D1A 3D 00 01 00
 9204+3D1E 06 00 0B 00  		DB	$06,$00,$0B,$00,$01,$00,$01,$00
 9204+3D22 01 00 01 00
 9205+3D26 06 00 10 00  		DB	$06,$00,$10,$00
 9206+3D2A
 9207+3D2A 21 09 00     l3d2a:		LD	HL,$0009
 9208+3D2D 19           		ADD	HL,DE
 9209+3D2E 46           		LD	B,(HL)
 9210+3D2F D5           		PUSH	DE
 9211+3D30 CD 8E 3D     		CALL	l3d8e
 9212+3D33 CD A8 3D     		CALL	l3da8
 9213+3D36 CD 09 01     		CALL	l0109
 9214+3D39 CD E4 3D     		CALL	l3de4
 9215+3D3C CD 6A 3D     		CALL	l3d6a
 9216+3D3F D1           		POP	DE
 9217+3D40 D0           		RET	NC
 9218+3D41
 9219+3D41 21 07 00     		LD	HL,$0007
 9220+3D44 19           		ADD	HL,DE
 9221+3D45 4E           		LD	C,(HL)
 9222+3D46 23           		INC	HL
 9223+3D47 46           		LD	B,(HL)
 9224+3D48 1B           		DEC	DE
 9225+3D49 1B           		DEC	DE
 9226+3D4A 1B           		DEC	DE
 9227+3D4B 1B           		DEC	DE
 9228+3D4C EB           		EX	DE,HL
 9229+3D4D D9           		EXX
 9230+3D4E CD 00 3E     		CALL	n3e00
 9231+3D51 77           		LD	(HL),A
 9232+3D52 3F           		CCF
 9233+3D53 37           		SCF
 9234+3D54 C9           		RET
 9235+3D55
 9236+3D55 D9           l3d55:		EXX
 9237+3D56 11 00 00     		LD	DE,$0000
 9238+3D59 CD 00 3E     l3d59:		CALL	n3e00
 9239+3D5C 2D           		DEC	L
 9240+3D5D 39           		ADD	HL,SP
 9241+3D5E C9           		RET
 9242+3D5F
 9243+3D5F 11 02 00     l3d5f:		LD	DE,$0002
 9244+3D62 18 F5        		JR	l3d59		; (-$0B)
 9245+3D64 D9           l3d64:		EXX
 9246+3D65 11 04 00     		LD	DE,$0004
 9247+3D68 18 EF        		JR	l3d59		; (-$11)
 9248+3D6A 08           l3d6a:		EX	AF,AF'
 9249+3D6B AF           		XOR	A
 9250+3D6C F3           		DI
 9251+3D6D CD 83 3D     		CALL	l3d83
 9252+3D70 F1           		POP	AF
 9253+3D71 22 58 5B     		LD	(	$5B58),HL
 9254+3D74 2A 6A 5B     		LD	HL,(	$5B6A)
 9255+3D77 ED 73 6A 5B  		LD	(	$5B6A),SP
 9256+3D7B F9           		LD	SP,HL
 9257+3D7C FB           		EI
 9258+3D7D 2A 58 5B     		LD	HL,(	$5B58)
 9259+3D80 F5           		PUSH	AF
 9260+3D81 08           		EX	AF,AF'
 9261+3D82 C9           		RET
 9262+3D83
 9263+3D83 C5           l3d83:		PUSH	BC
 9264+3D84 01 FD 7F     		LD	BC,PBANKM
 9265+3D87 ED 79        		OUT	(C),A
 9266+3D89 32 5C 5B     		LD	(	$5B5C),A
 9267+3D8C C1           		POP	BC
 9268+3D8D C9           		RET
 9269+3D8E
 9270+3D8E 08           l3d8e:		EX	AF,AF'
 9271+3D8F F3           		DI
 9272+3D90 F1           		POP	AF
 9273+3D91 22 58 5B     		LD	(	$5B58),HL
 9274+3D94 2A 6A 5B     		LD	HL,(	$5B6A)
 9275+3D97 ED 73 6A 5B  		LD	(	$5B6A),SP
 9276+3D9B F9           		LD	SP,HL
 9277+3D9C 2A 58 5B     		LD	HL,(	$5B58)
 9278+3D9F F5           		PUSH	AF
 9279+3DA0 3E 07        		LD	A,$07
 9280+3DA2 CD 83 3D     		CALL	l3d83
 9281+3DA5 FB           		EI
 9282+3DA6 08           		EX	AF,AF'
 9283+3DA7 C9           		RET
 9284+3DA8
 9285+3DA8 CD D2 3D     l3da8:		CALL	l3dd2
 9286+3DAB 21 FF 5B     		LD	HL,	$5BFF
 9287+3DAE 11 FF E7     		LD	DE,$E7ff
 9288+3DB1 01 84 00     		LD	BC,$0084
 9289+3DB4 ED B8        		LDDR
 9290+3DB6 C1           		POP	BC
 9291+3DB7 ED 73 02 E6  		LD	(	$E602		),SP
 9292+3DBB 21 FF 5B     		LD	HL,	$5BFF
 9293+3DBE F9           		LD	SP,HL
 9294+3DBF C5           		PUSH	BC
 9295+3DC0 ED 4B 0C E6  l3dc0:		LD	BC,(	$E60C		)
 9296+3DC4 ED 5B 0A E6  		LD	DE,(	$E60A		)
 9297+3DC8 2A 06 E6     		LD	HL,(	$E606		)
 9298+3DCB E5           		PUSH	HL
 9299+3DCC F1           		POP	AF
 9300+3DCD 2A 08 E6     		LD	HL,(	$E608		)
 9301+3DD0 FB           		EI
 9302+3DD1 C9           		RET
 9303+3DD2
 9304+3DD2 F3           l3dd2:		DI
 9305+3DD3 22 08 E6     		LD	(	$E608		),HL
 9306+3DD6 F5           		PUSH	AF
 9307+3DD7 E1           		POP	HL
 9308+3DD8 22 06 E6     		LD	(	$E606		),HL
 9309+3DDB ED 53 0A E6  		LD	(	$E60A		),DE
 9310+3DDF ED 43 0C E6  		LD	(	$E60C		),BC
 9311+3DE3 C9           		RET
 9312+3DE4
 9313+3DE4 CD D2 3D     l3de4:		CALL	l3dd2
 9314+3DE7 E1           		POP	HL
 9315+3DE8 22 04 E6     		LD	(	$E604		),HL
 9316+3DEB 21 FF E7     		LD	HL,$E7ff
 9317+3DEE 11 FF 5B     		LD	DE,	$5BFF
 9318+3DF1 01 84 00     		LD	BC,$0084
 9319+3DF4 ED B8        		LDDR
 9320+3DF6 2A 02 E6     		LD	HL,(	$E602		)
 9321+3DF9 F9           		LD	SP,HL
 9322+3DFA 2A 04 E6     		LD	HL,(	$E604		)
 9323+3DFD E5           		PUSH	HL
 9324+3DFE 18 C0        		JR	l3dc0		; (-$40)
 9325+3E00
 9326+3E00 22 52 5B     n3e00:		LD	(	$5B52),HL
 9327+3E03 F5           		PUSH	AF
 9328+3E04 E1           		POP	HL
 9329+3E05 22 56 5B     		LD	(	$5B56),HL
 9330+3E08 E3           		EX	(SP),HL
 9331+3E09 4E           		LD	C,(HL)
 9332+3E0A 23           		INC	HL
 9333+3E0B 46           		LD	B,(HL)
 9334+3E0C 23           		INC	HL
 9335+3E0D E3           		EX	(SP),HL
 9336+3E0E C5           		PUSH	BC
 9337+3E0F E1           		POP	HL
 9338+3E10 3A 67 5B     		LD	A,(	$5B67)
 9339+3E13 01 FD 1F     		LD	BC,PBANK678
 9340+3E16 CB 97        		res	2,A
 9341+3E18 F3           		DI
 9342+3E19 32 67 5B     		LD	(	$5B67),A
 9343+3E1C ED 79        		OUT	(C),A
 9344+3E1E FB           		EI
 9345+3E1F 01 2D 3E     		LD	BC,$3E2D
 9346+3E22 C5           		PUSH	BC
 9347+3E23 E5           		PUSH	HL
 9348+3E24 2A 56 5B     		LD	HL,(	$5B56)
 9349+3E27 E5           		PUSH	HL
 9350+3E28 F1           		POP	AF
 9351+3E29 2A 52 5B     		LD	HL,(	$5B52)
 9352+3E2C C9           		RET
 9353+3E2D
 9354+3E2D C5           		PUSH	BC
 9355+3E2E F5           		PUSH	AF
 9356+3E2F 3A 67 5B     		LD	A,(	$5B67)
 9357+3E32 01 FD 1F     		LD	BC,PBANK678
 9358+3E35 CB D7        		SET	2,A
 9359+3E37 F3           		DI
 9360+3E38 32 67 5B     		LD	(	$5B67),A
 9361+3E3B ED 79        		OUT	(C),A
 9362+3E3D FB           		EI
 9363+3E3E F1           		POP	AF
 9364+3E3F C1           		POP	BC
 9365+3E40 C9           		RET
 9366+3E41
 9367+3E41 2E 2F        x3e41:		LD	L,$2F
 9368+3E43 11 FF FF     		LD	DE,$FFFF
 9369+3E46 01 FE FE     		LD	BC,$FEFE
 9370+3E49 ED 78        l3e49:		IN	A,(C)
 9371+3E4B 2F           		CPL
 9372+3E4C E6 1F        		AND	$1F
 9373+3E4E 28 0E        		JR	Z,l3e5e		; (+$0E)
 9374+3E50 67           		LD	H,A
 9375+3E51 7D           		LD	A,L
 9376+3E52 14           l3e52:		INC	D
 9377+3E53 C0           		RET	NZ
 9378+3E54
 9379+3E54 D6 08        l3e54:		SUB	$08
 9380+3E56 CB 3C        		SRL	H
 9381+3E58 30 FA        		JR	NC,l3e54	; (-$06)
 9382+3E5A 53           		LD	D,E
 9383+3E5B 5F           		LD	E,A
 9384+3E5C 20 F4        		JR	NZ,l3e52	; (-$0C)
 9385+3E5E 2D           l3e5e:		DEC	L
 9386+3E5F CB 00        		RLC	B
 9387+3E61 38 E6        		JR	C,l3e49		; (-$1A)
 9388+3E63 7A           		LD	A,D
 9389+3E64 3C           		INC	A
 9390+3E65 C8           		RET	Z
 9391+3E66
 9392+3E66 FE 28        		CP	$28
 9393+3E68 C8           		RET	Z
 9394+3E69
 9395+3E69 FE 19        		CP	$19
 9396+3E6B C8           		RET	Z
 9397+3E6C
 9398+3E6C 7B           		LD	A,E
 9399+3E6D 5A           		LD	E,D
 9400+3E6E 57           		LD	D,A
 9401+3E6F FE 18        		CP	$18
 9402+3E71 C9           		RET
 9403+3E72
 9404+3E72 CD 41 3E     l3e72:		CALL	x3e41
 9405+3E75 C0           		RET	NZ
 9406+3E76
 9407+3E76 21 00 5C     		LD	HL,	$5C00
 9408+3E79 CB 7E        l3e79:		BIT	7,(HL)
 9409+3E7B 20 07        		JR	NZ,l3e84	; (+$07)
 9410+3E7D 23           		INC	HL
 9411+3E7E 35           		DEC	(HL)
 9412+3E7F 2B           		DEC	HL
 9413+3E80 20 02        		JR	NZ,l3e84	; (+$02)
 9414+3E82 36 FF        		LD	(HL),$FF
 9415+3E84 7D           l3e84:		LD	A,L
 9416+3E85 21 04 5C     		LD	HL,$5C04
 9417+3E88 BD           		CP	L
 9418+3E89 20 EE        		JR	NZ,l3e79	; (-$12)
 9419+3E8B CD D1 3E     		CALL	l3ed1
 9420+3E8E D0           		RET	NC
 9421+3E8F
 9422+3E8F 21 00 5C     		LD	HL,	$5C00
 9423+3E92 BE           		CP	(HL)
 9424+3E93 28 2E        		JR	Z,l3ec3		; (+$2E)
 9425+3E95 EB           		EX	DE,HL
 9426+3E96 21 04 5C     		LD	HL,$5C04
 9427+3E99 BE           		CP	(HL)
 9428+3E9A 28 27        		JR	Z,l3ec3		; (+$27)
 9429+3E9C CB 7E        		BIT	7,(HL)
 9430+3E9E 20 04        		JR	NZ,l3ea4	; (+$04)
 9431+3EA0 EB           		EX	DE,HL
 9432+3EA1 CB 7E        		BIT	7,(HL)
 9433+3EA3 C8           		RET	Z
 9434+3EA4
 9435+3EA4 5F           l3ea4:		LD	E,A
 9436+3EA5 77           		LD	(HL),A
 9437+3EA6 23           		INC	HL
 9438+3EA7 36 05        		LD	(HL),$05
 9439+3EA9 23           		INC	HL
 9440+3EAA 3A 09 5C     		LD	A,(	$5C09)
 9441+3EAD 77           		LD	(HL),A
 9442+3EAE 23           		INC	HL
 9443+3EAF FD 4E 07     		LD	C,(IY+$07)
 9444+3EB2 FD 56 01     		LD	D,(IY+$01)
 9445+3EB5 E5           		PUSH	HL
 9446+3EB6 CD 77 3F     		CALL	x3f77
 9447+3EB9 E1           		POP	HL
 9448+3EBA 77           		LD	(HL),A
 9449+3EBB 32 08 5C     l3ebb:		LD	(	$5C08),A
 9450+3EBE FD CB 01 EE  		SET	5,(IY+$01)
 9451+3EC2 C9           		RET
 9452+3EC3
 9453+3EC3 23           l3ec3:		INC	HL
 9454+3EC4 36 05        		LD	(HL),$05
 9455+3EC6 23           		INC	HL
 9456+3EC7 35           		DEC	(HL)
 9457+3EC8 C0           		RET	NZ
 9458+3EC9
 9459+3EC9 3A 0A 5C     		LD	A,(	$5C0A)
 9460+3ECC 77           		LD	(HL),A
 9461+3ECD 23           		INC	HL
 9462+3ECE 7E           		LD	A,(HL)
 9463+3ECF 18 EA        		JR	l3ebb		; (-$16)
 9464+3ED1 42           l3ed1:		LD	B,D
 9465+3ED2 16 00        		LD	D,$00
 9466+3ED4 7B           		LD	A,E
 9467+3ED5 FE 27        		CP	$27
 9468+3ED7 D0           		RET	NC
 9469+3ED8
 9470+3ED8 FE 18        		CP	$18
 9471+3EDA 20 03        		JR	NZ,l3edf	; (+$03)
 9472+3EDC CB 78        		BIT	7,B
 9473+3EDE C0           		RET	NZ
 9474+3EDF
 9475+3EDF 21 39 22     l3edf:		LD	HL,l2239
 9476+3EE2 19           		ADD	HL,DE
 9477+3EE3 7E           		LD	A,(HL)
 9478+3EE4 37           		SCF
 9479+3EE5 C9           		RET
 9480+3EE6
 9481+3EE6 F5           l3ee6:		PUSH	AF
 9482+3EE7 AF           		XOR	A
 9483+3EE8 32 00 E6     		LD	(	$E600		),A
 9484+3EEB 3A 67 5B     		LD	A,(	$5B67)
 9485+3EEE E6 F7        		AND	$F7
 9486+3EF0 CD BA 21     		CALL	l21ba
 9487+3EF3 F1           		POP	AF
 9488+3EF4 C9           		RET
 9489+3EF5
 9490+3EF5 CD 34 21     l3ef5:		CALL	l2134
 9491+3EF8 CD F7 21     		CALL	l21f7
 9492+3EFB C3 EF 20     		JP	l20ef
 9493+3EFE 00           		NOP
 9494+3EFF 00           		NOP
 9495+3F00
 9496+3F00              ; ==============================================================
 9497+3F00
 9498+3F00 22 52 5B     n3f00:		LD	(	$5B52),HL
 9499+3F03 ED 43 54 5B  		LD	(	$5B54),BC
 9500+3F07 F5           		PUSH	AF
 9501+3F08 E1           		POP	HL
 9502+3F09 22 56 5B     		LD	(	$5B56),HL
 9503+3F0C E3           		EX	(SP),HL
 9504+3F0D 4E           		LD	C,(HL)
 9505+3F0E 23           		INC	HL
 9506+3F0F 46           		LD	B,(HL)
 9507+3F10 23           		INC	HL
 9508+3F11 E3           		EX	(SP),HL
 9509+3F12 21 42 3F     		LD	HL,x3f42
 9510+3F15 E5           		PUSH	HL
 9511+3F16 C5           		PUSH	BC
 9512+3F17 E1           		POP	HL
 9513+3F18 3A 5C 5B     		LD	A,(	$5B5C)
 9514+3F1B E6 EF        		AND	$EF
 9515+3F1D F3           		DI
 9516+3F1E 32 5C 5B     		LD	(	$5B5C),A
 9517+3F21 01 FD 7F     		LD	BC,PBANKM
 9518+3F24 ED 79        		OUT	(C),A
 9519+3F26 3A 67 5B     		LD	A,(	$5B67)
 9520+3F29 F6 04        		OR	$04
 9521+3F2B 32 67 5B     		LD	(	$5B67),A
 9522+3F2E 01 FD 1F     		LD	BC,PBANK678
 9523+3F31 ED 79        		OUT	(C),A
 9524+3F33 FB           		EI
 9525+3F34 E5           		PUSH	HL
 9526+3F35 2A 56 5B     		LD	HL,(	$5B56)
 9527+3F38 E5           		PUSH	HL
 9528+3F39 F1           		POP	AF
 9529+3F3A ED 4B 54 5B  		LD	BC,(	$5B54)
 9530+3F3E 2A 52 5B     		LD	HL,(	$5B52)
 9531+3F41 C9           		RET
 9532+3F42
 9533+3F42 C5           x3f42:		PUSH	BC
 9534+3F43 F5           		PUSH	AF
 9535+3F44 3A 67 5B     		LD	A,(	$5B67)
 9536+3F47 E6 FB        		AND	$FB
 9537+3F49 F3           		DI
 9538+3F4A 32 67 5B     		LD	(	$5B67),A
 9539+3F4D 01 FD 1F     		LD	BC,PBANK678
 9540+3F50 ED 79        		OUT	(C),A
 9541+3F52 3A 5C 5B     		LD	A,(	$5B5C)
 9542+3F55 F6 10        		OR	$10
 9543+3F57 32 5C 5B     		LD	(	$5B5C),A
 9544+3F5A 01 FD 7F     		LD	BC,PBANKM
 9545+3F5D ED 79        		OUT	(C),A
 9546+3F5F FB           		EI
 9547+3F60 F1           		POP	AF
 9548+3F61 C1           		POP	BC
 9549+3F62 C9           		RET
 9550+3F63
 9551+3F63 C5           n3f63:		PUSH	BC
 9552+3F64 F5           		PUSH	AF
 9553+3F65 3A 67 5B     		LD	A,(	$5B67)
 9554+3F68 E6 FB        		AND	$FB
 9555+3F6A F3           		DI
 9556+3F6B 32 67 5B     		LD	(	$5B67),A
 9557+3F6E 01 FD 1F     		LD	BC,PBANK678
 9558+3F71 ED 79        		OUT	(C),A
 9559+3F73 FB           		EI
 9560+3F74 F1           		POP	AF
 9561+3F75 C1           		POP	BC
 9562+3F76 C9           		RET
 9563+3F77
 9564+3F77 7B           x3f77:		LD	A,E
 9565+3F78 FE 3A        		CP	$3A
 9566+3F7A 38 2F        		JR	C,l3fab		; (+$2F)
 9567+3F7C 0D           		DEC	C
 9568+3F7D FA 93 3F     		JP	m,l3f93
 9569+3F80 28 03        		JR	Z,l3f85		; (+$03)
 9570+3F82 C6 4F        		ADD	A,$4F
 9571+3F84 C9           		RET
 9572+3F85
 9573+3F85 21 1F 22     l3f85:		LD	HL,$221F
 9574+3F88 04           		INC	B
 9575+3F89 28 03        		JR	Z,l3f8e		; (+$03)
 9576+3F8B 21 39 22     		LD	HL,$2239
 9577+3F8E 16 00        l3f8e:		LD	D,$00
 9578+3F90 19           		ADD	HL,DE
 9579+3F91 7E           		LD	A,(HL)
 9580+3F92 C9           		RET
 9581+3F93
 9582+3F93 21 5D 22     l3f93:		LD	HL,$225D
 9583+3F96 CB 40        		BIT	0,B
 9584+3F98 28 F4        		JR	Z,l3f8e		; (-$0C)
 9585+3F9A CB 5A        		BIT	3,D
 9586+3F9C 28 0A        		JR	Z,l3fa8		; (+$0A)
 9587+3F9E FD CB 30 5E  		BIT	3,(IY+$30)
 9588+3FA2 C0           		RET	NZ
 9589+3FA3
 9590+3FA3 04           		INC	B
 9591+3FA4 C0           		RET	NZ
 9592+3FA5
 9593+3FA5 C6 20        		ADD	A,$20
 9594+3FA7 C9           		RET
 9595+3FA8
 9596+3FA8 C6 A5        l3fa8:		ADD	A,$A5
 9597+3FAA C9           		RET
 9598+3FAB
 9599+3FAB FE 30        l3fab:		CP	$30
 9600+3FAD D8           		RET	C
 9601+3FAE
 9602+3FAE 0D           		DEC	C
 9603+3FAF FA E1 3F     		JP	m,l3fe1
 9604+3FB2 20 19        		JR	NZ,l3fcd	; (+$19)
 9605+3FB4 21 88 22     		LD	HL,$2288
 9606+3FB7 CB 68        		BIT	5,B
 9607+3FB9 28 D3        		JR	Z,l3f8e		; (-$2D)
 9608+3FBB FE 38        		CP	$38
 9609+3FBD 30 07        		JR	NC,l3fc6	; (+$07)
 9610+3FBF D6 20        		SUB	$20
 9611+3FC1 04           		INC	B
 9612+3FC2 C8           		RET	Z
 9613+3FC3
 9614+3FC3 C6 08        		ADD	A,$08
 9615+3FC5 C9           		RET
 9616+3FC6
 9617+3FC6 D6 36        l3fc6:		SUB	$36
 9618+3FC8 04           		INC	B
 9619+3FC9 C8           		RET	Z
 9620+3FCA
 9621+3FCA C6 FE        		ADD	A,$FE
 9622+3FCC C9           		RET
 9623+3FCD
 9624+3FCD 21 64 22     l3fcd:		LD	HL,$2264
 9625+3FD0 FE 39        		CP	$39
 9626+3FD2 28 BA        		JR	Z,l3f8e		; (-$46)
 9627+3FD4 FE 30        		CP	$30
 9628+3FD6 28 B6        		JR	Z,l3f8e		; (-$4A)
 9629+3FD8 E6 07        		AND	$07
 9630+3FDA C6 80        		ADD	A,$80
 9631+3FDC 04           		INC	B
 9632+3FDD C8           		RET	Z
 9633+3FDE
 9634+3FDE EE 0F        		XOR	$0F
 9635+3FE0 C9           		RET
 9636+3FE1
 9637+3FE1 04           l3fe1:		INC	B
 9638+3FE2 C8           		RET	Z
 9639+3FE3
 9640+3FE3 CB 68        		BIT	5,B
 9641+3FE5 21 64 22     		LD	HL,$2264
 9642+3FE8 20 A4        		JR	NZ,l3f8e	; (-$5C)
 9643+3FEA D6 10        		SUB	$10
 9644+3FEC FE 22        		CP	$22
 9645+3FEE 28 06        		JR	Z,l3ff6		; (+$06)
 9646+3FF0 FE 20        		CP	$20
 9647+3FF2 C0           		RET	NZ
 9648+3FF3
 9649+3FF3 3E 5F        		LD	A,$5F
 9650+3FF5 C9           		RET
 9651+3FF6
 9652+3FF6 3E 40        l3ff6:		LD	A,$40
 9653+3FF8 C9           		RET
 9654+3FF9
 9655+3FF9 FF FF FF...  		DS	7,-1		; 7 bytes libres en 255
# file closed: plus3ROM2.asm
  123 4000              	INCLUDE	"plus3ROM3.asm"			; ROM 48k ROM
# file opened: plus3ROM3.asm
    1+4000              		OUTPUT	"p3t_rom3.rom"
    2+4000
    3+4000              		ORG	$0000
    4+0000
    5+0000 ~            /*
    6+0000 ~            Esta ROM contiene mi extensión para cargar archivos TAPs, y no necesariamente para las ROMS +3e,
    7+0000 ~            se podría usar para un +3 normal con las modificaciones necesarias. (se hizo uso casi del 100%
    8+0000 ~            del espacio no usado en esta ROM)
    9+0000 ~
   10+0000 ~            Se requieren ligeras modificaciones en ROM1 (sintaxis) para aceptar el comando:
   11+0000 ~            SPECTRUM "archivo.tap"
   12+0000 ~
   13+0000 ~            LA ROM 3 DEL PROY +3E EN INGLES ES BINARIAMENTE IGUAL AL PRODUCTO DE ESTE FUENTE
   14+0000 ~            buscar **** disponible **** para analizar los cambios
   15+0000 ~            */
   16+0000
   17+0000              ;************************************************************************
   18+0000              ;** An Assembly File Listing to generate a 16K ROM for the ZX Spectrum **
   19+0000              ;************************************************************************
   20+0000
   21+0000              ; -------------------------
   22+0000              ; Last updated: 05-FEB-2012
   23+0000              ; -------------------------
   24+0000
   25+0000              ;   It is always a good idea to anchor, using ORGs, important sections such as
   26+0000              ;   the character bitmaps so that they don't move as code is added and removed.
   27+0000
   28+0000              ;   Generally most approaches try to maintain main entry points as they are
   29+0000              ;   often used by third-party software.
   30+0000
   31+0000              ; System variable definitions for 48K Spectrum
   32+0000
   33+0000              		ORG	$0000
   34+0000
   35+0000              ;*****************************************
   36+0000              ;** Part 1. RESTART ROUTINES AND TABLES **
   37+0000              ;*****************************************
   38+0000
   39+0000              ; -----------
   40+0000              ; THE 'START'
   41+0000              ; -----------
   42+0000              ;   At switch on, the Z80 chip is in Interrupt Mode 0.
   43+0000              ;   The Spectrum uses Interrupt Mode 1.
   44+0000              ;   This location can also be 'called' to reset the machine.
   45+0000              ;   Typically with PRINT USR 0.
   46+0000
   47+0000              ;; START
   48+0000 F3           o0000:		DI
   49+0001 AF           		XOR	A		; Signal coming from START.
   50+0002 11 FF FF     		LD	DE,$FFFF	; Set pointer to top of possible physical RAM.
   51+0005 C3 CB 11     		JP	o11CB		; Jump forward to common code at START-NEW.
   52+0008
   53+0008              ; -------------------
   54+0008              ; THE 'ERROR' RESTART
   55+0008              ; -------------------
   56+0008              ;   The error pointer is made to point to the position of the error to enable
   57+0008              ;   the editor to highlight the error position if it occurred during syntax
   58+0008              ;   checking.  It is used at 37 places in the program.  An instruction fetch
   59+0008              ;   on address $0008 may page in a peripheral ROM such as the Sinclair
   60+0008              ;   Interface 1 or Disciple Disk Interface.  This was not an original design
   61+0008              ;   concept and not all errors pass through here.
   62+0008
   63+0008              ;; ERROR-1
   64+0008 2A 5D 5C     o0008:		LD	HL,(	$5C5D)	; Fetch the character address from CH_ADD.
   65+000B 22 5F 5C     		LD	(	$5C5F),HL	; Copy it to the error pointer X_PTR.
   66+000E 18 43        		JR	o0053		; Forward to continue at ERROR-2.
   67+0010
   68+0010              ; -----------------------------
   69+0010              ; THE 'PRINT CHARACTER' RESTART
   70+0010              ; -----------------------------
   71+0010              ;   The A register holds the code of the character that is to be sent to
   72+0010              ;   the output stream of the current channel.  The alternate register set is
   73+0010              ;   used to output a character in the A register so there is no need to
   74+0010              ;   preserve any of the current main registers (HL, DE, BC).
   75+0010              ;   This restart is used 21 times.
   76+0010
   77+0010              ;; PRINT-A
   78+0010 C3 F2 15     o0010:		JP	o15F2		; Jump forward to continue at PRINT-A-2.
   79+0013 A7 FF        		DB	$A7,$FF		; Five unused locations.
   80+0015 FF FF FF     		DB	$FF,$FF,$FF	;
   81+0018
   82+0018              ; -------------------------------
   83+0018              ; THE 'COLLECT CHARACTER' RESTART
   84+0018              ; -------------------------------
   85+0018              ;   The contents of the location currently addressed by CH_ADD are fetched.
   86+0018              ;   A return is made if the value represents a character that has
   87+0018              ;   relevance to the BASIC parser. Otherwise CH_ADD is incremented and the
   88+0018              ;   tests repeated. CH_ADD will be addressing somewhere -
   89+0018              ;   1) in the BASIC program area during line execution.
   90+0018              ;   2) in workspace if evaluating, for example, a string expression.
   91+0018              ;   3) in the edit buffer if parsing a direct command or a new BASIC line.
   92+0018              ;   4) in workspace if accepting input but not that from INPUT LINE.
   93+0018
   94+0018              ;; GET-CHAR
   95+0018 2A 5D 5C     o0018:		LD	HL,(	$5C5D)	; fetch the address from CH_ADD.
   96+001B 7E           		LD	A,(HL)		; use it to pick up current character.
   97+001C
   98+001C              ;; TEST-CHAR
   99+001C CD 7D 00     o001C:		CALL	o007D		; routine SKIP-OVER tests if the character is
  100+001F              					; relevant.
  101+001F D0           		RET	NC		; Return if it is significant.
  102+0020
  103+0020              ; ------------------------------------
  104+0020              ; THE 'COLLECT NEXT CHARACTER' RESTART
  105+0020              ; ------------------------------------
  106+0020              ;   As the BASIC commands and expressions are interpreted, this routine is
  107+0020              ;   called repeatedly to step along the line.  It is used 83 times.
  108+0020
  109+0020              ;; NEXT-CHAR
  110+0020 CD 74 00     o0020:		CALL	o0074		; routine CH-ADD+1 fetches the next immediate
  111+0023              					; character.
  112+0023 18 F7        		JR	o001C		; jump back to TEST-CHAR until a valid
  113+0025              					; character is found.
  114+0025
  115+0025              ; ---
  116+0025
  117+0025 FF FF FF     		DB	$FF,$FF,$FF	; unused
  118+0028
  119+0028              ; -----------------------
  120+0028              ; THE 'CALCULATE' RESTART
  121+0028              ; -----------------------
  122+0028              ;   This restart enters the Spectrum's internal, floating-point, stack-based,
  123+0028              ;   FORTH-like language.
  124+0028              ;   It is further used recursively from within the calculator.
  125+0028              ;   It is used on 77 occasions.
  126+0028
  127+0028              ;; FP-CALC
  128+0028 C3 5B 33     o0028:		JP	o335B		; jump forward to the CALCULATE routine.
  129+002B
  130+002B              ; ---
  131+002B
  132+002B FF FF FF     		DB	$FF,$FF,$FF	; spare - note that on the ZX81, space being a
  133+002E FF FF        		DB	$FF,$FF		; little cramped, these same locations were
  134+0030              					; used for the five-byte end-calc literal.
  135+0030
  136+0030              ; ------------------------------
  137+0030              ; THE 'CREATE BC SPACES' RESTART
  138+0030              ; ------------------------------
  139+0030              ;   This restart is used on only 12 occasions to create BC spaces
  140+0030              ;   between workspace and the calculator stack.
  141+0030
  142+0030              ;; BC-SPACES
  143+0030 C5           o0030:		PUSH	BC		; Save number of spaces.
  144+0031 2A 61 5C     		LD	HL,(	$5C61)	; Fetch WORKSP.
  145+0034 E5           		PUSH	HL		; Save address of workspace.
  146+0035 C3 9E 16     		JP	o169E		; Jump forward to continuation code RESERVE.
  147+0038
  148+0038              ; --------------------------------
  149+0038              ; THE 'MASKABLE INTERRUPT' ROUTINE
  150+0038              ; --------------------------------
  151+0038              ;   This routine increments the Spectrum's three-byte FRAMES counter fifty
  152+0038              ;   times a second (sixty times a second in the USA ).
  153+0038              ;   Both this routine and the called KEYBOARD subroutine use the IY register
  154+0038              ;   to access system variables and flags so a user-written program must
  155+0038              ;   disable interrupts to make use of the IY register.
  156+0038
  157+0038              ;; MASK-INT
  158+0038 F5           o0038:		PUSH	AF		; Save the registers that will be used but not
  159+0039 E5           		PUSH	HL		; the IY register unfortunately.
  160+003A 2A 78 5C     		LD	HL,(	$5C78)	; Fetch the first two bytes at FRAMES1.
  161+003D 23           		INC	HL		; Increment lowest two bytes of counter.
  162+003E 22 78 5C     		LD	(	$5C78),HL	; Place back in FRAMES1.
  163+0041 7C           		LD	A,H		; Test if the result was zero.
  164+0042 B5           		OR	L		;
  165+0043 20 03        		JR	NZ,o0048	; Forward, if not, to KEY-INT
  166+0045
  167+0045 FD 34 40     		INC	(IY+$40)	; otherwise increment FRAMES3 the third byte.
  168+0048
  169+0048              ;   Now save the rest of the main registers and read and decode the keyboard.
  170+0048
  171+0048              ;; KEY-INT
  172+0048 C5           o0048:		PUSH	BC		; Save the other main registers.
  173+0049 D5           		PUSH	DE		;
  174+004A
  175+004A CD 6E 38     		CALL	o386E		; Routine KEYBOARD executes a stage in the
  176+004D              					; process of reading a key-press.
  177+004D D1           		POP	DE		;
  178+004E C1           		POP	BC		; Restore registers.
  179+004F
  180+004F E1           		POP	HL		;
  181+0050 F1           		POP	AF		;
  182+0051
  183+0051 FB           		EI			; Enable Interrupts.
  184+0052 C9           		RET			; Return.
  185+0053
  186+0053              ; ---------------------
  187+0053              ; THE 'ERROR-2' ROUTINE
  188+0053              ; ---------------------
  189+0053              ;   A continuation of the code at 0008.
  190+0053              ;   The error code is stored and after clearing down stacks, an indirect jump
  191+0053              ;   is made to MAIN-4, etc. to handle the error.
  192+0053
  193+0053              ;; ERROR-2
  194+0053 E1           o0053:		POP	HL		; drop the return address - the location
  195+0054              					; after the RST 08H instruction.
  196+0054 6E           		LD	L,(HL)		; fetch the error code that follows.
  197+0055              					; (nice to see this instruction used.)
  198+0055
  199+0055              ;   Note. this entry point is used when out of memory at REPORT-4.
  200+0055              ;   The L register has been loaded with the report code but X-PTR is not
  201+0055              ;   updated.
  202+0055
  203+0055              ;; ERROR-3
  204+0055 FD 75 00     o0055:		LD	(IY+$00),L	; Store it in the system variable ERR_NR.
  205+0058 ED 7B 3D 5C  		LD	SP,(	$5C3D)	; ERR_SP points to an error handler on the
  206+005C              					; machine stack. There may be a hierarchy
  207+005C              					; of routines.
  208+005C              					; To MAIN-4 initially at base.
  209+005C              					; or REPORT-G on line entry.
  210+005C              					; or ED-ERROR when editing.
  211+005C              					; or ED-FULL during ed-enter.
  212+005C              					; or IN-VAR-1 during runtime input etc.
  213+005C
  214+005C C3 C5 16     		JP	o16C5		; Jump to SET-STK to clear the calculator stack
  215+005F              					; and reset MEM to usual place in the systems
  216+005F              					; variables area and then indirectly to MAIN-4,
  217+005F              					; etc.
  218+005F
  219+005F              ; ------------------------------------
  220+005F              ; THE 'NON-MASKABLE INTERRUPT' ROUTINE
  221+005F              ; ------------------------------------
  222+005F              ;
  223+005F              ;   There is no NMI switch on the standard Spectrum or its peripherals.
  224+005F              ;   When the NMI line is held low, then no matter what the Z80 was doing at
  225+005F              ;   the time, it will now execute the code at 66 Hex.
  226+005F              ;   This Interrupt Service Routine will jump to location zero if the contents
  227+005F              ;   of the system variable NMIADD are zero or return if the location holds a
  228+005F              ;   non-zero address.   So attaching a simple switch to the NMI as in the book
  229+005F              ;   "Spectrum Hardware Manual" causes a reset.  The logic was obviously
  230+005F              ;   intended to work the other way.  Sinclair Research said that, since they
  231+005F              ;   had never advertised the NMI, they had no plans to fix the error "until
  232+005F              ;   the opportunity arose".
  233+005F              ;
  234+005F              ;   Note. The location NMIADD was, in fact, later used by Sinclair Research
  235+005F              ;   to enhance the text channel on the ZX Interface 1.
  236+005F              ;   On later Amstrad-made Spectrums, and the Brazilian Spectrum, the logic of
  237+005F              ;   this routine was indeed reversed but not as at first intended.
  238+005F              ;
  239+005F              ;   It can be deduced by looking elsewhere in this ROM that the NMIADD system
  240+005F              ;   variable pointed to o121C and that this enabled a Warm Restart to be
  241+005F              ;   performed at any time, even while playing machine code games, or while
  242+005F              ;   another Spectrum has been allowed to gain control of this one.
  243+005F              ;
  244+005F              ;   Software houses would have been able to protect their games from attack by
  245+005F              ;   placing two zeros in the NMIADD system variable.
  246+005F
  247+005F              ;; RESET
  248+005F FF FF FF     o005F:		DB	$FF,$FF,$FF	; Unused locations
  249+0062 FF FF FF     		DB	$FF,$FF,$FF	; before the fixed-position
  250+0065 FF           		DB	$FF		; NMI routine.
  251+0066 F5           o0066:		PUSH	AF		; save the
  252+0067 E5           		PUSH	HL		; registers.
  253+0068 2A B0 5C     		LD	HL,(	$5CB0	)	; fetch the system variable NMIADD.
  254+006B 7C           		LD	A,H		; test address
  255+006C B5           		OR	L		; for zero.
  256+006D
  257+006D 28 01        		JR	Z,o0070		; skip to NO-RESET if ZERO
  258+006F E9           		JP	(HL)		; jump to routine ( i.e. o0000 )
  259+0070
  260+0070              ;; NO-RESET
  261+0070 E1           o0070:		POP	HL		; restore the
  262+0071 F1           		POP	AF		; registers.
  263+0072 ED 45        		RETN			; return to previous interrupt state.
  264+0074
  265+0074              ; ---------------------------
  266+0074              ; THE 'CH ADD + 1' SUBROUTINE
  267+0074              ; ---------------------------
  268+0074              ;   This subroutine is called from RST 20, and three times from elsewhere
  269+0074              ;   to fetch the next immediate character following the current valid character
  270+0074              ;   address and update the associated system variable.
  271+0074              ;   The entry point TEMP-PTR1 is used from the SCANNING routine.
  272+0074              ;   Both TEMP-PTR1 and TEMP-PTR2 are used by the READ command routine.
  273+0074
  274+0074              ;; CH-ADD+1
  275+0074 2A 5D 5C     o0074:		LD	HL,(	$5C5D)	; fetch address from CH_ADD.
  276+0077
  277+0077              ;; TEMP-PTR1
  278+0077 23           o0077:		INC	HL		; increase the character address by one.
  279+0078
  280+0078              ;; TEMP-PTR2
  281+0078 22 5D 5C     o0078:		LD	(	$5C5D),HL	; update CH_ADD with character address.
  282+007B 7E           		LD	A,(HL)		; load character to A from HL.
  283+007C C9           		RET			; and return.
  284+007D
  285+007D              ; --------------------------
  286+007D              ; THE 'SKIP OVER' SUBROUTINE
  287+007D              ; --------------------------
  288+007D              ;   This subroutine is called once from RST 18 to skip over white-space and
  289+007D              ;   other characters irrelevant to the parsing of a BASIC line etc. .
  290+007D              ;   Initially the A register holds the character to be considered
  291+007D              ;   and HL holds its address which will not be within quoted text
  292+007D              ;   when a BASIC line is parsed.
  293+007D              ;   Although the 'tab' and 'at' characters will not appear in a BASIC line,
  294+007D              ;   they could be present in a string expression, and in other situations.
  295+007D              ;   Note. although white-space is usually poaced in a program to indent loops
  296+007D              ;   and make it more readable, it can also be used for the opposite effect and
  297+007D              ;   spaces may appear in variable names although the parser never sees them.
  298+007D              ;   It is this routine that helps make the variables 'Anum bEr5 3BUS' and
  299+007D              ;   'a number 53 bus' appear the same to the parser.
  300+007D
  301+007D              ;; SKIP-OVER
  302+007D FE 21        o007D:		CP	$21		; test if higher than space.
  303+007F D0           		RET	NC		; return with carry clear if so.
  304+0080
  305+0080 FE 0D        		CP	$0D		; carriage return ?
  306+0082 C8           		RET	Z		; return also with carry clear if so.
  307+0083
  308+0083              ; all other characters have no relevance
  309+0083              ; to the parser and must be returned with
  310+0083              ; carry set.
  311+0083
  312+0083 FE 10        		CP	$10		; test if 0-15d
  313+0085 D8           		RET	C		; return, if so, with carry set.
  314+0086
  315+0086 FE 18        		CP	$18		; test if 24-32d
  316+0088 3F           		CCF			; complement carry flag.
  317+0089 D8           		RET	C		; return with carry set if so.
  318+008A
  319+008A              ; now leaves 16d-23d
  320+008A
  321+008A 23           		INC	HL		; all above have at least one extra character
  322+008B              					; to be stepped over.
  323+008B
  324+008B FE 16        		CP	$16		; controls 22d ('at') and 23d ('tab') have two.
  325+008D 38 01        		JR	C,o0090		; forward to SKIPS with ink, paper, flash,
  326+008F              					; bright, inverse or over controls.
  327+008F              					; Note. the high byte of tab is for RS232 only.
  328+008F              					; it has no relevance on this machine.
  329+008F
  330+008F 23           		INC	HL		; step over the second character of 'at"/"tab'.
  331+0090
  332+0090              ;; SKIPS
  333+0090 37           o0090:		SCF
  334+0091 22 5D 5C     		LD	(	$5C5D),HL	; update the CH_ADD system variable.
  335+0094 C9           		RET			; return with carry set.
  336+0095
  337+0095
  338+0095              ; ------------------
  339+0095              ; THE 'TOKEN' TABLES
  340+0095              ; ------------------
  341+0095              ;   The tokenized characters 134d (RND) to 255d (COPY) are expanded using
  342+0095              ;   this table. The last byte of a token is inverted to denote the end of
  343+0095              ;   the word. The first is an inverted step-over byte.
  344+0095
  345+0095              ;; TKN-TABLE
  346+0095 BF           o0095:		DB	"?"+$80
  347+0096 52 4E        		DM	"RN"
  348+0098 C4           		DB	"D"+$80
  349+0099 49 4E 4B 45  		DM	"INKEY"
  349+009D 59
  350+009E A4           		DB	"$"+$80
  351+009F 50 C9        		DB	"P","I"+$80
  352+00A1 46 CE        		DB	"F","N"+$80
  353+00A3 50 4F 49 4E  		DM	"POIN"
  354+00A7 D4           		DB	"T"+$80
  355+00A8 53 43 52 45  		DM	"SCREEN"
  355+00AC 45 4E
  356+00AE A4           		DB	"$"+$80
  357+00AF 41 54 54     		DM	"ATT"
  358+00B2 D2           		DB	"R"+$80
  359+00B3 41 D4        		DB	"A","T"+$80
  360+00B5 54 41        		DM	"TA"
  361+00B7 C2           		DB	"B"+$80
  362+00B8 56 41 4C     		DM	"VAL"
  363+00BB A4           		DB	"$"+$80
  364+00BC 43 4F 44     		DM	"COD"
  365+00BF C5           		DB	"E"+$80
  366+00C0 56 41        		DM	"VA"
  367+00C2 CC           		DB	"L"+$80
  368+00C3 4C 45        		DM	"LE"
  369+00C5 CE           		DB	"N"+$80
  370+00C6 53 49        		DM	"SI"
  371+00C8 CE           		DB	"N"+$80
  372+00C9 43 4F        		DM	"CO"
  373+00CB D3           		DB	"S"+$80
  374+00CC 54 41        		DM	"TA"
  375+00CE CE           		DB	"N"+$80
  376+00CF 41 53        		DM	"AS"
  377+00D1 CE           		DB	"N"+$80
  378+00D2 41 43        		DM	"AC"
  379+00D4 D3           		DB	"S"+$80
  380+00D5 41 54        		DM	"AT"
  381+00D7 CE           		DB	"N"+$80
  382+00D8 4C CE        		DB	"L","N"+$80
  383+00DA 45 58        		DM	"EX"
  384+00DC D0           		DB	"P"+$80
  385+00DD 49 4E        		DM	"IN"
  386+00DF D4           		DB	"T"+$80
  387+00E0 53 51        		DM	"SQ"
  388+00E2 D2           		DB	"R"+$80
  389+00E3 53 47        		DM	"SG"
  390+00E5 CE           		DB	"N"+$80
  391+00E6 41 42        		DM	"AB"
  392+00E8 D3           		DB	"S"+$80
  393+00E9 50 45 45     		DM	"PEE"
  394+00EC CB           		DB	"K"+$80
  395+00ED 49 CE        		DB	"I","N"+$80
  396+00EF 55 53        		DM	"US"
  397+00F1 D2           		DB	"R"+$80
  398+00F2 53 54 52     		DM	"STR"
  399+00F5 A4           		DB	"$"+$80
  400+00F6 43 48 52     		DM	"CHR"
  401+00F9 A4           		DB	"$"+$80
  402+00FA 4E 4F        		DM	"NO"
  403+00FC D4           		DB	"T"+$80
  404+00FD 42 49        		DM	"BI"
  405+00FF CE           		DB	"N"+$80
  406+0100
  407+0100              ;   The previous 32 function-type words are printed without a leading space
  408+0100              ;   The following have a leading space if they begin with a letter
  409+0100
  410+0100 4F D2        		DB	"O","R"+$80
  411+0102 41 4E        		DM	"AN"
  412+0104 C4           		DB	"D"+$80
  413+0105 3C BD        		DB	$3C,"="+$80	; <=
  414+0107 3E BD        		DB	$3E,"="+$80	; >=
  415+0109 3C BE        		DB	$3C,$3E+$80	; <>
  416+010B 4C 49 4E     		DM	"LIN"
  417+010E C5           		DB	"E"+$80
  418+010F 54 48 45     		DM	"THE"
  419+0112 CE           		DB	"N"+$80
  420+0113 54 CF        		DB	"T","O"+$80
  421+0115 53 54 45     		DM	"STE"
  422+0118 D0           		DB	"P"+$80
  423+0119 44 45 46 20  		DM	"DEF F"
  423+011D 46
  424+011E CE           		DB	"N"+$80
  425+011F 43 41        		DM	"CA"
  426+0121 D4           		DB	"T"+$80
  427+0122 46 4F 52 4D  		DM	"FORMA"
  427+0126 41
  428+0127 D4           		DB	"T"+$80
  429+0128 4D 4F 56     		DM	"MOV"
  430+012B C5           		DB	"E"+$80
  431+012C 45 52 41 53  		DM	"ERAS"
  432+0130 C5           		DB	"E"+$80
  433+0131 4F 50 45 4E  		DM	"OPEN "
  433+0135 20
  434+0136 A3           		DB	"#"+$80
  435+0137 43 4C 4F 53  		DM	"CLOSE "
  435+013B 45 20
  436+013D A3           		DB	"#"+$80
  437+013E 4D 45 52 47  		DM	"MERG"
  438+0142 C5           		DB	"E"+$80
  439+0143 56 45 52 49  		DM	"VERIF"
  439+0147 46
  440+0148 D9           		DB	"Y"+$80
  441+0149 42 45 45     		DM	"BEE"
  442+014C D0           		DB	"P"+$80
  443+014D 43 49 52 43  		DM	"CIRCL"
  443+0151 4C
  444+0152 C5           		DB	"E"+$80
  445+0153 49 4E        		DM	"IN"
  446+0155 CB           		DB	"K"+$80
  447+0156 50 41 50 45  		DM	"PAPE"
  448+015A D2           		DB	"R"+$80
  449+015B 46 4C 41 53  		DM	"FLAS"
  450+015F C8           		DB	"H"+$80
  451+0160 42 52 49 47  		DM	"BRIGH"
  451+0164 48
  452+0165 D4           		DB	"T"+$80
  453+0166 49 4E 56 45  		DM	"INVERS"
  453+016A 52 53
  454+016C C5           		DB	"E"+$80
  455+016D 4F 56 45     		DM	"OVE"
  456+0170 D2           		DB	"R"+$80
  457+0171 4F 55        		DM	"OU"
  458+0173 D4           		DB	"T"+$80
  459+0174 4C 50 52 49  		DM	"LPRIN"
  459+0178 4E
  460+0179 D4           		DB	"T"+$80
  461+017A 4C 4C 49 53  		DM	"LLIS"
  462+017E D4           		DB	"T"+$80
  463+017F 53 54 4F     		DM	"STO"
  464+0182 D0           		DB	"P"+$80
  465+0183 52 45 41     		DM	"REA"
  466+0186 C4           		DB	"D"+$80
  467+0187 44 41 54     		DM	"DAT"
  468+018A C1           		DB	"A"+$80
  469+018B 52 45 53 54  		DM	"RESTOR"
  469+018F 4F 52
  470+0191 C5           		DB	"E"+$80
  471+0192 4E 45        		DM	"NE"
  472+0194 D7           		DB	"W"+$80
  473+0195 42 4F 52 44  		DM	"BORDE"
  473+0199 45
  474+019A D2           		DB	"R"+$80
  475+019B 43 4F 4E 54  		DM	"CONTINU"
  475+019F 49 4E 55
  476+01A2 C5           		DB	"E"+$80
  477+01A3 44 49        		DM	"DI"
  478+01A5 CD           		DB	"M"+$80
  479+01A6 52 45        		DM	"RE"
  480+01A8 CD           		DB	"M"+$80
  481+01A9 46 4F        		DM	"FO"
  482+01AB D2           		DB	"R"+$80
  483+01AC 47 4F 20 54  		DM	"GO T"
  484+01B0 CF           		DB	"O"+$80
  485+01B1 47 4F 20 53  		DM	"GO SU"
  485+01B5 55
  486+01B6 C2           		DB	"B"+$80
  487+01B7 49 4E 50 55  		DM	"INPU"
  488+01BB D4           		DB	"T"+$80
  489+01BC 4C 4F 41     		DM	"LOA"
  490+01BF C4           		DB	"D"+$80
  491+01C0 4C 49 53     		DM	"LIS"
  492+01C3 D4           		DB	"T"+$80
  493+01C4 4C 45        		DM	"LE"
  494+01C6 D4           		DB	"T"+$80
  495+01C7 50 41 55 53  		DM	"PAUS"
  496+01CB C5           		DB	"E"+$80
  497+01CC 4E 45 58     		DM	"NEX"
  498+01CF D4           		DB	"T"+$80
  499+01D0 50 4F 4B     		DM	"POK"
  500+01D3 C5           		DB	"E"+$80
  501+01D4 50 52 49 4E  		DM	"PRIN"
  502+01D8 D4           		DB	"T"+$80
  503+01D9 50 4C 4F     		DM	"PLO"
  504+01DC D4           		DB	"T"+$80
  505+01DD 52 55        		DM	"RU"
  506+01DF CE           		DB	"N"+$80
  507+01E0 53 41 56     		DM	"SAV"
  508+01E3 C5           		DB	"E"+$80
  509+01E4 52 41 4E 44  		DM	"RANDOMIZ"
  509+01E8 4F 4D 49 5A
  510+01EC C5           		DB	"E"+$80
  511+01ED 49 C6        		DB	"I","F"+$80
  512+01EF 43 4C        		DM	"CL"
  513+01F1 D3           		DB	"S"+$80
  514+01F2 44 52 41     		DM	"DRA"
  515+01F5 D7           		DB	"W"+$80
  516+01F6 43 4C 45 41  		DM	"CLEA"
  517+01FA D2           		DB	"R"+$80
  518+01FB 52 45 54 55  		DM	"RETUR"
  518+01FF 52
  519+0200 CE           		DB	"N"+$80
  520+0201 43 4F 50     		DM	"COP"
  521+0204 D9           		DB	"Y"+$80
  522+0205
  523+0205              ; ----------------
  524+0205              ; THE 'KEY' TABLES
  525+0205              ; ----------------
  526+0205              ;   These six look-up tables are used by the keyboard reading routine
  527+0205              ;   to decode the key values.
  528+0205              ;
  529+0205              ;   The first table contains the maps for the 39 keys of the standard
  530+0205              ;   40-key Spectrum keyboard. The remaining key [SHIFT $27] is read directly.
  531+0205              ;   The keys consist of the 26 upper-case alphabetic characters, the 10 digit
  532+0205              ;   keys and the space, ENTER and symbol shift key.
  533+0205              ;   Unshifted alphabetic keys have $20 added to the value.
  534+0205              ;   The keywords for the main alphabetic keys are obtained by adding $A5 to
  535+0205              ;   the values obtained from this table.
  536+0205
  537+0205              ;; MAIN-KEYS
  538+0205 42           o0205:		DB	$42		; B
  539+0206 48           		DB	$48		; H
  540+0207 59           		DB	$59		; Y
  541+0208 36           		DB	$36		; 6
  542+0209 35           		DB	$35		; 5
  543+020A 54           		DB	$54		; T
  544+020B 47           		DB	$47		; G
  545+020C 56           		DB	$56		; V
  546+020D 4E           		DB	$4E		; N
  547+020E 4A           		DB	$4A		; J
  548+020F 55           		DB	$55		; U
  549+0210 37           		DB	$37		; 7
  550+0211 34           		DB	$34		; 4
  551+0212 52           		DB	$52		; R
  552+0213 46           		DB	$46		; F
  553+0214 43           		DB	$43		; C
  554+0215 4D           		DB	$4D		; M
  555+0216 4B           		DB	$4B		; K
  556+0217 49           		DB	$49		; I
  557+0218 38           		DB	$38		; 8
  558+0219 33           		DB	$33		; 3
  559+021A 45           		DB	$45		; E
  560+021B 44           		DB	$44		; D
  561+021C 58           		DB	$58		; X
  562+021D 0E           		DB	$0E		; SYMBOL SHIFT
  563+021E 4C           		DB	$4C		; L
  564+021F 4F           		DB	$4F		; O
  565+0220 39           		DB	$39		; 9
  566+0221 32           		DB	$32		; 2
  567+0222 57           		DB	$57		; W
  568+0223 53           		DB	$53		; S
  569+0224 5A           		DB	$5A		; Z
  570+0225 20           		DB	$20		; SPACE
  571+0226 0D           		DB	$0D		; ENTER
  572+0227 50           		DB	$50		; P
  573+0228 30           		DB	$30		; 0
  574+0229 31           		DB	$31		; 1
  575+022A 51           		DB	$51		; Q
  576+022B 41           		DB	$41		; A
  577+022C
  578+022C
  579+022C              ;; E-UNSHIFT
  580+022C              ;  The 26 unshifted extended mode keys for the alphabetic characters.
  581+022C              ;  The green keywords on the original keyboard.
  582+022C E3           o022C:		DB	$E3		; READ
  583+022D C4           		DB	$C4		; BIN
  584+022E E0           		DB	$E0		; LPRINT
  585+022F E4           		DB	$E4		; DATA
  586+0230 B4           		DB	$B4		; TAN
  587+0231 BC           		DB	$BC		; SGN
  588+0232 BD           		DB	$BD		; ABS
  589+0233 BB           		DB	$BB		; SQR
  590+0234 AF           		DB	$AF		; CODE
  591+0235 B0           		DB	$B0		; VAL
  592+0236 B1           		DB	$B1		; LEN
  593+0237 C0           		DB	$C0		; USR
  594+0238 A7           		DB	$A7		; PI
  595+0239 A6           		DB	$A6		; INKEY$
  596+023A BE           		DB	$BE		; PEEK
  597+023B AD           		DB	$AD		; TAB
  598+023C B2           		DB	$B2		; SIN
  599+023D BA           		DB	$BA		; INT
  600+023E E5           		DB	$E5		; RESTORE
  601+023F A5           		DB	$A5		; RND
  602+0240 C2           		DB	$C2		; CHR$
  603+0241 E1           		DB	$E1		; LLIST
  604+0242 B3           		DB	$B3		; COS
  605+0243 B9           		DB	$B9		; EXP
  606+0244 C1           		DB	$C1		; STR$
  607+0245 B8           		DB	$B8		; LN
  608+0246
  609+0246
  610+0246              ;; EXT-SHIFT
  611+0246              ;  The 26 shifted extended mode keys for the alphabetic characters.
  612+0246              ;  The red keywords below keys on the original keyboard.
  613+0246 7E           o0246:		DB	$7E		; ~
  614+0247 DC           		DB	$DC		; BRIGHT
  615+0248 DA           		DB	$DA		; PAPER
  616+0249 5C           		DB	$5C		; \
  617+024A B7           		DB	$B7		; ATN
  618+024B 7B           		DB	$7B		; {
  619+024C 7D           		DB	$7D		; }
  620+024D D8           		DB	$D8		; CIRCLE
  621+024E BF           		DB	$BF		; IN
  622+024F AE           		DB	$AE		; VAL$
  623+0250 AA           		DB	$AA		; SCREEN$
  624+0251 AB           		DB	$AB		; ATTR
  625+0252 DD           		DB	$DD		; INVERSE
  626+0253 DE           		DB	$DE		; OVER
  627+0254 DF           		DB	$DF		; OUT
  628+0255 7F           		DB	$7F		; (Copyright character)
  629+0256 B5           		DB	$B5		; ASN
  630+0257 D6           		DB	$D6		; VERIFY
  631+0258 7C           		DB	$7C		; |
  632+0259 D5           		DB	$D5		; MERGE
  633+025A 5D           		DB	$5D		; ]
  634+025B DB           		DB	$DB		; FLASH
  635+025C B6           		DB	$B6		; ACS
  636+025D D9           		DB	$D9		; INK
  637+025E 5B           		DB	$5B		; [
  638+025F D7           		DB	$D7		; BEEP
  639+0260
  640+0260
  641+0260              ;; CTL-CODES
  642+0260              ;  The ten control codes assigned to the top line of digits when the shift
  643+0260              ;  key is pressed.
  644+0260 0C           o0260:		DB	$0C		; DELETE
  645+0261 07           		DB	$07		; EDIT
  646+0262 06           		DB	$06		; CAPS LOCK
  647+0263 04           		DB	$04		; TRUE VIDEO
  648+0264 05           		DB	$05		; INVERSE VIDEO
  649+0265 08           		DB	$08		; CURSOR LEFT
  650+0266 0A           		DB	$0A		; CURSOR DOWN
  651+0267 0B           		DB	$0B		; CURSOR UP
  652+0268 09           		DB	$09		; CURSOR RIGHT
  653+0269 0F           		DB	$0F		; GRAPHICS
  654+026A
  655+026A
  656+026A              ;; SYM-CODES
  657+026A              ;  The 26 red symbols assigned to the alphabetic characters of the keyboard.
  658+026A              ;  The ten single-character digit symbols are converted without the aid of
  659+026A              ;  a table using subtraction and minor manipulation.
  660+026A E2           o026A:		DB	$E2		; STOP
  661+026B 2A           		DB	$2A		; *
  662+026C 3F           		DB	$3F		; ?
  663+026D CD           		DB	$CD		; STEP
  664+026E C8           		DB	$C8		; >=
  665+026F CC           		DB	$CC		; TO
  666+0270 CB           		DB	$CB		; THEN
  667+0271 5E           		DB	$5E		; ^
  668+0272 AC           		DB	$AC		; AT
  669+0273 2D           		DB	$2D		; -
  670+0274 2B           		DB	$2B		; +
  671+0275 3D           		DB	$3D		; =
  672+0276 2E           		DB	$2E		; .
  673+0277 2C           		DB	$2C		; ,
  674+0278 3B           		DB	$3B		; ;
  675+0279 22           		DB	$22		; "
  676+027A C7           		DB	$C7		; <=
  677+027B 3C           		DB	$3C		; <
  678+027C C3           		DB	$C3		; NOT
  679+027D 3E           		DB	$3E		; >
  680+027E C5           		DB	$C5		; OR
  681+027F 2F           		DB	$2F		; /
  682+0280 C9           		DB	$C9		; <>
  683+0281 60           		DB	$60		; pound
  684+0282 C6           		DB	$C6		; AND
  685+0283 3A           		DB	$3A		; :
  686+0284
  687+0284              ;; E-DIGITS
  688+0284              ;  The ten keywords assigned to the digits in extended mode.
  689+0284              ;  The remaining red keywords below the keys.
  690+0284 D0           o0284:		DB	$D0		; FORMAT
  691+0285 CE           		DB	$CE		; DEF FN
  692+0286 A8           		DB	$A8		; FN
  693+0287 CA           		DB	$CA		; LINE
  694+0288 D3           		DB	$D3		; OPEN #
  695+0289 D4           		DB	$D4		; CLOSE #
  696+028A D1           		DB	$D1		; MOVE
  697+028B D2           		DB	$D2		; ERASE
  698+028C A9           		DB	$A9		; POINT
  699+028D CF           		DB	$CF		; CAT
  700+028E
  701+028E
  702+028E              ;*******************************
  703+028E              ;** Part 2. KEYBOARD ROUTINES **
  704+028E              ;*******************************
  705+028E
  706+028E              ;   Using shift keys and a combination of modes the Spectrum 40-key keyboard
  707+028E              ;   can be mapped to 256 input characters
  708+028E
  709+028E              ; ---------------------------------------------------------------------------
  710+028E              ;
  711+028E              ;         0     1     2     3     4 -Bits-  4     3     2     1     0
  712+028E              ; PORT                                                                    PORT
  713+028E              ;
  714+028E              ; F7FE  [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ]  |  [ 6 ] [ 7 ] [ 8 ] [ 9 ] [ 0 ]   EFFE
  715+028E              ;  ^                                   |                                   v
  716+028E              ; FBFE  [ Q ] [ W ] [ E ] [ R ] [ T ]  |  [ Y ] [ U ] [ I ] [ O ] [ P ]   DFFE
  717+028E              ;  ^                                   |                                   v
  718+028E              ; FDFE  [ A ] [ S ] [ D ] [ F ] [ G ]  |  [ H ] [ J ] [ K ] [ L ] [ ENT ] BFFE
  719+028E              ;  ^                                   |                                   v
  720+028E              ; FEFE  [SHI] [ Z ] [ X ] [ C ] [ V ]  |  [ B ] [ N ] [ M ] [sym] [ SPC ] 7FFE
  721+028E              ;  ^     $27                                                 $18           v
  722+028E              ; Start                                                                   End
  723+028E              ;        00100111                                            00011000
  724+028E              ;
  725+028E              ; ---------------------------------------------------------------------------
  726+028E              ;   The above map may help in reading.
  727+028E              ;   The neat arrangement of ports means that the B register need only be
  728+028E              ;   rotated left to work up the left hand side and then down the right
  729+028E              ;   hand side of the keyboard. When the reset bit drops into the carry
  730+028E              ;   then all 8 half-rows have been read. Shift is the first key to be
  731+028E              ;   read. The lower six bits of the shifts are unambiguous.
  732+028E
  733+028E              ; -------------------------------
  734+028E              ; THE 'KEYBOARD SCANNING' ROUTINE
  735+028E              ; -------------------------------
  736+028E              ;   From keyboard and s-inkey$
  737+028E              ;   Returns 1 or 2 keys in DE, most significant shift first if any
  738+028E              ;   key values 0-39 else 255
  739+028E
  740+028E              ;; KEY-SCAN
  741+028E 2E 2F        o028E:		LD	L,$2F		; initial key value
  742+0290              					; valid values are obtained by subtracting
  743+0290              					; eight five times.
  744+0290 11 FF FF     		LD	DE,$FFFF	; a buffer to receive 2 keys.
  745+0293
  746+0293 01 FE FE     		LD	BC,$FEFE	; the commencing port address
  747+0296              					; B holds 11111110 initially and is also
  748+0296              					; used to count the 8 half-rows
  749+0296              					;; KEY-LINE
  750+0296 ED 78        o0296:		IN	A,(C)		; read the port to A - bits will be reset
  751+0298              					; if a key is pressed else set.
  752+0298 2F           		CPL			; complement - pressed key-bits are now set
  753+0299 E6 1F        		AND	$1F		; apply 00011111 mask to pick up the
  754+029B              					; relevant set bits.
  755+029B
  756+029B 28 0E        		JR	Z,o02AB		; forward to KEY-DONE if zero and therefore
  757+029D              					; no keys pressed in row at all.
  758+029D
  759+029D 67           		LD	H,A		; transfer row bits to H
  760+029E 7D           		LD	A,L		; load the initial key value to A
  761+029F
  762+029F              ;; KEY-3KEYS
  763+029F 14           o029F:		INC	D		; now test the key buffer
  764+02A0 C0           		RET	NZ		; if we have collected 2 keys already
  765+02A1              					; then too many so quit.
  766+02A1
  767+02A1              ;; KEY-BITS
  768+02A1 D6 08        o02A1:		SUB	$08		; subtract 8 from the key value
  769+02A3              					; cycling through key values (top = $27)
  770+02A3              					; e.g. 2F>   27>1F>17>0F>07
  771+02A3              					;      2E>   26>1E>16>0E>06
  772+02A3 CB 3C        		SRL	H		; shift key bits right into carry.
  773+02A5 30 FA        		JR	NC,o02A1	; back to KEY-BITS if not pressed
  774+02A7              					; but if pressed we have a value (0-39d)
  775+02A7
  776+02A7 53           		LD	D,E		; transfer a possible previous key to D
  777+02A8 5F           		LD	E,A		; transfer the new key to E
  778+02A9 20 F4        		JR	NZ,o029F	; back to KEY-3KEYS if there were more
  779+02AB              					; set bits - H was not yet zero.
  780+02AB
  781+02AB              ;; KEY-DONE
  782+02AB 2D           o02AB:		DEC	L		; cycles 2F>2E>2D>2C>2B>2A>29>28 for
  783+02AC              					; each half-row.
  784+02AC CB 00        		RLC	B		; form next port address e.g. FEFE > FDFE
  785+02AE 38 E6        		JR	C,o0296		; back to KEY-LINE if still more rows to do.
  786+02B0
  787+02B0 7A           		LD	A,D		; now test if D is still FF ?
  788+02B1 3C           		INC	A		; if it is zero we have at most 1 key
  789+02B2              					; range now $01-$28  (1-40d)
  790+02B2 C8           		RET	Z		; return if one key or no key.
  791+02B3
  792+02B3 FE 28        		CP	$28		; is it capsshift (was $27) ?
  793+02B5 C8           		RET	Z		; return if so.
  794+02B6
  795+02B6 FE 19        		CP	$19		; is it symbol shift (was $18) ?
  796+02B8 C8           		RET	Z		; return also
  797+02B9
  798+02B9 7B           		LD	A,E		; now test E
  799+02BA 5A           		LD	E,D		; but first switch
  800+02BB 57           		LD	D,A		; the two keys.
  801+02BC FE 18        		CP	$18		; is it symbol shift ?
  802+02BE C9           		RET			; return (with zero set if it was).
  803+02BF              					; but with symbol shift now in D
  804+02BF
  805+02BF              ; ----------------------
  806+02BF              ; THE 'KEYBOARD' ROUTINE
  807+02BF              ; ----------------------
  808+02BF              ;   Called from the interrupt 50 times a second.
  809+02BF              ;
  810+02BF
  811+02BF              ;; KEYBOARD
  812+02BF CD 8E 02     o02BF:		CALL	o028E		; routine KEY-SCAN
  813+02C2 C0           		RET	NZ		; return if invalid combinations
  814+02C3
  815+02C3              ;   then decrease the counters within the two key-state maps
  816+02C3              ;   as this could cause one to become free.
  817+02C3              ;   if the keyboard has not been pressed during the last five interrupts
  818+02C3              ;   then both sets will be free.
  819+02C3
  820+02C3
  821+02C3 21 00 5C     		LD	HL,	$5C00	; point to KSTATE-0
  822+02C6
  823+02C6              ;; K-ST-LOOP
  824+02C6 CB 7E        o02C6:		BIT	7,(HL)		; is it free ?  (i.e. $FF)
  825+02C8 20 07        		JR	NZ,o02D1	; forward to K-CH-SET if so
  826+02CA
  827+02CA 23           		INC	HL		; address the 5-counter
  828+02CB 35           		DEC	(HL)		; decrease the counter
  829+02CC 2B           		DEC	HL		; step back
  830+02CD
  831+02CD 20 02        		JR	NZ,o02D1	; forward to K-CH-SET if not at end of count
  832+02CF
  833+02CF 36 FF        		LD	(HL),$FF	; else mark this particular map free.
  834+02D1
  835+02D1              ;; K-CH-SET
  836+02D1 7D           o02D1:		LD	A,L		; make a copy of the low address byte.
  837+02D2 21 04 5C     		LD	HL,$5C04	; point to KSTATE-4
  838+02D5              					; (ld l,$04 would do)
  839+02D5 BD           		CP	L		; have both sets been considered ?
  840+02D6 20 EE        		JR	NZ,o02C6	; back to K-ST-LOOP to consider this 2nd set
  841+02D8
  842+02D8              ;   now the raw key (0-38d) is converted to a main key (uppercase).
  843+02D8
  844+02D8 CD 1E 03     		CALL	o031E		; routine K-TEST to get main key in A
  845+02DB
  846+02DB D0           		RET	NC		; return if just a single shift
  847+02DC
  848+02DC 21 00 5C     		LD	HL,	$5C00	; point to KSTATE-0
  849+02DF BE           		CP	(HL)		; does the main key code match ?
  850+02E0 28 2E        		JR	Z,o0310		; forward to K-REPEAT if so
  851+02E2
  852+02E2              ;   if not consider the second key map.
  853+02E2
  854+02E2 EB           		EX	DE,HL		; save kstate-0 in de
  855+02E3 21 04 5C     		LD	HL,$5C04	; point to KSTATE-4
  856+02E6 BE           		CP	(HL)		; does the main key code match ?
  857+02E7 28 27        		JR	Z,o0310		; forward to K-REPEAT if so
  858+02E9
  859+02E9              ;   having excluded a repeating key we can now consider a new key.
  860+02E9              ;   the second set is always examined before the first.
  861+02E9
  862+02E9 CB 7E        		BIT	7,(HL)		; is the key map free ?
  863+02EB 20 04        		JR	NZ,o02F1	; forward to K-NEW if so.
  864+02ED
  865+02ED EB           		EX	DE,HL		; bring back KSTATE-0
  866+02EE CB 7E        		BIT	7,(HL)		; is it free ?
  867+02F0 C8           		RET	Z		; return if not.
  868+02F1              					; as we have a key but nowhere to put it yet.
  869+02F1
  870+02F1              ;   continue or jump to here if one of the buffers was free.
  871+02F1
  872+02F1              ;; K-NEW
  873+02F1 5F           o02F1:		LD	E,A		; store key in E
  874+02F2 77           		LD	(HL),A		; place in free location
  875+02F3 23           		INC	HL		; advance to the interrupt counter
  876+02F4 36 05        		LD	(HL),$05	; and initialize counter to 5
  877+02F6 23           		INC	HL		; advance to the delay
  878+02F7 3A 09 5C     		LD	A,(	$5C09)	; pick up the system variable REPDEL
  879+02FA 77           		LD	(HL),A		; and insert that for first repeat delay.
  880+02FB 23           		INC	HL		; advance to last location of state map.
  881+02FC
  882+02FC FD 4E 07     		LD	C,(IY+$07)	; pick up MODE  (3 bytes)
  883+02FF FD 56 01     		LD	D,(IY+$01)	; pick up FLAGS (3 bytes)
  884+0302 E5           		PUSH	HL		; save state map location
  885+0303              					; Note. could now have used, to avoid IY,
  886+0303              					; ld l,$41; ld c,(hl); ld l,$3B; ld d,(hl).
  887+0303              					; six and two threes of course.
  888+0303
  889+0303 CD 33 03     		CALL	o0333		; routine K-DECODE
  890+0306
  891+0306 E1           		POP	HL		; restore map pointer
  892+0307 77           		LD	(HL),A		; put the decoded key in last location of map.
  893+0308
  894+0308              ;; K-END
  895+0308 32 08 5C     o0308:		LD	(	$5C08),A	; update LASTK system variable.
  896+030B FD CB 01 EE  		SET	5,(IY+$01)	; update FLAGS  - signal a new key.
  897+030F C9           		RET			; return to interrupt routine.
  898+0310
  899+0310              ; -----------------------
  900+0310              ; THE 'REPEAT KEY' BRANCH
  901+0310              ; -----------------------
  902+0310              ;   A possible repeat has been identified. HL addresses the raw key.
  903+0310              ;   The last location of the key map holds the decoded key from the first
  904+0310              ;   context.  This could be a keyword and, with the exception of NOT a repeat
  905+0310              ;   is syntactically incorrect and not really desirable.
  906+0310
  907+0310              ;; K-REPEAT
  908+0310 23           o0310:		INC	HL		; increment the map pointer to second location.
  909+0311 36 05        		LD	(HL),$05	; maintain interrupt counter at 5.
  910+0313 23           		INC	HL		; now point to third location.
  911+0314 35           		DEC	(HL)		; decrease the REPDEL value which is used to
  912+0315              					; time the delay of a repeat key.
  913+0315
  914+0315 C0           		RET	NZ		; return if not yet zero.
  915+0316
  916+0316 3A 0A 5C     		LD	A,(	$5C0A)	; fetch the system variable value REPPER.
  917+0319 77           		LD	(HL),A		; for subsequent repeats REPPER will be used.
  918+031A
  919+031A 23           		INC	HL		; advance
  920+031B              					;
  921+031B 7E           		LD	A,(HL)		; pick up the key decoded possibly in another
  922+031C              					; context.
  923+031C              					; Note. should compare with $A5 (RND) and make
  924+031C              					; a simple return if this is a keyword.
  925+031C              					; e.g. cp $A5; ret nc; (3 extra bytes)
  926+031C 18 EA        		JR	o0308		; back to K-END
  927+031E
  928+031E              ; ----------------------
  929+031E              ; THE 'KEY-TEST' ROUTINE
  930+031E              ; ----------------------
  931+031E              ;   also called from s-inkey$
  932+031E              ;   begin by testing for a shift with no other.
  933+031E
  934+031E              ;; K-TEST
  935+031E 42           o031E:		LD	B,D		; load most significant key to B
  936+031F              					; will be $FF if not shift.
  937+031F 16 00        		LD	D,$00		; and reset D to index into main table
  938+0321 7B           		LD	A,E		; load least significant key from E
  939+0322 FE 27        		CP	$27		; is it higher than 39d   i.e. FF
  940+0324 D0           		RET	NC		; return with just a shift (in B now)
  941+0325
  942+0325 FE 18        		CP	$18		; is it symbol shift ?
  943+0327 20 03        		JR	NZ,o032C	; forward to K-MAIN if not
  944+0329
  945+0329              ;   but we could have just symbol shift and no other
  946+0329
  947+0329 CB 78        		BIT	7,B		; is other key $FF (ie not shift)
  948+032B C0           		RET	NZ		; return with solitary symbol shift
  949+032C
  950+032C
  951+032C              ;; K-MAIN
  952+032C 21 05 02     o032C:		LD	HL,o0205	; address: MAIN-KEYS
  953+032F 19           		ADD	HL,DE		; add offset 0-38
  954+0330 7E           		LD	A,(HL)		; pick up main key value
  955+0331 37           		SCF			; set carry flag
  956+0332 C9           		RET			; return    (B has other key still)
  957+0333
  958+0333              ; ----------------------------------
  959+0333              ; THE 'KEYBOARD DECODING' SUBROUTINE
  960+0333              ; ----------------------------------
  961+0333              ;   also called from s-inkey$
  962+0333
  963+0333              ;; K-DECODE
  964+0333 7B           o0333:		LD	A,E		; pick up the stored main key
  965+0334 FE 3A        		CP	$3A		; an arbitrary point between digits and letters
  966+0336 38 2F        		JR	C,o0367		; forward to K-DIGIT with digits, space, enter.
  967+0338
  968+0338 0D           		DEC	C		; decrease MODE ( 0='KLC', 1='E', 2='G')
  969+0339
  970+0339 FA 4F 03     		JP	M,o034F		; to K-KLC-LET if was zero
  971+033C
  972+033C 28 03        		JR	Z,o0341		; to K-E-LET if was 1 for extended letters.
  973+033E
  974+033E              ;   proceed with graphic codes.
  975+033E              ;   Note. should selectively drop return address if code > 'U' ($55).
  976+033E              ;   i.e. abort the KEYBOARD call.
  977+033E              ;   e.g. cp 'V'; jr c,addit; pop af ;pop af ;;addit etc. (6 extra bytes).
  978+033E              ;   (s-inkey$ never gets into graphics mode.)
  979+033E
  980+033E              ;; addit
  981+033E C6 4F        		ADD	A,$4F		; add offset to augment 'A' to graphics A say.
  982+0340 C9           		RET			; return.
  983+0341              					; Note. ( but [GRAPH] V gives RND, etc ).
  984+0341
  985+0341              ; ---
  986+0341
  987+0341              ;   the jump was to here with extended mode with uppercase A-Z.
  988+0341
  989+0341              ;; K-E-LET
  990+0341 21 EB 01     o0341:		LD	HL,o022C-$41	; base address of E-UNSHIFT o022c.
  991+0344              					; ( $01EB in standard ROM ).
  992+0344 04           		INC	B		; test B is it empty i.e. not a shift.
  993+0345 28 03        		JR	Z,o034A		; forward to K-LOOK-UP if neither shift.
  994+0347
  995+0347 21 05 02     		LD	HL,o0246-$41	; Address: $0205 o0246-$41 EXT-SHIFT base
  996+034A
  997+034A              ;; K-LOOK-UP
  998+034A 16 00        o034A:		LD	D,$00		; prepare to index.
  999+034C 19           		ADD	HL,DE		; add the main key value.
 1000+034D 7E           		LD	A,(HL)		; pick up other mode value.
 1001+034E C9           		RET			; return.
 1002+034F
 1003+034F              ; ---
 1004+034F
 1005+034F              ;   the jump was here with mode = 0
 1006+034F
 1007+034F              ;; K-KLC-LET
 1008+034F 21 29 02     o034F:		LD	HL,o026A-$41	; prepare base of sym-codes
 1009+0352 CB 40        		BIT	0,B		; shift=$27 sym-shift=$18
 1010+0354 28 F4        		JR	Z,o034A		; back to K-LOOK-UP with symbol-shift
 1011+0356
 1012+0356 CB 5A        		BIT	3,D		; test FLAGS is it 'K' mode (from OUT-CURS)
 1013+0358 28 0A        		JR	Z,o0364		; skip to K-TOKENS if so
 1014+035A
 1015+035A FD CB 30 5E  		BIT	3,(IY+$30)	; test FLAGS2 - consider CAPS LOCK ?
 1016+035E C0           		RET	NZ		; return if so with main code.
 1017+035F
 1018+035F 04           		INC	B		; is shift being pressed ?
 1019+0360              					; result zero if not
 1020+0360 C0           		RET	NZ		; return if shift pressed.
 1021+0361
 1022+0361 C6 20        		ADD	A,$20		; else convert the code to lower case.
 1023+0363 C9           		RET			; return.
 1024+0364
 1025+0364              ; ---
 1026+0364
 1027+0364              ;   the jump was here for tokens
 1028+0364
 1029+0364              ;; K-TOKENS
 1030+0364 C6 A5        o0364:		ADD	A,$A5		; add offset to main code so that 'A'
 1031+0366              					; becomes 'NEW' etc.
 1032+0366
 1033+0366 C9           		RET			; return.
 1034+0367
 1035+0367              ; ---
 1036+0367
 1037+0367              ;   the jump was here with digits, space, enter and symbol shift (< $xx)
 1038+0367
 1039+0367              ;; K-DIGIT
 1040+0367 FE 30        o0367:		CP	$30		; is it "0" or higher ?
 1041+0369 D8           		RET	C		; return with space, enter and symbol-shift
 1042+036A
 1043+036A 0D           		DEC	C		; test MODE (was 0='KLC', 1='E', 2='G')
 1044+036B FA 9D 03     		JP	M,o039D		; jump to K-KLC-DGT if was 0.
 1045+036E
 1046+036E 20 19        		JR	NZ,o0389	; forward to K-GRA-DGT if mode was 2.
 1047+0370
 1048+0370              ;   continue with extended digits 0-9.
 1049+0370
 1050+0370 21 54 02     		LD	HL,o0284-$30	; $0254 - base of E-DIGITS
 1051+0373 CB 68        		BIT	5,B		; test - shift=$27 sym-shift=$18
 1052+0375 28 D3        		JR	Z,o034A		; to K-LOOK-UP if sym-shift
 1053+0377
 1054+0377 FE 38        		CP	$38		; is character "8" ?
 1055+0379 30 07        		JR	NC,o0382	; to K-8-&-9 if greater than "7"
 1056+037B
 1057+037B D6 20        		SUB	$20		; reduce to ink range $10-$17
 1058+037D 04           		INC	B		; shift ?
 1059+037E C8           		RET	Z		; return if not.
 1060+037F
 1061+037F C6 08        		ADD	A,$08		; add 8 to give paper range $18 - $1F
 1062+0381 C9           		RET			; return
 1063+0382
 1064+0382              ; ---
 1065+0382
 1066+0382              ;   89
 1067+0382
 1068+0382              ;; K-8-&-9
 1069+0382 D6 36        o0382:		SUB	$36		; reduce to 02 and 03  bright codes
 1070+0384 04           		INC	B		; test if shift pressed.
 1071+0385 C8           		RET	Z		; return if not.
 1072+0386
 1073+0386 C6 FE        		ADD	A,$FE		; subtract 2 setting carry
 1074+0388 C9           		RET			; to give 0 and 1    flash codes.
 1075+0389
 1076+0389              ; ---
 1077+0389
 1078+0389              ;   graphics mode with digits
 1079+0389
 1080+0389              ;; K-GRA-DGT
 1081+0389 21 30 02     o0389:		LD	HL,o0260-$30	; $0230 base address of CTL-CODES
 1082+038C
 1083+038C FE 39        		CP	$39		; is key "9" ?
 1084+038E 28 BA        		JR	Z,o034A		; back to K-LOOK-UP - changed to $0F, GRAPHICS.
 1085+0390
 1086+0390 FE 30        		CP	$30		; is key "0" ?
 1087+0392 28 B6        		JR	Z,o034A		; back to K-LOOK-UP - changed to $0C, delete.
 1088+0394
 1089+0394              ;   for keys "0" - "7" we assign a mosaic character depending on shift.
 1090+0394
 1091+0394 E6 07        		AND	$07		; convert character to number. 0 - 7.
 1092+0396 C6 80        		ADD	A,$80		; add offset - they start at $80
 1093+0398
 1094+0398 04           		INC	B		; destructively test for shift
 1095+0399 C8           		RET	Z		; and return if not pressed.
 1096+039A
 1097+039A EE 0F        		XOR	$0F		; toggle bits becomes range $88-$8F
 1098+039C C9           		RET			; return.
 1099+039D
 1100+039D              ; ---
 1101+039D
 1102+039D              ;   now digits in 'KLC' mode
 1103+039D
 1104+039D              ;; K-KLC-DGT
 1105+039D 04           o039D:		INC	B		; return with digit codes if neither
 1106+039E C8           		RET	Z		; shift key pressed.
 1107+039F
 1108+039F CB 68        		BIT	5,B		; test for caps shift.
 1109+03A1
 1110+03A1 21 30 02     		LD	HL,o0260-$30	; prepare base of table CTL-CODES.
 1111+03A4 20 A4        		JR	NZ,o034A	; back to K-LOOK-UP if shift pressed.
 1112+03A6
 1113+03A6              ;   must have been symbol shift
 1114+03A6
 1115+03A6 D6 10        		SUB	$10		; for ASCII most will now be correct
 1116+03A8              					; on a standard typewriter.
 1117+03A8
 1118+03A8 FE 22        		CP	$22		; but '@' is not - see below.
 1119+03AA 28 06        		JR	Z,o03B2		; forward to K-@-CHAR if so
 1120+03AC
 1121+03AC FE 20        		CP	$20		; '_' is the other one that fails
 1122+03AE C0           		RET	NZ		; return if not.
 1123+03AF
 1124+03AF 3E 5F        		LD	A,$5F		; substitute ASCII '_'
 1125+03B1 C9           		RET			; return.
 1126+03B2
 1127+03B2              ; ---
 1128+03B2
 1129+03B2              ;; K-@-CHAR
 1130+03B2 3E 40        o03B2:		LD	A,$40		; substitute ASCII '@'
 1131+03B4 C9           		RET			; return.
 1132+03B5
 1133+03B5
 1134+03B5              ; ------------------------------------------------------------------------
 1135+03B5              ;   The Spectrum Input character keys. One or two are abbreviated.
 1136+03B5              ;   From $00 Flash 0 to $FF COPY. The routine above has decoded all these.
 1137+03B5
 1138+03B5              ;  | 00 Fl0| 01 Fl1| 02 Br0| 03 Br1| 04 In0| 05 In1| 06 CAP| 07 EDT|
 1139+03B5              ;  | 08 LFT| 09 RIG| 0A DWN| 0B UP | 0C DEL| 0D ENT| 0E SYM| 0F GRA|
 1140+03B5              ;  | 10 Ik0| 11 Ik1| 12 Ik2| 13 Ik3| 14 Ik4| 15 Ik5| 16 Ik6| 17 Ik7|
 1141+03B5              ;  | 18 Pa0| 19 Pa1| 1A Pa2| 1B Pa3| 1C Pa4| 1D Pa5| 1E Pa6| 1F Pa7|
 1142+03B5              ;  | 20 SP | 21  ! | 22  " | 23  # | 24  $ | 25  % | 26  & | 27  ' |
 1143+03B5              ;  | 28  ( | 29  ) | 2A  * | 2B  + | 2C  , | 2D  - | 2E  . | 2F  / |
 1144+03B5              ;  | 30  0 | 31  1 | 32  2 | 33  3 | 34  4 | 35  5 | 36  6 | 37  7 |
 1145+03B5              ;  | 38  8 | 39  9 | 3A  : | 3B  ; | 3C  < | 3D  = | 3E  > | 3F  ? |
 1146+03B5              ;  | 40  @ | 41  A | 42  B | 43  C | 44  D | 45  E | 46  F | 47  G |
 1147+03B5              ;  | 48  H | 49  I | 4A  J | 4B  K | 4C  L | 4D  M | 4E  N | 4F  O |
 1148+03B5              ;  | 50  P | 51  Q | 52  R | 53  S | 54  T | 55  U | 56  V | 57  W |
 1149+03B5              ;  | 58  X | 59  Y | 5A  Z | 5B  [ | 5C  \ | 5D  ] | 5E  ^ | 5F  _ |
 1150+03B5              ;  | 60  £ | 61  a | 62  b | 63  c | 64  d | 65  e | 66  f | 67  g |
 1151+03B5              ;  | 68  h | 69  i | 6A  j | 6B  k | 6C  l | 6D  m | 6E  n | 6F  o |
 1152+03B5              ;  | 70  p | 71  q | 72  r | 73  s | 74  t | 75  u | 76  v | 77  w |
 1153+03B5              ;  | 78  x | 79  y | 7A  z | 7B  { | 7C  | | 7D  } | 7E  ~ | 7F  © |
 1154+03B5              ;  | 80 128| 81 129| 82 130| 83 131| 84 132| 85 133| 86 134| 87 135|
 1155+03B5              ;  | 88 136| 89 137| 8A 138| 8B 139| 8C 140| 8D 141| 8E 142| 8F 143|
 1156+03B5              ;  | 90 [A]| 91 [B]| 92 [C]| 93 [D]| 94 [E]| 95 [F]| 96 [G]| 97 [H]|
 1157+03B5              ;  | 98 [I]| 99 [J]| 9A [K]| 9B [L]| 9C [M]| 9D [N]| 9E [O]| 9F [P]|
 1158+03B5              ;  | A0 [Q]| A1 [R]| A2 [S]| A3 [T]| A4 [U]| A5 RND| A6 IK$| A7 PI |
 1159+03B5              ;  | A8 FN | A9 PNT| AA SC$| AB ATT| AC AT | AD TAB| AE VL$| AF COD|
 1160+03B5              ;  | B0 VAL| B1 LEN| B2 SIN| B3 COS| B4 TAN| B5 ASN| B6 ACS| B7 ATN|
 1161+03B5              ;  | B8 LN | B9 EXP| BA INT| BB SQR| BC SGN| BD ABS| BE PEK| BF IN |
 1162+03B5              ;  | C0 USR| C1 ST$| C2 CH$| C3 NOT| C4 BIN| C5 OR | C6 AND| C7 <= |
 1163+03B5              ;  | C8 >= | C9 <> | CA LIN| CB THN| CC TO | CD STP| CE DEF| CF CAT|
 1164+03B5              ;  | D0 FMT| D1 MOV| D2 ERS| D3 OPN| D4 CLO| D5 MRG| D6 VFY| D7 BEP|
 1165+03B5              ;  | D8 CIR| D9 INK| DA PAP| DB FLA| DC BRI| DD INV| DE OVR| DF OUT|
 1166+03B5              ;  | E0 LPR| E1 LLI| E2 STP| E3 REA| E4 DAT| E5 RES| E6 NEW| E7 BDR|
 1167+03B5              ;  | E8 CON| E9 DIM| EA REM| EB FOR| EC GTO| ED GSB| EE INP| EF LOA|
 1168+03B5              ;  | F0 LIS| F1 LET| F2 PAU| F3 NXT| F4 POK| F5 PRI| F6 PLO| F7 RUN|
 1169+03B5              ;  | F8 SAV| F9 RAN| FA IF | FB CLS| FC DRW| FD CLR| FE RET| FF CPY|
 1170+03B5
 1171+03B5              ;   Note that for simplicity, Sinclair have located all the control codes
 1172+03B5              ;   below the space character.
 1173+03B5              ;   ASCII DEL, $7F, has been made a copyright symbol.
 1174+03B5              ;   Also $60, '`', not used in BASIC but used in other languages, has been
 1175+03B5              ;   allocated the local currency symbol for the relevant country -
 1176+03B5              ;    £  in most Spectrums.
 1177+03B5
 1178+03B5              ; ------------------------------------------------------------------------
 1179+03B5
 1180+03B5
 1181+03B5              ;**********************************
 1182+03B5              ;** Part 3. LOUDSPEAKER ROUTINES **
 1183+03B5              ;**********************************
 1184+03B5
 1185+03B5              ; Documented by Alvin Albrecht.
 1186+03B5
 1187+03B5              ; ------------------------------
 1188+03B5              ; Routine to control loudspeaker
 1189+03B5              ; ------------------------------
 1190+03B5              ; Outputs a square wave of given duration and frequency
 1191+03B5              ; to the loudspeaker.
 1192+03B5              ;   Enter with: DE = #cycles - 1
 1193+03B5              ;               HL = tone period as described next
 1194+03B5              ;
 1195+03B5              ; The tone period is measured in T states and consists of
 1196+03B5              ; three parts: a coarse part (H register), a medium part
 1197+03B5              ; (bits 7..2 of L) and a fine part (bits 1..0 of L) which
 1198+03B5              ; contribute to the waveform timing as follows:
 1199+03B5              ;
 1200+03B5              ;                          coarse    medium       fine
 1201+03B5              ; duration of low  = 118 + 1024*H + 16*(L>>2) + 4*(L&0x3)
 1202+03B5              ; duration of hi   = 118 + 1024*H + 16*(L>>2) + 4*(L&0x3)
 1203+03B5              ; Tp = tone period = 236 + 2048*H + 32*(L>>2) + 8*(L&0x3)
 1204+03B5              ;                  = 236 + 2048*H + 8*L = 236 + 8*HL
 1205+03B5              ;
 1206+03B5              ; As an example, to output five seconds of middle C (261.624 Hz):
 1207+03B5              ;   (a) Tone period = 1/261.624 = 3.822ms
 1208+03B5              ;   (b) Tone period in T-States = 3.822ms*fCPU = 13378
 1209+03B5              ;         where fCPU = clock frequency of the CPU = 3.5MHz
 1210+03B5              ;    ©  Find H and L for desired tone period:
 1211+03B5              ;         HL = (Tp - 236) / 8 = (13378 - 236) / 8 = 1643 = 0x066B
 1212+03B5              ;   (d) Tone duration in cycles = 5s/3.822ms = 1308 cycles
 1213+03B5              ;         DE = 1308 - 1 = 0x051B
 1214+03B5              ;
 1215+03B5              ; The resulting waveform has a duty ratio of exactly 50%.
 1216+03B5              ;
 1217+03B5              ;
 1218+03B5              ;; BEEPER
 1219+03B5 F3           o03B5:		DI
 1220+03B6 7D           		LD	A,L		;
 1221+03B7 CB 3D        		SRL	L		;
 1222+03B9 CB 3D        		SRL	L		; L = medium part of tone period
 1223+03BB 2F           		CPL			;
 1224+03BC E6 03        		AND	$03		; A = 3 - fine part of tone period
 1225+03BE 4F           		LD	C,A		;
 1226+03BF 06 00        		LD	B,$00		;
 1227+03C1 DD 21 D1 03  		LD	IX,o03D1	; Address: BE-IX+3
 1228+03C5 DD 09        		ADD	IX,BC		;   IX holds address of entry into the loop
 1229+03C7              					;   the loop will contain 0-3 NOPs, implementing
 1230+03C7              					;   the fine part of the tone period.
 1231+03C7 3A 48 5C     		LD	A,(	$5C48)	; BORDCR
 1232+03CA E6 38        		AND	$38		; bits 5..3 contain border colour
 1233+03CC 0F           		RRCA			; border colour bits moved to 2..0
 1234+03CD 0F           		RRCA			;   to match border bits on port #FE
 1235+03CE 0F           		RRCA			;
 1236+03CF F6 08        		OR	$08		; bit 3 set (tape output bit on port #FE)
 1237+03D1              					;   for loud sound output
 1238+03D1              					;; BE-IX+3
 1239+03D1 00           o03D1:		NOP
 1240+03D2              					;   adjustments to tone period
 1241+03D2              					;; BE-IX+2
 1242+03D2 00           o03D2:		NOP
 1243+03D3
 1244+03D3              ;; BE-IX+1
 1245+03D3 00           o03D3:		NOP
 1246+03D4
 1247+03D4              ;; BE-IX+0
 1248+03D4 04           o03D4:		INC	B		; (4)   ;
 1249+03D5 0C           		INC	C		; (4)   ;
 1250+03D6
 1251+03D6              ;; BE-H&L-LP
 1252+03D6 0D           o03D6:		DEC	C		; (4)   ; timing loop for duration of
 1253+03D7 20 FD        		JR	NZ,o03D6	; (12/7);   high or low pulse of waveform
 1254+03D9
 1255+03D9 0E 3F        		LD	C,$3F		; (7)   ;
 1256+03DB 05           		DEC	B		; (4)   ;
 1257+03DC C2 D6 03     		JP	NZ,o03D6	; (10)  ; to BE-H&L-LP
 1258+03DF
 1259+03DF EE 10        		XOR	$10		; (7)   ; toggle output beep bit
 1260+03E1 D3 FE        		OUT	($FE),A		; (11)  ; output pulse
 1261+03E3 44           		LD	B,H		; (4)   ; B = coarse part of tone period
 1262+03E4 4F           		LD	C,A		; (4)   ; save port #FE output byte
 1263+03E5 CB 67        		BIT	4,A		; (8)   ; if new output bit is high, go
 1264+03E7 20 09        		JR	NZ,o03F2	; (12/7);   to BE-AGAIN
 1265+03E9
 1266+03E9 7A           		LD	A,D		; (4)   ; one cycle of waveform has completed
 1267+03EA B3           		OR	E		; (4)   ;   (low->low). if cycle countdown = 0
 1268+03EB 28 09        		JR	Z,o03F6		; (12/7);   go to BE-END
 1269+03ED
 1270+03ED 79           		LD	A,C		; (4)   ; restore output byte for port #FE
 1271+03EE 4D           		LD	C,L		; (4)   ; C = medium part of tone period
 1272+03EF 1B           		DEC	DE		; (6)   ; decrement cycle count
 1273+03F0 DD E9        		JP	(IX)		; (8)   ; do another cycle
 1274+03F2
 1275+03F2              ;; BE-AGAIN                     ; halfway through cycle
 1276+03F2 4D           o03F2:		LD	C,L		; (4)   ; C = medium part of tone period
 1277+03F3 0C           		INC	C		; (4)   ; adds 16 cycles to make duration of high = duration of low
 1278+03F4 DD E9        		JP	(IX)		; (8)   ; do high pulse of tone
 1279+03F6
 1280+03F6              ;; BE-END
 1281+03F6 FB           o03F6:		EI
 1282+03F7 C9           		RET			;
 1283+03F8
 1284+03F8
 1285+03F8              ; ------------------
 1286+03F8              ; THE 'BEEP' COMMAND
 1287+03F8              ; ------------------
 1288+03F8              ; BASIC interface to BEEPER subroutine.
 1289+03F8              ; Invoked in BASIC with:
 1290+03F8              ;   BEEP dur, pitch
 1291+03F8              ;   where dur   = duration in seconds
 1292+03F8              ;         pitch = # of semitones above/below middle C
 1293+03F8              ;
 1294+03F8              ; Enter with: pitch on top of calculator stack
 1295+03F8              ;             duration next on calculator stack
 1296+03F8              ;
 1297+03F8              ;; beep
 1298+03F8 EF           o03F8:		RST	28H		; FP-CALC
 1299+03F9 31           		DB	$31		; duplicate                  ; duplicate pitch
 1300+03FA 27           		DB	$27		; int                        ; convert to integer
 1301+03FB C0           		DB	$C0		; st-mem-0                   ; store integer pitch to memory 0
 1302+03FC 03           		DB	$03		; subtract                   ; calculate fractional part of pitch = fp_pitch - int_pitch
 1303+03FD 34           		DB	$34		; stk-data                   ; push constant
 1304+03FE EC           		DB	$EC		; Exponent: $7C, Bytes: 4    ; constant = 0.05762265
 1305+03FF 6C 98 1F F5  		DB	$6C,$98,$1F,$F5	; ($6C,$98,$1F,$F5)
 1306+0403 04           		DB	$04		; multiply                   ; compute:
 1307+0404 A1           		DB	$A1		; stk-one                    ; 1 + 0.05762265 * fraction_part(pitch)
 1308+0405 0F           		DB	$0F		; addition
 1309+0406 38           		DB	$38		; end-calc                   ; leave on calc stack
 1310+0407
 1311+0407 21 92 5C     		LD	HL,	$5C92	; MEM-0: number stored here is in 16 bit integer format (pitch)
 1312+040A              					;   0, 0/FF (pos/neg), LSB, MSB, 0
 1313+040A              					;   LSB/MSB is stored in two's complement
 1314+040A              					; In the following, the pitch is checked if it is in the range -128<=p<=127
 1315+040A 7E           		LD	A,(HL)		; First byte must be zero, otherwise
 1316+040B A7           		AND	A		;   error in integer conversion
 1317+040C 20 5E        		JR	NZ,o046C	; to REPORT-B
 1318+040E
 1319+040E 23           		INC	HL		;
 1320+040F 4E           		LD	C,(HL)		; C = pos/neg flag = 0/FF
 1321+0410 23           		INC	HL		;
 1322+0411 46           		LD	B,(HL)		; B = LSB, two's complement
 1323+0412 78           		LD	A,B		;
 1324+0413 17           		RLA			;
 1325+0414 9F           		SBC	A,A		; A = 0/FF if B is pos/neg
 1326+0415 B9           		CP	C		; must be the same as C if the pitch is -128<=p<=127
 1327+0416 20 54        		JR	NZ,o046C	; if no, error REPORT-B
 1328+0418
 1329+0418 23           		INC	HL		; if -128<=p<=127, MSB will be 0/FF if B is pos/neg
 1330+0419 BE           		CP	(HL)		; verify this
 1331+041A 20 50        		JR	NZ,o046C	; if no, error REPORT-B
 1332+041C              					; now we know -128<=p<=127
 1333+041C 78           		LD	A,B		; A = pitch + 60
 1334+041D C6 3C        		ADD	A,$3C		; if -60<=pitch<=67,
 1335+041F F2 25 04     		JP	P,o0425		;   goto BE-i-OK
 1336+0422
 1337+0422 E2 6C 04     		JP	PO,o046C	; if pitch <= 67 goto REPORT-B
 1338+0425              					;   lower bound of pitch set at -60
 1339+0425
 1340+0425              ;; BE-I-OK                      ; here, -60<=pitch<=127
 1341+0425              ; and A=pitch+60 -> 0<=A<=187
 1342+0425
 1343+0425 06 FA        o0425:		LD	B,$FA		; 6 octaves below middle C
 1344+0427
 1345+0427              ;; BE-OCTAVE                    ; A=# semitones above 5 octaves below middle C
 1346+0427 04           o0427:		INC	B		; increment octave
 1347+0428 D6 0C        		SUB	$0C		; 12 semitones = one octave
 1348+042A 30 FB        		JR	NC,o0427	; to BE-OCTAVE
 1349+042C
 1350+042C C6 0C        		ADD	A,$0C		; A = # semitones above C (0-11)
 1351+042E C5           		PUSH	BC		; B = octave displacement from middle C, 2's complement: -5<=B<=10
 1352+042F 21 6E 04     		LD	HL,o046E	; Address: semi-tone
 1353+0432 CD 06 34     		CALL	o3406		; routine LOC-MEM
 1354+0435              					;   HL = 5*A + $046E
 1355+0435 CD B4 33     		CALL	o33B4		; routine STACK-NUM
 1356+0438              					;   read FP value (freq) from semitone table (HL) and push onto calc stack
 1357+0438
 1358+0438 EF           		RST	28H		; FP-CALC
 1359+0439 04           		DB	$04		; multiply   mult freq by 1 + 0.0576 * fraction_part(pitch) stacked earlier
 1360+043A              					;;             thus taking into account fractional part of pitch.
 1361+043A              					;;           the number 0.0576*frequency is the distance in Hz to the next
 1362+043A              					;;             note (verify with the frequencies recorded in the semitone
 1363+043A              					;;             table below) so that the fraction_part of the pitch does
 1364+043A              					;;             indeed represent a fractional distance to the next note.
 1365+043A 38           		DB	$38		; end-calc   HL points to first byte of fp num on stack = middle frequency to generate
 1366+043B
 1367+043B F1           		POP	AF		; A = octave displacement from middle C, 2's complement: -5<=A<=10
 1368+043C 86           		ADD	A,(HL)		; increase exponent by A (equivalent to multiplying by 2^A)
 1369+043D 77           		LD	(HL),A		;
 1370+043E
 1371+043E EF           		RST	28H		; FP-CALC
 1372+043F C0           		DB	$C0		; st-mem-0          ; store frequency in memory 0
 1373+0440 02           		DB	$02		; delete            ; remove from calc stack
 1374+0441 31           		DB	$31		; duplicate         ; duplicate duration (seconds)
 1375+0442 38           		DB	$38		; end-calc
 1376+0443
 1377+0443 CD 94 1E     		CALL	o1E94		; routine FIND-INT1 ; FP duration to A
 1378+0446 FE 0B        		CP	$0B		; if dur > 10 seconds,
 1379+0448 30 22        		JR	NC,o046C	;   goto REPORT-B
 1380+044A
 1381+044A              ;;; The following calculation finds the tone period for HL and the cycle count
 1382+044A              ;;; for DE expected in the BEEPER subroutine.  From the example in the BEEPER comments,
 1383+044A              ;;;
 1384+044A              ;;; HL = ((fCPU / f) - 236) / 8 = fCPU/8/f - 236/8 = 437500/f -29.5
 1385+044A              ;;; DE = duration * frequency - 1
 1386+044A              ;;;
 1387+044A              ;;; Note the different constant (30.125) used in the calculation of HL
 1388+044A              ;;; below.  This is probably an error.
 1389+044A
 1390+044A EF           		RST	28H		; FP-CALC
 1391+044B E0           		DB	$E0		; get-mem-0                 ; push frequency
 1392+044C 04           		DB	$04		; multiply                  ; result1: #cycles = duration * frequency
 1393+044D E0           		DB	$E0		; get-mem-0                 ; push frequency
 1394+044E 34           		DB	$34		; stk-data                  ; push constant
 1395+044F 80           		DB	$80		; Exponent $93, Bytes: 3    ; constant = 437500
 1396+0450 43 55 9F 80  		DB	$43,$55,$9F,$80	; ($55,$9F,$80,$00)
 1397+0454 01           		DB	$01		; exchange                  ; frequency on top
 1398+0455 05           		DB	$05		; division                  ; 437500 / frequency
 1399+0456 34           		DB	$34		; stk-data                  ; push constant
 1400+0457 35           		DB	$35		; Exponent: $85, Bytes: 1   ; constant = 30.125
 1401+0458 71           		DB	$71		; ($71,$00,$00,$00)
 1402+0459 03           		DB	$03		; subtract                  ; result2: tone_period(HL) = 437500 / freq - 30.125
 1403+045A 38           		DB	$38		; end-calc
 1404+045B
 1405+045B CD 99 1E     		CALL	o1E99		; routine FIND-INT2
 1406+045E C5           		PUSH	BC		;   BC = tone_period(HL)
 1407+045F CD 99 1E     		CALL	o1E99		; routine FIND-INT2, BC = #cycles to generate
 1408+0462 E1           		POP	HL		; HL = tone period
 1409+0463 50           		LD	D,B		;
 1410+0464 59           		LD	E,C		; DE = #cycles
 1411+0465 7A           		LD	A,D		;
 1412+0466 B3           		OR	E		;
 1413+0467 C8           		RET	Z		; if duration = 0, skip BEEP and avoid 65536 cycle
 1414+0468              					;   boondoggle that would occur next
 1415+0468 1B           		DEC	DE		; DE = #cycles - 1
 1416+0469 C3 B5 03     		JP	o03B5		; to BEEPER
 1417+046C
 1418+046C              ; ---
 1419+046C
 1420+046C
 1421+046C              ;; REPORT-B
 1422+046C CF           o046C:		RST	08H		; ERROR-1
 1423+046D 0A           		DB	$0A		; Error Report: Integer out of range
 1424+046E
 1425+046E
 1426+046E
 1427+046E              ; ---------------------
 1428+046E              ; THE 'SEMI-TONE' TABLE
 1429+046E              ; ---------------------
 1430+046E              ;
 1431+046E              ;   Holds frequencies corresponding to semitones in middle octave.
 1432+046E              ;   To move n octaves higher or lower, frequencies are multiplied by 2^n.
 1433+046E
 1434+046E              ;; semi-tone         five byte fp         decimal freq     note (middle)
 1435+046E 89 02 D0 12  o046E:		DB	$89,$02,$D0,$12,$86	;  261.625565290         C
 1435+0472 86
 1436+0473 89 0A 97 60  		DB	$89,$0A,$97,$60,$75	;  277.182631135         C#
 1436+0477 75
 1437+0478 89 12 D5 17  		DB	$89,$12,$D5,$17,$1F	;  293.664768100         D
 1437+047C 1F
 1438+047D 89 1B 90 41  		DB	$89,$1B,$90,$41,$02	;  311.126983881         D#
 1438+0481 02
 1439+0482 89 24 D0 53  		DB	$89,$24,$D0,$53,$CA	;  329.627557039         E
 1439+0486 CA
 1440+0487 89 2E 9D 36  		DB	$89,$2E,$9D,$36,$B1	;  349.228231549         F
 1440+048B B1
 1441+048C 89 38 FF 49  		DB	$89,$38,$FF,$49,$3E	;  369.994422674         F#
 1441+0490 3E
 1442+0491 89 43 FF 6A  		DB	$89,$43,$FF,$6A,$73	;  391.995436072         G
 1442+0495 73
 1443+0496 89 4F A7 00  		DB	$89,$4F,$A7,$00,$54	;  415.304697513         G#
 1443+049A 54
 1444+049B 89 5C 00 00  		DB	$89,$5C,$00,$00,$00	;  440.000000000         A
 1444+049F 00
 1445+04A0 89 69 14 F6  		DB	$89,$69,$14,$F6,$24	;  466.163761616         A#
 1445+04A4 24
 1446+04A5 89 76 F1 10  		DB	$89,$76,$F1,$10,$05	;  493.883301378         B
 1446+04A9 05
 1447+04AA
 1448+04AA
 1449+04AA              ;   "Music is the hidden mathematical endeavour of a soul unconscious it
 1450+04AA              ;    is calculating" - Gottfried Wilhelm Liebnitz 1646 - 1716
 1451+04AA
 1452+04AA
 1453+04AA              ;****************************************
 1454+04AA              ;** Part 4. CASSETTE HANDLING ROUTINES **
 1455+04AA              ;****************************************
 1456+04AA
 1457+04AA              ;   These routines begin with the service routines followed by a single
 1458+04AA              ;   command entry point.
 1459+04AA              ;   The first of these service routines is a curiosity.
 1460+04AA
 1461+04AA              ; -----------------------
 1462+04AA              ; THE 'ZX81 NAME' ROUTINE
 1463+04AA              ; -----------------------
 1464+04AA              ;   This routine fetches a filename in ZX81 format and is not used by the
 1465+04AA              ;   cassette handling routines in this ROM.
 1466+04AA
 1467+04AA              ;; zx81-name
 1468+04AA
 1469+04AA CD FB 24     o04AA:		CALL	o24FB		; routine SCANNING to evaluate expression.
 1470+04AD 3A 3B 5C     		LD	A,(	$5C3B)	; fetch system variable FLAGS.
 1471+04B0 87           		ADD	A,A		; test bit 7 - syntax, bit 6 - result type.
 1472+04B1 FA 8A 1C     		JP	M,o1C8A		; to REPORT-C if not string result
 1473+04B4              					; 'Nonsense in BASIC'.
 1474+04B4
 1475+04B4 E1           		POP	HL		; drop return address.
 1476+04B5 D0           		RET	NC		; return early if checking syntax.
 1477+04B6
 1478+04B6 E5           		PUSH	HL		; re-save return address.
 1479+04B7 CD F1 2B     		CALL	o2BF1		; routine STK-FETCH fetches string parameters.
 1480+04BA 62           		LD	H,D		; transfer start of filename
 1481+04BB 6B           		LD	L,E		; to the HL register.
 1482+04BC 0D           		DEC	C		; adjust to point to last character and
 1483+04BD F8           		RET	M		; return if the null string.
 1484+04BE              					; or multiple of 256!
 1485+04BE
 1486+04BE 09           		ADD	HL,BC		; find last character of the filename.
 1487+04BF              					; and also clear carry.
 1488+04BF CB FE        		SET	7,(HL)		; invert it.
 1489+04C1 C9           		RET			; return.
 1490+04C2
 1491+04C2              ; =========================================
 1492+04C2              ;
 1493+04C2              ; PORT 254 ($FE)
 1494+04C2              ;
 1495+04C2              ;                      spk mic { border  }
 1496+04C2              ;          ___ ___ ___ ___ ___ ___ ___ ___
 1497+04C2              ; PORT    |   |   |   |   |   |   |   |   |
 1498+04C2              ; 254     |   |   |   |   |   |   |   |   |
 1499+04C2              ; $FE     |___|___|___|___|___|___|___|___|
 1500+04C2              ;           7   6   5   4   3   2   1   0
 1501+04C2              ;
 1502+04C2
 1503+04C2              ; ----------------------------------
 1504+04C2              ; Save header and program/data bytes
 1505+04C2              ; ----------------------------------
 1506+04C2              ;   This routine saves a section of data. It is called from SA-CTRL to save the
 1507+04C2              ;   seventeen bytes of header data. It is also the exit route from that routine
 1508+04C2              ;   when it is set up to save the actual data.
 1509+04C2              ;   On entry -
 1510+04C2              ;   HL points to start of data.
 1511+04C2              ;   IX points to descriptor.
 1512+04C2              ;   The accumulator is set to  $00 for a header, $FF for data.
 1513+04C2
 1514+04C2              ;; SA-BYTES
 1515+04C2 21 3F 05     o04C2:		LD	HL,o053F	; address: SA/LD-RET
 1516+04C5 E5           		PUSH	HL		; is pushed as common exit route.
 1517+04C6              					; however there is only one non-terminal exit
 1518+04C6              					; point.
 1519+04C6
 1520+04C6 21 80 1F     		LD	HL,$1F80	; a timing constant H=$1F, L=$80
 1521+04C9              					; inner and outer loop counters
 1522+04C9              					; a five second lead-in is used for a header.
 1523+04C9
 1524+04C9 CB 7F        		BIT	7,A		; test one bit of accumulator.
 1525+04CB              					; (AND A ?)
 1526+04CB 28 03        		JR	Z,o04D0		; skip to SA-FLAG if a header is being saved.
 1527+04CD
 1528+04CD              ;   else is data bytes and a shorter lead-in is used.
 1529+04CD
 1530+04CD 21 98 0C     		LD	HL,$0C98	; another timing value H=$0C, L=$98.
 1531+04D0              					; a two second lead-in is used for the data.
 1532+04D0
 1533+04D0              ;; SA-FLAG
 1534+04D0 08           o04D0:		EX	AF,AF'		; save flag
 1535+04D1 13           		INC	DE		; increase length by one.
 1536+04D2 DD 2B        		DEC	IX		; decrease start.
 1537+04D4
 1538+04D4 F3           		DI			; disable interrupts
 1539+04D5
 1540+04D5 3E 02        		LD	A,$02		; select red for border, microphone bit on.
 1541+04D7 47           		LD	B,A		; also does as an initial slight counter value.
 1542+04D8
 1543+04D8              ;; SA-oEADER
 1544+04D8 10 FE        o04D8:		DJNZ	o04D8		; self loop to SA-oEADER for delay.
 1545+04DA              					; after initial loop, count is $A4 (or $A3)
 1546+04DA
 1547+04DA D3 FE        		OUT	($FE),A		; output byte $02/$0D to tape port.
 1548+04DC
 1549+04DC EE 0F        		XOR	$0F		; switch from RED (mic on) to CYAN (mic off).
 1550+04DE
 1551+04DE 06 A4        		LD	B,$A4		; hold count. also timed instruction.
 1552+04E0
 1553+04E0 2D           		DEC	L		; originally $80 or $98.
 1554+04E1              					; but subsequently cycles 256 times.
 1555+04E1 20 F5        		JR	NZ,o04D8	; back to SA-oEADER until L is zero.
 1556+04E3
 1557+04E3              ;   the outer loop is counted by H
 1558+04E3
 1559+04E3 05           		DEC	B		; decrement count
 1560+04E4 25           		DEC	H		; originally  twelve or thirty-one.
 1561+04E5 F2 D8 04     		JP	P,o04D8		; back to SA-oEADER until H becomes $FF
 1562+04E8
 1563+04E8              ;   now send a sync pulse. At this stage mic is off and A holds value
 1564+04E8              ;   for mic on.
 1565+04E8              ;   A sync pulse is much shorter than the steady pulses of the lead-in.
 1566+04E8
 1567+04E8 06 2F        		LD	B,$2F		; another short timed delay.
 1568+04EA
 1569+04EA              ;; SA-SYNC-1
 1570+04EA 10 FE        o04EA:		DJNZ	o04EA		; self loop to SA-SYNC-1
 1571+04EC
 1572+04EC D3 FE        		OUT	($FE),A		; switch to mic on and red.
 1573+04EE 3E 0D        		LD	A,$0D		; prepare mic off - cyan
 1574+04F0 06 37        		LD	B,$37		; another short timed delay.
 1575+04F2
 1576+04F2              ;; SA-SYNC-2
 1577+04F2 10 FE        o04F2:		DJNZ	o04F2		; self loop to SA-SYNC-2
 1578+04F4
 1579+04F4 D3 FE        		OUT	($FE),A		; output mic off, cyan border.
 1580+04F6 01 0E 3B     		LD	BC,$3B0E	; B=$3B time(*), C=$0E, YELLOW, MIC OFF.
 1581+04F9
 1582+04F9              ;
 1583+04F9
 1584+04F9 08           		EX	AF,AF'		; restore saved flag
 1585+04FA              					; which is 1st byte to be saved.
 1586+04FA
 1587+04FA 6F           		LD	L,A		; and transfer to L.
 1588+04FB              					; the initial parity is A, $FF or $00.
 1589+04FB C3 07 05     		JP	o0507		; JUMP forward to SA-START     ->
 1590+04FE              					; the mid entry point of loop.
 1591+04FE
 1592+04FE              ; -------------------------
 1593+04FE              ;   During the save loop a parity byte is maintained in H.
 1594+04FE              ;   the save loop begins by testing if reduced length is zero and if so
 1595+04FE              ;   the final parity byte is saved reducing count to $FFFF.
 1596+04FE
 1597+04FE              ;; SA-LOOP
 1598+04FE 7A           o04FE:		LD	A,D		; fetch high byte
 1599+04FF B3           		OR	E		; test against low byte.
 1600+0500 28 0C        		JR	Z,o050E		; forward to SA-PARITY if zero.
 1601+0502
 1602+0502 DD 6E 00     		LD	L,(IX+$00)	; load currently addressed byte to L.
 1603+0505
 1604+0505              ;; SA-LOOP-P
 1605+0505 7C           o0505:		LD	A,H		; fetch parity byte.
 1606+0506 AD           		XOR	L		; exclusive or with new byte.
 1607+0507
 1608+0507              ; -> the mid entry point of loop.
 1609+0507
 1610+0507              ;; SA-START
 1611+0507 67           o0507:		LD	H,A		; put parity byte in H.
 1612+0508 3E 01        		LD	A,$01		; prepare blue, mic=on.
 1613+050A 37           		SCF			; set carry flag ready to rotate in.
 1614+050B C3 25 05     		JP	o0525		; JUMP forward to SA-8-BITS            -8->
 1615+050E
 1616+050E              ; ---
 1617+050E
 1618+050E              ;; SA-PARITY
 1619+050E 6C           o050E:		LD	L,H		; transfer the running parity byte to L and
 1620+050F 18 F4        		JR	o0505		; back to SA-LOOP-P
 1621+0511              					; to output that byte before quitting normally.
 1622+0511
 1623+0511              ; ---
 1624+0511
 1625+0511              ;   The entry point to save yellow part of bit.
 1626+0511              ;   A bit consists of a period with mic on and blue border followed by
 1627+0511              ;   a period of mic off with yellow border.
 1628+0511              ;   Note. since the DJNZ instruction does not affect flags, the zero flag is
 1629+0511              ;   used to indicate which of the two passes is in effect and the carry
 1630+0511              ;   maintains the state of the bit to be saved.
 1631+0511
 1632+0511              ;; SA-BIT-2
 1633+0511 79           o0511:		LD	A,C		; fetch 'mic on and yellow' which is
 1634+0512              					; held permanently in C.
 1635+0512 CB 78        		BIT	7,B		; set the zero flag. B holds $3E.
 1636+0514
 1637+0514              ;   The entry point to save 1 entire bit. For first bit B holds $3B(*).
 1638+0514              ;   Carry is set if saved bit is 1. zero is reset NZ on entry.
 1639+0514
 1640+0514              ;; SA-BIT-1
 1641+0514 10 FE        o0514:		DJNZ	o0514		; self loop for delay to SA-BIT-1
 1642+0516
 1643+0516 30 04        		JR	NC,o051C	; forward to SA-OUT if bit is 0.
 1644+0518
 1645+0518              ;   but if bit is 1 then the mic state is held for longer.
 1646+0518
 1647+0518 06 42        		LD	B,$42		; set timed delay. (66 decimal)
 1648+051A
 1649+051A              ;; SA-SET
 1650+051A 10 FE        o051A:		DJNZ	o051A		; self loop to SA-SET
 1651+051C              					; (roughly an extra 66*13 clock cycles)
 1652+051C
 1653+051C              ;; SA-OUT
 1654+051C D3 FE        o051C:		OUT	($FE),A		; blue and mic on OR  yellow and mic off.
 1655+051E
 1656+051E 06 3E        		LD	B,$3E		; set up delay
 1657+0520 20 EF        		JR	NZ,o0511	; back to SA-BIT-2 if zero reset NZ (first pass)
 1658+0522
 1659+0522              ;   proceed when the blue and yellow bands have been output.
 1660+0522
 1661+0522 05           		DEC	B		; change value $3E to $3D.
 1662+0523 AF           		XOR	A		; clear carry flag (ready to rotate in).
 1663+0524 3C           		INC	A		; reset zero flag i.e. NZ.
 1664+0525
 1665+0525              ; -8->
 1666+0525
 1667+0525              ;; SA-8-BITS
 1668+0525 CB 15        o0525:		RL	L		; rotate left through carry
 1669+0527              					; C<76543210<C
 1670+0527 C2 14 05     		JP	NZ,o0514	; JUMP back to SA-BIT-1
 1671+052A              					; until all 8 bits done.
 1672+052A
 1673+052A              ;   when the initial set carry is passed out again then a byte is complete.
 1674+052A
 1675+052A 1B           		DEC	DE		; decrease length
 1676+052B DD 23        		INC	IX		; increase byte pointer
 1677+052D 06 31        		LD	B,$31		; set up timing.
 1678+052F
 1679+052F 3E 7F        		LD	A,$7F		; test the space key and
 1680+0531 DB FE        		IN	A,($FE)		; return to common exit (to restore border)
 1681+0533 1F           		RRA			; if a space is pressed
 1682+0534 D0           		RET	NC		; return to SA/LD-RET.   - - >
 1683+0535
 1684+0535              ;   now test if byte counter has reached $FFFF.
 1685+0535
 1686+0535 7A           		LD	A,D		; fetch high byte
 1687+0536 3C           		INC	A		; increment.
 1688+0537 C2 FE 04     		JP	NZ,o04FE	; JUMP to SA-LOOP if more bytes.
 1689+053A
 1690+053A 06 3B        		LD	B,$3B		; a final delay.
 1691+053C
 1692+053C              ;; SA-DELAY
 1693+053C 10 FE        o053C:		DJNZ	o053C		; self loop to SA-DELAY
 1694+053E
 1695+053E C9           		RET			; return - - >
 1696+053F
 1697+053F              ; ------------------------------
 1698+053F              ; THE 'SAVE/LOAD RETURN' ROUTINE
 1699+053F              ; ------------------------------
 1700+053F              ;   The address of this routine is pushed on the stack prior to any load/save
 1701+053F              ;   operation and it handles normal completion with the restoration of the
 1702+053F              ;   border and also abnormal termination when the break key, or to be more
 1703+053F              ;   precise the space key is pressed during a tape operation.
 1704+053F              ;
 1705+053F              ; - - >
 1706+053F
 1707+053F              ;; SA/LD-RET
 1708+053F F5           o053F:		PUSH	AF		; preserve accumulator throughout.
 1709+0540 3A 48 5C     		LD	A,(	$5C48)	; fetch border colour from BORDCR.
 1710+0543 E6 38        		AND	$38		; mask off paper bits.
 1711+0545 0F           		RRCA			; rotate
 1712+0546 0F           		RRCA			; to the
 1713+0547 0F           		RRCA			; range 0-7.
 1714+0548
 1715+0548 D3 FE        		OUT	($FE),A		; change the border colour.
 1716+054A
 1717+054A 3E 7F        		LD	A,$7F		; read from port address $7FFE the
 1718+054C DB FE        		IN	A,($FE)		; row with the space key at outside.
 1719+054E
 1720+054E 1F           		RRA			; test for space key pressed.
 1721+054F FB           		EI			; enable interrupts
 1722+0550 38 02        		JR	C,o0554		; forward to SA/LD-END if not
 1723+0552
 1724+0552
 1725+0552              ;; REPORT-Da
 1726+0552 CF           o0552:		RST	08H		; ERROR-1
 1727+0553 0C           		DB	$0C		; Error Report: BREAK - CONT repeats
 1728+0554
 1729+0554              ; ---
 1730+0554
 1731+0554              ;; SA/LD-END
 1732+0554 F1           o0554:		POP	AF		; restore the accumulator.
 1733+0555 C9           		RET			; return.
 1734+0556
 1735+0556              ; ------------------------------------
 1736+0556              ; Load header or block of information
 1737+0556              ; ------------------------------------
 1738+0556              ;   This routine is used to load bytes and on entry A is set to $00 for a
 1739+0556              ;   header or to $FF for data.  IX points to the start of receiving location
 1740+0556              ;   and DE holds the length of bytes to be loaded. If, on entry the carry flag
 1741+0556              ;   is set then data is loaded, if reset then it is verified.
 1742+0556
 1743+0556              ;; LD-BYTES
 1744+0556 14           o0556:		INC	D		; reset the zero flag without disturbing carry.
 1745+0557 08           		EX	AF,AF'		; preserve entry flags.
 1746+0558 15           		DEC	D		; restore high byte of length.
 1747+0559
 1748+0559 F3           		DI			; disable interrupts
 1749+055A
 1750+055A 3E 0F        		LD	A,$0F		; make the border white and mic off.
 1751+055C D3 FE        		OUT	($FE),A		; output to port.
 1752+055E
 1753+055E 21 3F 05     		LD	HL,o053F	; Address: SA/LD-RET
 1754+0561 E5           		PUSH	HL		; is saved on stack as terminating routine.
 1755+0562
 1756+0562              ;   the reading of the EAR bit (D6) will always be preceded by a test of the
 1757+0562              ;   space key (D0), so store the initial post-test state.
 1758+0562
 1759+0562              ;IN      A,($FE)         ; read the ear state - bit 6.
 1760+0562              ;RRA                     ; rotate to bit 5.
 1761+0562 CD B5 38     		CALL	NEW_LOAD
 1762+0565
 1763+0565              CONT_LOAD:
 1764+0565 E6 20        		AND	$20		; isolate this bit.
 1765+0567 F6 02        		OR	$02		; combine with red border colour.
 1766+0569 4F           		LD	C,A		; and store initial state long-term in C.
 1767+056A BF           		CP	A		; set the zero flag.
 1768+056B
 1769+056B              ;
 1770+056B
 1771+056B              ;; LD-BREAK
 1772+056B C0           o056B:		RET	NZ		; return if at any time space is pressed.
 1773+056C
 1774+056C              ;; LD-START
 1775+056C CD E7 05     o056C:		CALL	o05E7		; routine LD-EDGE-1
 1776+056F 30 FA        		JR	NC,o056B	; back to LD-BREAK with time out and no
 1777+0571              					; edge present on tape.
 1778+0571
 1779+0571              ;   but continue when a transition is found on tape.
 1780+0571
 1781+0571 21 15 04     		LD	HL,$0415	; set up 16-bit outer loop counter for
 1782+0574              					; approx 1 second delay.
 1783+0574
 1784+0574              ;; LD-WAIT
 1785+0574 10 FE        o0574:		DJNZ	o0574		; self loop to LD-WAIT (for 256 times)
 1786+0576
 1787+0576 2B           		DEC	HL		; decrease outer loop counter.
 1788+0577 7C           		LD	A,H		; test for
 1789+0578 B5           		OR	L		; zero.
 1790+0579 20 F9        		JR	NZ,o0574	; back to LD-WAIT, if not zero, with zero in B.
 1791+057B
 1792+057B              ;   continue after delay with H holding zero and B also.
 1793+057B              ;   sample 256 edges to check that we are in the middle of a lead-in section.
 1794+057B
 1795+057B CD E3 05     		CALL	o05E3		; routine LD-EDGE-2
 1796+057E 30 EB        		JR	NC,o056B	; back to LD-BREAK
 1797+0580              					; if no edges at all.
 1798+0580
 1799+0580              ;; LD-oEADER
 1800+0580 06 9C        o0580:		LD	B,$9C		; two edges must be spaced apart.
 1801+0582 CD E3 05     		CALL	o05E3		; routine LD-EDGE-2
 1802+0585 30 E4        		JR	NC,o056B	; back to LD-BREAK if time-out
 1803+0587
 1804+0587 3E C6        		LD	A,$C6		; two edges must be spaced apart.
 1805+0589 B8           		CP	B		; compare
 1806+058A 30 E0        		JR	NC,o056C	; back to LD-START if too close together for a
 1807+058C              					; lead-in.
 1808+058C
 1809+058C 24           		INC	H		; proceed to test 256 edged sample.
 1810+058D 20 F1        		JR	NZ,o0580	; back to LD-oEADER while more to do.
 1811+058F
 1812+058F              ;   sample indicates we are in the middle of a two or five second lead-in.
 1813+058F              ;   Now test every edge looking for the terminal sync signal.
 1814+058F
 1815+058F              ;; LD-SYNC
 1816+058F 06 C9        o058F:		LD	B,$C9		; two edges must be spaced apart.
 1817+0591 CD E7 05     		CALL	o05E7		; routine LD-EDGE-1
 1818+0594 30 D5        		JR	NC,o056B	; back to LD-BREAK with time-out.
 1819+0596
 1820+0596 78           		LD	A,B		; fetch augmented timing value from B.
 1821+0597 FE D4        		CP	$D4		; compare
 1822+0599 30 F4        		JR	NC,o058F	; back to LD-SYNC if gap too big, that is,
 1823+059B              					; a normal lead-in edge gap.
 1824+059B
 1825+059B              ;   but a short gap will be the sync pulse.
 1826+059B              ;   in which case another edge should appear before B rises to $FF
 1827+059B
 1828+059B CD E7 05     		CALL	o05E7		; routine LD-EDGE-1
 1829+059E D0           		RET	NC		; return with time-out.
 1830+059F
 1831+059F              ; proceed when the sync at the end of the lead-in is found.
 1832+059F              ; We are about to load data so change the border colours.
 1833+059F
 1834+059F 79           		LD	A,C		; fetch long-term mask from C
 1835+05A0 EE 03        		XOR	$03		; and make blue/yellow.
 1836+05A2
 1837+05A2 4F           		LD	C,A		; store the new long-term byte.
 1838+05A3
 1839+05A3 26 00        		LD	H,$00		; set up parity byte as zero.
 1840+05A5 06 B0        		LD	B,$B0		; two edges must be spaced apart.
 1841+05A7 18 1F        		JR	o05C8		; forward to LD-MARKER
 1842+05A9              					; the loop mid entry point with the alternate
 1843+05A9              					; zero flag reset to indicate first byte
 1844+05A9              					; is discarded.
 1845+05A9
 1846+05A9              ; --------------
 1847+05A9              ;   the loading loop loads each byte and is entered at the mid point.
 1848+05A9
 1849+05A9              ;; LD-LOOP
 1850+05A9 08           o05A9:		EX	AF,AF'		; restore entry flags and type in A.
 1851+05AA 20 07        		JR	NZ,o05B3	; forward to LD-FLAG if awaiting initial flag
 1852+05AC              					; which is to be discarded.
 1853+05AC
 1854+05AC 30 0F        		JR	NC,o05BD	; forward to LD-VERIFY if not to be loaded.
 1855+05AE
 1856+05AE DD 75 00     		LD	(IX+$00),L	; place loaded byte at memory location.
 1857+05B1 18 0F        		JR	o05C2		; forward to LD-NEXT
 1858+05B3
 1859+05B3              ; ---
 1860+05B3
 1861+05B3              ;; LD-FLAG
 1862+05B3 CB 11        o05B3:		RL	C		; preserve carry (verify) flag in long-term
 1863+05B5              					; state byte. Bit 7 can be lost.
 1864+05B5
 1865+05B5 AD           		XOR	L		; compare type in A with first byte in L.
 1866+05B6 C0           		RET	NZ		; return if no match e.g. CODE vs. DATA.
 1867+05B7
 1868+05B7              ;   continue when data type matches.
 1869+05B7
 1870+05B7 79           		LD	A,C		; fetch byte with stored carry
 1871+05B8 1F           		RRA			; rotate it to carry flag again
 1872+05B9 4F           		LD	C,A		; restore long-term port state.
 1873+05BA
 1874+05BA 13           		INC	DE		; increment length ??
 1875+05BB 18 07        		JR	o05C4		; forward to LD-DEC.
 1876+05BD              					; but why not to location after ?
 1877+05BD
 1878+05BD              ; ---
 1879+05BD              ;   for verification the byte read from tape is compared with that in memory.
 1880+05BD
 1881+05BD              ;; LD-VERIFY
 1882+05BD DD 7E 00     o05BD:		LD	A,(IX+$00)	; fetch byte from memory.
 1883+05C0 AD           		XOR	L		; compare with that on tape
 1884+05C1 C0           		RET	NZ		; return if not zero.
 1885+05C2
 1886+05C2              ;; LD-NEXT
 1887+05C2 DD 23        o05C2:		INC	IX		; increment byte pointer.
 1888+05C4
 1889+05C4              ;; LD-DEC
 1890+05C4 1B           o05C4:		DEC	DE		; decrement length.
 1891+05C5 08           		EX	AF,AF'		; store the flags.
 1892+05C6 06 B2        		LD	B,$B2		; timing.
 1893+05C8
 1894+05C8              ;   when starting to read 8 bits the receiving byte is marked with bit at right.
 1895+05C8              ;   when this is rotated out again then 8 bits have been read.
 1896+05C8
 1897+05C8              ;; LD-MARKER
 1898+05C8 2E 01        o05C8:		LD	L,$01		; initialize as %00000001
 1899+05CA
 1900+05CA              ;; LD-8-BITS
 1901+05CA CD E3 05     o05CA:		CALL	o05E3		; routine LD-EDGE-2 increments B relative to
 1902+05CD              					; gap between 2 edges.
 1903+05CD D0           		RET	NC		; return with time-out.
 1904+05CE
 1905+05CE 3E CB        		LD	A,$CB		; the comparison byte.
 1906+05D0 B8           		CP	B		; compare to incremented value of B.
 1907+05D1              					; if B is higher then bit on tape was set.
 1908+05D1              					; if <= then bit on tape is reset.
 1909+05D1
 1910+05D1 CB 15        		RL	L		; rotate the carry bit into L.
 1911+05D3
 1912+05D3 06 B0        		LD	B,$B0		; reset the B timer byte.
 1913+05D5 D2 CA 05     		JP	NC,o05CA	; JUMP back to LD-8-BITS
 1914+05D8
 1915+05D8              ;   when carry set then marker bit has been passed out and byte is complete.
 1916+05D8
 1917+05D8 7C           		LD	A,H		; fetch the running parity byte.
 1918+05D9 AD           		XOR	L		; include the new byte.
 1919+05DA 67           		LD	H,A		; and store back in parity register.
 1920+05DB
 1921+05DB 7A           		LD	A,D		; check length of
 1922+05DC B3           		OR	E		; expected bytes.
 1923+05DD 20 CA        		JR	NZ,o05A9	; back to LD-LOOP
 1924+05DF              					; while there are more.
 1925+05DF
 1926+05DF              ;   when all bytes loaded then parity byte should be zero.
 1927+05DF
 1928+05DF 7C           		LD	A,H		; fetch parity byte.
 1929+05E0 FE 01        		CP	$01		; set carry if zero.
 1930+05E2 C9           		RET			; return
 1931+05E3              					; in no carry then error as checksum disagrees.
 1932+05E3
 1933+05E3              ; -------------------------
 1934+05E3              ; Check signal being loaded
 1935+05E3              ; -------------------------
 1936+05E3              ;   An edge is a transition from one mic state to another.
 1937+05E3              ;   More specifically a change in bit 6 of value input from port $FE.
 1938+05E3              ;   Graphically it is a change of border colour, say, blue to yellow.
 1939+05E3              ;   The first entry point looks for two adjacent edges. The second entry point
 1940+05E3              ;   is used to find a single edge.
 1941+05E3              ;   The B register holds a count, up to 256, within which the edge (or edges)
 1942+05E3              ;   must be found. The gap between two edges will be more for a "1" than a "0"
 1943+05E3              ;   so the value of B denotes the state of the bit (two edges) read from tape.
 1944+05E3
 1945+05E3              ; ->
 1946+05E3
 1947+05E3              ;; LD-EDGE-2
 1948+05E3 CD E7 05     o05E3:		CALL	o05E7		; call routine LD-EDGE-1 below.
 1949+05E6 D0           		RET	NC		; return if space pressed or time-out.
 1950+05E7              					; else continue and look for another adjacent
 1951+05E7              					; edge which together represent a bit on the
 1952+05E7              					; tape.
 1953+05E7
 1954+05E7              ; ->
 1955+05E7              ;   this entry point is used to find a single edge from above but also
 1956+05E7              ;   when detecting a read-in signal on the tape.
 1957+05E7
 1958+05E7              ;; LD-EDGE-1
 1959+05E7 3E 16        o05E7:		LD	A,$16		; a delay value of twenty two.
 1960+05E9
 1961+05E9              ;; LD-DELAY
 1962+05E9 3D           o05E9:		DEC	A		; decrement counter
 1963+05EA 20 FD        		JR	NZ,o05E9	; loop back to LD-DELAY 22 times.
 1964+05EC
 1965+05EC A7           		AND	A		; clear carry.
 1966+05ED
 1967+05ED              ;; LD-SAMPLE
 1968+05ED 04           o05ED:		INC	B		; increment the time-out counter.
 1969+05EE C8           		RET	Z		; return with failure when $FF passed.
 1970+05EF
 1971+05EF 3E 7F        		LD	A,$7F		; prepare to read keyboard and EAR port
 1972+05F1 DB FE        		IN	A,($FE)		; row $7FFE. bit 6 is EAR, bit 0 is SPACE key.
 1973+05F3 1F           		RRA			; test outer key the space. (bit 6 moves to 5)
 1974+05F4 D0           		RET	NC		; return if space pressed.  >>>
 1975+05F5
 1976+05F5 A9           		XOR	C		; compare with initial long-term state.
 1977+05F6 E6 20        		AND	$20		; isolate bit 5
 1978+05F8 28 F3        		JR	Z,o05ED		; back to LD-SAMPLE if no edge.
 1979+05FA
 1980+05FA              ;   but an edge, a transition of the EAR bit, has been found so switch the
 1981+05FA              ;   long-term comparison byte containing both border colour and EAR bit.
 1982+05FA
 1983+05FA 79           		LD	A,C		; fetch comparison value.
 1984+05FB 2F           		CPL			; switch the bits
 1985+05FC 4F           		LD	C,A		; and put back in C for long-term.
 1986+05FD
 1987+05FD E6 07        		AND	$07		; isolate new colour bits.
 1988+05FF F6 08        		OR	$08		; set bit 3 - MIC off.
 1989+0601 D3 FE        		OUT	($FE),A		; send to port to effect the change of colour.
 1990+0603
 1991+0603 37           		SCF			; set carry flag signaling edge found within
 1992+0604              					; time allowed.
 1993+0604 C9           		RET			; return.
 1994+0605
 1995+0605              ; ---------------------------------
 1996+0605              ; Entry point for all tape commands
 1997+0605              ; ---------------------------------
 1998+0605              ;   This is the single entry point for the four tape commands.
 1999+0605              ;   The routine first determines in what context it has been called by examining
 2000+0605              ;   the low byte of the Syntax table entry which was stored in T_ADDR.
 2001+0605              ;   Subtracting $EO (the present arrangement) gives a value of
 2002+0605              ;   $00 - SAVE
 2003+0605              ;   $01 - LOAD
 2004+0605              ;   $02 - VERIFY
 2005+0605              ;   $03 - MERGE
 2006+0605              ;   As with all commands the address STMT-RET is on the stack.
 2007+0605
 2008+0605              ;; SAVE-ETC
 2009+0605 F1           o0605:		POP	AF		; discard address STMT-RET.
 2010+0606 3A 74 5C     		LD	A,(	$5C74)	; fetch T_ADDR
 2011+0609
 2012+0609              ;   Now reduce the low byte of the Syntax table entry to give command.
 2013+0609              ;   Note. For ZASM use SUB $E0 as next instruction.
 2014+0609
 2015+0609 D6 E0        o0609:		SUB	(o1ADF+1) % 256	; subtract the known offset.
 2016+060B              					; ( is SUB $E0 in standard ROM )
 2017+060B
 2018+060B 32 74 5C     		LD	(	$5C74),A	; and put back in T_ADDR as 0,1,2, or 3
 2019+060E              					; for future reference.
 2020+060E
 2021+060E CD 8C 1C     		CALL	o1C8C		; routine EXPT-EXP checks that a string
 2022+0611              					; expression follows and stacks the
 2023+0611              					; parameters in run-time.
 2024+0611
 2025+0611 CD 30 25     		CALL	o2530		; routine SYNTAX-Z
 2026+0614 28 3C        		JR	Z,o0652		; forward to SA-DATA if checking syntax.
 2027+0616
 2028+0616 01 11 00     		LD	BC,$0011	; presume seventeen bytes for a header.
 2029+0619 3A 74 5C     		LD	A,(	$5C74)	; fetch command from T_ADDR.
 2030+061C A7           		AND	A		; test for zero - SAVE.
 2031+061D 28 02        		JR	Z,o0621		; forward to SA-SPACE if so.
 2032+061F
 2033+061F 0E 22        		LD	C,$22		; else double length to thirty four.
 2034+0621
 2035+0621              ;; SA-SPACE
 2036+0621 F7           o0621:		RST	30H		; BC-SPACES creates 17/34 bytes in workspace.
 2037+0622
 2038+0622 D5           		PUSH	DE		; transfer the start of new space to
 2039+0623 DD E1        		POP	IX		; the available index register.
 2040+0625
 2041+0625              ;   ten spaces are required for the default filename but it is simpler to
 2042+0625              ;   overwrite the first file-type indicator byte as well.
 2043+0625
 2044+0625 06 0B        		LD	B,$0B		; set counter to eleven.
 2045+0627 3E 20        		LD	A,$20		; prepare a space.
 2046+0629
 2047+0629              ;; SA-BLANK
 2048+0629 12           o0629:		LD	(DE),A		; set workspace location to space.
 2049+062A 13           		INC	DE		; next location.
 2050+062B 10 FC        		DJNZ	o0629		; loop back to SA-BLANK till all eleven done.
 2051+062D
 2052+062D DD 36 01 FF  		LD	(IX+$01),$FF	; set first byte of ten character filename
 2053+0631              					; to $FF as a default to signal null string.
 2054+0631
 2055+0631 CD F1 2B     		CALL	o2BF1		; routine STK-FETCH fetches the filename
 2056+0634              					; parameters from the calculator stack.
 2057+0634              					; length of string in BC.
 2058+0634              					; start of string in DE.
 2059+0634
 2060+0634 21 F6 FF     		LD	HL,$FFF6	; prepare the value minus ten.
 2061+0637 0B           		DEC	BC		; decrement length.
 2062+0638              					; ten becomes nine, zero becomes $FFFF.
 2063+0638 09           		ADD	HL,BC		; trial addition.
 2064+0639 03           		INC	BC		; restore true length.
 2065+063A 30 0F        		JR	NC,o064B	; forward to SA-NAME if length is one to ten.
 2066+063C
 2067+063C              ;   the filename is more than ten characters in length or the null string.
 2068+063C
 2069+063C 3A 74 5C     		LD	A,(	$5C74)	; fetch command from T_ADDR.
 2070+063F A7           		AND	A		; test for zero - SAVE.
 2071+0640 20 02        		JR	NZ,o0644	; forward to SA-NULL if not the SAVE command.
 2072+0642
 2073+0642              ;   but no more than ten characters are allowed for SAVE.
 2074+0642              ;   The first ten characters of any other command parameter are acceptable.
 2075+0642              ;   Weird, but necessary, if saving to sectors.
 2076+0642              ;   Note. the golden rule that there are no restriction on anything is broken.
 2077+0642
 2078+0642              ;; REPORT-Fa
 2079+0642 CF           o0642:		RST	08H		; ERROR-1
 2080+0643 0E           		DB	$0E		; Error Report: Invalid file name
 2081+0644
 2082+0644              ;   continue with LOAD, MERGE, VERIFY and also SAVE within ten character limit.
 2083+0644
 2084+0644              ;; SA-NULL
 2085+0644 78           o0644:		LD	A,B		; test length of filename
 2086+0645 B1           		OR	C		; for zero.
 2087+0646 28 0A        		JR	Z,o0652		; forward to SA-DATA if so using the 255
 2088+0648              					; indicator followed by spaces.
 2089+0648
 2090+0648 01 0A 00     		LD	BC,$000A	; else trim length to ten.
 2091+064B
 2092+064B              ;   other paths rejoin here with BC holding length in range 1 - 10.
 2093+064B
 2094+064B              ;; SA-NAME
 2095+064B DD E5        o064B:		PUSH	IX		; push start of file descriptor.
 2096+064D E1           		POP	HL		; and pop into HL.
 2097+064E
 2098+064E 23           		INC	HL		; HL now addresses first byte of filename.
 2099+064F EB           		EX	DE,HL		; transfer destination address to DE, start
 2100+0650              					; of string in command to HL.
 2101+0650 ED B0        		LDIR			; copy up to ten bytes
 2102+0652              					; if less than ten then trailing spaces follow.
 2103+0652
 2104+0652              ;   the case for the null string rejoins here.
 2105+0652
 2106+0652              ;; SA-DATA
 2107+0652 DF           o0652:		RST	18H		; GET-CHAR
 2108+0653 FE E4        		CP	$E4		; is character after filename the token 'DATA' ?
 2109+0655 20 49        		JR	NZ,o06A0	; forward to SA-SCR$ to consider SCREEN$ if
 2110+0657              					; not.
 2111+0657
 2112+0657              ;   continue to consider DATA.
 2113+0657
 2114+0657 3A 74 5C     		LD	A,(	$5C74)	; fetch command from T_ADDR
 2115+065A FE 03        		CP	$03		; is it 'VERIFY' ?
 2116+065C CA 8A 1C     		JP	Z,o1C8A		; jump forward to REPORT-C if so.
 2117+065F              					; 'Nonsense in BASIC'
 2118+065F              					; VERIFY "d" DATA is not allowed.
 2119+065F
 2120+065F              ;   continue with SAVE, LOAD, MERGE of DATA.
 2121+065F
 2122+065F E7           		RST	20H		; NEXT-CHAR
 2123+0660 CD B2 28     		CALL	o28B2		; routine LOOK-VARS searches variables area
 2124+0663              					; returning with carry reset if found or
 2125+0663              					; checking syntax.
 2126+0663 CB F9        		SET	7,C		; this converts a simple string to a
 2127+0665              					; string array. The test for an array or string
 2128+0665              					; comes later.
 2129+0665 30 0B        		JR	NC,o0672	; forward to SA-V-OLD if variable found.
 2130+0667
 2131+0667 21 00 00     		LD	HL,$0000	; set destination to zero as not fixed.
 2132+066A 3A 74 5C     		LD	A,(	$5C74)	; fetch command from T_ADDR
 2133+066D 3D           		DEC	A		; test for 1 - LOAD
 2134+066E 28 15        		JR	Z,o0685		; forward to SA-V-NEW with LOAD DATA.
 2135+0670              					; to load a new array.
 2136+0670
 2137+0670              ;   otherwise the variable was not found in run-time with SAVE/MERGE.
 2138+0670
 2139+0670              ;; REPORT-2a
 2140+0670 CF           o0670:		RST	08H		; ERROR-1
 2141+0671 01           		DB	$01		; Error Report: Variable not found
 2142+0672
 2143+0672              ;   continue with SAVE/LOAD  DATA
 2144+0672
 2145+0672              ;; SA-V-OLD
 2146+0672 C2 8A 1C     o0672:		JP	NZ,o1C8A	; to REPORT-C if not an array variable.
 2147+0675              					; or erroneously a simple string.
 2148+0675              					; 'Nonsense in BASIC'
 2149+0675
 2150+0675
 2151+0675 CD 30 25     		CALL	o2530		; routine SYNTAX-Z
 2152+0678 28 18        		JR	Z,o0692		; forward to SA-DATA-1 if checking syntax.
 2153+067A
 2154+067A 23           		INC	HL		; step past single character variable name.
 2155+067B 7E           		LD	A,(HL)		; fetch low byte of length.
 2156+067C DD 77 0B     		LD	(IX+$0B),A	; place in descriptor.
 2157+067F 23           		INC	HL		; point to high byte.
 2158+0680 7E           		LD	A,(HL)		; and transfer that
 2159+0681 DD 77 0C     		LD	(IX+$0C),A	; to descriptor.
 2160+0684 23           		INC	HL		; increase pointer within variable.
 2161+0685
 2162+0685              ;; SA-V-NEW
 2163+0685 DD 71 0E     o0685:		LD	(IX+$0E),C	; place character array name in  header.
 2164+0688 3E 01        		LD	A,$01		; default to type numeric.
 2165+068A CB 71        		BIT	6,C		; test result from look-vars.
 2166+068C 28 01        		JR	Z,o068F		; forward to SA-V-TYPE if numeric.
 2167+068E
 2168+068E 3C           		INC	A		; set type to 2 - string array.
 2169+068F
 2170+068F              ;; SA-V-TYPE
 2171+068F DD 77 00     o068F:		LD	(IX+$00),A	; place type 0, 1 or 2 in descriptor.
 2172+0692
 2173+0692              ;; SA-DATA-1
 2174+0692 EB           o0692:		EX	DE,HL		; save var pointer in DE
 2175+0693
 2176+0693 E7           		RST	20H		; NEXT-CHAR
 2177+0694 FE 29        		CP	$29		; is character ")" ?
 2178+0696 20 DA        		JR	NZ,o0672	; back if not to SA-V-OLD to report
 2179+0698              					; 'Nonsense in BASIC'
 2180+0698
 2181+0698 E7           		RST	20H		; NEXT-CHAR advances character address.
 2182+0699 CD EE 1B     		CALL	o1BEE		; routine CHECK-END errors if not end of
 2183+069C              					; the statement.
 2184+069C
 2185+069C EB           		EX	DE,HL		; bring back variables data pointer.
 2186+069D C3 5A 07     		JP	o075A		; jump forward to SA-ALL
 2187+06A0
 2188+06A0              ; ---
 2189+06A0              ;   the branch was here to consider a 'SCREEN$', the display file.
 2190+06A0
 2191+06A0              ;; SA-SCR$
 2192+06A0 FE AA        o06A0:		CP	$AA		; is character the token 'SCREEN$' ?
 2193+06A2 20 1F        		JR	NZ,o06C3	; forward to SA-CODE if not.
 2194+06A4
 2195+06A4 3A 74 5C     		LD	A,(	$5C74)	; fetch command from T_ADDR
 2196+06A7 FE 03        		CP	$03		; is it MERGE ?
 2197+06A9 CA 8A 1C     		JP	Z,o1C8A		; jump to REPORT-C if so.
 2198+06AC              					; 'Nonsense in BASIC'
 2199+06AC
 2200+06AC              ;   continue with SAVE/LOAD/VERIFY SCREEN$.
 2201+06AC
 2202+06AC E7           		RST	20H		; NEXT-CHAR
 2203+06AD CD EE 1B     		CALL	o1BEE		; routine CHECK-END errors if not at end of
 2204+06B0              					; statement.
 2205+06B0
 2206+06B0              ;   continue in runtime.
 2207+06B0
 2208+06B0 DD 36 0B 00  		LD	(IX+$0B),$00	; set descriptor length
 2209+06B4 DD 36 0C 1B  		LD	(IX+$0C),$1B	; to $1B00 to include bitmaps and attributes.
 2210+06B8
 2211+06B8 21 00 40     		LD	HL,$4000	; set start to display file start.
 2212+06BB DD 75 0D     		LD	(IX+$0D),L	; place start in
 2213+06BE DD 74 0E     		LD	(IX+$0E),H	; the descriptor.
 2214+06C1 18 4D        		JR	o0710		; forward to SA-TYPE-3
 2215+06C3
 2216+06C3              ; ---
 2217+06C3              ;   the branch was here to consider CODE.
 2218+06C3
 2219+06C3              ;; SA-CODE
 2220+06C3 FE AF        o06C3:		CP	$AF		; is character the token 'CODE' ?
 2221+06C5 20 4F        		JR	NZ,o0716	; forward if not to SA-LINE to consider an
 2222+06C7              					; auto-started BASIC program.
 2223+06C7
 2224+06C7 3A 74 5C     		LD	A,(	$5C74)	; fetch command from T_ADDR
 2225+06CA FE 03        		CP	$03		; is it MERGE ?
 2226+06CC CA 8A 1C     		JP	Z,o1C8A		; jump forward to REPORT-C if so.
 2227+06CF              					; 'Nonsense in BASIC'
 2228+06CF
 2229+06CF
 2230+06CF E7           		RST	20H		; NEXT-CHAR advances character address.
 2231+06D0 CD 48 20     		CALL	o2048		; routine PR-ST-END checks if a carriage
 2232+06D3              					; return or ":" follows.
 2233+06D3 20 0C        		JR	NZ,o06E1	; forward to SA-CODE-1 if there are parameters.
 2234+06D5
 2235+06D5 3A 74 5C     		LD	A,(	$5C74)	; else fetch the command from T_ADDR.
 2236+06D8 A7           		AND	A		; test for zero - SAVE without a specification.
 2237+06D9 CA 8A 1C     		JP	Z,o1C8A		; jump to REPORT-C if so.
 2238+06DC              					; 'Nonsense in BASIC'
 2239+06DC
 2240+06DC              ;   for LOAD/VERIFY put zero on stack to signify handle at location saved from.
 2241+06DC
 2242+06DC CD E6 1C     		CALL	o1CE6		; routine USE-ZERO
 2243+06DF 18 0F        		JR	o06F0		; forward to SA-CODE-2
 2244+06E1
 2245+06E1              ; ---
 2246+06E1
 2247+06E1              ;   if there are more characters after CODE expect start and possibly length.
 2248+06E1
 2249+06E1              ;; SA-CODE-1
 2250+06E1 CD 82 1C     o06E1:		CALL	o1C82		; routine EXPT-1NUM checks for numeric
 2251+06E4              					; expression and stacks it in run-time.
 2252+06E4
 2253+06E4 DF           		RST	18H		; GET-CHAR
 2254+06E5 FE 2C        		CP	$2C		; does a comma follow ?
 2255+06E7 28 0C        		JR	Z,o06F5		; forward if so to SA-CODE-3
 2256+06E9
 2257+06E9              ;   else allow saved code to be loaded to a specified address.
 2258+06E9
 2259+06E9 3A 74 5C     		LD	A,(	$5C74)	; fetch command from T_ADDR.
 2260+06EC A7           		AND	A		; is the command SAVE which requires length ?
 2261+06ED CA 8A 1C     		JP	Z,o1C8A		; jump to REPORT-C if so.
 2262+06F0              					; 'Nonsense in BASIC'
 2263+06F0
 2264+06F0              ;   the command LOAD code may rejoin here with zero stacked as start.
 2265+06F0
 2266+06F0              ;; SA-CODE-2
 2267+06F0 CD E6 1C     o06F0:		CALL	o1CE6		; routine USE-ZERO stacks zero for length.
 2268+06F3 18 04        		JR	o06F9		; forward to SA-CODE-4
 2269+06F5
 2270+06F5              ; ---
 2271+06F5              ;   the branch was here with SAVE CODE start,
 2272+06F5
 2273+06F5              ;; SA-CODE-3
 2274+06F5 E7           o06F5:		RST	20H		; NEXT-CHAR advances character address.
 2275+06F6 CD 82 1C     		CALL	o1C82		; routine EXPT-1NUM checks for expression
 2276+06F9              					; and stacks in run-time.
 2277+06F9
 2278+06F9              ;   paths converge here and nothing must follow.
 2279+06F9
 2280+06F9              ;; SA-CODE-4
 2281+06F9 CD EE 1B     o06F9:		CALL	o1BEE		; routine CHECK-END errors with extraneous
 2282+06FC              					; characters and quits if checking syntax.
 2283+06FC
 2284+06FC              ;   in run-time there are two 16-bit parameters on the calculator stack.
 2285+06FC
 2286+06FC CD 99 1E     		CALL	o1E99		; routine FIND-INT2 gets length.
 2287+06FF DD 71 0B     		LD	(IX+$0B),C	; place length
 2288+0702 DD 70 0C     		LD	(IX+$0C),B	; in descriptor.
 2289+0705 CD 99 1E     		CALL	o1E99		; routine FIND-INT2 gets start.
 2290+0708 DD 71 0D     		LD	(IX+$0D),C	; place start
 2291+070B DD 70 0E     		LD	(IX+$0E),B	; in descriptor.
 2292+070E 60           		LD	H,B		; transfer the
 2293+070F 69           		LD	L,C		; start to HL also.
 2294+0710
 2295+0710              ;; SA-TYPE-3
 2296+0710 DD 36 00 03  o0710:		LD	(IX+$00),$03	; place type 3 - code in descriptor.
 2297+0714 18 44        		JR	o075A		; forward to SA-ALL.
 2298+0716
 2299+0716              ; ---
 2300+0716              ;   the branch was here with BASIC to consider an optional auto-start line
 2301+0716              ;   number.
 2302+0716
 2303+0716              ;; SA-LINE
 2304+0716 FE CA        o0716:		CP	$CA		; is character the token 'LINE' ?
 2305+0718 28 09        		JR	Z,o0723		; forward to SA-LINE-1 if so.
 2306+071A
 2307+071A              ;   else all possibilities have been considered and nothing must follow.
 2308+071A
 2309+071A CD EE 1B     		CALL	o1BEE		; routine CHECK-END
 2310+071D
 2311+071D              ;   continue in run-time to save BASIC without auto-start.
 2312+071D
 2313+071D DD 36 0E 80  		LD	(IX+$0E),$80	; place high line number in descriptor to
 2314+0721              					; disable auto-start.
 2315+0721 18 17        		JR	o073A		; forward to SA-TYPE-0 to save program.
 2316+0723
 2317+0723              ; ---
 2318+0723              ;   the branch was here to consider auto-start.
 2319+0723
 2320+0723              ;; SA-LINE-1
 2321+0723 3A 74 5C     o0723:		LD	A,(	$5C74)	; fetch command from T_ADDR
 2322+0726 A7           		AND	A		; test for SAVE.
 2323+0727 C2 8A 1C     		JP	NZ,o1C8A	; jump forward to REPORT-C with anything else.
 2324+072A              					; 'Nonsense in BASIC'
 2325+072A
 2326+072A              ;
 2327+072A
 2328+072A E7           		RST	20H		; NEXT-CHAR
 2329+072B CD 82 1C     		CALL	o1C82		; routine EXPT-1NUM checks for numeric
 2330+072E              					; expression and stacks in run-time.
 2331+072E CD EE 1B     		CALL	o1BEE		; routine CHECK-END quits if syntax path.
 2332+0731 CD 99 1E     		CALL	o1E99		; routine FIND-INT2 fetches the numeric
 2333+0734              					; expression.
 2334+0734 DD 71 0D     		LD	(IX+$0D),C	; place the auto-start
 2335+0737 DD 70 0E     		LD	(IX+$0E),B	; line number in the descriptor.
 2336+073A
 2337+073A              ;   Note. this isn't checked, but is subsequently handled by the system.
 2338+073A              ;   If the user typed 40000 instead of 4000 then it won't auto-start
 2339+073A              ;   at line 4000, or indeed, at all.
 2340+073A
 2341+073A              ;   continue to save program and any variables.
 2342+073A
 2343+073A              ;; SA-TYPE-0
 2344+073A DD 36 00 00  o073A:		LD	(IX+$00),$00	; place type zero - program in descriptor.
 2345+073E 2A 59 5C     		LD	HL,(	$5C59)	; fetch E_LINE to HL.
 2346+0741 ED 5B 53 5C  		LD	DE,(	$5C53)	; fetch PROG to DE.
 2347+0745 37           		SCF			; set carry flag to calculate from end of
 2348+0746              					; variables E_LINE -1.
 2349+0746 ED 52        		SBC	HL,DE		; subtract to give total length.
 2350+0748
 2351+0748 DD 75 0B     		LD	(IX+$0B),L	; place total length
 2352+074B DD 74 0C     		LD	(IX+$0C),H	; in descriptor.
 2353+074E 2A 4B 5C     		LD	HL,(	$5C4B)	; load HL from system variable VARS
 2354+0751 ED 52        		SBC	HL,DE		; subtract to give program length.
 2355+0753 DD 75 0F     		LD	(IX+$0F),L	; place length of program
 2356+0756 DD 74 10     		LD	(IX+$10),H	; in the descriptor.
 2357+0759 EB           		EX	DE,HL		; start to HL, length to DE.
 2358+075A
 2359+075A              ;; SA-ALL
 2360+075A 3A 74 5C     o075A:		LD	A,(	$5C74)	; fetch command from T_ADDR
 2361+075D A7           		AND	A		; test for zero - SAVE.
 2362+075E CA 70 09     		JP	Z,o0970		; jump forward to SA-CONTRL with SAVE  ->
 2363+0761
 2364+0761              ; ---
 2365+0761              ;   continue with LOAD, MERGE and VERIFY.
 2366+0761
 2367+0761 E5           		PUSH	HL		; save start.
 2368+0762 01 11 00     		LD	BC,$0011	; prepare to add seventeen
 2369+0765 DD 09        		ADD	IX,BC		; to point IX at second descriptor.
 2370+0767
 2371+0767              ;; LD-LOOK-H
 2372+0767 DD E5        o0767:		PUSH	IX		; save IX
 2373+0769 11 11 00     		LD	DE,$0011	; seventeen bytes
 2374+076C AF           		XOR	A		; reset zero flag
 2375+076D 37           		SCF			; set carry flag
 2376+076E CD 56 05     		CALL	o0556		; routine LD-BYTES loads a header from tape
 2377+0771              					; to second descriptor.
 2378+0771 DD E1        		POP	IX		; restore IX.
 2379+0773 30 F2        		JR	NC,o0767	; loop back to LD-LOOK-H until header found.
 2380+0775
 2381+0775 3E FE        		LD	A,$FE		; select system channel 'S'
 2382+0777 CD 01 16     		CALL	o1601		; routine CHAN-OPEN opens it.
 2383+077A
 2384+077A FD 36 52 03  		LD	(IY+$52),$03	; set SCR_CT to 3 lines.
 2385+077E
 2386+077E 0E 80        		LD	C,$80		; C has bit 7 set to indicate type mismatch as
 2387+0780              					; a default startpoint.
 2388+0780
 2389+0780 DD 7E 00     		LD	A,(IX+$00)	; fetch loaded header type to A
 2390+0783 DD BE EF     		CP	(IX-$11)	; compare with expected type.
 2391+0786 20 02        		JR	NZ,o078A	; forward to LD-TYPE with mis-match.
 2392+0788
 2393+0788 0E F6        		LD	C,$F6		; set C to minus ten - will count characters
 2394+078A              					; up to zero.
 2395+078A
 2396+078A              ;; LD-TYPE
 2397+078A FE 04        o078A:		CP	$04		; check if type in acceptable range 0 - 3.
 2398+078C 30 D9        		JR	NC,o0767	; back to LD-LOOK-H with 4 and over.
 2399+078E
 2400+078E              ;   else A indicates type 0-3.
 2401+078E
 2402+078E 11 C0 09     		LD	DE,o09C0	; address base of last 4 tape messages
 2403+0791 C5           		PUSH	BC		; save BC
 2404+0792 CD 0A 0C     		CALL	o0C0A		; routine PO-MSG outputs relevant message.
 2405+0795              					; Note. all messages have a leading newline.
 2406+0795 C1           		POP	BC		; restore BC
 2407+0796
 2408+0796 DD E5        		PUSH	IX		; transfer IX,
 2409+0798 D1           		POP	DE		; the 2nd descriptor, to DE.
 2410+0799 21 F0 FF     		LD	HL,$FFF0	; prepare minus seventeen.
 2411+079C 19           		ADD	HL,DE		; add to point HL to 1st descriptor.
 2412+079D 06 0A        		LD	B,$0A		; the count will be ten characters for the
 2413+079F              					; filename.
 2414+079F
 2415+079F 7E           		LD	A,(HL)		; fetch first character and test for
 2416+07A0 3C           		INC	A		; value 255.
 2417+07A1 20 03        		JR	NZ,o07A6	; forward to LD-NAME if not the wildcard.
 2418+07A3
 2419+07A3              ;   but if it is the wildcard, then add ten to C which is minus ten for a type
 2420+07A3              ;   match or -128 for a type mismatch. Although characters have to be counted
 2421+07A3              ;   bit 7 of C will not alter from state set here.
 2422+07A3
 2423+07A3 79           		LD	A,C		; transfer $F6 or $80 to A
 2424+07A4 80           		ADD	A,B		; add $0A
 2425+07A5 4F           		LD	C,A		; place result, zero or -118, in C.
 2426+07A6
 2427+07A6              ;   At this point we have either a type mismatch, a wildcard match or ten
 2428+07A6              ;   characters to be counted. The characters must be shown on the screen.
 2429+07A6
 2430+07A6              ;; LD-NAME
 2431+07A6 13           o07A6:		INC	DE		; address next input character
 2432+07A7 1A           		LD	A,(DE)		; fetch character
 2433+07A8 BE           		CP	(HL)		; compare to expected
 2434+07A9 23           		INC	HL		; address next expected character
 2435+07AA 20 01        		JR	NZ,o07AD	; forward to LD-CH-PR with mismatch
 2436+07AC
 2437+07AC 0C           		INC	C		; increment matched character count
 2438+07AD
 2439+07AD              ;; LD-CH-PR
 2440+07AD D7           o07AD:		RST	10H		; PRINT-A prints character
 2441+07AE 10 F6        		DJNZ	o07A6		; loop back to LD-NAME for ten characters.
 2442+07B0
 2443+07B0              ;   if ten characters matched and the types previously matched then C will
 2444+07B0              ;   now hold zero.
 2445+07B0
 2446+07B0 CB 79        		BIT	7,C		; test if all matched
 2447+07B2 20 B3        		JR	NZ,o0767	; back to LD-LOOK-H if not
 2448+07B4
 2449+07B4              ;   else print a terminal carriage return.
 2450+07B4
 2451+07B4 3E 0D        		LD	A,$0D		; prepare carriage return.
 2452+07B6 D7           		RST	10H		; PRINT-A outputs it.
 2453+07B7
 2454+07B7              ;   The various control routines for LOAD, VERIFY and MERGE are executed
 2455+07B7              ;   during the one-second gap following the header on tape.
 2456+07B7
 2457+07B7 E1           		POP	HL		; restore xx
 2458+07B8 DD 7E 00     		LD	A,(IX+$00)	; fetch incoming type
 2459+07BB FE 03        		CP	$03		; compare with CODE
 2460+07BD 28 0C        		JR	Z,o07CB		; forward to VR-CONTRL if it is CODE.
 2461+07BF
 2462+07BF              ;  type is a program or an array.
 2463+07BF
 2464+07BF 3A 74 5C     		LD	A,(	$5C74)	; fetch command from T_ADDR
 2465+07C2 3D           		DEC	A		; was it LOAD ?
 2466+07C3 CA 08 08     		JP	Z,o0808		; JUMP forward to LD-CONTRL if so to
 2467+07C6              					; load BASIC or variables.
 2468+07C6
 2469+07C6 FE 02        		CP	$02		; was command MERGE ?
 2470+07C8 CA B6 08     		JP	Z,o08B6		; jump forward to ME-CONTRL if so.
 2471+07CB
 2472+07CB              ;   else continue into VERIFY control routine to verify.
 2473+07CB
 2474+07CB              ; ----------------------------
 2475+07CB              ; THE 'VERIFY CONTROL' ROUTINE
 2476+07CB              ; ----------------------------
 2477+07CB              ;   There are two branches to this routine.
 2478+07CB              ;   1) From above to verify a program or array
 2479+07CB              ;   2) from earlier with no carry to load or verify code.
 2480+07CB
 2481+07CB              ;; VR-CONTRL
 2482+07CB E5           o07CB:		PUSH	HL		; save pointer to data.
 2483+07CC DD 6E FA     		LD	L,(IX-$06)	; fetch length of old data
 2484+07CF DD 66 FB     		LD	H,(IX-$05)	; to HL.
 2485+07D2 DD 5E 0B     		LD	E,(IX+$0B)	; fetch length of new data
 2486+07D5 DD 56 0C     		LD	D,(IX+$0C)	; to DE.
 2487+07D8 7C           		LD	A,H		; check length of old
 2488+07D9 B5           		OR	L		; for zero.
 2489+07DA 28 0D        		JR	Z,o07E9		; forward to VR-CONT-1 if length unspecified
 2490+07DC              					; e.g. LOAD "x" CODE
 2491+07DC
 2492+07DC              ;   as opposed to, say, LOAD 'x' CODE 32768,300.
 2493+07DC
 2494+07DC ED 52        		SBC	HL,DE		; subtract the two lengths.
 2495+07DE 38 26        		JR	C,o0806		; forward to REPORT-R if the length on tape is
 2496+07E0              					; larger than that specified in command.
 2497+07E0              					; 'Tape loading error'
 2498+07E0
 2499+07E0 28 07        		JR	Z,o07E9		; forward to VR-CONT-1 if lengths match.
 2500+07E2
 2501+07E2              ;   a length on tape shorter than expected is not allowed for CODE
 2502+07E2
 2503+07E2 DD 7E 00     		LD	A,(IX+$00)	; else fetch type from tape.
 2504+07E5 FE 03        		CP	$03		; is it CODE ?
 2505+07E7 20 1D        		JR	NZ,o0806	; forward to REPORT-R if so
 2506+07E9              					; 'Tape loading error'
 2507+07E9
 2508+07E9              ;; VR-CONT-1
 2509+07E9 E1           o07E9:		POP	HL		; pop pointer to data
 2510+07EA 7C           		LD	A,H		; test for zero
 2511+07EB B5           		OR	L		; e.g. LOAD 'x' CODE
 2512+07EC 20 06        		JR	NZ,o07F4	; forward to VR-CONT-2 if destination specified.
 2513+07EE
 2514+07EE DD 6E 0D     		LD	L,(IX+$0D)	; else use the destination in the header
 2515+07F1 DD 66 0E     		LD	H,(IX+$0E)	; and load code at address saved from.
 2516+07F4
 2517+07F4              ;; VR-CONT-2
 2518+07F4 E5           o07F4:		PUSH	HL		; push pointer to start of data block.
 2519+07F5 DD E1        		POP	IX		; transfer to IX.
 2520+07F7 3A 74 5C     		LD	A,(	$5C74)	; fetch reduced command from T_ADDR
 2521+07FA FE 02        		CP	$02		; is it VERIFY ?
 2522+07FC 37           		SCF			; prepare a set carry flag
 2523+07FD 20 01        		JR	NZ,o0800	; skip to VR-CONT-3 if not
 2524+07FF
 2525+07FF A7           		AND	A		; clear carry flag for VERIFY so that
 2526+0800              					; data is not loaded.
 2527+0800
 2528+0800              ;; VR-CONT-3
 2529+0800 3E FF        o0800:		LD	A,$FF		; signal data block to be loaded
 2530+0802
 2531+0802              ; -----------------
 2532+0802              ; Load a data block
 2533+0802              ; -----------------
 2534+0802              ;   This routine is called from 3 places other than above to load a data block.
 2535+0802              ;   In all cases the accumulator is first set to $FF so the routine could be
 2536+0802              ;   called at the previous instruction.
 2537+0802
 2538+0802              ;; LD-BLOCK
 2539+0802 CD 56 05     o0802:		CALL	o0556		; routine LD-BYTES
 2540+0805 D8           		RET	C		; return if successful.
 2541+0806
 2542+0806
 2543+0806              ;; REPORT-R
 2544+0806 CF           o0806:		RST	08H		; ERROR-1
 2545+0807 1A           		DB	$1A		; Error Report: Tape loading error
 2546+0808
 2547+0808              ; --------------------------
 2548+0808              ; THE 'LOAD CONTROL' ROUTINE
 2549+0808              ; --------------------------
 2550+0808              ;   This branch is taken when the command is LOAD with type 0, 1 or 2.
 2551+0808
 2552+0808              ;; LD-CONTRL
 2553+0808 DD 5E 0B     o0808:		LD	E,(IX+$0B)	; fetch length of found data block
 2554+080B DD 56 0C     		LD	D,(IX+$0C)	; from 2nd descriptor.
 2555+080E E5           		PUSH	HL		; save destination
 2556+080F 7C           		LD	A,H		; test for zero
 2557+0810 B5           		OR	L		;
 2558+0811 20 06        		JR	NZ,o0819	; forward if not to LD-CONT-1
 2559+0813
 2560+0813 13           		INC	DE		; increase length
 2561+0814 13           		INC	DE		; for letter name
 2562+0815 13           		INC	DE		; and 16-bit length
 2563+0816 EB           		EX	DE,HL		; length to HL,
 2564+0817 18 0C        		JR	o0825		; forward to LD-CONT-2
 2565+0819
 2566+0819              ; ---
 2567+0819
 2568+0819              ;; LD-CONT-1
 2569+0819 DD 6E FA     o0819:		LD	L,(IX-$06)	; fetch length from
 2570+081C DD 66 FB     		LD	H,(IX-$05)	; the first header.
 2571+081F EB           		EX	DE,HL		;
 2572+0820 37           		SCF			; set carry flag
 2573+0821 ED 52        		SBC	HL,DE		;
 2574+0823 38 09        		JR	C,o082E		; to LD-DATA
 2575+0825
 2576+0825              ;; LD-CONT-2
 2577+0825 11 05 00     o0825:		LD	DE,$0005	; allow overhead of five bytes.
 2578+0828 19           		ADD	HL,DE		; add in the difference in data lengths.
 2579+0829 44           		LD	B,H		; transfer to
 2580+082A 4D           		LD	C,L		; the BC register pair
 2581+082B CD 05 1F     		CALL	o1F05		; routine TEST-ROOM fails if not enough room.
 2582+082E
 2583+082E              ;; LD-DATA
 2584+082E E1           o082E:		POP	HL		; pop destination
 2585+082F DD 7E 00     		LD	A,(IX+$00)	; fetch type 0, 1 or 2.
 2586+0832 A7           		AND	A		; test for program and variables.
 2587+0833 28 3E        		JR	Z,o0873		; forward if so to LD-PROG
 2588+0835
 2589+0835              ;   the type is a numeric or string array.
 2590+0835
 2591+0835 7C           		LD	A,H		; test the destination for zero
 2592+0836 B5           		OR	L		; indicating variable does not already exist.
 2593+0837 28 13        		JR	Z,o084C		; forward if so to LD-DATA-1
 2594+0839
 2595+0839              ;   else the destination is the first dimension within the array structure
 2596+0839
 2597+0839 2B           		DEC	HL		; address high byte of total length
 2598+083A 46           		LD	B,(HL)		; transfer to B.
 2599+083B 2B           		DEC	HL		; address low byte of total length.
 2600+083C 4E           		LD	C,(HL)		; transfer to C.
 2601+083D 2B           		DEC	HL		; point to letter of variable.
 2602+083E 03           		INC	BC		; adjust length to
 2603+083F 03           		INC	BC		; include these
 2604+0840 03           		INC	BC		; three bytes also.
 2605+0841 DD 22 5F 5C  		LD	(	$5C5F),IX	; save header pointer in X_PTR.
 2606+0845 CD E8 19     		CALL	o19E8		; routine RECLAIM-2 reclaims the old variable
 2607+0848              					; sliding workspace including the two headers
 2608+0848              					; downwards.
 2609+0848 DD 2A 5F 5C  		LD	IX,(	$5C5F)	; reload IX from X_PTR which will have been
 2610+084C              					; adjusted down by POINTERS routine.
 2611+084C
 2612+084C              ;; LD-DATA-1
 2613+084C 2A 59 5C     o084C:		LD	HL,(	$5C59)	; address E_LINE
 2614+084F 2B           		DEC	HL		; now point to the $80 variables end-marker.
 2615+0850 DD 4E 0B     		LD	C,(IX+$0B)	; fetch new data length
 2616+0853 DD 46 0C     		LD	B,(IX+$0C)	; from 2nd header.
 2617+0856 C5           		PUSH	BC		; * save it.
 2618+0857 03           		INC	BC		; adjust the
 2619+0858 03           		INC	BC		; length to include
 2620+0859 03           		INC	BC		; letter name and total length.
 2621+085A DD 7E FD     		LD	A,(IX-$03)	; fetch letter name from old header.
 2622+085D F5           		PUSH	AF		; preserve accumulator though not corrupted.
 2623+085E
 2624+085E CD 55 16     		CALL	o1655		; routine MAKE-ROOM creates space for variable
 2625+0861              					; sliding workspace up. IX no longer addresses
 2626+0861              					; anywhere meaningful.
 2627+0861 23           		INC	HL		; point to first new location.
 2628+0862
 2629+0862 F1           		POP	AF		; fetch back the letter name.
 2630+0863 77           		LD	(HL),A		; place in first new location.
 2631+0864 D1           		POP	DE		; * pop the data length.
 2632+0865 23           		INC	HL		; address 2nd location
 2633+0866 73           		LD	(HL),E		; store low byte of length.
 2634+0867 23           		INC	HL		; address next.
 2635+0868 72           		LD	(HL),D		; store high byte.
 2636+0869 23           		INC	HL		; address start of data.
 2637+086A E5           		PUSH	HL		; transfer address
 2638+086B DD E1        		POP	IX		; to IX register pair.
 2639+086D 37           		SCF			; set carry flag indicating load not verify.
 2640+086E 3E FF        		LD	A,$FF		; signal data not header.
 2641+0870 C3 02 08     		JP	o0802		; JUMP back to LD-BLOCK
 2642+0873
 2643+0873              ; -----------------
 2644+0873              ;   the branch is here when a program as opposed to an array is to be loaded.
 2645+0873
 2646+0873              ;; LD-PROG
 2647+0873 EB           o0873:		EX	DE,HL		; transfer dest to DE.
 2648+0874 2A 59 5C     		LD	HL,(	$5C59)	; address E_LINE
 2649+0877 2B           		DEC	HL		; now variables end-marker.
 2650+0878 DD 22 5F 5C  		LD	(	$5C5F),IX	; place the IX header pointer in X_PTR
 2651+087C DD 4E 0B     		LD	C,(IX+$0B)	; get new length
 2652+087F DD 46 0C     		LD	B,(IX+$0C)	; from 2nd header
 2653+0882 C5           		PUSH	BC		; and save it.
 2654+0883
 2655+0883 CD E5 19     		CALL	o19E5		; routine RECLAIM-1 reclaims program and vars.
 2656+0886              					; adjusting X-PTR.
 2657+0886
 2658+0886 C1           		POP	BC		; restore new length.
 2659+0887 E5           		PUSH	HL		; * save start
 2660+0888 C5           		PUSH	BC		; ** and length.
 2661+0889
 2662+0889 CD 55 16     		CALL	o1655		; routine MAKE-ROOM creates the space.
 2663+088C
 2664+088C DD 2A 5F 5C  		LD	IX,(	$5C5F)	; reload IX from adjusted X_PTR
 2665+0890 23           		INC	HL		; point to start of new area.
 2666+0891 DD 4E 0F     		LD	C,(IX+$0F)	; fetch length of BASIC on tape
 2667+0894 DD 46 10     		LD	B,(IX+$10)	; from 2nd descriptor
 2668+0897 09           		ADD	HL,BC		; add to address the start of variables.
 2669+0898 22 4B 5C     		LD	(	$5C4B),HL	; set system variable VARS
 2670+089B
 2671+089B DD 66 0E     		LD	H,(IX+$0E)	; fetch high byte of autostart line number.
 2672+089E 7C           		LD	A,H		; transfer to A
 2673+089F E6 C0        		AND	$C0		; test if greater than $3F.
 2674+08A1 20 0A        		JR	NZ,o08AD	; forward to LD-PROG-1 if so with no autostart.
 2675+08A3
 2676+08A3 DD 6E 0D     		LD	L,(IX+$0D)	; else fetch the low byte.
 2677+08A6 22 42 5C     		LD	(	$5C42),HL	; set system variable to line number NEWPPC
 2678+08A9 FD 36 0A 00  		LD	(IY+$0A),$00	; set statement NSPPC to zero.
 2679+08AD
 2680+08AD              ;; LD-PROG-1
 2681+08AD D1           o08AD:		POP	DE		; ** pop the length
 2682+08AE DD E1        		POP	IX		; * and start.
 2683+08B0 37           		SCF			; set carry flag
 2684+08B1 3E FF        		LD	A,$FF		; signal data as opposed to a header.
 2685+08B3 C3 02 08     		JP	o0802		; jump back to LD-BLOCK
 2686+08B6
 2687+08B6              ; ---------------------------
 2688+08B6              ; THE 'MERGE CONTROL' ROUTINE
 2689+08B6              ; ---------------------------
 2690+08B6              ;   the branch was here to merge a program and its variables or an array.
 2691+08B6              ;
 2692+08B6
 2693+08B6              ;; ME-CONTRL
 2694+08B6 DD 4E 0B     o08B6:		LD	C,(IX+$0B)	; fetch length
 2695+08B9 DD 46 0C     		LD	B,(IX+$0C)	; of data block on tape.
 2696+08BC C5           		PUSH	BC		; save it.
 2697+08BD 03           		INC	BC		; one for the pot.
 2698+08BE
 2699+08BE F7           		RST	30H		; BC-SPACES creates room in workspace.
 2700+08BF              					; HL addresses last new location.
 2701+08BF 36 80        		LD	(HL),$80	; place end-marker at end.
 2702+08C1 EB           		EX	DE,HL		; transfer first location to HL.
 2703+08C2 D1           		POP	DE		; restore length to DE.
 2704+08C3 E5           		PUSH	HL		; save start.
 2705+08C4
 2706+08C4 E5           		PUSH	HL		; and transfer it
 2707+08C5 DD E1        		POP	IX		; to IX register.
 2708+08C7 37           		SCF			; set carry flag to load data on tape.
 2709+08C8 3E FF        		LD	A,$FF		; signal data not a header.
 2710+08CA CD 02 08     		CALL	o0802		; routine LD-BLOCK loads to workspace.
 2711+08CD E1           		POP	HL		; restore first location in workspace to HL.
 2712+08CE ED 5B 53 5C  		LD	DE,(	$5C53)	; set DE from system variable PROG.
 2713+08D2
 2714+08D2              ;   now enter a loop to merge the data block in workspace with the program and
 2715+08D2              ;   variables.
 2716+08D2
 2717+08D2              ;; ME-NEW-LP
 2718+08D2 7E           o08D2:		LD	A,(HL)		; fetch next byte from workspace.
 2719+08D3 E6 C0        		AND	$C0		; compare with $3F.
 2720+08D5 20 19        		JR	NZ,o08F0	; forward to ME-VAR-LP if a variable or
 2721+08D7              					; end-marker.
 2722+08D7
 2723+08D7              ;   continue when HL addresses a BASIC line number.
 2724+08D7
 2725+08D7              ;; ME-OLD-LP
 2726+08D7 1A           o08D7:		LD	A,(DE)		; fetch high byte from program area.
 2727+08D8 13           		INC	DE		; bump prog address.
 2728+08D9 BE           		CP	(HL)		; compare with that in workspace.
 2729+08DA 23           		INC	HL		; bump workspace address.
 2730+08DB 20 02        		JR	NZ,o08DF	; forward to ME-OLD-L1 if high bytes don't match
 2731+08DD
 2732+08DD 1A           		LD	A,(DE)		; fetch the low byte of program line number.
 2733+08DE BE           		CP	(HL)		; compare with that in workspace.
 2734+08DF
 2735+08DF              ;; ME-OLD-L1
 2736+08DF 1B           o08DF:		DEC	DE		; point to start of
 2737+08E0 2B           		DEC	HL		; respective lines again.
 2738+08E1 30 08        		JR	NC,o08EB	; forward to ME-NEW-L2 if line number in
 2739+08E3              					; workspace is less than or equal to current
 2740+08E3              					; program line as has to be added to program.
 2741+08E3
 2742+08E3 E5           		PUSH	HL		; else save workspace pointer.
 2743+08E4 EB           		EX	DE,HL		; transfer prog pointer to HL
 2744+08E5 CD B8 19     		CALL	o19B8		; routine NEXT-ONE finds next line in DE.
 2745+08E8 E1           		POP	HL		; restore workspace pointer
 2746+08E9 18 EC        		JR	o08D7		; back to ME-OLD-LP until destination position
 2747+08EB              					; in program area found.
 2748+08EB
 2749+08EB              ; ---
 2750+08EB              ;   the branch was here with an insertion or replacement point.
 2751+08EB
 2752+08EB              ;; ME-NEW-L2
 2753+08EB CD 2C 09     o08EB:		CALL	o092C		; routine ME-ENTER enters the line
 2754+08EE 18 E2        		JR	o08D2		; loop back to ME-NEW-LP.
 2755+08F0
 2756+08F0              ; ---
 2757+08F0              ;   the branch was here when the location in workspace held a variable.
 2758+08F0
 2759+08F0              ;; ME-VAR-LP
 2760+08F0 7E           o08F0:		LD	A,(HL)		; fetch first byte of workspace variable.
 2761+08F1 4F           		LD	C,A		; copy to C also.
 2762+08F2 FE 80        		CP	$80		; is it the end-marker ?
 2763+08F4 C8           		RET	Z		; return if so as complete.  >>>>>
 2764+08F5
 2765+08F5 E5           		PUSH	HL		; save workspace area pointer.
 2766+08F6 2A 4B 5C     		LD	HL,(	$5C4B)	; load HL with VARS - start of variables area.
 2767+08F9
 2768+08F9              ;; ME-OLD-VP
 2769+08F9 7E           o08F9:		LD	A,(HL)		; fetch first byte.
 2770+08FA FE 80        		CP	$80		; is it the end-marker ?
 2771+08FC 28 25        		JR	Z,o0923		; forward if so to ME-VAR-L2 to add
 2772+08FE              					; variable at end of variables area.
 2773+08FE
 2774+08FE B9           		CP	C		; compare with variable in workspace area.
 2775+08FF 28 08        		JR	Z,o0909		; forward to ME-OLD-V2 if a match to replace.
 2776+0901
 2777+0901              ;   else entire variables area has to be searched.
 2778+0901
 2779+0901              ;; ME-OLD-V1
 2780+0901 C5           o0901:		PUSH	BC		; save character in C.
 2781+0902 CD B8 19     		CALL	o19B8		; routine NEXT-ONE gets following variable
 2782+0905              					; address in DE.
 2783+0905 C1           		POP	BC		; restore character in C
 2784+0906 EB           		EX	DE,HL		; transfer next address to HL.
 2785+0907 18 F0        		JR	o08F9		; loop back to ME-OLD-VP
 2786+0909
 2787+0909              ; ---
 2788+0909              ;   the branch was here when first characters of name matched.
 2789+0909
 2790+0909              ;; ME-OLD-V2
 2791+0909 E6 E0        o0909:		AND	$E0		; keep bits 11100000
 2792+090B FE A0        		CP	$A0		; compare   10100000 - a long-named variable.
 2793+090D
 2794+090D 20 12        		JR	NZ,o0921	; forward to ME-VAR-L1 if just one-character.
 2795+090F
 2796+090F              ;   but long-named variables have to be matched character by character.
 2797+090F
 2798+090F D1           		POP	DE		; fetch workspace 1st character pointer
 2799+0910 D5           		PUSH	DE		; and save it on the stack again.
 2800+0911 E5           		PUSH	HL		; save variables area pointer on stack.
 2801+0912
 2802+0912              ;; ME-OLD-V3
 2803+0912 23           o0912:		INC	HL		; address next character in vars area.
 2804+0913 13           		INC	DE		; address next character in workspace area.
 2805+0914 1A           		LD	A,(DE)		; fetch workspace character.
 2806+0915 BE           		CP	(HL)		; compare to variables character.
 2807+0916 20 06        		JR	NZ,o091E	; forward to ME-OLD-V4 with a mismatch.
 2808+0918
 2809+0918 17           		RLA			; test if the terminal inverted character.
 2810+0919 30 F7        		JR	NC,o0912	; loop back to ME-OLD-V3 if more to test.
 2811+091B
 2812+091B              ;   otherwise the long name matches in its entirety.
 2813+091B
 2814+091B E1           		POP	HL		; restore pointer to first character of variable
 2815+091C 18 03        		JR	o0921		; forward to ME-VAR-L1
 2816+091E
 2817+091E              ; ---
 2818+091E              ;   the branch is here when two characters don't match
 2819+091E
 2820+091E              ;; ME-OLD-V4
 2821+091E E1           o091E:		POP	HL		; restore the prog/vars pointer.
 2822+091F 18 E0        		JR	o0901		; back to ME-OLD-V1 to resume search.
 2823+0921
 2824+0921              ; ---
 2825+0921              ;   branch here when variable is to replace an existing one
 2826+0921
 2827+0921              ;; ME-VAR-L1
 2828+0921 3E FF        o0921:		LD	A,$FF		; indicate a replacement.
 2829+0923
 2830+0923              ;   this entry point is when A holds $80 indicating a new variable.
 2831+0923
 2832+0923              ;; ME-VAR-L2
 2833+0923 D1           o0923:		POP	DE		; pop workspace pointer.
 2834+0924 EB           		EX	DE,HL		; now make HL workspace pointer, DE vars pointer
 2835+0925 3C           		INC	A		; zero flag set if replacement.
 2836+0926 37           		SCF			; set carry flag indicating a variable not a
 2837+0927              					; program line.
 2838+0927 CD 2C 09     		CALL	o092C		; routine ME-ENTER copies variable in.
 2839+092A 18 C4        		JR	o08F0		; loop back to ME-VAR-LP
 2840+092C
 2841+092C              ; ------------------------
 2842+092C              ; Merge a Line or Variable
 2843+092C              ; ------------------------
 2844+092C              ;   A BASIC line or variable is inserted at the current point. If the line
 2845+092C              ;   number or variable names match (zero flag set) then a replacement takes
 2846+092C              ;   place.
 2847+092C
 2848+092C              ;; ME-ENTER
 2849+092C 20 10        o092C:		JR	NZ,o093E	; forward to ME-ENT-1 for insertion only.
 2850+092E
 2851+092E              ;   but the program line or variable matches so old one is reclaimed.
 2852+092E
 2853+092E 08           		EX	AF,AF'		; save flag??
 2854+092F 22 5F 5C     		LD	(	$5C5F),HL	; preserve workspace pointer in dynamic X_PTR
 2855+0932 EB           		EX	DE,HL		; transfer program dest pointer to HL.
 2856+0933 CD B8 19     		CALL	o19B8		; routine NEXT-ONE finds following location
 2857+0936              					; in program or variables area.
 2858+0936 CD E8 19     		CALL	o19E8		; routine RECLAIM-2 reclaims the space between.
 2859+0939 EB           		EX	DE,HL		; transfer program dest pointer back to DE.
 2860+093A 2A 5F 5C     		LD	HL,(	$5C5F)	; fetch adjusted workspace pointer from X_PTR
 2861+093D 08           		EX	AF,AF'		; restore flags.
 2862+093E
 2863+093E              ;   now the new line or variable is entered.
 2864+093E
 2865+093E              ;; ME-ENT-1
 2866+093E 08           o093E:		EX	AF,AF'		; save or re-save flags.
 2867+093F D5           		PUSH	DE		; save dest pointer in prog/vars area.
 2868+0940 CD B8 19     		CALL	o19B8		; routine NEXT-ONE finds next in workspace.
 2869+0943              					; gets next in DE, difference in BC.
 2870+0943              					; prev addr in HL
 2871+0943 22 5F 5C     		LD	(	$5C5F),HL	; store pointer in X_PTR
 2872+0946 2A 53 5C     		LD	HL,(	$5C53)	; load HL from system variable PROG
 2873+0949 E3           		EX	(SP),HL		; swap with prog/vars pointer on stack.
 2874+094A C5           		PUSH	BC		; ** save length of new program line/variable.
 2875+094B 08           		EX	AF,AF'		; fetch flags back.
 2876+094C 38 07        		JR	C,o0955		; skip to ME-ENT-2 if variable
 2877+094E
 2878+094E 2B           		DEC	HL		; address location before pointer
 2879+094F CD 55 16     		CALL	o1655		; routine MAKE-ROOM creates room for BASIC line
 2880+0952 23           		INC	HL		; address next.
 2881+0953 18 03        		JR	o0958		; forward to ME-ENT-3
 2882+0955
 2883+0955              ; ---
 2884+0955
 2885+0955              ;; ME-ENT-2
 2886+0955 CD 55 16     o0955:		CALL	o1655		; routine MAKE-ROOM creates room for variable.
 2887+0958
 2888+0958              ;; ME-ENT-3
 2889+0958 23           o0958:		INC	HL		; address next?
 2890+0959
 2891+0959 C1           		POP	BC		; ** pop length
 2892+095A D1           		POP	DE		; * pop value for PROG which may have been
 2893+095B              					; altered by POINTERS if first line.
 2894+095B ED 53 53 5C  		LD	(	$5C53),DE	; set PROG to original value.
 2895+095F ED 5B 5F 5C  		LD	DE,(	$5C5F)	; fetch adjusted workspace pointer from X_PTR
 2896+0963 C5           		PUSH	BC		; save length
 2897+0964 D5           		PUSH	DE		; and workspace pointer
 2898+0965 EB           		EX	DE,HL		; make workspace pointer source, prog/vars
 2899+0966              					; pointer the destination
 2900+0966 ED B0        		LDIR			; copy bytes of line or variable into new area.
 2901+0968 E1           		POP	HL		; restore workspace pointer.
 2902+0969 C1           		POP	BC		; restore length.
 2903+096A D5           		PUSH	DE		; save new prog/vars pointer.
 2904+096B CD E8 19     		CALL	o19E8		; routine RECLAIM-2 reclaims the space used
 2905+096E              					; by the line or variable in workspace block
 2906+096E              					; as no longer required and space could be
 2907+096E              					; useful for adding more lines.
 2908+096E D1           		POP	DE		; restore the prog/vars pointer
 2909+096F C9           		RET			; return.
 2910+0970
 2911+0970              ; --------------------------
 2912+0970              ; THE 'SAVE CONTROL' ROUTINE
 2913+0970              ; --------------------------
 2914+0970              ;   A branch from the main SAVE-ETC routine at SAVE-ALL.
 2915+0970              ;   First the header data is saved. Then after a wait of 1 second
 2916+0970              ;   the data itself is saved.
 2917+0970              ;   HL points to start of data.
 2918+0970              ;   IX points to start of descriptor.
 2919+0970
 2920+0970              ;; SA-CONTRL
 2921+0970 E5           o0970:		PUSH	HL		; save start of data
 2922+0971
 2923+0971 3E FD        		LD	A,$FD		; select system channel 'S'
 2924+0973 CD 01 16     		CALL	o1601		; routine CHAN-OPEN
 2925+0976
 2926+0976 AF           		XOR	A		; clear to address table directly
 2927+0977 11 A1 09     		LD	DE,o09A1	; address: tape-msgs
 2928+097A CD 0A 0C     		CALL	o0C0A		; routine PO-MSG -
 2929+097D              					; 'Start tape then press any key.'
 2930+097D
 2931+097D FD CB 02 EE  		SET	5,(IY+$02)	; TV_FLAG  - Signal lower screen requires
 2932+0981              					; clearing
 2933+0981 CD D4 15     		CALL	o15D4		; routine WAIT-KEY
 2934+0984
 2935+0984 DD E5        		PUSH	IX		; save pointer to descriptor.
 2936+0986 11 11 00     		LD	DE,$0011	; there are seventeen bytes.
 2937+0989 AF           		XOR	A		; signal a header.
 2938+098A CD C2 04     		CALL	o04C2		; routine SA-BYTES
 2939+098D
 2940+098D DD E1        		POP	IX		; restore descriptor pointer.
 2941+098F
 2942+098F 06 32        		LD	B,$32		; wait for a second - 50 interrupts.
 2943+0991
 2944+0991              ;; SA-1-SEC
 2945+0991 76           o0991:		HALT
 2946+0992 10 FD        		DJNZ	o0991		; back to SA-1-SEC until pause complete.
 2947+0994
 2948+0994 DD 5E 0B     		LD	E,(IX+$0B)	; fetch length of bytes from the
 2949+0997 DD 56 0C     		LD	D,(IX+$0C)	; descriptor.
 2950+099A
 2951+099A 3E FF        		LD	A,$FF		; signal data bytes.
 2952+099C
 2953+099C DD E1        		POP	IX		; retrieve pointer to start
 2954+099E C3 C2 04     		JP	o04C2		; jump back to SA-BYTES
 2955+09A1
 2956+09A1
 2957+09A1              ;   Arrangement of two headers in workspace.
 2958+09A1              ;   Originally IX addresses first location and only one header is required
 2959+09A1              ;   when saving.
 2960+09A1              ;
 2961+09A1              ;   OLD     NEW         PROG   DATA  DATA  CODE
 2962+09A1              ;   HEADER  HEADER             num   chr          NOTES.
 2963+09A1              ;   ------  ------      ----   ----  ----  ----   -----------------------------
 2964+09A1              ;   IX-$11  IX+$00      0      1     2     3      Type.
 2965+09A1              ;   IX-$10  IX+$01      x      x     x     x      F  ($FF if filename is null).
 2966+09A1              ;   IX-$0F  IX+$02      x      x     x     x      i
 2967+09A1              ;   IX-$0E  IX+$03      x      x     x     x      l
 2968+09A1              ;   IX-$0D  IX+$04      x      x     x     x      e
 2969+09A1              ;   IX-$0C  IX+$05      x      x     x     x      n
 2970+09A1              ;   IX-$0B  IX+$06      x      x     x     x      a
 2971+09A1              ;   IX-$0A  IX+$07      x      x     x     x      m
 2972+09A1              ;   IX-$09  IX+$08      x      x     x     x      e
 2973+09A1              ;   IX-$08  IX+$09      x      x     x     x      .
 2974+09A1              ;   IX-$07  IX+$0A      x      x     x     x      (terminal spaces).
 2975+09A1              ;   IX-$06  IX+$0B      lo     lo    lo    lo     Total
 2976+09A1              ;   IX-$05  IX+$0C      hi     hi    hi    hi     Length of datablock.
 2977+09A1              ;   IX-$04  IX+$0D      Auto   -     -     Start  Various
 2978+09A1              ;   IX-$03  IX+$0E      Start  a-z   a-z   addr   ($80 if no autostart).
 2979+09A1              ;   IX-$02  IX+$0F      lo     -     -     -      Length of Program
 2980+09A1              ;   IX-$01  IX+$10      hi     -     -     -      only i.e. without variables.
 2981+09A1              ;
 2982+09A1
 2983+09A1
 2984+09A1              ; ------------------------
 2985+09A1              ; Canned cassette messages
 2986+09A1              ; ------------------------
 2987+09A1              ;   The last-character-inverted Cassette messages.
 2988+09A1              ;   Starts with normal initial step-over byte.
 2989+09A1
 2990+09A1              ;; tape-msgs
 2991+09A1 80           o09A1:		DB	$80
 2992+09A2 50 72 65 73  		DM	"Press REC & PLAY, then any key"
 2992+09A6 73 20 52 45
 2992+09AA 43 20 26 20
 2992+09AE 50 4C 41 59
 2992+09B2 2C 20 74 68
 2992+09B6 65 6E 20 61
 2992+09BA 6E 79 20 6B
 2992+09BE 65 79
 2993+09C0 AE           o09C0:		DB	'.'+$80
 2994+09C1 0D           		DB	$0D
 2995+09C2 50 72 6F 67  		DM	"Program:"
 2995+09C6 72 61 6D 3A
 2996+09CA A0           		DB	" "+$80
 2997+09CB 0D           		DB	$0D
 2998+09CC 4E 75 6D 62  		DM	"Number array:"
 2998+09D0 65 72 20 61
 2998+09D4 72 72 61 79
 2998+09D8 3A
 2999+09D9 A0           		DB	" "+$80
 3000+09DA 0D           		DB	$0D
 3001+09DB 43 68 61 72  		DM	"Character array:"
 3001+09DF 61 63 74 65
 3001+09E3 72 20 61 72
 3001+09E7 72 61 79 3A
 3002+09EB A0           		DB	" "+$80
 3003+09EC 0D           		DB	$0D
 3004+09ED 42 79 74 65  		DM	"Bytes:"
 3004+09F1 73 3A
 3005+09F3 A0           		DB	" "+$80
 3006+09F4
 3007+09F4              ;**************************************************
 3008+09F4              ;** Part 5. SCREEN AND PRINTER HANDLING ROUTINES **
 3009+09F4              ;**************************************************
 3010+09F4
 3011+09F4              ; --------------------------
 3012+09F4              ; THE 'PRINT OUTPUT' ROUTINE
 3013+09F4              ; --------------------------
 3014+09F4              ;   This is the routine most often used by the RST 10 restart although the
 3015+09F4              ;   subroutine is on two occasions called directly when it is known that
 3016+09F4              ;   output will definitely be to the lower screen.
 3017+09F4
 3018+09F4              ;; PRINT-OUT
 3019+09F4 CD 03 0B     o09F4:		CALL	o0B03		; routine PO-FETCH fetches print position
 3020+09F7              					; to HL register pair.
 3021+09F7 FE 20        		CP	$20		; is character a space or higher ?
 3022+09F9 D2 D9 0A     		JP	NC,o0AD9	; jump forward to PO-ABLE if so.
 3023+09FC
 3024+09FC FE 06        		CP	$06		; is character in range 00-05 ?
 3025+09FE 38 69        		JR	C,o0A69		; to PO-QUEST to print "?" if so.
 3026+0A00
 3027+0A00 FE 18        		CP	$18		; is character in range 24d - 31d ?
 3028+0A02 30 65        		JR	NC,o0A69	; to PO-QUEST to also print "?" if so.
 3029+0A04
 3030+0A04 21 0B 0A     		LD	HL,o0A11-6	; address 0A0B - the base address of control
 3031+0A07              					; character table - where zero would be.
 3032+0A07 5F           		LD	E,A		; control character 06 - 23d
 3033+0A08 16 00        		LD	D,$00		; is transferred to DE.
 3034+0A0A
 3035+0A0A 19           		ADD	HL,DE		; index into table.
 3036+0A0B
 3037+0A0B 5E           		LD	E,(HL)		; fetch the offset to routine.
 3038+0A0C 19           		ADD	HL,DE		; add to make HL the address.
 3039+0A0D E5           		PUSH	HL		; push the address.
 3040+0A0E
 3041+0A0E C3 03 0B     		JP	o0B03		; Jump forward to PO-FETCH,
 3042+0A11              					; as the screen/printer position has been
 3043+0A11              					; disturbed, and then indirectly to the PO-STORE
 3044+0A11              					; routine on stack.
 3045+0A11
 3046+0A11              ; -----------------------------
 3047+0A11              ; THE 'CONTROL CHARACTER' TABLE
 3048+0A11              ; -----------------------------
 3049+0A11              ;   For control characters in the range 6 - 23d the following table
 3050+0A11              ;   is indexed to provide an offset to the handling routine that
 3051+0A11              ;   follows the table.
 3052+0A11
 3053+0A11              ;; ctlchrtab
 3054+0A11 4E           o0A11:		DB	o0A5F-$		; 06d offset $4E to Address: PO-COMMA
 3055+0A12 57           		DB	o0A69-$		; 07d offset $57 to Address: PO-QUEST
 3056+0A13 10           		DB	o0A23-$		; 08d offset $10 to Address: PO-BACK-1
 3057+0A14 29           		DB	o0A3D-$		; 09d offset $29 to Address: PO-RIGHT
 3058+0A15 54           		DB	o0A69-$		; 10d offset $54 to Address: PO-QUEST
 3059+0A16 53           		DB	o0A69-$		; 11d offset $53 to Address: PO-QUEST
 3060+0A17 52           		DB	o0A69-$		; 12d offset $52 to Address: PO-QUEST
 3061+0A18 37           		DB	o0A4F-$		; 13d offset $37 to Address: PO-ENTER
 3062+0A19 50           		DB	o0A69-$		; 14d offset $50 to Address: PO-QUEST
 3063+0A1A 4F           		DB	o0A69-$		; 15d offset $4F to Address: PO-QUEST
 3064+0A1B 5F           		DB	o0A7A-$		; 16d offset $5F to Address: PO-1-OPER
 3065+0A1C 5E           		DB	o0A7A-$		; 17d offset $5E to Address: PO-1-OPER
 3066+0A1D 5D           		DB	o0A7A-$		; 18d offset $5D to Address: PO-1-OPER
 3067+0A1E 5C           		DB	o0A7A-$		; 19d offset $5C to Address: PO-1-OPER
 3068+0A1F 5B           		DB	o0A7A-$		; 20d offset $5B to Address: PO-1-OPER
 3069+0A20 5A           		DB	o0A7A-$		; 21d offset $5A to Address: PO-1-OPER
 3070+0A21 54           		DB	o0A75-$		; 22d offset $54 to Address: PO-2-OPER
 3071+0A22 53           		DB	o0A75-$		; 23d offset $53 to Address: PO-2-OPER
 3072+0A23
 3073+0A23
 3074+0A23              ; -------------------------
 3075+0A23              ; THE 'CURSOR LEFT' ROUTINE
 3076+0A23              ; -------------------------
 3077+0A23              ;   Backspace and up a line if that action is from the left of screen.
 3078+0A23              ;   For ZX printer backspace up to first column but not beyond.
 3079+0A23
 3080+0A23              ;; PO-BACK-1
 3081+0A23 0C           o0A23:		INC	C		; move left one column.
 3082+0A24 3E 22        		LD	A,$22		; value $21 is leftmost column.
 3083+0A26 B9           		CP	C		; have we passed ?
 3084+0A27 20 11        		JR	NZ,o0A3A	; to PO-BACK-3 if not and store new position.
 3085+0A29
 3086+0A29 FD CB 01 4E  		BIT	1,(IY+$01)	; test FLAGS  - is printer in use ?
 3087+0A2D 20 09        		JR	NZ,o0A38	; to PO-BACK-2 if so, as we are unable to
 3088+0A2F              					; backspace from the leftmost position.
 3089+0A2F
 3090+0A2F
 3091+0A2F 04           		INC	B		; move up one screen line
 3092+0A30 0E 02        		LD	C,$02		; the rightmost column position.
 3093+0A32 3E 18        		LD	A,$18		; Note. This should be $19
 3094+0A34              					; credit. Dr. Frank O'Hara, 1982
 3095+0A34
 3096+0A34 B8           		CP	B		; has position moved past top of screen ?
 3097+0A35 20 03        		JR	NZ,o0A3A	; to PO-BACK-3 if not and store new position.
 3098+0A37
 3099+0A37 05           		DEC	B		; else back to $18.
 3100+0A38
 3101+0A38              ;; PO-BACK-2
 3102+0A38 0E 21        o0A38:		LD	C,$21		; the leftmost column position.
 3103+0A3A
 3104+0A3A              ;; PO-BACK-3
 3105+0A3A C3 D9 0D     o0A3A:		JP	o0DD9		; to CL-SET and PO-STORE to save new
 3106+0A3D              					; position in system variables.
 3107+0A3D
 3108+0A3D              ; --------------------------
 3109+0A3D              ; THE 'CURSOR RIGHT' ROUTINE
 3110+0A3D              ; --------------------------
 3111+0A3D              ;   This moves the print position to the right leaving a trail in the
 3112+0A3D              ;   current background colour.
 3113+0A3D              ;   "However the programmer has failed to store the new print position
 3114+0A3D              ;   so CHR$ 9 will only work if the next print position is at a newly
 3115+0A3D              ;   defined place.
 3116+0A3D              ;   e.g. PRINT PAPER 2; CHR$ 9; AT 4,0;
 3117+0A3D              ;   does work but is not very helpful"
 3118+0A3D              ;   - Dr. Ian Logan, Understanding Your Spectrum, 1982.
 3119+0A3D
 3120+0A3D              ;; PO-RIGHT
 3121+0A3D 3A 91 5C     o0A3D:		LD	A,(	$5C91)	; fetch P_FLAG value
 3122+0A40 F5           		PUSH	AF		; and save it on stack.
 3123+0A41
 3124+0A41 FD 36 57 01  		LD	(IY+$57),$01	; temporarily set P_FLAG 'OVER 1'.
 3125+0A45 3E 20        		LD	A,$20		; prepare a space.
 3126+0A47 CD 65 0B     		CALL	o0B65		; routine PO-CHAR to print it.
 3127+0A4A              					; Note. could be PO-ABLE which would update
 3128+0A4A              					; the column position.
 3129+0A4A
 3130+0A4A F1           		POP	AF		; restore the permanent flag.
 3131+0A4B 32 91 5C     		LD	(	$5C91),A	; and restore system variable P_FLAG
 3132+0A4E
 3133+0A4E C9           		RET			; return without updating column position
 3134+0A4F
 3135+0A4F              ; -----------------------
 3136+0A4F              ; Perform carriage return
 3137+0A4F              ; -----------------------
 3138+0A4F              ; A carriage return is 'printed' to screen or printer buffer.
 3139+0A4F
 3140+0A4F              ;; PO-ENTER
 3141+0A4F FD CB 01 4E  o0A4F:		BIT	1,(IY+$01)	; test FLAGS  - is printer in use ?
 3142+0A53 C2 CD 0E     		JP	NZ,o0ECD	; to COPY-BUFF if so, to flush buffer and reset
 3143+0A56              					; the print position.
 3144+0A56
 3145+0A56 0E 21        		LD	C,$21		; the leftmost column position.
 3146+0A58 CD 55 0C     		CALL	o0C55		; routine PO-SCR handles any scrolling required.
 3147+0A5B 05           		DEC	B		; to next screen line.
 3148+0A5C C3 D9 0D     		JP	o0DD9		; jump forward to CL-SET to store new position.
 3149+0A5F
 3150+0A5F              ; -----------
 3151+0A5F              ; Print comma
 3152+0A5F              ; -----------
 3153+0A5F              ; The comma control character. The 32 column screen has two 16 character
 3154+0A5F              ; tabstops.  The routine is only reached via the control character table.
 3155+0A5F
 3156+0A5F              ;; PO-COMMA
 3157+0A5F CD 03 0B     o0A5F:		CALL	o0B03		; routine PO-FETCH - seems unnecessary.
 3158+0A62
 3159+0A62 79           		LD	A,C		; the column position. $21-$01
 3160+0A63 3D           		DEC	A		; move right. $20-$00
 3161+0A64 3D           		DEC	A		; and again   $1F-$00 or $FF if trailing
 3162+0A65 E6 10        		AND	$10		; will be $00 or $10.
 3163+0A67 18 5A        		JR	o0AC3		; forward to PO-FILL
 3164+0A69
 3165+0A69              ; -------------------
 3166+0A69              ; Print question mark
 3167+0A69              ; -------------------
 3168+0A69              ; This routine prints a question mark which is commonly
 3169+0A69              ; used to print an unassigned control character in range 0-31d.
 3170+0A69              ; there are a surprising number yet to be assigned.
 3171+0A69
 3172+0A69              ;; PO-QUEST
 3173+0A69 3E 3F        o0A69:		LD	A,$3F		; prepare the character "?".
 3174+0A6B 18 6C        		JR	o0AD9		; forward to PO-ABLE.
 3175+0A6D
 3176+0A6D              ; --------------------------------
 3177+0A6D              ; Control characters with operands
 3178+0A6D              ; --------------------------------
 3179+0A6D              ; Certain control characters are followed by 1 or 2 operands.
 3180+0A6D              ; The entry points from control character table are PO-2-OPER and PO-1-OPER.
 3181+0A6D              ; The routines alter the output address of the current channel so that
 3182+0A6D              ; subsequent RST $10 instructions take the appropriate action
 3183+0A6D              ; before finally resetting the output address back to PRINT-OUT.
 3184+0A6D
 3185+0A6D              ;; PO-TV-2
 3186+0A6D 11 87 0A     o0A6D:		LD	DE,o0A87	; address: PO-CONT will be next output routine
 3187+0A70 32 0F 5C     		LD	($5C0F),A	; store first operand in TVDATA-hi
 3188+0A73 18 0B        		JR	o0A80		; forward to PO-CHANGE >>
 3189+0A75
 3190+0A75              ; ---
 3191+0A75
 3192+0A75              ; -> This initial entry point deals with two operands - AT or TAB.
 3193+0A75
 3194+0A75              ;; PO-2-OPER
 3195+0A75 11 6D 0A     o0A75:		LD	DE,o0A6D	; address: PO-TV-2 will be next output routine
 3196+0A78 18 03        		JR	o0A7D		; forward to PO-TV-1
 3197+0A7A
 3198+0A7A              ; ---
 3199+0A7A
 3200+0A7A              ; -> This initial entry point deals with one operand INK to OVER.
 3201+0A7A
 3202+0A7A              ;; PO-1-OPER
 3203+0A7A 11 87 0A     o0A7A:		LD	DE,o0A87	; address: PO-CONT will be next output routine
 3204+0A7D
 3205+0A7D              ;; PO-TV-1
 3206+0A7D 32 0E 5C     o0A7D:		LD	(	$5C0E),A	; store control code in TVDATA-lo
 3207+0A80
 3208+0A80              ;; PO-CHANGE
 3209+0A80 2A 51 5C     o0A80:		LD	HL,(	$5C51)	; use CURCHL to find current output channel.
 3210+0A83 73           		LD	(HL),E		; make it
 3211+0A84 23           		INC	HL		; the supplied
 3212+0A85 72           		LD	(HL),D		; address from DE.
 3213+0A86 C9           		RET			; return.
 3214+0A87
 3215+0A87              ; ---
 3216+0A87
 3217+0A87              ;; PO-CONT
 3218+0A87 11 F4 09     o0A87:		LD	DE,o09F4	; Address: PRINT-OUT
 3219+0A8A CD 80 0A     		CALL	o0A80		; routine PO-CHANGE to restore normal channel.
 3220+0A8D 2A 0E 5C     		LD	HL,(	$5C0E)	; TVDATA gives control code and possible
 3221+0A90              					; subsequent character
 3222+0A90 57           		LD	D,A		; save current character
 3223+0A91 7D           		LD	A,L		; the stored control code
 3224+0A92 FE 16        		CP	$16		; was it INK to OVER (1 operand) ?
 3225+0A94 DA 11 22     		JP	C,o2211		; to CO-TEMP-5
 3226+0A97
 3227+0A97 20 29        		JR	NZ,o0AC2	; to PO-TAB if not 22d i.e. 23d TAB.
 3228+0A99
 3229+0A99              ; else must have been 22d AT.
 3230+0A99 44           		LD	B,H		; line to H   (0-23d)
 3231+0A9A 4A           		LD	C,D		; column to C (0-31d)
 3232+0A9B 3E 1F        		LD	A,$1F		; the value 31d
 3233+0A9D 91           		SUB	C		; reverse the column number.
 3234+0A9E 38 0C        		JR	C,o0AAC		; to PO-AT-ERR if C was greater than 31d.
 3235+0AA0
 3236+0AA0 C6 02        		ADD	A,$02		; transform to system range $02-$21
 3237+0AA2 4F           		LD	C,A		; and place in column register.
 3238+0AA3
 3239+0AA3 FD CB 01 4E  		BIT	1,(IY+$01)	; test FLAGS  - is printer in use ?
 3240+0AA7 20 16        		JR	NZ,o0ABF	; to PO-AT-SET as line can be ignored.
 3241+0AA9
 3242+0AA9 3E 16        		LD	A,$16		; 22 decimal
 3243+0AAB 90           		SUB	B		; subtract line number to reverse
 3244+0AAC              					; 0 - 22 becomes 22 - 0.
 3245+0AAC
 3246+0AAC              ;; PO-AT-ERR
 3247+0AAC DA 9F 1E     o0AAC:		JP	C,o1E9F		; to REPORT-B if higher than 22 decimal
 3248+0AAF              					; Integer out of range.
 3249+0AAF
 3250+0AAF 3C           		INC	A		; adjust for system range $01-$17
 3251+0AB0 47           		LD	B,A		; place in line register
 3252+0AB1 04           		INC	B		; adjust to system range  $02-$18
 3253+0AB2 FD CB 02 46  		BIT	0,(IY+$02)	; TV_FLAG  - Lower screen in use ?
 3254+0AB6 C2 55 0C     		JP	NZ,o0C55	; exit to PO-SCR to test for scrolling
 3255+0AB9
 3256+0AB9 FD BE 31     		CP	(IY+$31)	; Compare against DF_SZ
 3257+0ABC DA 86 0C     		JP	C,o0C86		; to REPORT-5 if too low
 3258+0ABF              					; Out of screen.
 3259+0ABF
 3260+0ABF              ;; PO-AT-SET
 3261+0ABF C3 D9 0D     o0ABF:		JP	o0DD9		; print position is valid so exit via CL-SET
 3262+0AC2
 3263+0AC2              ; ---
 3264+0AC2
 3265+0AC2              ; Continue here when dealing with TAB.
 3266+0AC2              ; Note. In BASIC, TAB is followed by a 16-bit number and was initially
 3267+0AC2              ; designed to work with any output device.
 3268+0AC2
 3269+0AC2              ;; PO-TAB
 3270+0AC2 7C           o0AC2:		LD	A,H		; transfer parameter to A
 3271+0AC3              					; Losing current character -
 3272+0AC3              					; High byte of TAB parameter.
 3273+0AC3
 3274+0AC3
 3275+0AC3              ;; PO-FILL
 3276+0AC3 CD 03 0B     o0AC3:		CALL	o0B03		; routine PO-FETCH, HL-addr, BC=line/column.
 3277+0AC6              					; column 1 (right), $21 (left)
 3278+0AC6 81           		ADD	A,C		; add operand to current column
 3279+0AC7 3D           		DEC	A		; range 0 - 31+
 3280+0AC8 E6 1F        		AND	$1F		; make range 0 - 31d
 3281+0ACA C8           		RET	Z		; return if result zero
 3282+0ACB
 3283+0ACB 57           		LD	D,A		; Counter to D
 3284+0ACC FD CB 01 C6  		SET	0,(IY+$01)	; update FLAGS  - signal suppress leading space.
 3285+0AD0
 3286+0AD0              ;; PO-SPACE
 3287+0AD0 3E 20        o0AD0:		LD	A,$20		; space character.
 3288+0AD2
 3289+0AD2 CD 3B 0C     		CALL	o0C3B		; routine PO-SAVE prints the character
 3290+0AD5              					; using alternate set (normal output routine)
 3291+0AD5
 3292+0AD5 15           		DEC	D		; decrement counter.
 3293+0AD6 20 F8        		JR	NZ,o0AD0	; to PO-SPACE until done
 3294+0AD8
 3295+0AD8 C9           		RET			; return
 3296+0AD9
 3297+0AD9              ; ----------------------
 3298+0AD9              ; Printable character(s)
 3299+0AD9              ; ----------------------
 3300+0AD9              ; This routine prints printable characters and continues into
 3301+0AD9              ; the position store routine
 3302+0AD9
 3303+0AD9              ;; PO-ABLE
 3304+0AD9 CD 24 0B     o0AD9:		CALL	o0B24		; routine PO-ANY
 3305+0ADC              					; and continue into position store routine.
 3306+0ADC
 3307+0ADC              ; ----------------------------
 3308+0ADC              ; THE 'POSITION STORE' ROUTINE
 3309+0ADC              ; ----------------------------
 3310+0ADC              ;   This routine updates the system variables associated with the main screen,
 3311+0ADC              ;   the lower screen/input buffer or the ZX printer.
 3312+0ADC
 3313+0ADC              ;; PO-STORE
 3314+0ADC FD CB 01 4E  o0ADC:		BIT	1,(IY+$01)	; Test FLAGS - is printer in use ?
 3315+0AE0 20 1A        		JR	NZ,o0AFC	; Forward, if so, to PO-ST-PR
 3316+0AE2
 3317+0AE2 FD CB 02 46  		BIT	0,(IY+$02)	; Test TV_FLAG - is lower screen in use ?
 3318+0AE6 20 08        		JR	NZ,o0AF0	; Forward, if so, to PO-ST-E
 3319+0AE8
 3320+0AE8              ;   This section deals with the upper screen.
 3321+0AE8
 3322+0AE8 ED 43 88 5C  		LD	(	$5C88),BC	; Update S_POSN - line/column upper screen
 3323+0AEC 22 84 5C     		LD	(	$5C84),HL	; Update DF_CC - upper display file address
 3324+0AEF
 3325+0AEF C9           		RET			; Return.
 3326+0AF0
 3327+0AF0              ; ---
 3328+0AF0
 3329+0AF0              ;   This section deals with the lower screen.
 3330+0AF0
 3331+0AF0              ;; PO-ST-E
 3332+0AF0 ED 43 8A 5C  o0AF0:		LD	(	$5C8A),BC	; Update SPOSNL line/column lower screen
 3333+0AF4 ED 43 82 5C  		LD	(	$5C82),BC	; Update ECHO_E line/column input buffer
 3334+0AF8 22 86 5C     		LD	(	$5C86),HL	; Update DFCCL  lower screen memory address
 3335+0AFB C9           		RET			; Return.
 3336+0AFC
 3337+0AFC              ; ---
 3338+0AFC
 3339+0AFC              ;   This section deals with the ZX Printer.
 3340+0AFC
 3341+0AFC              ;; PO-ST-PR
 3342+0AFC FD 71 45     o0AFC:		LD	(IY+$45),C	; Update P_POSN column position printer
 3343+0AFF 22 80 5C     		LD	(	$5C80),HL	; Update PR_CC - full printer buffer memory
 3344+0B02              					; address
 3345+0B02 C9           		RET			; Return.
 3346+0B03
 3347+0B03              ;   Note. that any values stored in location 23681 will be overwritten with
 3348+0B03              ;   the value 91 decimal.
 3349+0B03              ;   Credit April 1983, Dilwyn Jones. "Delving Deeper into your ZX Spectrum".
 3350+0B03
 3351+0B03              ; ----------------------------
 3352+0B03              ; THE 'POSITION FETCH' ROUTINE
 3353+0B03              ; ----------------------------
 3354+0B03              ;   This routine fetches the line/column and display file address of the upper
 3355+0B03              ;   and lower screen or, if the printer is in use, the column position and
 3356+0B03              ;   absolute memory address.
 3357+0B03              ;   Note. that PR-CC-hi (23681) is used by this routine and if, in accordance
 3358+0B03              ;   with the manual (that says this is unused), the location has been used for
 3359+0B03              ;   other purposes, then subsequent output to the printer buffer could corrupt
 3360+0B03              ;   a 256-byte section of memory.
 3361+0B03
 3362+0B03              ;; PO-FETCH
 3363+0B03 FD CB 01 4E  o0B03:		BIT	1,(IY+$01)	; Test FLAGS - is printer in use ?
 3364+0B07 20 14        		JR	NZ,o0B1D	; Forward, if so, to PO-F-PR
 3365+0B09
 3366+0B09              ;   assume upper screen in use and thus optimize for path that requires speed.
 3367+0B09
 3368+0B09 ED 4B 88 5C  		LD	BC,(	$5C88)	; Fetch line/column from S_POSN
 3369+0B0D 2A 84 5C     		LD	HL,(	$5C84)	; Fetch DF_CC display file address
 3370+0B10
 3371+0B10 FD CB 02 46  		BIT	0,(IY+$02)	; Test TV_FLAG - lower screen in use ?
 3372+0B14 C8           		RET	Z		; Return if upper screen in use.
 3373+0B15
 3374+0B15              ;   Overwrite registers with values for lower screen.
 3375+0B15
 3376+0B15 ED 4B 8A 5C  		LD	BC,(	$5C8A)	; Fetch line/column from SPOSNL
 3377+0B19 2A 86 5C     		LD	HL,(	$5C86)	; Fetch display file address from DFCCL
 3378+0B1C C9           		RET			; Return.
 3379+0B1D
 3380+0B1D              ; ---
 3381+0B1D
 3382+0B1D              ;   This section deals with the ZX Printer.
 3383+0B1D
 3384+0B1D              ;; PO-F-PR
 3385+0B1D FD 4E 45     o0B1D:		LD	C,(IY+$45)	; Fetch column from P_POSN.
 3386+0B20 2A 80 5C     		LD	HL,(	$5C80)	; Fetch printer buffer address from PR_CC.
 3387+0B23 C9           		RET			; Return.
 3388+0B24
 3389+0B24              ; ---------------------------------
 3390+0B24              ; THE 'PRINT ANY CHARACTER' ROUTINE
 3391+0B24              ; ---------------------------------
 3392+0B24              ;   This routine is used to print any character in range 32d - 255d
 3393+0B24              ;   It is only called from PO-ABLE which continues into PO-STORE
 3394+0B24
 3395+0B24              ;; PO-ANY
 3396+0B24 FE 80        o0B24:		CP	$80		; ASCII ?
 3397+0B26 38 3D        		JR	C,o0B65		; to PO-CHAR is so.
 3398+0B28
 3399+0B28 FE 90        		CP	$90		; test if a block graphic character.
 3400+0B2A 30 26        		JR	NC,o0B52	; to PO-T&UDG to print tokens and UDGs
 3401+0B2C
 3402+0B2C              ; The 16 2*2 mosaic characters 128-143 decimal are formed from
 3403+0B2C              ; bits 0-3 of the character.
 3404+0B2C
 3405+0B2C 47           		LD	B,A		; save character
 3406+0B2D CD 38 0B     		CALL	o0B38		; routine PO-GR-1 to construct top half
 3407+0B30              					; then bottom half.
 3408+0B30 CD 03 0B     		CALL	o0B03		; routine PO-FETCH fetches print position.
 3409+0B33 11 92 5C     		LD	DE,	$5C92	; MEM-0 is location of 8 bytes of character
 3410+0B36 18 47        		JR	o0B7F		; to PR-ALL to print to screen or printer
 3411+0B38
 3412+0B38              ; ---
 3413+0B38
 3414+0B38              ;; PO-GR-1
 3415+0B38 21 92 5C     o0B38:		LD	HL,	$5C92	; address MEM-0 - a temporary buffer in
 3416+0B3B              					; systems variables which is normally used
 3417+0B3B              					; by the calculator.
 3418+0B3B CD 3E 0B     		CALL	o0B3E		; routine PO-GR-2 to construct top half
 3419+0B3E              					; and continue into routine to construct
 3420+0B3E              					; bottom half.
 3421+0B3E
 3422+0B3E              ;; PO-GR-2
 3423+0B3E CB 18        o0B3E:		RR	B		; rotate bit 0/2 to carry
 3424+0B40 9F           		SBC	A,A		; result $00 or $FF
 3425+0B41 E6 0F        		AND	$0F		; mask off right hand side
 3426+0B43 4F           		LD	C,A		; store part in C
 3427+0B44 CB 18        		RR	B		; rotate bit 1/3 of original chr to carry
 3428+0B46 9F           		SBC	A,A		; result $00 or $FF
 3429+0B47 E6 F0        		AND	$F0		; mask off left hand side
 3430+0B49 B1           		OR	C		; combine with stored pattern
 3431+0B4A 0E 04        		LD	C,$04		; four bytes for top/bottom half
 3432+0B4C
 3433+0B4C              ;; PO-GR-3
 3434+0B4C 77           o0B4C:		LD	(HL),A		; store bit patterns in temporary buffer
 3435+0B4D 23           		INC	HL		; next address
 3436+0B4E 0D           		DEC	C		; jump back to
 3437+0B4F 20 FB        		JR	NZ,o0B4C	; to PO-GR-3 until byte is stored 4 times
 3438+0B51
 3439+0B51 C9           		RET			; return
 3440+0B52
 3441+0B52              ; ---
 3442+0B52
 3443+0B52              ; Tokens and User defined graphics are now separated.
 3444+0B52
 3445+0B52              ;; PO-T&UDG
 3446+0B52 C3 7E 3A     o0B52:		JP	o3A7E
 3447+0B55 00           		NOP
 3448+0B56
 3449+0B56 C6 15        o0B56:		ADD	A,$15		; add 21d to restore to 0 - 20
 3450+0B58 C5           		PUSH	BC		; save current print position
 3451+0B59 ED 4B 7B 5C  		LD	BC,(	$5C7B)	; fetch UDG to address bit patterns
 3452+0B5D 18 0B        		JR	o0B6A		; to PO-CHAR-2 - common code to lay down
 3453+0B5F              					; a bit patterned character
 3454+0B5F
 3455+0B5F              ; ---
 3456+0B5F
 3457+0B5F              ;; PO-T
 3458+0B5F CD 10 0C     o0B5F:		CALL	o0C10		; routine PO-TOKENS prints tokens
 3459+0B62 C3 03 0B     		JP	o0B03		; exit via a JUMP to PO-FETCH as this routine
 3460+0B65              					; must continue into PO-STORE.
 3461+0B65              					; A JR instruction could be used.
 3462+0B65
 3463+0B65              ; This point is used to print ASCII characters  32d - 127d.
 3464+0B65
 3465+0B65              ;; PO-CHAR
 3466+0B65 C5           o0B65:		PUSH	BC		; save print position
 3467+0B66 ED 4B 36 5C  		LD	BC,(	$5C36)	; address CHARS
 3468+0B6A
 3469+0B6A              ; This common code is used to transfer the character bytes to memory.
 3470+0B6A
 3471+0B6A              ;; PO-CHAR-2
 3472+0B6A EB           o0B6A:		EX	DE,HL		; transfer destination address to DE
 3473+0B6B 21 3B 5C     		LD	HL,	$5C3B	; point to FLAGS
 3474+0B6E CB 86        		RES	0,(HL)		; allow for leading space
 3475+0B70 FE 20        		CP	$20		; is it a space ?
 3476+0B72 20 02        		JR	NZ,o0B76	; to PO-CHAR-3 if not
 3477+0B74
 3478+0B74 CB C6        		SET	0,(HL)		; signal no leading space to FLAGS
 3479+0B76
 3480+0B76              ;; PO-CHAR-3
 3481+0B76 26 00        o0B76:		LD	H,$00		; set high byte to 0
 3482+0B78 6F           		LD	L,A		; character to A
 3483+0B79              					; 0-21 UDG or 32-127 ASCII.
 3484+0B79 29           		ADD	HL,HL		; multiply
 3485+0B7A 29           		ADD	HL,HL		; by
 3486+0B7B 29           		ADD	HL,HL		; eight
 3487+0B7C 09           		ADD	HL,BC		; HL now points to first byte of character
 3488+0B7D C1           		POP	BC		; the source address CHARS or UDG
 3489+0B7E EB           		EX	DE,HL		; character address to DE
 3490+0B7F
 3491+0B7F              ; ----------------------------------
 3492+0B7F              ; THE 'PRINT ALL CHARACTERS' ROUTINE
 3493+0B7F              ; ----------------------------------
 3494+0B7F              ;   This entry point entered from above to print ASCII and UDGs but also from
 3495+0B7F              ;   earlier to print mosaic characters.
 3496+0B7F              ;   HL=destination
 3497+0B7F              ;   DE=character source
 3498+0B7F              ;   BC=line/column
 3499+0B7F
 3500+0B7F              ;; PR-ALL
 3501+0B7F 79           o0B7F:		LD	A,C		; column to A
 3502+0B80 3D           		DEC	A		; move right
 3503+0B81 3E 21        		LD	A,$21		; pre-load with leftmost position
 3504+0B83 20 0E        		JR	NZ,o0B93	; but if not zero to PR-ALL-1
 3505+0B85
 3506+0B85 05           		DEC	B		; down one line
 3507+0B86 4F           		LD	C,A		; load C with $21
 3508+0B87 FD CB 01 4E  		BIT	1,(IY+$01)	; test FLAGS  - Is printer in use
 3509+0B8B 28 06        		JR	Z,o0B93		; to PR-ALL-1 if not
 3510+0B8D
 3511+0B8D D5           		PUSH	DE		; save source address
 3512+0B8E CD CD 0E     		CALL	o0ECD		; routine COPY-BUFF outputs line to printer
 3513+0B91 D1           		POP	DE		; restore character source address
 3514+0B92 79           		LD	A,C		; the new column number ($21) to C
 3515+0B93
 3516+0B93              ;; PR-ALL-1
 3517+0B93 B9           o0B93:		CP	C		; this test is really for screen - new line ?
 3518+0B94 D5           		PUSH	DE		; save source
 3519+0B95
 3520+0B95 CC 55 0C     		CALL	Z,o0C55		; routine PO-SCR considers scrolling
 3521+0B98
 3522+0B98 D1           		POP	DE		; restore source
 3523+0B99 C5           		PUSH	BC		; save line/column
 3524+0B9A E5           		PUSH	HL		; and destination
 3525+0B9B 3A 91 5C     		LD	A,(	$5C91)	; fetch P_FLAG to accumulator
 3526+0B9E 06 FF        		LD	B,$FF		; prepare OVER mask in B.
 3527+0BA0 1F           		RRA			; bit 0 set if OVER 1
 3528+0BA1 38 01        		JR	C,o0BA4		; to PR-ALL-2
 3529+0BA3
 3530+0BA3 04           		INC	B		; set OVER mask to 0
 3531+0BA4
 3532+0BA4              ;; PR-ALL-2
 3533+0BA4 1F           o0BA4:		RRA
 3534+0BA5 1F           		RRA			; bit 2 is INVERSE
 3535+0BA6 9F           		SBC	A,A		; will be FF for INVERSE 1 else zero
 3536+0BA7 4F           		LD	C,A		; transfer INVERSE mask to C
 3537+0BA8 3E 08        		LD	A,$08		; prepare to count 8 bytes
 3538+0BAA A7           		AND	A		; clear carry to signal screen
 3539+0BAB FD CB 01 4E  		BIT	1,(IY+$01)	; test FLAGS  - is printer in use ?
 3540+0BAF 28 05        		JR	Z,o0BB6		; to PR-ALL-3 if screen
 3541+0BB1
 3542+0BB1 FD CB 30 CE  		SET	1,(IY+$30)	; update FLAGS2  - signal printer buffer has
 3543+0BB5              					; been used.
 3544+0BB5 37           		SCF			; set carry flag to signal printer.
 3545+0BB6
 3546+0BB6              ;; PR-ALL-3
 3547+0BB6 EB           o0BB6:		EX	DE,HL		; now HL=source, DE=destination
 3548+0BB7
 3549+0BB7              ;; PR-ALL-4
 3550+0BB7 08           o0BB7:		EX	AF,AF'		; save printer/screen flag
 3551+0BB8 1A           		LD	A,(DE)		; fetch existing destination byte
 3552+0BB9 A0           		AND	B		; consider OVER
 3553+0BBA AE           		XOR	(HL)		; now XOR with source
 3554+0BBB A9           		XOR	C		; now with INVERSE MASK
 3555+0BBC 12           		LD	(DE),A		; update screen/printer
 3556+0BBD 08           		EX	AF,AF'		; restore flag
 3557+0BBE 38 13        		JR	C,o0BD3		; to PR-ALL-6 - printer address update
 3558+0BC0
 3559+0BC0 14           		INC	D		; gives next pixel line down screen
 3560+0BC1
 3561+0BC1              ;; PR-ALL-5
 3562+0BC1 23           o0BC1:		INC	HL		; address next character byte
 3563+0BC2 3D           		DEC	A		; the byte count is decremented
 3564+0BC3 20 F2        		JR	NZ,o0BB7	; back to PR-ALL-4 for all 8 bytes
 3565+0BC5
 3566+0BC5 EB           		EX	DE,HL		; destination to HL
 3567+0BC6 25           		DEC	H		; bring back to last updated screen position
 3568+0BC7 FD CB 01 4E  		BIT	1,(IY+$01)	; test FLAGS  - is printer in use ?
 3569+0BCB CC DB 0B     		CALL	Z,o0BDB		; if not, call routine PO-ATTR to update
 3570+0BCE              					; corresponding colour attribute.
 3571+0BCE E1           		POP	HL		; restore original screen/printer position
 3572+0BCF C1           		POP	BC		; and line column
 3573+0BD0 0D           		DEC	C		; move column to right
 3574+0BD1 23           		INC	HL		; increase screen/printer position
 3575+0BD2 C9           		RET			; return and continue into PO-STORE
 3576+0BD3              					; within PO-ABLE
 3577+0BD3
 3578+0BD3              ; ---
 3579+0BD3
 3580+0BD3              ;   This branch is used to update the printer position by 32 places
 3581+0BD3              ;   Note. The high byte of the address D remains constant (which it should).
 3582+0BD3
 3583+0BD3              ;; PR-ALL-6
 3584+0BD3 08           o0BD3:		EX	AF,AF'		; save the flag
 3585+0BD4 3E 20        		LD	A,$20		; load A with 32 decimal
 3586+0BD6 83           		ADD	A,E		; add this to E
 3587+0BD7 5F           		LD	E,A		; and store result in E
 3588+0BD8 08           		EX	AF,AF'		; fetch the flag
 3589+0BD9 18 E6        		JR	o0BC1		; back to PR-ALL-5
 3590+0BDB
 3591+0BDB              ; -----------------------------------
 3592+0BDB              ; THE 'GET ATTRIBUTE ADDRESS' ROUTINE
 3593+0BDB              ; -----------------------------------
 3594+0BDB              ;   This routine is entered with the HL register holding the last screen
 3595+0BDB              ;   address to be updated by PRINT or PLOT.
 3596+0BDB              ;   The Spectrum screen arrangement leads to the L register holding the correct
 3597+0BDB              ;   value for the attribute file and it is only necessary to manipulate H to
 3598+0BDB              ;   form the correct colour attribute address.
 3599+0BDB
 3600+0BDB              ;; PO-ATTR
 3601+0BDB 7C           o0BDB:		LD	A,H		; fetch high byte $40 - $57
 3602+0BDC 0F           		RRCA			; shift
 3603+0BDD 0F           		RRCA			; bits 3 and 4
 3604+0BDE 0F           		RRCA			; to right.
 3605+0BDF E6 03        		AND	$03		; range is now 0 - 2
 3606+0BE1 F6 58        		OR	$58		; form correct high byte for third of screen
 3607+0BE3 67           		LD	H,A		; HL is now correct
 3608+0BE4 ED 5B 8F 5C  		LD	DE,(	$5C8F)	; make D hold ATTR_T, E hold MASK-T
 3609+0BE8 7E           		LD	A,(HL)		; fetch existing attribute
 3610+0BE9 AB           		XOR	E		; apply masks
 3611+0BEA A2           		AND	D		;
 3612+0BEB AB           		XOR	E		;
 3613+0BEC FD CB 57 76  		BIT	6,(IY+$57)	; test P_FLAG  - is this PAPER 9 ??
 3614+0BF0 28 08        		JR	Z,o0BFA		; skip to PO-ATTR-1 if not.
 3615+0BF2
 3616+0BF2 E6 C7        		AND	$C7		; set paper
 3617+0BF4 CB 57        		BIT	2,A		; to contrast with ink
 3618+0BF6 20 02        		JR	NZ,o0BFA	; skip to PO-ATTR-1
 3619+0BF8
 3620+0BF8 EE 38        		XOR	$38		;
 3621+0BFA
 3622+0BFA              ;; PO-ATTR-1
 3623+0BFA FD CB 57 66  o0BFA:		BIT	4,(IY+$57)	; test P_FLAG  - Is this INK 9 ??
 3624+0BFE 28 08        		JR	Z,o0C08		; skip to PO-ATTR-2 if not
 3625+0C00
 3626+0C00 E6 F8        		AND	$F8		; make ink
 3627+0C02 CB 6F        		BIT	5,A		; contrast with paper.
 3628+0C04 20 02        		JR	NZ,o0C08	; to PO-ATTR-2
 3629+0C06
 3630+0C06 EE 07        		XOR	$07		;
 3631+0C08
 3632+0C08              ;; PO-ATTR-2
 3633+0C08 77           o0C08:		LD	(HL),A		; save the new attribute.
 3634+0C09 C9           		RET			; return.
 3635+0C0A
 3636+0C0A              ; ---------------------------------
 3637+0C0A              ; THE 'MESSAGE PRINTING' SUBROUTINE
 3638+0C0A              ; ---------------------------------
 3639+0C0A              ;   This entry point is used to print tape, boot-up, scroll? and error messages.
 3640+0C0A              ;   On entry the DE register points to an initial step-over byte or the
 3641+0C0A              ;   inverted end-marker of the previous entry in the table.
 3642+0C0A              ;   Register A contains the message number, often zero to print first message.
 3643+0C0A              ;   (HL has nothing important usually P_FLAG)
 3644+0C0A
 3645+0C0A              ;; PO-MSG
 3646+0C0A E5           o0C0A:		PUSH	HL		; put hi-byte zero on stack to suppress
 3647+0C0B 26 00        		LD	H,$00		; trailing spaces
 3648+0C0D E3           		EX	(SP),HL		; ld h,0; push hl would have done ?.
 3649+0C0E 18 04        		JR	o0C14		; forward to PO-TABLE.
 3650+0C10
 3651+0C10              ; ---
 3652+0C10
 3653+0C10              ;   This entry point prints the BASIC keywords, '<>' etc. from alt set
 3654+0C10
 3655+0C10              ;; PO-TOKENS
 3656+0C10 11 95 00     o0C10:		LD	DE,o0095	; address: TKN-TABLE
 3657+0C13 F5           		PUSH	AF		; save the token number to control
 3658+0C14              					; trailing spaces - see later *
 3659+0C14
 3660+0C14              ; ->
 3661+0C14
 3662+0C14              ;; PO-TABLE
 3663+0C14 CD 41 0C     o0C14:		CALL	o0C41		; routine PO-SEARCH will set carry for
 3664+0C17              					; all messages and function words.
 3665+0C17
 3666+0C17 38 09        o0C17:		JR	C,o0C22		; forward to PO-EACH if not a command, '<>' etc.
 3667+0C19
 3668+0C19 3E 20        		LD	A,$20		; prepare leading space
 3669+0C1B FD CB 01 46  		BIT	0,(IY+$01)	; test FLAGS  - leading space if not set
 3670+0C1F
 3671+0C1F CC 3B 0C     		CALL	Z,o0C3B		; routine PO-SAVE to print a space without
 3672+0C22              					; disturbing registers.
 3673+0C22
 3674+0C22              ;; PO-EACH
 3675+0C22 1A           o0C22:		LD	A,(DE)		; Fetch character from the table.
 3676+0C23 E6 7F        		AND	$7F		; Cancel any inverted bit.
 3677+0C25
 3678+0C25 CD 3B 0C     		CALL	o0C3B		; Routine PO-SAVE to print using the alternate
 3679+0C28              					; set of registers.
 3680+0C28
 3681+0C28 1A           		LD	A,(DE)		; Re-fetch character from table.
 3682+0C29 13           		INC	DE		; Address next character in the table.
 3683+0C2A
 3684+0C2A 87           		ADD	A,A		; Was character inverted ?
 3685+0C2B              					; (this also doubles character)
 3686+0C2B 30 F5        		JR	NC,o0C22	; back to PO-EACH if not.
 3687+0C2D
 3688+0C2D D1           		POP	DE		; * re-fetch trailing space byte to D
 3689+0C2E
 3690+0C2E FE 48        		CP	$48		; was the last character "$" ?
 3691+0C30 28 03        		JR	Z,o0C35		; forward to PO-TR-SP to consider trailing
 3692+0C32              					; space if so.
 3693+0C32
 3694+0C32 FE 82        		CP	$82		; was it < 'A' i.e. "#",">","=" from tokens
 3695+0C34              					; or " ",'.' (from tape) or "?" from scroll
 3696+0C34
 3697+0C34 D8           		RET	C		; Return if so as no trailing space required.
 3698+0C35
 3699+0C35              ;; PO-TR-SP
 3700+0C35 7A           o0C35:		LD	A,D		; The trailing space flag (zero if an error msg)
 3701+0C36
 3702+0C36 FE 03        		CP	$03		; Test against RND, INKEY$ and PI which have no
 3703+0C38              					; parameters and therefore no trailing space.
 3704+0C38
 3705+0C38 D8           		RET	C		; Return if no trailing space.
 3706+0C39
 3707+0C39 3E 20        		LD	A,$20		; Prepare the space character and continue to
 3708+0C3B              					; print and make an indirect return.
 3709+0C3B
 3710+0C3B              ; -----------------------------------
 3711+0C3B              ; THE 'RECURSIVE PRINTING' SUBROUTINE
 3712+0C3B              ; -----------------------------------
 3713+0C3B              ;   This routine which is part of PRINT-OUT allows RST $10 to be used
 3714+0C3B              ;   recursively to print tokens and the spaces associated with them.
 3715+0C3B              ;   It is called on three occasions when the value of DE must be preserved.
 3716+0C3B
 3717+0C3B              ;; PO-SAVE
 3718+0C3B D5           o0C3B:		PUSH	DE		; Save DE value.
 3719+0C3C D9           		EXX			; Switch in main set
 3720+0C3D
 3721+0C3D D7           		RST	10H		; PRINT-A prints using this alternate set.
 3722+0C3E
 3723+0C3E D9           		EXX			; Switch back to this alternate set.
 3724+0C3F D1           		POP	DE		; Restore the initial DE value.
 3725+0C40
 3726+0C40 C9           		RET			; Return.
 3727+0C41
 3728+0C41              ; ------------
 3729+0C41              ; Table search
 3730+0C41              ; ------------
 3731+0C41              ; This subroutine searches a message or the token table for the
 3732+0C41              ; message number held in A. DE holds the address of the table.
 3733+0C41
 3734+0C41              ;; PO-SEARCH
 3735+0C41 F5           o0C41:		PUSH	AF		; save the message/token number
 3736+0C42 EB           		EX	DE,HL		; transfer DE to HL
 3737+0C43 3C           		INC	A		; adjust for initial step-over byte
 3738+0C44
 3739+0C44              ;; PO-STEP
 3740+0C44 CB 7E        o0C44:		BIT	7,(HL)		; is character inverted ?
 3741+0C46 23           		INC	HL		; address next
 3742+0C47 28 FB        		JR	Z,o0C44		; back to PO-STEP if not inverted.
 3743+0C49
 3744+0C49 3D           		DEC	A		; decrease counter
 3745+0C4A 20 F8        		JR	NZ,o0C44	; back to PO-STEP if not zero
 3746+0C4C
 3747+0C4C EB           		EX	DE,HL		; transfer address to DE
 3748+0C4D F1           		POP	AF		; restore message/token number
 3749+0C4E FE 20        		CP	$20		; return with carry set
 3750+0C50 D8           		RET	C		; for all messages and function tokens
 3751+0C51
 3752+0C51 1A           		LD	A,(DE)		; test first character of token
 3753+0C52 D6 41        		SUB	$41		; and return with carry set
 3754+0C54 C9           		RET			; if it is less that 'A'
 3755+0C55              					; i.e. '<>', '<=', '>='
 3756+0C55
 3757+0C55              ; ---------------
 3758+0C55              ; Test for scroll
 3759+0C55              ; ---------------
 3760+0C55              ; This test routine is called when printing carriage return, when considering
 3761+0C55              ; PRINT AT and from the general PRINT ALL characters routine to test if
 3762+0C55              ; scrolling is required, prompting the user if necessary.
 3763+0C55              ; This is therefore using the alternate set.
 3764+0C55              ; The B register holds the current line.
 3765+0C55
 3766+0C55              ;; PO-SCR
 3767+0C55 FD CB 01 4E  o0C55:		BIT	1,(IY+$01)	; test FLAGS  - is printer in use ?
 3768+0C59 C0           		RET	NZ		; return immediately if so.
 3769+0C5A
 3770+0C5A 11 D9 0D     		LD	DE,o0DD9	; set DE to address: CL-SET
 3771+0C5D D5           		PUSH	DE		; and push for return address.
 3772+0C5E
 3773+0C5E 78           		LD	A,B		; transfer the line to A.
 3774+0C5F FD CB 02 46  		BIT	0,(IY+$02)	; test TV_FLAG - lower screen in use ?
 3775+0C63 C2 02 0D     		JP	NZ,o0D02	; jump forward to PO-SCR-4 if so.
 3776+0C66
 3777+0C66 FD BE 31     		CP	(IY+$31)	; greater than DF_SZ display file size ?
 3778+0C69 38 1B        		JR	C,o0C86		; forward to REPORT-5 if less.
 3779+0C6B              					; 'Out of screen'
 3780+0C6B
 3781+0C6B C0           		RET	NZ		; return (via CL-SET) if greater
 3782+0C6C
 3783+0C6C FD CB 02 66  		BIT	4,(IY+$02)	; test TV_FLAG  - Automatic listing ?
 3784+0C70 28 16        		JR	Z,o0C88		; forward to PO-SCR-2 if not.
 3785+0C72
 3786+0C72 FD 5E 2D     		LD	E,(IY+$2D)	; fetch BREG - the count of scroll lines to E.
 3787+0C75 1D           		DEC	E		; decrease and jump
 3788+0C76 28 5A        		JR	Z,o0CD2		; to PO-SCR-3 if zero and scrolling required.
 3789+0C78
 3790+0C78 3E 00        		LD	A,$00		; explicit - select channel zero.
 3791+0C7A CD 01 16     		CALL	o1601		; routine CHAN-OPEN opens it.
 3792+0C7D
 3793+0C7D ED 7B 3F 5C  		LD	SP,(	$5C3F)	; set stack pointer to LIST_SP
 3794+0C81
 3795+0C81 FD CB 02 A6  		RES	4,(IY+$02)	; reset TV_FLAG  - signal auto listing finished.
 3796+0C85 C9           		RET			; return ignoring pushed value, CL-SET
 3797+0C86              					; to MAIN or EDITOR without updating
 3798+0C86              					; print position                         >>
 3799+0C86
 3800+0C86              ; ---
 3801+0C86
 3802+0C86
 3803+0C86              ;; REPORT-5
 3804+0C86 CF           o0C86:		RST	08H		; ERROR-1
 3805+0C87 04           		DB	$04		; Error Report: Out of screen
 3806+0C88
 3807+0C88              ; continue here if not an automatic listing.
 3808+0C88
 3809+0C88              ;; PO-SCR-2
 3810+0C88 FD 35 52     o0C88:		DEC	(IY+$52)	; decrease SCR_CT
 3811+0C8B 20 45        		JR	NZ,o0CD2	; forward to PO-SCR-3 to scroll display if
 3812+0C8D              					; result not zero.
 3813+0C8D
 3814+0C8D              ; now produce prompt.
 3815+0C8D
 3816+0C8D 3E 18        		LD	A,$18		; reset
 3817+0C8F 90           		SUB	B		; the
 3818+0C90 32 8C 5C     		LD	(	$5C8C),A	; SCR_CT scroll count
 3819+0C93 2A 8F 5C     		LD	HL,(	$5C8F)	; L=ATTR_T, H=MASK_T
 3820+0C96 E5           		PUSH	HL		; save on stack
 3821+0C97 3A 91 5C     		LD	A,(	$5C91)	; P_FLAG
 3822+0C9A F5           		PUSH	AF		; save on stack to prevent lower screen
 3823+0C9B              					; attributes (BORDCR etc.) being applied.
 3824+0C9B 3E FD        		LD	A,$FD		; select system channel 'K'
 3825+0C9D CD 01 16     		CALL	o1601		; routine CHAN-OPEN opens it
 3826+0CA0 AF           		XOR	A		; clear to address message directly
 3827+0CA1 11 F8 0C     		LD	DE,o0CF8	; make DE address: scrl-mssg
 3828+0CA4 CD 0A 0C     		CALL	o0C0A		; routine PO-MSG prints to lower screen
 3829+0CA7 FD CB 02 EE  		SET	5,(IY+$02)	; set TV_FLAG  - signal lower screen requires
 3830+0CAB              					; clearing
 3831+0CAB 21 3B 5C     		LD	HL,	$5C3B	; make HL address FLAGS
 3832+0CAE CB DE        		SET	3,(HL)		; signal 'L' mode.
 3833+0CB0 CB AE        		RES	5,(HL)		; signal 'no new key'.
 3834+0CB2 D9           		EXX			; switch to main set.
 3835+0CB3              					; as calling chr input from alternativo set.
 3836+0CB3 CD D4 15     		CALL	o15D4		; routine WAIT-KEY waits for new key
 3837+0CB6              					; Note. this is the right routine but the
 3838+0CB6              					; stream in use is unsatisfactory. From the
 3839+0CB6              					; choices available, it is however the best.
 3840+0CB6
 3841+0CB6 D9           		EXX			; switch back to alternate set.
 3842+0CB7 FE 20        		CP	$20		; space is considered as BREAK
 3843+0CB9 28 45        		JR	Z,o0D00		; forward to REPORT-D if so
 3844+0CBB              					; 'BREAK - CONT repeats'
 3845+0CBB
 3846+0CBB FE E2        		CP	$E2		; is character 'STOP' ?
 3847+0CBD 28 41        		JR	Z,o0D00		; forward to REPORT-D if so
 3848+0CBF
 3849+0CBF F6 20        		OR	$20		; convert to lower-case
 3850+0CC1 FE 6E        		CP	$6E		; is character 'n' ?
 3851+0CC3 28 3B        		JR	Z,o0D00		; forward to REPORT-D if so else scroll.
 3852+0CC5
 3853+0CC5 3E FE        		LD	A,$FE		; select system channel 'S'
 3854+0CC7 CD 01 16     		CALL	o1601		; routine CHAN-OPEN
 3855+0CCA F1           		POP	AF		; restore original P_FLAG
 3856+0CCB 32 91 5C     		LD	(	$5C91),A	; and save in P_FLAG.
 3857+0CCE E1           		POP	HL		; restore original ATTR_T, MASK_T
 3858+0CCF 22 8F 5C     		LD	(	$5C8F),HL	; and reset ATTR_T, MASK-T as 'scroll?' has
 3859+0CD2              					; been printed.
 3860+0CD2
 3861+0CD2              ;; PO-SCR-3
 3862+0CD2 CD FE 0D     o0CD2:		CALL	o0DFE		; routine CL-SC-ALL to scroll whole display
 3863+0CD5 FD 46 31     		LD	B,(IY+$31)	; fetch DF_SZ to B
 3864+0CD8 04           		INC	B		; increase to address last line of display
 3865+0CD9 0E 21        		LD	C,$21		; set C to $21 (was $21 from above routine)
 3866+0CDB C5           		PUSH	BC		; save the line and column in BC.
 3867+0CDC
 3868+0CDC CD 9B 0E     		CALL	o0E9B		; routine CL-ADDR finds display address.
 3869+0CDF
 3870+0CDF 7C           		LD	A,H		; now find the corresponding attribute byte
 3871+0CE0 0F           		RRCA			; (this code sequence is used twice
 3872+0CE1 0F           		RRCA			; elsewhere and is a candidate for
 3873+0CE2 0F           		RRCA			; a subroutine.)
 3874+0CE3 E6 03        		AND	$03		;
 3875+0CE5 F6 58        		OR	$58		;
 3876+0CE7 67           		LD	H,A		;
 3877+0CE8
 3878+0CE8 11 E0 5A     		LD	DE,$5AE0	; start of last 'line' of attribute area
 3879+0CEB 1A           		LD	A,(DE)		; get attribute for last line
 3880+0CEC 4E           		LD	C,(HL)		; transfer to base line of upper part
 3881+0CED 06 20        		LD	B,$20		; there are thirty two bytes
 3882+0CEF EB           		EX	DE,HL		; swap the pointers.
 3883+0CF0
 3884+0CF0              ;; PO-SCR-3A
 3885+0CF0 12           o0CF0:		LD	(DE),A		; transfer
 3886+0CF1 71           		LD	(HL),C		; attributes.
 3887+0CF2 13           		INC	DE		; address next.
 3888+0CF3 23           		INC	HL		; address next.
 3889+0CF4 10 FA        		DJNZ	o0CF0		; loop back to PO-SCR-3A for all adjacent
 3890+0CF6              					; attribute lines.
 3891+0CF6
 3892+0CF6 C1           		POP	BC		; restore the line/column.
 3893+0CF7 C9           		RET			; return via CL-SET (was pushed on stack).
 3894+0CF8
 3895+0CF8              ; ---
 3896+0CF8
 3897+0CF8              ; The message 'scroll?' appears here with last byte inverted.
 3898+0CF8
 3899+0CF8              ;; scrl-mssg
 3900+0CF8 80           o0CF8:		DB	$80		; initial step-over byte.
 3901+0CF9 73 63 72 6F  		DB	"scroll","?"+$80
 3901+0CFD 6C 6C BF
 3902+0D00
 3903+0D00              ;; REPORT-D
 3904+0D00 CF           o0D00:		RST	08H		; ERROR-1
 3905+0D01 0C           		DB	$0C		; Error Report: BREAK - CONT repeats
 3906+0D02
 3907+0D02              ; continue here if using lower display - A holds line number.
 3908+0D02
 3909+0D02              ;; PO-SCR-4
 3910+0D02 FE 02        o0D02:		CP	$02		; is line number less than 2 ?
 3911+0D04 38 80        		JR	C,o0C86		; to REPORT-5 if so
 3912+0D06              					; 'Out of Screen'.
 3913+0D06
 3914+0D06 FD 86 31     		ADD	A,(IY+$31)	; add DF_SZ
 3915+0D09 D6 19        		SUB	$19		;
 3916+0D0B D0           		RET	NC		; return if scrolling unnecessary
 3917+0D0C
 3918+0D0C ED 44        		NEG			; Negate to give number of scrolls required.
 3919+0D0E C5           		PUSH	BC		; save line/column
 3920+0D0F 47           		LD	B,A		; count to B
 3921+0D10 2A 8F 5C     		LD	HL,(	$5C8F)	; fetch current ATTR_T, MASK_T to HL.
 3922+0D13 E5           		PUSH	HL		; and save
 3923+0D14 2A 91 5C     		LD	HL,(	$5C91)	; fetch P_FLAG
 3924+0D17 E5           		PUSH	HL		; and save.
 3925+0D18              					; to prevent corruption by input AT
 3926+0D18
 3927+0D18 CD 4D 0D     		CALL	o0D4D		; routine TEMPS sets to BORDCR etc
 3928+0D1B 78           		LD	A,B		; transfer scroll number to A.
 3929+0D1C
 3930+0D1C              ;; PO-SCR-4A
 3931+0D1C F5           o0D1C:		PUSH	AF		; save scroll number.
 3932+0D1D 21 6B 5C     		LD	HL,	$5C6B	; address DF_SZ
 3933+0D20 46           		LD	B,(HL)		; fetch old value
 3934+0D21 78           		LD	A,B		; transfer to A
 3935+0D22 3C           		INC	A		; and increment
 3936+0D23 77           		LD	(HL),A		; then put back.
 3937+0D24 21 89 5C     		LD	HL,$5C89	; address S_POSN_hi - line
 3938+0D27 BE           		CP	(HL)		; compare
 3939+0D28 38 03        		JR	C,o0D2D		; forward to PO-SCR-4B if scrolling required
 3940+0D2A
 3941+0D2A 34           		INC	(HL)		; else increment S_POSN_hi
 3942+0D2B 06 18        		LD	B,$18		; set count to whole display ??
 3943+0D2D              					; Note. should be $17 and the top line will be
 3944+0D2D              					; scrolled into the ROM which is harmless on
 3945+0D2D              					; the standard set up.
 3946+0D2D              					; credit P.Giblin 1984.
 3947+0D2D
 3948+0D2D              ;; PO-SCR-4B
 3949+0D2D CD 00 0E     o0D2D:		CALL	o0E00		; routine CL-SCROLL scrolls B lines
 3950+0D30 F1           		POP	AF		; restore scroll counter.
 3951+0D31 3D           		DEC	A		; decrease
 3952+0D32 20 E8        		JR	NZ,o0D1C	; back to PO-SCR-4A until done
 3953+0D34
 3954+0D34 E1           		POP	HL		; restore original P_FLAG.
 3955+0D35 FD 75 57     		LD	(IY+$57),L	; and overwrite system variable P_FLAG.
 3956+0D38
 3957+0D38 E1           		POP	HL		; restore original ATTR_T/MASK_T.
 3958+0D39 22 8F 5C     		LD	(	$5C8F),HL	; and update system variables.
 3959+0D3C
 3960+0D3C ED 4B 88 5C  		LD	BC,(	$5C88)	; fetch S_POSN to BC.
 3961+0D40 FD CB 02 86  		RES	0,(IY+$02)	; signal to TV_FLAG  - main screen in use.
 3962+0D44 CD D9 0D     		CALL	o0DD9		; call routine CL-SET for upper display.
 3963+0D47
 3964+0D47 FD CB 02 C6  		SET	0,(IY+$02)	; signal to TV_FLAG  - lower screen in use.
 3965+0D4B C1           		POP	BC		; restore line/column
 3966+0D4C C9           		RET			; return via CL-SET for lower display.
 3967+0D4D
 3968+0D4D              ; ----------------------
 3969+0D4D              ; Temporary colour items
 3970+0D4D              ; ----------------------
 3971+0D4D              ; This subroutine is called 11 times to copy the permanent colour items
 3972+0D4D              ; to the temporary ones.
 3973+0D4D
 3974+0D4D              ;; TEMPS
 3975+0D4D AF           o0D4D:		XOR	A		; clear the accumulator
 3976+0D4E 2A 8D 5C     		LD	HL,(	$5C8D)	; fetch L=ATTR_P and H=MASK_P
 3977+0D51 FD CB 02 46  		BIT	0,(IY+$02)	; test TV_FLAG  - is lower screen in use ?
 3978+0D55 28 04        		JR	Z,o0D5B		; skip to TEMPS-1 if not
 3979+0D57
 3980+0D57 67           		LD	H,A		; set H, MASK P, to 00000000.
 3981+0D58 FD 6E 0E     		LD	L,(IY+$0E)	; fetch BORDCR to L which is used for lower
 3982+0D5B              					; screen.
 3983+0D5B
 3984+0D5B              ;; TEMPS-1
 3985+0D5B 22 8F 5C     o0D5B:		LD	(	$5C8F),HL	; transfer values to ATTR_T and MASK_T
 3986+0D5E
 3987+0D5E              ; for the print flag the permanent values are odd bits, temporary even bits.
 3988+0D5E
 3989+0D5E 21 91 5C     		LD	HL,	$5C91	; address P_FLAG.
 3990+0D61 20 02        		JR	NZ,o0D65	; skip to TEMPS-2 if lower screen using A=0.
 3991+0D63
 3992+0D63 7E           		LD	A,(HL)		; else pick up flag bits.
 3993+0D64 0F           		RRCA			; rotate permanent bits to temporary bits.
 3994+0D65
 3995+0D65              ;; TEMPS-2
 3996+0D65 AE           o0D65:		XOR	(HL)		;
 3997+0D66 E6 55        		AND	$55		; BIN 01010101
 3998+0D68 AE           		XOR	(HL)		; permanent now as original
 3999+0D69 77           		LD	(HL),A		; apply permanent bits to temporary bits.
 4000+0D6A C9           		RET			; and return.
 4001+0D6B
 4002+0D6B              ; -----------------
 4003+0D6B              ; THE 'CLS' COMMAND
 4004+0D6B              ; -----------------
 4005+0D6B              ;    This command clears the display.
 4006+0D6B              ;    The routine is also called during initialization and by the CLEAR command.
 4007+0D6B              ;    If it's difficult to write it should be difficult to read.
 4008+0D6B
 4009+0D6B              ;; CLS
 4010+0D6B CD AF 0D     o0D6B:		CALL	o0DAF		; Routine CL-ALL clears the entire display and
 4011+0D6E              					; sets the attributes to the permanent ones
 4012+0D6E              					; from ATTR-P.
 4013+0D6E
 4014+0D6E              ;   Having cleared all 24 lines of the display area, continue into the
 4015+0D6E              ;   subroutine that clears the lower display area.  Note that at the moment
 4016+0D6E              ;   the attributes for the lower lines are the same as upper ones and have
 4017+0D6E              ;   to be changed to match the BORDER colour.
 4018+0D6E
 4019+0D6E              ; --------------------------
 4020+0D6E              ; THE 'CLS-LOWER' SUBROUTINE
 4021+0D6E              ; --------------------------
 4022+0D6E              ;   This routine is called from INPUT, and from the MAIN execution loop.
 4023+0D6E              ;   This is very much a housekeeping routine which clears between 2 and 23
 4024+0D6E              ;   lines of the display, setting attributes and correcting situations where
 4025+0D6E              ;   errors have occurred while the normal input and output routines have been
 4026+0D6E              ;   temporarily diverted to deal with, say colour control codes.
 4027+0D6E
 4028+0D6E              ;; CLS-LOWER
 4029+0D6E 21 3C 5C     o0D6E:		LD	HL,	$5C3C	; address System Variable TV_FLAG.
 4030+0D71 CB AE        		RES	5,(HL)		; TV_FLAG - signal do not clear lower screen.
 4031+0D73 CB C6        		SET	0,(HL)		; TV_FLAG - signal lower screen in use.
 4032+0D75
 4033+0D75 CD 4D 0D     		CALL	o0D4D		; routine TEMPS applies permanent attributes,
 4034+0D78              					; in this case BORDCR to ATTR_T.
 4035+0D78              					; Note. this seems unnecessary and is repeated
 4036+0D78              					; within CL-LINE.
 4037+0D78
 4038+0D78 FD 46 31     		LD	B,(IY+$31)	; fetch lower screen display file size DF_SZ
 4039+0D7B
 4040+0D7B CD 44 0E     		CALL	o0E44		; routine CL-LINE clears lines to bottom of the
 4041+0D7E              					; display and sets attributes from BORDCR while
 4042+0D7E              					; preserving the B register.
 4043+0D7E
 4044+0D7E 21 C0 5A     		LD	HL,$5AC0	; set initial attribute address to the leftmost
 4045+0D81              					; cell of second line up.
 4046+0D81
 4047+0D81 3A 8D 5C     		LD	A,(	$5C8D)	; fetch permanent attribute from ATTR_P.
 4048+0D84
 4049+0D84 05           		DEC	B		; decrement lower screen display file size.
 4050+0D85
 4051+0D85 18 07        		JR	o0D8E		; forward to enter the backfill loop at CLS-3
 4052+0D87              					; where B is decremented again.
 4053+0D87
 4054+0D87              ; ---
 4055+0D87
 4056+0D87              ;   The backfill loop is entered at midpoint and ensures, if more than 2
 4057+0D87              ;   lines have been cleared, that any other lines take the permanent screen
 4058+0D87              ;   attributes.
 4059+0D87
 4060+0D87              ;; CLS-1
 4061+0D87 0E 20        o0D87:		LD	C,$20		; set counter to 32 character cells per line
 4062+0D89
 4063+0D89              ;; CLS-2
 4064+0D89 2B           o0D89:		DEC	HL		; decrease attribute address.
 4065+0D8A 77           		LD	(HL),A		; and place attributes in next line up.
 4066+0D8B 0D           		DEC	C		; decrease the 32 counter.
 4067+0D8C 20 FB        		JR	NZ,o0D89	; loop back to CLS-2 until all 32 cells done.
 4068+0D8E
 4069+0D8E              ;; CLS-3
 4070+0D8E 10 F7        o0D8E:		DJNZ	o0D87		; decrease B counter and back to CLS-1
 4071+0D90              					; if not zero.
 4072+0D90
 4073+0D90 FD 36 31 02  		LD	(IY+$31),$02	; now set DF_SZ lower screen to 2
 4074+0D94
 4075+0D94              ; This entry point is also called from CL-ALL below to
 4076+0D94              ; reset the system channel input and output addresses to normal.
 4077+0D94
 4078+0D94              ;; CL-CHAN
 4079+0D94 3E FD        o0D94:		LD	A,$FD		; select system channel 'K'
 4080+0D96
 4081+0D96 CD 01 16     		CALL	o1601		; routine CHAN-OPEN opens it.
 4082+0D99
 4083+0D99 2A 51 5C     		LD	HL,(	$5C51)	; fetch CURCHL to HL to address current channel
 4084+0D9C 11 F4 09     		LD	DE,o09F4	; set address to PRINT-OUT for first pass.
 4085+0D9F A7           		AND	A		; clear carry for first pass.
 4086+0DA0
 4087+0DA0              ;; CL-CHAN-A
 4088+0DA0 73           o0DA0:		LD	(HL),E		; Insert the output address on the first pass
 4089+0DA1 23           		INC	HL		; or the input address on the second pass.
 4090+0DA2 72           		LD	(HL),D		;
 4091+0DA3 23           		INC	HL		;
 4092+0DA4
 4093+0DA4 11 A8 10     		LD	DE,o10A8	; fetch address KEY-INPUT for second pass
 4094+0DA7 3F           		CCF			; complement carry flag - will set on pass 1.
 4095+0DA8
 4096+0DA8 38 F6        		JR	C,o0DA0		; back to CL-CHAN-A if first pass else done.
 4097+0DAA
 4098+0DAA 01 21 17     		LD	BC,$1721	; line 23 for lower screen
 4099+0DAD 18 2A        		JR	o0DD9		; exit via CL-SET to set column
 4100+0DAF              					; for lower display
 4101+0DAF
 4102+0DAF              ; ---------------------------
 4103+0DAF              ; Clearing whole display area
 4104+0DAF              ; ---------------------------
 4105+0DAF              ; This subroutine called from CLS, AUTO-LIST and MAIN-3
 4106+0DAF              ; clears 24 lines of the display and resets the relevant system variables.
 4107+0DAF              ; This routine also recovers from an error situation where, for instance, an
 4108+0DAF              ; invalid colour or position control code has left the output routine addressing
 4109+0DAF              ; PO-TV-2 or PO-CONT.
 4110+0DAF
 4111+0DAF              ;; CL-ALL
 4112+0DAF 21 00 00     o0DAF:		LD	HL,$0000	; Initialize plot coordinates.
 4113+0DB2 22 7D 5C     		LD	(	$5C7D),HL	; Set system variable COORDS to 0,0.
 4114+0DB5
 4115+0DB5 FD CB 30 86  		RES	0,(IY+$30)	; update FLAGS2  - signal main screen is clear.
 4116+0DB9
 4117+0DB9 CD 94 0D     		CALL	o0D94		; routine CL-CHAN makes channel 'K" "normal'.
 4118+0DBC
 4119+0DBC 3E FE        		LD	A,$FE		; select system channel 'S'
 4120+0DBE CD 01 16     		CALL	o1601		; routine CHAN-OPEN opens it.
 4121+0DC1
 4122+0DC1 CD 4D 0D     		CALL	o0D4D		; routine TEMPS applies permanent attributes,
 4123+0DC4              					; in this case ATTR_P, to ATTR_T.
 4124+0DC4              					; Note. this seems unnecessary.
 4125+0DC4
 4126+0DC4 06 18        		LD	B,$18		; There are 24 lines.
 4127+0DC6
 4128+0DC6 CD 44 0E     		CALL	o0E44		; routine CL-LINE clears 24 text lines and sets
 4129+0DC9              					; attributes from ATTR-P.
 4130+0DC9              					; This routine preserves B and sets C to $21.
 4131+0DC9
 4132+0DC9 2A 51 5C     		LD	HL,(	$5C51)	; fetch CURCHL make HL address output routine.
 4133+0DCC
 4134+0DCC 11 F4 09     		LD	DE,o09F4	; address: PRINT-OUT
 4135+0DCF 73           		LD	(HL),E		; is made
 4136+0DD0 23           		INC	HL		; the normal
 4137+0DD1 72           		LD	(HL),D		; output address.
 4138+0DD2
 4139+0DD2 FD 36 52 01  		LD	(IY+$52),$01	; set SCR_CT - scroll count - to default.
 4140+0DD6
 4141+0DD6              ;   Note. BC already contains $1821.
 4142+0DD6
 4143+0DD6 01 21 18     		LD	BC,$1821	; reset column and line to 0,0
 4144+0DD9              					; and continue into CL-SET, below, exiting
 4145+0DD9              					; via PO-STORE (for the upper screen).
 4146+0DD9
 4147+0DD9              ; --------------------
 4148+0DD9              ; THE 'CL-SET' ROUTINE
 4149+0DD9              ; --------------------
 4150+0DD9              ; This important subroutine is used to calculate the character output
 4151+0DD9              ; address for screens or printer based on the line/column for screens
 4152+0DD9              ; or the column for printer.
 4153+0DD9
 4154+0DD9              ;; CL-SET
 4155+0DD9 21 00 5B     o0DD9:		LD	HL,	$5B00		; the base address of printer buffer
 4156+0DDC FD CB 01 4E  		BIT	1,(IY+$01)	; test FLAGS  - is printer in use ?
 4157+0DE0 20 12        		JR	NZ,o0DF4	; forward to CL-SET-2 if so.
 4158+0DE2
 4159+0DE2 78           		LD	A,B		; transfer line to A.
 4160+0DE3 FD CB 02 46  		BIT	0,(IY+$02)	; test TV_FLAG  - lower screen in use ?
 4161+0DE7 28 05        		JR	Z,o0DEE		; skip to CL-SET-1 if handling upper part
 4162+0DE9
 4163+0DE9 FD 86 31     		ADD	A,(IY+$31)	; add DF_SZ for lower screen
 4164+0DEC D6 18        		SUB	$18		; and adjust.
 4165+0DEE
 4166+0DEE              ;; CL-SET-1
 4167+0DEE C5           o0DEE:		PUSH	BC		; save the line/column.
 4168+0DEF 47           		LD	B,A		; transfer line to B
 4169+0DF0              					; (adjusted if lower screen)
 4170+0DF0
 4171+0DF0 CD 9B 0E     		CALL	o0E9B		; routine CL-ADDR calculates address at left
 4172+0DF3              					; of screen.
 4173+0DF3 C1           		POP	BC		; restore the line/column.
 4174+0DF4
 4175+0DF4              ;; CL-SET-2
 4176+0DF4 3E 21        o0DF4:		LD	A,$21		; the column $01-$21 is reversed
 4177+0DF6 91           		SUB	C		; to range $00 - $20
 4178+0DF7 5F           		LD	E,A		; now transfer to DE
 4179+0DF8 16 00        		LD	D,$00		; prepare for addition
 4180+0DFA 19           		ADD	HL,DE		; and add to base address
 4181+0DFB
 4182+0DFB C3 DC 0A     		JP	o0ADC		; exit via PO-STORE to update the relevant
 4183+0DFE              					; system variables.
 4184+0DFE              					; ----------------
 4185+0DFE              					; Handle scrolling
 4186+0DFE              					; ----------------
 4187+0DFE              					; The routine CL-SC-ALL is called once from PO to scroll all the display
 4188+0DFE              					; and from the routine CL-SCROLL, once, to scroll part of the display.
 4189+0DFE
 4190+0DFE              ;; CL-SC-ALL
 4191+0DFE 06 17        o0DFE:		LD	B,$17		; scroll 23 lines, after 'scroll?'.
 4192+0E00
 4193+0E00              ;; CL-SCROLL
 4194+0E00 CD 9B 0E     o0E00:		CALL	o0E9B		; routine CL-ADDR gets screen address in HL.
 4195+0E03 0E 08        		LD	C,$08		; there are 8 pixel lines to scroll.
 4196+0E05
 4197+0E05              ;; CL-SCR-1
 4198+0E05 C5           o0E05:		PUSH	BC		; save counters.
 4199+0E06 E5           		PUSH	HL		; and initial address.
 4200+0E07 78           		LD	A,B		; get line count.
 4201+0E08 E6 07        		AND	$07		; will set zero if all third to be scrolled.
 4202+0E0A 78           		LD	A,B		; re-fetch the line count.
 4203+0E0B 20 0C        		JR	NZ,o0E19	; forward to CL-SCR-3 if partial scroll.
 4204+0E0D
 4205+0E0D              ; HL points to top line of third and must be copied to bottom of previous 3rd.
 4206+0E0D              ; ( so HL = $4800 or $5000 ) ( but also sometimes $4000 )
 4207+0E0D
 4208+0E0D              ;; CL-SCR-2
 4209+0E0D EB           o0E0D:		EX	DE,HL		; copy HL to DE.
 4210+0E0E 21 E0 F8     		LD	HL,$F8E0	; subtract $08 from H and add $E0 to L -
 4211+0E11 19           		ADD	HL,DE		; to make destination bottom line of previous
 4212+0E12              					; third.
 4213+0E12 EB           		EX	DE,HL		; restore the source and destination.
 4214+0E13 01 20 00     		LD	BC,$0020	; thirty-two bytes are to be copied.
 4215+0E16 3D           		DEC	A		; decrement the line count.
 4216+0E17 ED B0        		LDIR			; copy a pixel line to previous third.
 4217+0E19
 4218+0E19              ;; CL-SCR-3
 4219+0E19 EB           o0E19:		EX	DE,HL		; save source in DE.
 4220+0E1A 21 E0 FF     		LD	HL,$FFE0	; load the value -32.
 4221+0E1D 19           		ADD	HL,DE		; add to form destination in HL.
 4222+0E1E EB           		EX	DE,HL		; switch source and destination
 4223+0E1F 47           		LD	B,A		; save the count in B.
 4224+0E20 E6 07        		AND	$07		; mask to find count applicable to current
 4225+0E22 0F           		RRCA			; third and
 4226+0E23 0F           		RRCA			; multiply by
 4227+0E24 0F           		RRCA			; thirty two (same as 5 RLCAs)
 4228+0E25
 4229+0E25 4F           		LD	C,A		; transfer byte count to C ($E0 at most)
 4230+0E26 78           		LD	A,B		; store line count to A
 4231+0E27 06 00        		LD	B,$00		; make B zero
 4232+0E29 ED B0        		LDIR			; copy bytes (BC=0, H incremented, L=0)
 4233+0E2B 06 07        		LD	B,$07		; set B to 7, C is zero.
 4234+0E2D 09           		ADD	HL,BC		; add 7 to H to address next third.
 4235+0E2E E6 F8        		AND	$F8		; has last third been done ?
 4236+0E30 20 DB        		JR	NZ,o0E0D	; back to CL-SCR-2 if not.
 4237+0E32
 4238+0E32 E1           		POP	HL		; restore topmost address.
 4239+0E33 24           		INC	H		; next pixel line down.
 4240+0E34 C1           		POP	BC		; restore counts.
 4241+0E35 0D           		DEC	C		; reduce pixel line count.
 4242+0E36 20 CD        		JR	NZ,o0E05	; back to CL-SCR-1 if all eight not done.
 4243+0E38
 4244+0E38 CD 88 0E     		CALL	o0E88		; routine CL-ATTR gets address in attributes
 4245+0E3B              					; from current 'ninth line', count in BC.
 4246+0E3B
 4247+0E3B 21 E0 FF     		LD	HL,$FFE0	; set HL to the 16-bit value -32.
 4248+0E3E 19           		ADD	HL,DE		; and add to form destination address.
 4249+0E3F EB           		EX	DE,HL		; swap source and destination addresses.
 4250+0E40 ED B0        		LDIR			; copy bytes scrolling the linear attributes.
 4251+0E42 06 01        		LD	B,$01		; continue to clear the bottom line.
 4252+0E44
 4253+0E44              ; ------------------------------
 4254+0E44              ; THE 'CLEAR TEXT LINES' ROUTINE
 4255+0E44              ; ------------------------------
 4256+0E44              ; This subroutine, called from CL-ALL, CLS-LOWER and AUTO-LIST and above,
 4257+0E44              ; clears text lines at bottom of display.
 4258+0E44              ; The B register holds on entry the number of lines to be cleared 1-24.
 4259+0E44
 4260+0E44              ;; CL-LINE
 4261+0E44 C5           o0E44:		PUSH	BC		; save line count
 4262+0E45 CD 9B 0E     		CALL	o0E9B		; routine CL-ADDR gets top address
 4263+0E48 0E 08        		LD	C,$08		; there are eight screen lines to a text line.
 4264+0E4A
 4265+0E4A              ;; CL-LINE-1
 4266+0E4A C5           o0E4A:		PUSH	BC		; save pixel line count
 4267+0E4B E5           		PUSH	HL		; and save the address
 4268+0E4C 78           		LD	A,B		; transfer the line to A (1-24).
 4269+0E4D
 4270+0E4D              ;; CL-LINE-2
 4271+0E4D E6 07        o0E4D:		AND	$07		; mask 0-7 to consider thirds at a time
 4272+0E4F 0F           		RRCA			; multiply
 4273+0E50 0F           		RRCA			; by 32  (same as five RLCA instructions)
 4274+0E51 0F           		RRCA			; now 32 - 256(0)
 4275+0E52 4F           		LD	C,A		; store result in C
 4276+0E53 78           		LD	A,B		; save line in A (1-24)
 4277+0E54 06 00        		LD	B,$00		; set high byte to 0, prepare for ldir.
 4278+0E56 0D           		DEC	C		; decrement count 31-255.
 4279+0E57 54           		LD	D,H		; copy HL
 4280+0E58 5D           		LD	E,L		; to DE.
 4281+0E59 36 00        		LD	(HL),$00	; blank the first byte.
 4282+0E5B 13           		INC	DE		; make DE point to next byte.
 4283+0E5C ED B0        		LDIR			; ldir will clear lines.
 4284+0E5E 11 01 07     		LD	DE,$0701	; now address next third adjusting
 4285+0E61 19           		ADD	HL,DE		; register E to address left hand side
 4286+0E62 3D           		DEC	A		; decrease the line count.
 4287+0E63 E6 F8        		AND	$F8		; will be 16, 8 or 0  (AND $18 will do).
 4288+0E65 47           		LD	B,A		; transfer count to B.
 4289+0E66 20 E5        		JR	NZ,o0E4D	; back to CL-LINE-2 if 16 or 8 to do
 4290+0E68              					; the next third.
 4291+0E68
 4292+0E68 E1           		POP	HL		; restore start address.
 4293+0E69 24           		INC	H		; address next line down.
 4294+0E6A C1           		POP	BC		; fetch counts.
 4295+0E6B 0D           		DEC	C		; decrement pixel line count
 4296+0E6C 20 DC        		JR	NZ,o0E4A	; back to CL-LINE-1 till all done.
 4297+0E6E
 4298+0E6E CD 88 0E     		CALL	o0E88		; routine CL-ATTR gets attribute address
 4299+0E71              					; in DE and B * 32 in BC.
 4300+0E71
 4301+0E71 62           		LD	H,D		; transfer the address
 4302+0E72 6B           		LD	L,E		; to HL.
 4303+0E73
 4304+0E73 13           		INC	DE		; make DE point to next location.
 4305+0E74
 4306+0E74 3A 8D 5C     		LD	A,(	$5C8D)	; fetch ATTR_P - permanent attributes
 4307+0E77 FD CB 02 46  		BIT	0,(IY+$02)	; test TV_FLAG  - lower screen in use ?
 4308+0E7B 28 03        		JR	Z,o0E80		; skip to CL-LINE-3 if not.
 4309+0E7D
 4310+0E7D 3A 48 5C     		LD	A,(	$5C48)	; else lower screen uses BORDCR as attribute.
 4311+0E80
 4312+0E80              ;; CL-LINE-3
 4313+0E80 77           o0E80:		LD	(HL),A		; put attribute in first byte.
 4314+0E81 0B           		DEC	BC		; decrement the counter.
 4315+0E82 ED B0        		LDIR			; copy bytes to set all attributes.
 4316+0E84 C1           		POP	BC		; restore the line $01-$24.
 4317+0E85 0E 21        		LD	C,$21		; make column $21. (No use is made of this)
 4318+0E87 C9           		RET			; return to the calling routine.
 4319+0E88
 4320+0E88              ; ------------------
 4321+0E88              ; Attribute handling
 4322+0E88              ; ------------------
 4323+0E88              ; This subroutine is called from CL-LINE or CL-SCROLL with the HL register
 4324+0E88              ; pointing to the 'ninth' line and H needs to be decremented before or after
 4325+0E88              ; the division. Had it been done first then either present code or that used
 4326+0E88              ; at the start of PO-ATTR could have been used.
 4327+0E88              ; The Spectrum screen arrangement leads to the L register already holding
 4328+0E88              ; the correct value for the attribute file and it is only necessary
 4329+0E88              ; to manipulate H to form the correct colour attribute address.
 4330+0E88
 4331+0E88              ;; CL-ATTR
 4332+0E88 7C           o0E88:		LD	A,H		; fetch H to A - $48, $50, or $58.
 4333+0E89 0F           		RRCA			; divide by
 4334+0E8A 0F           		RRCA			; eight.
 4335+0E8B 0F           		RRCA			; $09, $0A or $0B.
 4336+0E8C 3D           		DEC	A		; $08, $09 or $0A.
 4337+0E8D F6 50        		OR	$50		; $58, $59 or $5A.
 4338+0E8F 67           		LD	H,A		; save high byte of attributes.
 4339+0E90
 4340+0E90 EB           		EX	DE,HL		; transfer attribute address to DE
 4341+0E91 61           		LD	H,C		; set H to zero - from last LDIR.
 4342+0E92 68           		LD	L,B		; load L with the line from B.
 4343+0E93 29           		ADD	HL,HL		; multiply
 4344+0E94 29           		ADD	HL,HL		; by
 4345+0E95 29           		ADD	HL,HL		; thirty two
 4346+0E96 29           		ADD	HL,HL		; to give count of attribute
 4347+0E97 29           		ADD	HL,HL		; cells to the end of display.
 4348+0E98
 4349+0E98 44           		LD	B,H		; transfer the result
 4350+0E99 4D           		LD	C,L		; to register BC.
 4351+0E9A
 4352+0E9A C9           		RET			; return.
 4353+0E9B
 4354+0E9B              ; -------------------------------
 4355+0E9B              ; Handle display with line number
 4356+0E9B              ; -------------------------------
 4357+0E9B              ; This subroutine is called from four places to calculate the address
 4358+0E9B              ; of the start of a screen character line which is supplied in B.
 4359+0E9B
 4360+0E9B              ;; CL-ADDR
 4361+0E9B 3E 18        o0E9B:		LD	A,$18		; reverse the line number
 4362+0E9D 90           		SUB	B		; to range $00 - $17.
 4363+0E9E 57           		LD	D,A		; save line in D for later.
 4364+0E9F 0F           		RRCA			; multiply
 4365+0EA0 0F           		RRCA			; by
 4366+0EA1 0F           		RRCA			; thirty-two.
 4367+0EA2
 4368+0EA2 E6 E0        		AND	$E0		; mask off low bits to make
 4369+0EA4 6F           		LD	L,A		; L a multiple of 32.
 4370+0EA5
 4371+0EA5 7A           		LD	A,D		; bring back the line to A.
 4372+0EA6
 4373+0EA6 E6 18        		AND	$18		; now $00, $08 or $10.
 4374+0EA8
 4375+0EA8 F6 40        		OR	$40		; add the base address of screen.
 4376+0EAA
 4377+0EAA 67           		LD	H,A		; HL now has the correct address.
 4378+0EAB C9           		RET			; return.
 4379+0EAC
 4380+0EAC              ; -------------------
 4381+0EAC              ; Handle COPY command
 4382+0EAC              ; -------------------
 4383+0EAC              ; This command copies the top 176 lines to the ZX Printer
 4384+0EAC              ; It is popular to call this from machine code at point
 4385+0EAC              ; o0EAF with B holding 192 (and interrupts disabled) for a full-screen
 4386+0EAC              ; copy. This particularly applies to 16K Spectrums as time-critical
 4387+0EAC              ; machine code routines cannot be written in the first 16K of RAM as
 4388+0EAC              ; it is shared with the ULA which has precedence over the Z80 chip.
 4389+0EAC
 4390+0EAC              ;; COPY
 4391+0EAC F3           o0EAC:		DI
 4392+0EAD
 4393+0EAD 06 B0        		LD	B,$B0		; top 176 lines.
 4394+0EAF 21 00 40     o0EAF:		LD	HL,$4000	; address start of the display file.
 4395+0EB2
 4396+0EB2              ; now enter a loop to handle each pixel line.
 4397+0EB2
 4398+0EB2              ;; COPY-1
 4399+0EB2 E5           o0EB2:		PUSH	HL		; save the screen address.
 4400+0EB3 C5           		PUSH	BC		; and the line counter.
 4401+0EB4
 4402+0EB4 CD F4 0E     		CALL	o0EF4		; routine COPY-LINE outputs one line.
 4403+0EB7
 4404+0EB7 C1           		POP	BC		; restore the line counter.
 4405+0EB8 E1           		POP	HL		; and display address.
 4406+0EB9 24           		INC	H		; next line down screen within 'thirds'.
 4407+0EBA 7C           		LD	A,H		; high byte to A.
 4408+0EBB E6 07        		AND	$07		; result will be zero if we have left third.
 4409+0EBD 20 0A        		JR	NZ,o0EC9	; forward to COPY-2 if not to continue loop.
 4410+0EBF
 4411+0EBF 7D           		LD	A,L		; consider low byte first.
 4412+0EC0 C6 20        		ADD	A,$20		; increase by 32 - sets carry if back to zero.
 4413+0EC2 6F           		LD	L,A		; will be next group of 8.
 4414+0EC3 3F           		CCF			; complement - carry set if more lines in
 4415+0EC4              					; the previous third.
 4416+0EC4 9F           		SBC	A,A		; will be FF, if more, else 00.
 4417+0EC5 E6 F8        		AND	$F8		; will be F8 (-8) or 00.
 4418+0EC7 84           		ADD	A,H		; that is subtract 8, if more to do in third.
 4419+0EC8 67           		LD	H,A		; and reset address.
 4420+0EC9
 4421+0EC9              ;; COPY-2
 4422+0EC9 10 E7        o0EC9:		DJNZ	o0EB2		; back to COPY-1 for all lines.
 4423+0ECB
 4424+0ECB 18 0D        		JR	o0EDA		; forward to COPY-END to switch off the printer
 4425+0ECD              					; motor and enable interrupts.
 4426+0ECD              					; Note. Nothing else is required.
 4427+0ECD
 4428+0ECD              ; ------------------------------
 4429+0ECD              ; Pass printer buffer to printer
 4430+0ECD              ; ------------------------------
 4431+0ECD              ; This routine is used to copy 8 text lines from the printer buffer
 4432+0ECD              ; to the ZX Printer. These text lines are mapped linearly so HL does
 4433+0ECD              ; not need to be adjusted at the end of each line.
 4434+0ECD
 4435+0ECD              ;; COPY-BUFF
 4436+0ECD F3           o0ECD:		DI
 4437+0ECE 21 00 5B     		LD	HL,	$5B00		; the base address of the Printer Buffer.
 4438+0ED1 06 08        		LD	B,$08		; set count to 8 lines of 32 bytes.
 4439+0ED3
 4440+0ED3              ;; COPY-3
 4441+0ED3 C5           o0ED3:		PUSH	BC		; save counter.
 4442+0ED4
 4443+0ED4 CD F4 0E     		CALL	o0EF4		; routine COPY-LINE outputs 32 bytes
 4444+0ED7
 4445+0ED7 C1           		POP	BC		; restore counter.
 4446+0ED8 10 F9        		DJNZ	o0ED3		; loop back to COPY-3 for all 8 lines.
 4447+0EDA              					; then stop motor and clear buffer.
 4448+0EDA
 4449+0EDA              ; Note. the COPY command rejoins here, essentially to execute the next
 4450+0EDA              ; three instructions.
 4451+0EDA
 4452+0EDA              ;; COPY-END
 4453+0EDA 3E 04        o0EDA:		LD	A,$04		; output value 4 to port
 4454+0EDC D3 FB        		OUT	($FB),A		; to stop the slowed printer motor.
 4455+0EDE FB           		EI			; enable interrupts.
 4456+0EDF
 4457+0EDF              ; --------------------
 4458+0EDF              ; Clear Printer Buffer
 4459+0EDF              ; --------------------
 4460+0EDF              ; This routine clears an arbitrary 256 bytes of memory.
 4461+0EDF              ; Note. The routine seems designed to clear a buffer that follows the
 4462+0EDF              ; system variables.
 4463+0EDF              ; The routine should check a flag or HL address and simply return if COPY
 4464+0EDF              ; is in use.
 4465+0EDF              ; As a consequence of this omission the buffer will needlessly
 4466+0EDF              ; be cleared when COPY is used and the screen/printer position may be set to
 4467+0EDF              ; the start of the buffer and the line number to 0 (B)
 4468+0EDF              ; giving an 'Out of Screen' error.
 4469+0EDF              ; There seems to have been an unsuccessful attempt to circumvent the use
 4470+0EDF              ; of PR_CC_hi.
 4471+0EDF
 4472+0EDF              ;; CLEAR-PRB
 4473+0EDF 21 00 5B     o0EDF:		LD	HL,	$5B00		; the location of the buffer.
 4474+0EE2 FD 75 46     		LD	(IY+$46),L	; update PR_CC_lo - set to zero - superfluous.
 4475+0EE5 AF           		XOR	A		; clear the accumulator.
 4476+0EE6 47           		LD	B,A		; set count to 256 bytes.
 4477+0EE7
 4478+0EE7              ;; PRB-BYTES
 4479+0EE7 77           o0EE7:		LD	(HL),A		; set addressed location to zero.
 4480+0EE8 23           		INC	HL		; address next byte - Note. not INC L.
 4481+0EE9 10 FC        		DJNZ	o0EE7		; back to PRB-BYTES. repeat for 256 bytes.
 4482+0EEB
 4483+0EEB FD CB 30 8E  		RES	1,(IY+$30)	; set FLAGS2 - signal printer buffer is clear.
 4484+0EEF 0E 21        		LD	C,$21		; set the column position .
 4485+0EF1 C3 D9 0D     		JP	o0DD9		; exit via CL-SET and then PO-STORE.
 4486+0EF4
 4487+0EF4              ; -----------------
 4488+0EF4              ; Copy line routine
 4489+0EF4              ; -----------------
 4490+0EF4              ; This routine is called from COPY and COPY-BUFF to output a line of
 4491+0EF4              ; 32 bytes to the ZX Printer.
 4492+0EF4              ; Output to port $FB -
 4493+0EF4              ; bit 7 set - activate stylus.
 4494+0EF4              ; bit 7 low - deactivate stylus.
 4495+0EF4              ; bit 2 set - stops printer.
 4496+0EF4              ; bit 2 reset - starts printer
 4497+0EF4              ; bit 1 set - slows printer.
 4498+0EF4              ; bit 1 reset - normal speed.
 4499+0EF4
 4500+0EF4              ;; COPY-LINE
 4501+0EF4 78           o0EF4:		LD	A,B		; fetch the counter 1-8 or 1-176
 4502+0EF5 FE 03        		CP	$03		; is it 01 or 02 ?.
 4503+0EF7 9F           		SBC	A,A		; result is $FF if so else $00.
 4504+0EF8 E6 02        		AND	$02		; result is 02 now else 00.
 4505+0EFA              					; bit 1 set slows the printer.
 4506+0EFA D3 FB        		OUT	($FB),A		; slow the printer for the
 4507+0EFC              					; last two lines.
 4508+0EFC 57           		LD	D,A		; save the mask to control the printer later.
 4509+0EFD
 4510+0EFD              ;; COPY-L-1
 4511+0EFD CD 54 1F     o0EFD:		CALL	o1F54		; call BREAK-KEY to read keyboard immediately.
 4512+0F00 38 0A        		JR	C,o0F0C		; forward to COPY-L-2 if 'break' not pressed.
 4513+0F02
 4514+0F02 3E 04        		LD	A,$04		; else stop the
 4515+0F04 D3 FB        		OUT	($FB),A		; printer motor.
 4516+0F06 FB           		EI			; enable interrupts.
 4517+0F07 CD DF 0E     		CALL	o0EDF		; call routine CLEAR-PRB.
 4518+0F0A              					; Note. should not be cleared if COPY in use.
 4519+0F0A
 4520+0F0A              ;; REPORT-Dc
 4521+0F0A CF           o0F0A:		RST	08H		; ERROR-1
 4522+0F0B 0C           		DB	$0C		; Error Report: BREAK - CONT repeats
 4523+0F0C
 4524+0F0C              ;; COPY-L-2
 4525+0F0C DB FB        o0F0C:		IN	A,($FB)		; test now to see if
 4526+0F0E 87           		ADD	A,A		; a printer is attached.
 4527+0F0F F8           		RET	M		; return if not - but continue with parent
 4528+0F10              					; command.
 4529+0F10
 4530+0F10 30 EB        		JR	NC,o0EFD	; back to COPY-L-1 if stylus of printer not
 4531+0F12              					; in position.
 4532+0F12
 4533+0F12 0E 20        		LD	C,$20		; set count to 32 bytes.
 4534+0F14
 4535+0F14              ;; COPY-L-3
 4536+0F14 5E           o0F14:		LD	E,(HL)		; fetch a byte from line.
 4537+0F15 23           		INC	HL		; address next location. Note. not INC L.
 4538+0F16 06 08        		LD	B,$08		; count the bits.
 4539+0F18
 4540+0F18              ;; COPY-L-4
 4541+0F18 CB 12        o0F18:		RL	D		; prepare mask to receive bit.
 4542+0F1A CB 13        		RL	E		; rotate leftmost print bit to carry
 4543+0F1C CB 1A        		RR	D		; and back to bit 7 of D restoring bit 1
 4544+0F1E
 4545+0F1E              ;; COPY-L-5
 4546+0F1E DB FB        o0F1E:		IN	A,($FB)		; read the port.
 4547+0F20 1F           		RRA			; bit 0 to carry.
 4548+0F21 30 FB        		JR	NC,o0F1E	; back to COPY-L-5 if stylus not in position.
 4549+0F23
 4550+0F23 7A           		LD	A,D		; transfer command bits to A.
 4551+0F24 D3 FB        		OUT	($FB),A		; and output to port.
 4552+0F26 10 F0        		DJNZ	o0F18		; loop back to COPY-L-4 for all 8 bits.
 4553+0F28
 4554+0F28 0D           		DEC	C		; decrease the byte count.
 4555+0F29 20 E9        		JR	NZ,o0F14	; back to COPY-L-3 until 256 bits done.
 4556+0F2B
 4557+0F2B C9           		RET			; return to calling routine COPY/COPY-BUFF.
 4558+0F2C
 4559+0F2C
 4560+0F2C              ; ----------------------------------
 4561+0F2C              ; Editor routine for BASIC and INPUT
 4562+0F2C              ; ----------------------------------
 4563+0F2C              ; The editor is called to prepare or edit a BASIC line.
 4564+0F2C              ; It is also called from INPUT to input a numeric or string expression.
 4565+0F2C              ; The behaviour and options are quite different in the various modes
 4566+0F2C              ; and distinguished by bit 5 of FLAGX.
 4567+0F2C              ;
 4568+0F2C              ; This is a compact and highly versatile routine.
 4569+0F2C
 4570+0F2C              ;; EDITOR
 4571+0F2C 2A 3D 5C     o0F2C:		LD	HL,(	$5C3D)	; fetch ERR_SP
 4572+0F2F E5           		PUSH	HL		; save on stack
 4573+0F30
 4574+0F30              ;; ED-AGAIN
 4575+0F30 21 7F 10     o0F30:		LD	HL,o107F	; address: ED-ERROR
 4576+0F33 E5           		PUSH	HL		; save address on stack and
 4577+0F34 ED 73 3D 5C  		LD	(	$5C3D),SP	; make ERR_SP point to it.
 4578+0F38
 4579+0F38              ; Note. While in editing/input mode should an error occur then RST 08 will
 4580+0F38              ; update X_PTR to the location reached by CH_ADD and jump to ED-ERROR
 4581+0F38              ; where the error will be cancelled and the loop begin again from ED-AGAIN
 4582+0F38              ; above. The position of the error will be apparent when the lower screen is
 4583+0F38              ; reprinted. If no error then the re-iteration is to ED-LOOP below when
 4584+0F38              ; input is arriving from the keyboard.
 4585+0F38
 4586+0F38              ;; ED-LOOP
 4587+0F38 CD D4 15     o0F38:		CALL	o15D4		; routine WAIT-KEY gets key possibly
 4588+0F3B              					; changing the mode.
 4589+0F3B F5           		PUSH	AF		; save key.
 4590+0F3C 16 00        		LD	D,$00		; and give a short click based
 4591+0F3E FD 5E FF     		LD	E,(IY-$01)	; on PIP value for duration.
 4592+0F41 21 C8 00     		LD	HL,$00C8	; and pitch.
 4593+0F44 CD B5 03     		CALL	o03B5		; routine BEEPER gives click - effective
 4594+0F47              					; with rubber keyboard.
 4595+0F47 F1           		POP	AF		; get saved key value.
 4596+0F48 21 38 0F     		LD	HL,o0F38	; address: ED-LOOP is loaded to HL.
 4597+0F4B E5           		PUSH	HL		; and pushed onto stack.
 4598+0F4C
 4599+0F4C              ; At this point there is a looping return address on the stack, an error
 4600+0F4C              ; handler and an input stream set up to supply characters.
 4601+0F4C              ; The character that has been received can now be processed.
 4602+0F4C
 4603+0F4C FE 18        		CP	$18		; range 24 to 255 ?
 4604+0F4E 30 31        		JR	NC,o0F81	; forward to ADD-CHAR if so.
 4605+0F50
 4606+0F50 FE 07        		CP	$07		; lower than 7 ?
 4607+0F52 38 2D        		JR	C,o0F81		; forward to ADD-CHAR also.
 4608+0F54              					; Note. This is a 'bug' and chr$ 6, the comma
 4609+0F54              					; control character, should have had an
 4610+0F54              					; entry in the ED-KEYS table.
 4611+0F54              					; Steven Vickers, 1984, Pitman.
 4612+0F54
 4613+0F54 FE 10        		CP	$10		; less than 16 ?
 4614+0F56 38 3A        		JR	C,o0F92		; forward to ED-KEYS if editing control
 4615+0F58              					; range 7 to 15 dealt with by a table
 4616+0F58
 4617+0F58 01 02 00     		LD	BC,$0002	; prepare for ink/paper etc.
 4618+0F5B 57           		LD	D,A		; save character in D
 4619+0F5C FE 16        		CP	$16		; is it ink/paper/bright etc. ?
 4620+0F5E 38 0C        		JR	C,o0F6C		; forward to ED-CONTR if so
 4621+0F60
 4622+0F60              ; leaves 22d AT and 23d TAB
 4623+0F60              ; which can't be entered via KEY-INPUT.
 4624+0F60              ; so this code is never normally executed
 4625+0F60              ; when the keyboard is used for input.
 4626+0F60
 4627+0F60 03           		INC	BC		; if it was AT/TAB - 3 locations required
 4628+0F61 FD CB 37 7E  		BIT	7,(IY+$37)	; test FLAGX  - Is this INPUT LINE ?
 4629+0F65 CA 1E 10     		JP	Z,o101E		; jump to ED-IGNORE if not, else
 4630+0F68
 4631+0F68 CD D4 15     		CALL	o15D4		; routine WAIT-KEY - input address is KEY-NEXT
 4632+0F6B              					; but is reset to KEY-INPUT
 4633+0F6B 5F           		LD	E,A		; save first in E
 4634+0F6C
 4635+0F6C              ;; ED-CONTR
 4636+0F6C CD D4 15     o0F6C:		CALL	o15D4		; routine WAIT-KEY for control.
 4637+0F6F              					; input address will be key-next.
 4638+0F6F
 4639+0F6F D5           		PUSH	DE		; saved code/parameters
 4640+0F70 2A 5B 5C     		LD	HL,(	$5C5B)	; fetch address of keyboard cursor from K_CUR
 4641+0F73 FD CB 07 86  		RES	0,(IY+$07)	; set MODE to 'L'
 4642+0F77
 4643+0F77 CD 55 16     		CALL	o1655		; routine MAKE-ROOM makes 2/3 spaces at cursor
 4644+0F7A
 4645+0F7A C1           		POP	BC		; restore code/parameters
 4646+0F7B 23           		INC	HL		; address first location
 4647+0F7C 70           		LD	(HL),B		; place code (ink etc.)
 4648+0F7D 23           		INC	HL		; address next
 4649+0F7E 71           		LD	(HL),C		; place possible parameter. If only one
 4650+0F7F              					; then DE points to this location also.
 4651+0F7F 18 0A        		JR	o0F8B		; forward to ADD-CH-1
 4652+0F81
 4653+0F81              ; ------------------------
 4654+0F81              ; Add code to current line
 4655+0F81              ; ------------------------
 4656+0F81              ; this is the branch used to add normal non-control characters
 4657+0F81              ; with ED-LOOP as the stacked return address.
 4658+0F81              ; it is also the OUTPUT service routine for system channel 'R'.
 4659+0F81
 4660+0F81              ;; ADD-CHAR
 4661+0F81 FD CB 07 86  o0F81:		RES	0,(IY+$07)	; set MODE to 'L'
 4662+0F85 2A 5B 5C     		LD	HL,(	$5C5B)	; fetch address of keyboard cursor from K_CUR
 4663+0F88 CD 52 16     		CALL	o1652		; routine ONE-SPACE creates one space.
 4664+0F8B
 4665+0F8B              ; either a continuation of above or from ED-CONTR with ED-LOOP on stack.
 4666+0F8B
 4667+0F8B              ;; ADD-CH-1
 4668+0F8B 12           o0F8B:		LD	(DE),A		; load current character to last new location.
 4669+0F8C 13           		INC	DE		; address next
 4670+0F8D ED 53 5B 5C  		LD	(	$5C5B),DE	; and update K_CUR system variable.
 4671+0F91 C9           		RET			; return - either a simple return
 4672+0F92              					; from ADD-CHAR or to ED-LOOP on stack.
 4673+0F92
 4674+0F92              ; ---
 4675+0F92
 4676+0F92              ; a branch of the editing loop to deal with control characters
 4677+0F92              ; using a look-up table.
 4678+0F92
 4679+0F92              ;; ED-KEYS
 4680+0F92 5F           o0F92:		LD	E,A		; character to E.
 4681+0F93 16 00        		LD	D,$00		; prepare to add.
 4682+0F95 21 99 0F     		LD	HL,o0FA0-7	; base address of editing keys table. $0F99
 4683+0F98 19           		ADD	HL,DE		; add E
 4684+0F99 5E           		LD	E,(HL)		; fetch offset to E
 4685+0F9A 19           		ADD	HL,DE		; add offset for address of handling routine.
 4686+0F9B E5           		PUSH	HL		; push the address on machine stack.
 4687+0F9C 2A 5B 5C     		LD	HL,(	$5C5B)	; load address of cursor from K_CUR.
 4688+0F9F C9           		RET			; Make an indirect jump forward to routine.
 4689+0FA0
 4690+0FA0              ; ------------------
 4691+0FA0              ; Editing keys table
 4692+0FA0              ; ------------------
 4693+0FA0              ; For each code in the range $07 to $0F this table contains a
 4694+0FA0              ; single offset byte to the routine that services that code.
 4695+0FA0              ; Note. for what was intended there should also have been an
 4696+0FA0              ; entry for chr$ 6 with offset to ed-symbol.
 4697+0FA0
 4698+0FA0              ;; ed-keys-t
 4699+0FA0 09           o0FA0:		DB	o0FA9-$		; 07d offset $09 to Address: ED-EDIT
 4700+0FA1 66           		DB	o1007-$		; 08d offset $66 to Address: ED-LEFT
 4701+0FA2 6A           		DB	o100C-$		; 09d offset $6A to Address: ED-RIGHT
 4702+0FA3 50           		DB	o0FF3-$		; 10d offset $50 to Address: ED-DOWN
 4703+0FA4 B5           		DB	o1059-$		; 11d offset $B5 to Address: ED-UP
 4704+0FA5 70           		DB	o1015-$		; 12d offset $70 to Address: ED-DELETE
 4705+0FA6 7E           		DB	o1024-$		; 13d offset $7E to Address: ED-ENTER
 4706+0FA7 CF           		DB	o1076-$		; 14d offset $CF to Address: ED-SYMBOL
 4707+0FA8 D4           		DB	o107C-$		; 15d offset $D4 to Address: ED-GRAPH
 4708+0FA9
 4709+0FA9              ; ---------------
 4710+0FA9              ; Handle EDIT key
 4711+0FA9              ; ---------------
 4712+0FA9              ; The user has pressed SHIFT 1 to bring edit line down to bottom of screen.
 4713+0FA9              ; alternativoly the user wishes to clear the input buffer and start again.
 4714+0FA9              ; alternativoly ...
 4715+0FA9
 4716+0FA9              ;; ED-EDIT
 4717+0FA9 2A 49 5C     o0FA9:		LD	HL,(	$5C49)	; fetch E_PPC the last line number entered.
 4718+0FAC              					; Note. may not exist and may follow program.
 4719+0FAC FD CB 37 6E  		BIT	5,(IY+$37)	; test FLAGX  - input mode ?
 4720+0FB0 C2 97 10     		JP	NZ,o1097	; jump forward to CLEAR-SP if not in editor.
 4721+0FB3
 4722+0FB3 CD 6E 19     		CALL	o196E		; routine LINE-ADDR to find address of line
 4723+0FB6              					; or following line if it doesn't exist.
 4724+0FB6 CD 95 16     		CALL	o1695		; routine LINE-NO will get line number from
 4725+0FB9              					; address or previous line if at end-marker.
 4726+0FB9 7A           		LD	A,D		; if there is no program then DE will
 4727+0FBA B3           		OR	E		; contain zero so test for this.
 4728+0FBB CA 97 10     		JP	Z,o1097		; jump to CLEAR-SP if so.
 4729+0FBE
 4730+0FBE              ; Note. at this point we have a validated line number, not just an
 4731+0FBE              ; approximation and it would be best to update E_PPC with the true
 4732+0FBE              ; cursor line value which would enable the line cursor to be suppressed
 4733+0FBE              ; in all situations - see shortly.
 4734+0FBE
 4735+0FBE E5           		PUSH	HL		; save address of line.
 4736+0FBF 23           		INC	HL		; address low byte of length.
 4737+0FC0 4E           		LD	C,(HL)		; transfer to C
 4738+0FC1 23           		INC	HL		; next to high byte
 4739+0FC2 46           		LD	B,(HL)		; transfer to B.
 4740+0FC3 21 0A 00     		LD	HL,$000A	; an overhead of ten bytes
 4741+0FC6 09           		ADD	HL,BC		; is added to length.
 4742+0FC7 44           		LD	B,H		; transfer adjusted value
 4743+0FC8 4D           		LD	C,L		; to BC register.
 4744+0FC9 CD 05 1F     		CALL	o1F05		; routine TEST-ROOM checks free memory.
 4745+0FCC CD 97 10     		CALL	o1097		; routine CLEAR-SP clears editing area.
 4746+0FCF 2A 51 5C     		LD	HL,(	$5C51)	; address CURCHL
 4747+0FD2 E3           		EX	(SP),HL		; swap with line address on stack
 4748+0FD3 E5           		PUSH	HL		; save line address underneath
 4749+0FD4
 4750+0FD4 3E FF        		LD	A,$FF		; select system channel 'R'
 4751+0FD6 CD 01 16     		CALL	o1601		; routine CHAN-OPEN opens it
 4752+0FD9
 4753+0FD9 E1           		POP	HL		; drop line address
 4754+0FDA 2B           		DEC	HL		; make it point to first byte of line num.
 4755+0FDB FD 35 0F     		DEC	(IY+$0F)	; decrease E_PPC_lo to suppress line cursor.
 4756+0FDE              					; Note. ineffective when E_PPC is one
 4757+0FDE              					; greater than last line of program perhaps
 4758+0FDE              					; as a result of a delete.
 4759+0FDE              					; credit. Paul Harrison 1982.
 4760+0FDE
 4761+0FDE CD 55 18     		CALL	o1855		; routine OUT-LINE outputs the BASIC line
 4762+0FE1              					; to the editing area.
 4763+0FE1 FD 34 0F     		INC	(IY+$0F)	; restore E_PPC_lo to the previous value.
 4764+0FE4 2A 59 5C     		LD	HL,(	$5C59)	; address E_LINE in editing area.
 4765+0FE7 23           		INC	HL		; advance
 4766+0FE8 23           		INC	HL		; past space
 4767+0FE9 23           		INC	HL		; and digit characters
 4768+0FEA 23           		INC	HL		; of line number.
 4769+0FEB
 4770+0FEB 22 5B 5C     		LD	(	$5C5B),HL	; update K_CUR to address start of BASIC.
 4771+0FEE E1           		POP	HL		; restore the address of CURCHL.
 4772+0FEF CD 15 16     		CALL	o1615		; routine CHAN-FLAG sets flags for it.
 4773+0FF2
 4774+0FF2 C9           		RET			; RETURN to ED-LOOP.
 4775+0FF3
 4776+0FF3              ; -------------------
 4777+0FF3              ; Cursor down editing
 4778+0FF3              ; -------------------
 4779+0FF3              ;   The BASIC lines are displayed at the top of the screen and the user
 4780+0FF3              ;   wishes to move the cursor down one line in edit mode.
 4781+0FF3              ;   With INPUT LINE, this key must be used instead of entering STOP.
 4782+0FF3
 4783+0FF3              ;; ED-DOWN
 4784+0FF3 FD CB 37 6E  o0FF3:		BIT	5,(IY+$37)	; test FLAGX  - Input Mode ?
 4785+0FF7 20 08        		JR	NZ,o1001	; skip to ED-STOP if so
 4786+0FF9
 4787+0FF9 21 49 5C     		LD	HL,	$5C49	; address E_PPC - 'current line'
 4788+0FFC CD 0F 19     		CALL	o190F		; routine LN-FETCH fetches number of next
 4789+0FFF              					; line or same if at end of program.
 4790+0FFF 18 6D        		JR	o106E		; forward to ED-LIST to produce an
 4791+1001              					; automatic listing.
 4792+1001
 4793+1001              ; ---
 4794+1001
 4795+1001              ;; ED-STOP
 4796+1001 FD 36 00 10  o1001:		LD	(IY+$00),$10	; set ERR_NR to 'STOP in INPUT' code
 4797+1005 18 1D        		JR	o1024		; forward to ED-ENTER to produce error.
 4798+1007
 4799+1007              ; -------------------
 4800+1007              ; Cursor left editing
 4801+1007              ; -------------------
 4802+1007              ; This acts on the cursor in the lower section of the screen in both
 4803+1007              ; editing and input mode.
 4804+1007
 4805+1007              ;; ED-LEFT
 4806+1007 CD 31 10     o1007:		CALL	o1031		; routine ED-EDGE moves left if possible
 4807+100A 18 05        		JR	o1011		; forward to ED-CUR to update K-CUR
 4808+100C              					; and return to ED-LOOP.
 4809+100C
 4810+100C              ; --------------------
 4811+100C              ; Cursor right editing
 4812+100C              ; --------------------
 4813+100C              ; This acts on the cursor in the lower screen in both editing and input
 4814+100C              ; mode and moves it to the right.
 4815+100C
 4816+100C              ;; ED-RIGHT
 4817+100C 7E           o100C:		LD	A,(HL)		; fetch addressed character.
 4818+100D FE 0D        		CP	$0D		; is it carriage return ?
 4819+100F C8           		RET	Z		; return if so to ED-LOOP
 4820+1010
 4821+1010 23           		INC	HL		; address next character
 4822+1011
 4823+1011              ;; ED-CUR
 4824+1011 22 5B 5C     o1011:		LD	(	$5C5B),HL	; update K_CUR system variable
 4825+1014 C9           		RET			; return to ED-LOOP
 4826+1015
 4827+1015              ; --------------
 4828+1015              ; DELETE editing
 4829+1015              ; --------------
 4830+1015              ; This acts on the lower screen and deletes the character to left of
 4831+1015              ; cursor. If control characters are present these are deleted first
 4832+1015              ; leaving the naked parameter (0-7) which appears as a "?" except in the
 4833+1015              ; case of chr$ 6 which is the comma control character. It is not mandatory
 4834+1015              ; to delete these second characters.
 4835+1015
 4836+1015              ;; ED-DELETE
 4837+1015 CD 31 10     o1015:		CALL	o1031		; routine ED-EDGE moves cursor to left.
 4838+1018 01 01 00     		LD	BC,$0001	; of character to be deleted.
 4839+101B C3 E8 19     		JP	o19E8		; to RECLAIM-2 reclaim the character.
 4840+101E
 4841+101E              ; ------------------------------------------
 4842+101E              ; Ignore next 2 codes from key-input routine
 4843+101E              ; ------------------------------------------
 4844+101E              ; Since AT and TAB cannot be entered this point is never reached
 4845+101E              ; from the keyboard. If inputting from a tape device or network then
 4846+101E              ; the control and two following characters are ignored and processing
 4847+101E              ; continues as if a carriage return had been received.
 4848+101E              ; Here, perhaps, another Spectrum has said print #15; AT 0,0; "This is yellow"
 4849+101E              ; and this one is interpreting input #15; a$.
 4850+101E
 4851+101E              ;; ED-IGNORE
 4852+101E CD D4 15     o101E:		CALL	o15D4		; routine WAIT-KEY to ignore keystroke.
 4853+1021 CD D4 15     		CALL	o15D4		; routine WAIT-KEY to ignore next key.
 4854+1024
 4855+1024              ; -------------
 4856+1024              ; Enter/newline
 4857+1024              ; -------------
 4858+1024              ; The enter key has been pressed to have BASIC line or input accepted.
 4859+1024
 4860+1024              ;; ED-ENTER
 4861+1024 E1           o1024:		POP	HL		; discard address ED-LOOP
 4862+1025 E1           		POP	HL		; drop address ED-ERROR
 4863+1026
 4864+1026              ;; ED-END
 4865+1026 E1           o1026:		POP	HL		; the previous value of ERR_SP
 4866+1027 22 3D 5C     		LD	(	$5C3D),HL	; is restored to ERR_SP system variable
 4867+102A FD CB 00 7E  		BIT	7,(IY+$00)	; is ERR_NR $FF (= 'OK') ?
 4868+102E C0           		RET	NZ		; return if so
 4869+102F
 4870+102F F9           		LD	SP,HL		; else put error routine on stack
 4871+1030 C9           		RET			; and make an indirect jump to it.
 4872+1031
 4873+1031              ; -----------------------------
 4874+1031              ; Move cursor left when editing
 4875+1031              ; -----------------------------
 4876+1031              ; This routine moves the cursor left. The complication is that it must
 4877+1031              ; not position the cursor between control codes and their parameters.
 4878+1031              ; It is further complicated in that it deals with TAB and AT characters
 4879+1031              ; which are never present from the keyboard.
 4880+1031              ; The method is to advance from the beginning of the line each time,
 4881+1031              ; jumping one, two, or three characters as necessary saving the original
 4882+1031              ; position at each jump in DE. Once it arrives at the cursor then the next
 4883+1031              ; legitimate leftmost position is in DE.
 4884+1031
 4885+1031              ;; ED-EDGE
 4886+1031 37           o1031:		SCF
 4887+1032 CD 95 11     		CALL	o1195		; subroutine SET-DE.
 4888+1035              					; if input   then DE=WORKSP
 4889+1035              					; if editing then DE=E_LINE
 4890+1035 ED 52        		SBC	HL,DE		; subtract address from start of line
 4891+1037 19           		ADD	HL,DE		; and add back.
 4892+1038 23           		INC	HL		; adjust for carry.
 4893+1039 C1           		POP	BC		; drop return address
 4894+103A D8           		RET	C		; return to ED-LOOP if already at left
 4895+103B              					; of line.
 4896+103B
 4897+103B C5           		PUSH	BC		; resave return address - ED-LOOP.
 4898+103C 44           		LD	B,H		; transfer HL - cursor address
 4899+103D 4D           		LD	C,L		; to BC register pair.
 4900+103E              					; at this point DE addresses start of line.
 4901+103E
 4902+103E              ;; ED-EDGE-1
 4903+103E 62           o103E:		LD	H,D		; transfer DE - leftmost pointer
 4904+103F 6B           		LD	L,E		; to HL
 4905+1040 23           		INC	HL		; address next leftmost character to
 4906+1041              					; advance position each time.
 4907+1041 1A           		LD	A,(DE)		; pick up previous in A
 4908+1042 E6 F0        		AND	$F0		; lose the low bits
 4909+1044 FE 10        		CP	$10		; is it INK to TAB $10-$1F ?
 4910+1046              					; that is, is it followed by a parameter ?
 4911+1046 20 09        		JR	NZ,o1051	; to ED-EDGE-2 if not
 4912+1048              					; HL has been incremented once
 4913+1048
 4914+1048 23           		INC	HL		; address next as at least one parameter.
 4915+1049
 4916+1049              ; in fact since 'tab' and 'at' cannot be entered the next section seems
 4917+1049              ; superfluous.
 4918+1049              ; The test will always fail and the jump to ED-EDGE-2 will be taken.
 4919+1049
 4920+1049 1A           		LD	A,(DE)		; reload leftmost character
 4921+104A D6 17        		SUB	$17		; decimal 23 ('tab')
 4922+104C CE 00        		ADC	A,$00		; will be 0 for 'tab' and 'at'.
 4923+104E 20 01        		JR	NZ,o1051	; forward to ED-EDGE-2 if not
 4924+1050              					; HL has been incremented twice
 4925+1050
 4926+1050 23           		INC	HL		; increment a third time for 'at"/"tab'
 4927+1051
 4928+1051              ;; ED-EDGE-2
 4929+1051 A7           o1051:		AND	A		; prepare for true subtraction
 4930+1052 ED 42        		SBC	HL,BC		; subtract cursor address from pointer
 4931+1054 09           		ADD	HL,BC		; and add back
 4932+1055              					; Note when HL matches the cursor position BC,
 4933+1055              					; there is no carry and the previous
 4934+1055              					; position is in DE.
 4935+1055 EB           		EX	DE,HL		; transfer result to DE if looping again.
 4936+1056              					; transfer DE to HL to be used as K-CUR
 4937+1056              					; if exiting loop.
 4938+1056 38 E6        		JR	C,o103E		; back to ED-EDGE-1 if cursor not matched.
 4939+1058
 4940+1058 C9           		RET			; return.
 4941+1059
 4942+1059              ; -----------------
 4943+1059              ; Cursor up editing
 4944+1059              ; -----------------
 4945+1059              ; The main screen displays part of the BASIC program and the user wishes
 4946+1059              ; to move up one line scrolling if necessary.
 4947+1059              ; This has no alternativo use in input mode.
 4948+1059
 4949+1059              ;; ED-UP
 4950+1059 FD CB 37 6E  o1059:		BIT	5,(IY+$37)	; test FLAGX  - input mode ?
 4951+105D C0           		RET	NZ		; return if not in editor - to ED-LOOP.
 4952+105E
 4953+105E 2A 49 5C     		LD	HL,(	$5C49)	; get current line from E_PPC
 4954+1061 CD 6E 19     		CALL	o196E		; routine LINE-ADDR gets address
 4955+1064 EB           		EX	DE,HL		; and previous in DE
 4956+1065 CD 95 16     		CALL	o1695		; routine LINE-NO gets prev line number
 4957+1068 21 4A 5C     		LD	HL,$5C4A	; set HL to E_PPC_hi as next routine stores
 4958+106B              					; top first.
 4959+106B CD 1C 19     		CALL	o191C		; routine LN-STORE loads DE value to HL
 4960+106E              					; high byte first - E_PPC_lo takes E
 4961+106E
 4962+106E              ; this branch is also taken from ed-down.
 4963+106E
 4964+106E              ;; ED-LIST
 4965+106E CD 95 17     o106E:		CALL	o1795		; routine AUTO-LIST lists to upper screen
 4966+1071              					; including adjusted current line.
 4967+1071 3E 00        		LD	A,$00		; select lower screen again
 4968+1073 C3 01 16     		JP	o1601		; exit via CHAN-OPEN to ED-LOOP
 4969+1076
 4970+1076              ; --------------------------------
 4971+1076              ; Use of symbol and graphics codes
 4972+1076              ; --------------------------------
 4973+1076              ; These will not be encountered with the keyboard but would be handled
 4974+1076              ; otherwise as follows.
 4975+1076              ; As noted earlier, Vickers says there should have been an entry in
 4976+1076              ; the KEYS table for chr$ 6 which also pointed here.
 4977+1076              ; If, for simplicity, two Spectrums were both using #15 as a bi-directional
 4978+1076              ; channel connected to each other:-
 4979+1076              ; then when the other Spectrum has said PRINT #15; x, y
 4980+1076              ; input #15; i ; j  would treat the comma control as a newline and the
 4981+1076              ; control would skip to input j.
 4982+1076              ; You can get round the missing chr$ 6 handler by sending multiple print
 4983+1076              ; items separated by a newline '.
 4984+1076
 4985+1076              ; chr$14 would have the same functionality.
 4986+1076
 4987+1076              ; This is chr$ 14.
 4988+1076              ;; ED-SYMBOL
 4989+1076 FD CB 37 7E  o1076:		BIT	7,(IY+$37)	; test FLAGX - is this INPUT LINE ?
 4990+107A 28 A8        		JR	Z,o1024		; back to ED-ENTER if not to treat as if
 4991+107C              					; enter had been pressed.
 4992+107C              					; else continue and add code to buffer.
 4993+107C
 4994+107C              ; Next is chr$ 15
 4995+107C              ; Note that ADD-CHAR precedes the table so we can't offset to it directly.
 4996+107C
 4997+107C              ;; ED-GRAPH
 4998+107C C3 81 0F     o107C:		JP	o0F81		; jump back to ADD-CHAR
 4999+107F
 5000+107F              ; --------------------
 5001+107F              ; Editor error routine
 5002+107F              ; --------------------
 5003+107F              ; If an error occurs while editing, or inputting, then ERR_SP
 5004+107F              ; points to the stack location holding address ED_ERROR.
 5005+107F
 5006+107F              ;; ED-ERROR
 5007+107F FD CB 30 66  o107F:		BIT	4,(IY+$30)	; test FLAGS2  - is K channel in use ?
 5008+1083 28 A1        		JR	Z,o1026		; back to ED-END if not.
 5009+1085
 5010+1085              ; but as long as we're editing lines or inputting from the keyboard, then
 5011+1085              ; we've run out of memory so give a short rasp.
 5012+1085
 5013+1085 FD 36 00 FF  		LD	(IY+$00),$FF	; reset ERR_NR to 'OK'.
 5014+1089 16 00        		LD	D,$00		; prepare for beeper.
 5015+108B FD 5E FE     		LD	E,(IY-$02)	; use RASP value.
 5016+108E 21 90 1A     		LD	HL,$1A90	; set the pitch - or tone period.
 5017+1091 CD B5 03     		CALL	o03B5		; routine BEEPER emits a warning rasp.
 5018+1094 C3 30 0F     		JP	o0F30		; to ED-AGAIN to re-stack address of
 5019+1097              					; this routine and make ERR_SP point to it.
 5020+1097
 5021+1097              ; ---------------------
 5022+1097              ; Clear edit/work space
 5023+1097              ; ---------------------
 5024+1097              ; The editing area or workspace is cleared depending on context.
 5025+1097              ; This is called from ED-EDIT to clear workspace if edit key is
 5026+1097              ; used during input, to clear editing area if no program exists
 5027+1097              ; and to clear editing area prior to copying the edit line to it.
 5028+1097              ; It is also used by the error routine to clear the respective
 5029+1097              ; area depending on FLAGX.
 5030+1097
 5031+1097              ;; CLEAR-SP
 5032+1097 E5           o1097:		PUSH	HL		; preserve HL
 5033+1098 CD 90 11     		CALL	o1190		; routine SET-HL
 5034+109B              					; if in edit   HL = WORKSP-1, DE = E_LINE
 5035+109B              					; if in input  HL = STKBOT,   DE = WORKSP
 5036+109B 2B           		DEC	HL		; adjust
 5037+109C CD E5 19     		CALL	o19E5		; routine RECLAIM-1 reclaims space
 5038+109F 22 5B 5C     		LD	(	$5C5B),HL	; set K_CUR to start of empty area
 5039+10A2 FD 36 07 00  		LD	(IY+$07),$00	; set MODE to 'KLC'
 5040+10A6 E1           		POP	HL		; restore HL.
 5041+10A7 C9           		RET			; return.
 5042+10A8
 5043+10A8              ; ----------------------------
 5044+10A8              ; THE 'KEYBOARD INPUT' ROUTINE
 5045+10A8              ; ----------------------------
 5046+10A8              ; This is the service routine for the input stream of the keyboard channel 'K'.
 5047+10A8
 5048+10A8              ;; KEY-INPUT
 5049+10A8 FD CB 02 5E  o10A8:		BIT	3,(IY+$02)	; test TV_FLAG  - has a key been pressed in
 5050+10AC              					; editor ?
 5051+10AC
 5052+10AC C4 1D 11     		CALL	NZ,o111D	; routine ED-COPY, if so, to reprint the lower
 5053+10AF              					; screen at every keystroke/mode change.
 5054+10AF
 5055+10AF A7           		AND	A		; clear carry flag - required exit condition.
 5056+10B0
 5057+10B0 FD CB 01 6E  		BIT	5,(IY+$01)	; test FLAGS  - has a new key been pressed ?
 5058+10B4 C8           		RET	Z		; return if not.                        >>
 5059+10B5
 5060+10B5 3A 08 5C     		LD	A,(	$5C08)	; system variable LASTK will hold last key -
 5061+10B8              					; from the interrupt routine.
 5062+10B8
 5063+10B8 FD CB 01 AE  		RES	5,(IY+$01)	; update FLAGS  - reset the new key flag.
 5064+10BC F5           		PUSH	AF		; save the input character.
 5065+10BD
 5066+10BD FD CB 02 6E  		BIT	5,(IY+$02)	; test TV_FLAG  - clear lower screen ?
 5067+10C1
 5068+10C1 C4 6E 0D     		CALL	NZ,o0D6E	; routine CLS-LOWER if so.
 5069+10C4
 5070+10C4 F1           		POP	AF		; restore the character code.
 5071+10C5
 5072+10C5 FE 20        		CP	$20		; if space or higher then
 5073+10C7 30 52        		JR	NC,o111B	; forward to KEY-DONE2 and return with carry
 5074+10C9              					; set to signal key-found.
 5075+10C9
 5076+10C9 FE 10        		CP	$10		; with 16d INK and higher skip
 5077+10CB 30 2D        		JR	NC,o10FA	; forward to KEY-CONTR.
 5078+10CD
 5079+10CD FE 06        		CP	$06		; for 6 - 15d
 5080+10CF 30 0A        		JR	NC,o10DB	; skip forward to KEY-M-CL to handle Modes
 5081+10D1              					; and CapsLock.
 5082+10D1
 5083+10D1              ; that only leaves 0-5, the flash bright inverse switches.
 5084+10D1
 5085+10D1 47           		LD	B,A		; save character in B
 5086+10D2 E6 01        		AND	$01		; isolate the embedded parameter (0/1).
 5087+10D4 4F           		LD	C,A		; and store in C
 5088+10D5 78           		LD	A,B		; re-fetch copy (0-5)
 5089+10D6 1F           		RRA			; halve it 0, 1 or 2.
 5090+10D7 C6 12        		ADD	A,$12		; add 18d gives 'flash', 'bright'
 5091+10D9              					; and 'inverse'.
 5092+10D9 18 2A        		JR	o1105		; forward to KEY-DATA with the
 5093+10DB              					; parameter (0/1) in C.
 5094+10DB
 5095+10DB              ; ---
 5096+10DB
 5097+10DB              ; Now separate capslock 06 from modes 7-15.
 5098+10DB
 5099+10DB              ;; KEY-M-CL
 5100+10DB 20 09        o10DB:		JR	NZ,o10E6	; forward to KEY-MODE if not 06 (capslock)
 5101+10DD
 5102+10DD 21 6A 5C     		LD	HL,	$5C6A	; point to FLAGS2
 5103+10E0 3E 08        		LD	A,$08		; value 00001000
 5104+10E2 AE           		XOR	(HL)		; toggle BIT 3 of FLAGS2 the capslock bit
 5105+10E3 77           		LD	(HL),A		; and store result in FLAGS2 again.
 5106+10E4 18 0E        		JR	o10F4		; forward to KEY-FLAG to signal no-key.
 5107+10E6
 5108+10E6              ; ---
 5109+10E6
 5110+10E6              ;; KEY-MODE
 5111+10E6 FE 0E        o10E6:		CP	$0E		; compare with chr 14d
 5112+10E8 D8           		RET	C		; return with carry set "key found" for
 5113+10E9              					; codes 7 - 13d leaving 14d and 15d
 5114+10E9              					; which are converted to mode codes.
 5115+10E9
 5116+10E9 D6 0D        		SUB	$0D		; subtract 13d leaving 1 and 2
 5117+10EB              					; 1 is 'E' mode, 2 is 'G' mode.
 5118+10EB 21 41 5C     		LD	HL,	$5C41		; address the MODE system variable.
 5119+10EE BE           		CP	(HL)		; compare with existing value before
 5120+10EF 77           		LD	(HL),A		; inserting the new value.
 5121+10F0 20 02        		JR	NZ,o10F4	; forward to KEY-FLAG if it has changed.
 5122+10F2
 5123+10F2 36 00        		LD	(HL),$00	; else make MODE zero - KLC mode
 5124+10F4              					; Note. while in Extended/Graphics mode,
 5125+10F4              					; the Extended Mode/Graphics key is pressed
 5126+10F4              					; again to get out.
 5127+10F4
 5128+10F4              ;; KEY-FLAG
 5129+10F4 FD CB 02 DE  o10F4:		SET	3,(IY+$02)	; update TV_FLAG  - show key state has changed
 5130+10F8 BF           		CP	A		; clear carry and reset zero flags -
 5131+10F9              					; no actual key returned.
 5132+10F9 C9           		RET			; make the return.
 5133+10FA
 5134+10FA              ; ---
 5135+10FA
 5136+10FA              ; now deal with colour controls - 16-23 ink, 24-31 paper
 5137+10FA
 5138+10FA              ;; KEY-CONTR
 5139+10FA 47           o10FA:		LD	B,A		; make a copy of character.
 5140+10FB E6 07        		AND	$07		; mask to leave bits 0-7
 5141+10FD 4F           		LD	C,A		; and store in C.
 5142+10FE 3E 10        		LD	A,$10		; initialize to 16d - INK.
 5143+1100 CB 58        		BIT	3,B		; was it paper ?
 5144+1102 20 01        		JR	NZ,o1105	; forward to KEY-DATA with INK 16d and
 5145+1104              					; colour in C.
 5146+1104
 5147+1104 3C           		INC	A		; else change from INK to PAPER (17d) if so.
 5148+1105
 5149+1105              ;; KEY-DATA
 5150+1105 FD 71 D3     o1105:		LD	(IY-$2D),C	; put the colour (0-7)/state(0/1) in KDATA
 5151+1108 11 0D 11     		LD	DE,o110D	; address: KEY-NEXT will be next input stream
 5152+110B 18 06        		JR	o1113		; forward to KEY-CHAN to change it ...
 5153+110D
 5154+110D              ; ---
 5155+110D
 5156+110D              ; ... so that INPUT_AD directs control to here at next call to WAIT-KEY
 5157+110D
 5158+110D              ;; KEY-NEXT
 5159+110D 3A 0D 5C     o110D:		LD	A,(	$5C0D)	; pick up the parameter stored in KDATA.
 5160+1110 11 A8 10     		LD	DE,o10A8	; address: KEY-INPUT will be next input stream
 5161+1113              					; continue to restore default channel and
 5162+1113              					; make a return with the control code.
 5163+1113
 5164+1113              ;; KEY-CHAN
 5165+1113 2A 4F 5C     o1113:		LD	HL,(	$5C4F)	; address start of CHANNELS area using CHANS
 5166+1116              					; system variable.
 5167+1116              					; Note. One might have expected CURCHL to
 5168+1116              					; have been used.
 5169+1116 23           		INC	HL		; step over the
 5170+1117 23           		INC	HL		; output address
 5171+1118 73           		LD	(HL),E		; and update the input
 5172+1119 23           		INC	HL		; routine address for
 5173+111A 72           		LD	(HL),D		; the next call to WAIT-KEY.
 5174+111B
 5175+111B              ;; KEY-DONE2
 5176+111B 37           o111B:		SCF
 5177+111C C9           		RET			; and return.
 5178+111D
 5179+111D              ; --------------------
 5180+111D              ; Lower screen copying
 5181+111D              ; --------------------
 5182+111D              ; This subroutine is called whenever the line in the editing area or
 5183+111D              ; input workspace is required to be printed to the lower screen.
 5184+111D              ; It is by calling this routine after any change that the cursor, for
 5185+111D              ; instance, appears to move to the left.
 5186+111D              ; Remember the edit line will contain characters and tokens
 5187+111D              ; e.g. "1000 LET a=1" is 8 characters.
 5188+111D
 5189+111D              ;; ED-COPY
 5190+111D CD 4D 0D     o111D:		CALL	o0D4D		; routine TEMPS sets temporary attributes.
 5191+1120 FD CB 02 9E  		RES	3,(IY+$02)	; update TV_FLAG  - signal no change in mode
 5192+1124 FD CB 02 AE  		RES	5,(IY+$02)	; update TV_FLAG  - signal don't clear lower
 5193+1128              					; screen.
 5194+1128 2A 8A 5C     		LD	HL,(	$5C8A)	; fetch SPOSNL
 5195+112B E5           		PUSH	HL		; and save on stack.
 5196+112C
 5197+112C 2A 3D 5C     		LD	HL,(	$5C3D)	; fetch ERR_SP
 5198+112F E5           		PUSH	HL		; and save also
 5199+1130 21 67 11     		LD	HL,o1167	; address: ED-FULL
 5200+1133 E5           		PUSH	HL		; is pushed as the error routine
 5201+1134 ED 73 3D 5C  		LD	(	$5C3D),SP	; and ERR_SP made to point to it.
 5202+1138
 5203+1138 2A 82 5C     		LD	HL,(	$5C82)	; fetch ECHO_E
 5204+113B E5           		PUSH	HL		; and push also
 5205+113C
 5206+113C 37           		SCF			; set carry flag to control SET-DE
 5207+113D CD 95 11     		CALL	o1195		; call routine SET-DE
 5208+1140              					; if in input DE = WORKSP
 5209+1140              					; if in edit  DE = E_LINE
 5210+1140 EB           		EX	DE,HL		; start address to HL
 5211+1141
 5212+1141 CD 7D 18     		CALL	o187D		; routine OUT-LINE2 outputs entire line up to
 5213+1144              					; carriage return including initial
 5214+1144              					; characterized line number when present.
 5215+1144 EB           		EX	DE,HL		; transfer new address to DE
 5216+1145 CD E1 18     		CALL	o18E1		; routine OUT-CURS considers a
 5217+1148              					; terminating cursor.
 5218+1148
 5219+1148 2A 8A 5C     		LD	HL,(	$5C8A)	; fetch updated SPOSNL
 5220+114B E3           		EX	(SP),HL		; exchange with ECHO_E on stack
 5221+114C EB           		EX	DE,HL		; transfer ECHO_E to DE
 5222+114D CD 4D 0D     		CALL	o0D4D		; routine TEMPS to re-set attributes
 5223+1150              					; if altered.
 5224+1150
 5225+1150              ; the lower screen was not cleared, at the outset, so if deleting then old
 5226+1150              ; text from a previous print may follow this line and requires blanking.
 5227+1150
 5228+1150              ;; ED-BLANK
 5229+1150 3A 8B 5C     o1150:		LD	A,($5C8B)	; fetch SPOSNL_hi is current line
 5230+1153 92           		SUB	D		; compare with old
 5231+1154 38 26        		JR	C,o117C		; forward to ED-C-DONE if no blanking
 5232+1156
 5233+1156 20 06        		JR	NZ,o115E	; forward to ED-SPACES if line has changed
 5234+1158
 5235+1158 7B           		LD	A,E		; old column to A
 5236+1159 FD 96 50     		SUB	(IY+$50)	; subtract new in SPOSNL_lo
 5237+115C 30 1E        		JR	NC,o117C	; forward to ED-C-DONE if no backfilling.
 5238+115E
 5239+115E              ;; ED-SPACES
 5240+115E 3E 20        o115E:		LD	A,$20		; prepare a space.
 5241+1160 D5           		PUSH	DE		; save old line/column.
 5242+1161 CD F4 09     		CALL	o09F4		; routine PRINT-OUT prints a space over
 5243+1164              					; any text from previous print.
 5244+1164              					; Note. Since the blanking only occurs when
 5245+1164              					; using $09F4 to print to the lower screen,
 5246+1164              					; there is no need to vector via a RST 10
 5247+1164              					; and we can use this alternate set.
 5248+1164 D1           		POP	DE		; restore the old line column.
 5249+1165 18 E9        		JR	o1150		; back to ED-BLANK until all old text blanked.
 5250+1167
 5251+1167              ; -------------------------------
 5252+1167              ; THE 'EDITOR-FULL' ERROR ROUTINE
 5253+1167              ; -------------------------------
 5254+1167              ;   This is the error routine addressed by ERR_SP.  This is not for the out of
 5255+1167              ;   memory situation as we're just printing.  The pitch and duration are exactly
 5256+1167              ;   the same as used by ED-ERROR from which this has been augmented.  The
 5257+1167              ;   situation is that the lower screen is full and a rasp is given to suggest
 5258+1167              ;   that this is perhaps not the best idea you've had that day.
 5259+1167
 5260+1167              ;; ED-FULL
 5261+1167 16 00        o1167:		LD	D,$00		; prepare to moan.
 5262+1169 FD 5E FE     		LD	E,(IY-$02)	; fetch RASP value.
 5263+116C 21 90 1A     		LD	HL,$1A90	; set pitch or tone period.
 5264+116F
 5265+116F CD B5 03     		CALL	o03B5		; routine BEEPER.
 5266+1172
 5267+1172 FD 36 00 FF  		LD	(IY+$00),$FF	; clear ERR_NR.
 5268+1176 ED 5B 8A 5C  		LD	DE,(	$5C8A)	; fetch SPOSNL.
 5269+117A 18 02        		JR	o117E		; forward to ED-C-END
 5270+117C
 5271+117C              ; -------
 5272+117C
 5273+117C              ; the exit point from line printing continues here.
 5274+117C
 5275+117C              ;; ED-C-DONE
 5276+117C D1           o117C:		POP	DE		; fetch new line/column.
 5277+117D E1           		POP	HL		; fetch the error address.
 5278+117E
 5279+117E              ; the error path rejoins here.
 5280+117E
 5281+117E              ;; ED-C-END
 5282+117E E1           o117E:		POP	HL		; restore the old value of ERR_SP.
 5283+117F 22 3D 5C     		LD	(	$5C3D),HL	; update the system variable ERR_SP
 5284+1182
 5285+1182 C1           		POP	BC		; old value of SPOSN_L
 5286+1183 D5           		PUSH	DE		; save new value
 5287+1184
 5288+1184 CD D9 0D     		CALL	o0DD9		; routine CL-SET and PO-STORE
 5289+1187              					; update ECHO_E and SPOSN_L from BC
 5290+1187
 5291+1187 E1           		POP	HL		; restore new value
 5292+1188 22 82 5C     		LD	(	$5C82),HL	; and overwrite ECHO_E
 5293+118B
 5294+118B FD 36 26 00  		LD	(IY+$26),$00	; make error pointer X_PTR_hi out of bounds
 5295+118F
 5296+118F C9           		RET			; return
 5297+1190
 5298+1190              ; -----------------------------------------------
 5299+1190              ; Point to first and last locations of work space
 5300+1190              ; -----------------------------------------------
 5301+1190              ;   These two nested routines ensure that the appropriate pointers are
 5302+1190              ;   selected for the editing area or workspace. The routines that call
 5303+1190              ;   these routines are designed to work on either area.
 5304+1190
 5305+1190              ; this routine is called once
 5306+1190
 5307+1190              ;; SET-HL
 5308+1190 2A 61 5C     o1190:		LD	HL,(	$5C61)	; fetch WORKSP to HL.
 5309+1193 2B           		DEC	HL		; point to last location of editing area.
 5310+1194 A7           		AND	A		; clear carry to limit exit points to first
 5311+1195              					; or last.
 5312+1195
 5313+1195              ; this routine is called with carry set and exits at a conditional return.
 5314+1195
 5315+1195              ;; SET-DE
 5316+1195 ED 5B 59 5C  o1195:		LD	DE,(	$5C59)	; fetch E_LINE to DE
 5317+1199 FD CB 37 6E  		BIT	5,(IY+$37)	; test FLAGX  - Input Mode ?
 5318+119D C8           		RET	Z		; return now if in editing mode
 5319+119E
 5320+119E ED 5B 61 5C  		LD	DE,(	$5C61)	; fetch WORKSP to DE
 5321+11A2 D8           		RET	C		; return if carry set ( entry = set-de)
 5322+11A3
 5323+11A3 2A 63 5C     		LD	HL,(	$5C63)	; fetch STKBOT to HL as well
 5324+11A6 C9           		RET			; and return  (entry = set-hl (in input))
 5325+11A7
 5326+11A7              ; -----------------------------------
 5327+11A7              ; THE 'REMOVE FLOATING POINT' ROUTINE
 5328+11A7              ; -----------------------------------
 5329+11A7              ;   When a BASIC LINE or the INPUT BUFFER is parsed any numbers will have
 5330+11A7              ;   an invisible chr 14d inserted after them and the 5-byte integer or
 5331+11A7              ;   floating point form inserted after that.  Similar invisible value holders
 5332+11A7              ;   are also created after the numeric and string variables in a DEF FN list.
 5333+11A7              ;   This routine removes these 'compiled' numbers from the edit line or
 5334+11A7              ;   input workspace.
 5335+11A7
 5336+11A7              ;; REMOVE-FP
 5337+11A7 7E           o11A7:		LD	A,(HL)		; fetch character
 5338+11A8 FE 0E        		CP	$0E		; is it the CHR$ 14 number marker ?
 5339+11AA 01 06 00     		LD	BC,$0006	; prepare to strip six bytes
 5340+11AD
 5341+11AD CC E8 19     		CALL	Z,o19E8		; routine RECLAIM-2 reclaims bytes if CHR$ 14.
 5342+11B0
 5343+11B0 7E           		LD	A,(HL)		; reload next (or same) character
 5344+11B1 23           		INC	HL		; and advance address
 5345+11B2 FE 0D        		CP	$0D		; end of line or input buffer ?
 5346+11B4 20 F1        		JR	NZ,o11A7	; back to REMOVE-FP until entire line done.
 5347+11B6
 5348+11B6 C9           		RET			; return.
 5349+11B7
 5350+11B7
 5351+11B7              ; *********************************
 5352+11B7              ; ** Part 6. EXECUTIVE ROUTINES  **
 5353+11B7              ; *********************************
 5354+11B7
 5355+11B7
 5356+11B7              ; The memory.
 5357+11B7              ;
 5358+11B7              ; +---------+-----------+------------+--------------+-------------+--
 5359+11B7              ; | BASIC   |  Display  | Attributes | ZX Printer   |    System   |
 5360+11B7              ; |  ROM    |   File    |    File    |   Buffer     |  Variables  |
 5361+11B7              ; +---------+-----------+------------+--------------+-------------+--
 5362+11B7              ; ^         ^           ^            ^              ^             ^
 5363+11B7              ; $0000   $4000       $5800        $5B00          $5C00         $5CB6 = CHANS
 5364+11B7              ;
 5365+11B7              ;
 5366+11B7              ;  --+----------+---+---------+-----------+---+------------+--+---+--
 5367+11B7              ;    | Channel  |$80|  BASIC  | Variables |$80| Edit Line  |NL|$80|
 5368+11B7              ;    |   Info   |   | Program |   Area    |   | or Command |  |   |
 5369+11B7              ;  --+----------+---+---------+-----------+---+------------+--+---+--
 5370+11B7              ;    ^              ^         ^               ^                   ^
 5371+11B7              ;  CHANS           PROG      VARS           E_LINE              WORKSP
 5372+11B7              ;
 5373+11B7              ;
 5374+11B7              ;                             ---5-->         <---2---  <--3---
 5375+11B7              ;  --+-------+--+------------+-------+-------+---------+-------+-+---+------+
 5376+11B7              ;    | INPUT |NL| Temporary  | Calc. | Spare | Machine | GOSUB |?|$3E| UDGs |
 5377+11B7              ;    | data  |  | Work Space | Stack |       |  Stack  | Stack | |   |      |
 5378+11B7              ;  --+-------+--+------------+-------+-------+---------+-------+-+---+------+
 5379+11B7              ;    ^                       ^       ^       ^                   ^   ^      ^
 5380+11B7              ;  WORKSP                  STKBOT  STKEND   sp               RAMTOP UDG  P_RAMT
 5381+11B7              ;
 5382+11B7
 5383+11B7              ; -----------------
 5384+11B7              ; THE 'NEW' COMMAND
 5385+11B7              ; -----------------
 5386+11B7              ;   The NEW command is about to set all RAM below RAMTOP to zero and then
 5387+11B7              ;   re-initialize the system.  All RAM above RAMTOP should, and will be,
 5388+11B7              ;   preserved.
 5389+11B7              ;   There is nowhere to store values in RAM or on the stack which becomes
 5390+11B7              ;   inoperable. Similarly PUSH and CALL instructions cannot be used to store
 5391+11B7              ;   values or section common code. The alternate register set is the only place
 5392+11B7              ;   available to store 3 persistent 16-bit system variables.
 5393+11B7
 5394+11B7              ;; NEW
 5395+11B7 F3           o11B7:		DI
 5396+11B8              					; cleared.
 5397+11B8 3E FF        		LD	A,$FF		; Flag coming from NEW.
 5398+11BA ED 5B B2 5C  		LD	DE,(	$5CB2)	; Fetch RAMTOP as top value.
 5399+11BE D9           		EXX			; Switch in alternate set.
 5400+11BF ED 4B B4 5C  		LD	BC,(	$5CB4)	; Fetch P-RAMT differs on 16K/48K machines.
 5401+11C3 ED 5B 38 5C  		LD	DE,(	$5C38)	; Fetch RASP/PIP.
 5402+11C7 2A 7B 5C     		LD	HL,(	$5C7B)	; Fetch UDG    differs on 16K/48K machines.
 5403+11CA D9           		EXX			; Switch back to main set and continue into...
 5404+11CB
 5405+11CB              ; ----------------------
 5406+11CB              ; THE 'START-NEW' BRANCH
 5407+11CB              ; ----------------------
 5408+11CB              ;   This branch is taken from above and from RST 00h.
 5409+11CB              ;   The common code tests RAM and sets it to zero re-initializing all the
 5410+11CB              ;   non-zero system variables and channel information.  The A register flags
 5411+11CB              ;   if coming from START or NEW.
 5412+11CB
 5413+11CB              ;; START-NEW
 5414+11CB 47           o11CB:		LD	B,A		; Save the flag to control later branching.
 5415+11CC 3E 01        		LD	A,%00000001	; Select a white border (***)
 5416+11CE D3 FE        		OUT	($FE),A		; and set it now by writing to a port.
 5417+11D0
 5418+11D0 3E 3F        		LD	A,$3F		; Load the accumulator with last page in ROM.
 5419+11D2 ED 47        		LD	I,A		; Set the I register - this remains constant
 5420+11D4              					; and can't be in the range $40 - $7F as 'snow'
 5421+11D4              					; appears on the screen.
 5422+11D4
 5423+11D4 00           		NOP			; These seem unnecessary.
 5424+11D5 00           		NOP			;
 5425+11D6 00           		NOP			;
 5426+11D7 00           		NOP			;
 5427+11D8 00           		NOP			;
 5428+11D9 00           		NOP			;
 5429+11DA
 5430+11DA              ; -----------------------
 5431+11DA              ; THE 'RAM CHECK' SECTION
 5432+11DA              ; -----------------------
 5433+11DA              ;   Typically, a Spectrum will have 16K or 48K of RAM and this code will test
 5434+11DA              ;   it all till it finds an unpopulated location or, less likely, a faulty
 5435+11DA              ;   location.  Usually it stops when it reaches the top $FFFF, or in the case
 5436+11DA              ;   of NEW the supplied top value.  The entire screen turns black with
 5437+11DA              ;   sometimes red stripes on black paper just visible.
 5438+11DA
 5439+11DA              ;; ram-check
 5440+11DA 62           o11DA:		LD	H,D		; Transfer the top value to the HL register
 5441+11DB 6B           		LD	L,E		; pair.
 5442+11DC
 5443+11DC              ;; RAM-FILL
 5444+11DC 36 02        o11DC:		LD	(HL),$02	; Load memory with $02 - red ink on black paper.
 5445+11DE 2B           		DEC	HL		; Decrement memory address.
 5446+11DF BC           		CP	H		; Have we reached ROM - $3F ?
 5447+11E0 20 FA        		JR	NZ,o11DC	; Back to RAM-FILL if not.
 5448+11E2
 5449+11E2              ;; RAM-READ
 5450+11E2 A7           o11E2:		AND	A		; Clear carry - prepare to subtract.
 5451+11E3 ED 52        		SBC	HL,DE		; subtract and add back setting
 5452+11E5 19           		ADD	HL,DE		; carry when back at start.
 5453+11E6 23           		INC	HL		; and increment for next iteration.
 5454+11E7 30 06        		JR	NC,o11EF	; forward to RAM-DONE if we've got back to
 5455+11E9              					; starting point with no errors.
 5456+11E9
 5457+11E9 35           		DEC	(HL)		; decrement to 1.
 5458+11EA 28 03        		JR	Z,o11EF		; forward to RAM-DONE if faulty.
 5459+11EC
 5460+11EC 35           		DEC	(HL)		; decrement to zero.
 5461+11ED 28 F3        		JR	Z,o11E2		; back to RAM-READ if zero flag was set.
 5462+11EF
 5463+11EF              ;; RAM-DONE
 5464+11EF 2B           o11EF:		DEC	HL		; step back to last valid location.
 5465+11F0 D9           		EXX			; regardless of state, set up possibly
 5466+11F1              					; stored system variables in case from NEW.
 5467+11F1 ED 43 B4 5C  		LD	(	$5CB4),BC	; insert P-RAMT.
 5468+11F5 ED 53 38 5C  		LD	(	$5C38),DE	; insert RASP/PIP.
 5469+11F9 22 7B 5C     		LD	(	$5C7B),HL	; insert UDG.
 5470+11FC D9           		EXX			; switch in main set.
 5471+11FD 04           		INC	B		; now test if we arrived here from NEW.
 5472+11FE 28 19        		JR	Z,o1219		; forward to RAM-SET if we did.
 5473+1200
 5474+1200              ;   This section applies to START only.
 5475+1200
 5476+1200 22 B4 5C     		LD	(	$5CB4),HL	; set P-RAMT to the highest working RAM
 5477+1203              					; address.
 5478+1203 11 AF 3E     		LD	DE,$3EAF	; address of last byte of 'U' bitmap in ROM.
 5479+1206 01 A8 00     		LD	BC,$00A8	; there are 21 user defined graphics.
 5480+1209 EB           		EX	DE,HL		; switch pointers and make the UDGs a
 5481+120A ED B8        		LDDR			; copy of the standard characters A - U.
 5482+120C EB           		EX	DE,HL		; switch the pointer to HL.
 5483+120D 23           		INC	HL		; update to start of 'A' in RAM.
 5484+120E 22 7B 5C     		LD	(	$5C7B),HL	; make UDG system variable address the first
 5485+1211              					; bitmap.
 5486+1211 2B           		DEC	HL		; point at RAMTOP again.
 5487+1212
 5488+1212 01 40 00     		LD	BC,$0040	; set the values of
 5489+1215 ED 43 38 5C  		LD	(	$5C38),BC	; the PIP and RASP system variables.
 5490+1219
 5491+1219              ;   The NEW command path rejoins here.
 5492+1219
 5493+1219              ;; RAM-SET
 5494+1219 22 B2 5C     o1219:		LD	(	$5CB2),HL	; set system variable RAMTOP to HL.
 5495+121C
 5496+121C              ;
 5497+121C              ;   Note. this entry point is a disabled Warm Restart that was almost certainly
 5498+121C              ;   once pointed to by the System Variable NMIADD.  It would be essential that
 5499+121C              ;   any NMI Handler would perform the tasks from here to the EI instruction
 5500+121C              ;   below.
 5501+121C
 5502+121C              ;; NMI_VECT
 5503+121C              o121C:
 5504+121C 21 00 3C     		LD	HL,$3C00	; a strange place to set the pointer to the
 5505+121F 22 36 5C     		LD	(	$5C36),HL	; character set, CHARS - as no printing yet.
 5506+1222
 5507+1222 2A B2 5C     		LD	HL,(	$5CB2)	; fetch RAMTOP to HL again as we've lost it.
 5508+1225
 5509+1225 36 3E        		LD	(HL),$3E	; top of user ram holds GOSUB end marker
 5510+1227              					; an impossible line number - see RETURN.
 5511+1227              					; no significance in the number $3E. It has
 5512+1227              					; been traditional since the ZX80.
 5513+1227
 5514+1227 2B           		DEC	HL		; followed by empty byte (not important).
 5515+1228 F9           		LD	SP,HL		; set up the machine stack pointer.
 5516+1229 2B           		DEC	HL		;
 5517+122A 2B           		DEC	HL		;
 5518+122B 22 3D 5C     		LD	(	$5C3D),HL	; ERR_SP is where the error pointer is
 5519+122E              					; at moment empty - will take address MAIN-4
 5520+122E              					; at the call preceding that address,
 5521+122E              					; although interrupts and calls will make use
 5522+122E              					; of this location in meantime.
 5523+122E
 5524+122E ED 56        		IM	1		; select interrupt mode 1.
 5525+1230
 5526+1230 FD 21 3A 5C  		LD	IY,	$5C3A	; set IY to ERR_NR. IY can reach all standard
 5527+1234              					; system variables but shadow ROM system
 5528+1234              					; variables will be mostly out of range.
 5529+1234
 5530+1234 FB           		EI			; enable interrupts now that we have a stack.
 5531+1235
 5532+1235              ;   If, as suggested above, the NMI service routine pointed to this section of
 5533+1235              ;   code then a decision would have to be made at this point to jump forward,
 5534+1235              ;   in a Warm Restart scenario, to produce a report code, leaving any program
 5535+1235              ;   intact.
 5536+1235
 5537+1235 21 B6 5C     		LD	HL,$5CB6	; The address of the channels - initially
 5538+1238              					; following system variables.
 5539+1238 22 4F 5C     		LD	(	$5C4F),HL	; Set the CHANS system variable.
 5540+123B
 5541+123B 11 AF 15     		LD	DE,o15AF	; Address: init-chan in ROM.
 5542+123E 01 15 00     		LD	BC,$0015	; There are 21 bytes of initial data in ROM.
 5543+1241 EB           		EX	DE,HL		; swap the pointers.
 5544+1242 ED B0        		LDIR			; Copy the bytes to RAM.
 5545+1244
 5546+1244 EB           		EX	DE,HL		; Swap pointers. HL points to program area.
 5547+1245 2B           		DEC	HL		; Decrement address.
 5548+1246 22 57 5C     		LD	(	$5C57),HL	; Set DATADD to location before program area.
 5549+1249 23           		INC	HL		; Increment again.
 5550+124A
 5551+124A 22 53 5C     		LD	(	$5C53),HL	; Set PROG the location where BASIC starts.
 5552+124D 22 4B 5C     		LD	(	$5C4B),HL	; Set VARS to same location with a
 5553+1250 36 80        		LD	(HL),$80	; variables end-marker.
 5554+1252 23           		INC	HL		; Advance address.
 5555+1253 22 59 5C     		LD	(	$5C59),HL	; Set E_LINE, where the edit line
 5556+1256              					; will be created.
 5557+1256              					; Note. it is not strictly necessary to
 5558+1256              					; execute the next fifteen bytes of code
 5559+1256              					; as this will be done by the call to SET-MIN.
 5560+1256              					; --
 5561+1256 36 0D        		LD	(HL),$0D	; initially just has a carriage return
 5562+1258 23           		INC	HL		; followed by
 5563+1259 36 80        		LD	(HL),$80	; an end-marker.
 5564+125B 23           		INC	HL		; address the next location.
 5565+125C 22 61 5C     		LD	(	$5C61),HL	; set WORKSP - empty workspace.
 5566+125F 22 63 5C     		LD	(	$5C63),HL	; set STKBOT - bottom of the empty stack.
 5567+1262 22 65 5C     		LD	(	$5C65),HL	; set STKEND to the end of the empty stack.
 5568+1265              					; --
 5569+1265 3E 0D        		LD	A,	%00001101	; the colour system is set to white paper,
 5570+1267              					; black ink, no flash or bright.
 5571+1267 32 8D 5C     		LD	(	$5C8D),A	; set ATTR_P permanent colour attributes.
 5572+126A 32 8F 5C     		LD	(	$5C8F),A	; set ATTR_T temporary colour attributes.
 5573+126D 32 48 5C     		LD	(	$5C48),A	; set BORDCR the border colour/lower screen
 5574+1270              					; attributes.
 5575+1270
 5576+1270 21 23 05     		LD	HL,$0523	; The keyboard repeat and delay values are
 5577+1273 22 09 5C     		LD	(	$5C09),HL	; loaded to REPDEL and REPPER.
 5578+1276
 5579+1276 FD 35 C6     		DEC	(IY-$3A)	; set KSTATE-0 to $FF - keyboard map available.
 5580+1279 FD 35 CA     		DEC	(IY-$36)	; set KSTATE-4 to $FF - keyboard map available.
 5581+127C
 5582+127C 21 C6 15     		LD	HL,o15C6	; set source to ROM Address: init-strm
 5583+127F 11 10 5C     		LD	DE,	$5C10	; set destination to system variable STRMS-FD
 5584+1282 01 0E 00     		LD	BC,$000E	; copy the 14 bytes of initial 7 streams data
 5585+1285 ED B0        		LDIR			; from ROM to RAM.
 5586+1287
 5587+1287 FD CB 01 CE  		SET	1,(IY+$01)	; update FLAGS  - signal printer in use.
 5588+128B CD DF 0E     		CALL	o0EDF		; call routine CLEAR-PRB to initialize system
 5589+128E              					; variables associated with printer.
 5590+128E              					; The buffer is clear.
 5591+128E
 5592+128E FD 36 31 02  		LD	(IY+$31),$02	; set DF_SZ the lower screen display size to
 5593+1292              					; two lines
 5594+1292 CD 6B 0D     		CALL	o0D6B		; call routine CLS to set up system
 5595+1295              					; variables associated with screen and clear
 5596+1295              					; the screen and set attributes.
 5597+1295 AF           		XOR	A		; clear accumulator so that we can address
 5598+1296 11 38 15     		LD	DE,o1539-1	; the message table directly.
 5599+1299 CD 0A 0C     		CALL	o0C0A		; routine PO-MSG puts
 5600+129C              					; ' ©  1982 Sinclair Research Ltd'
 5601+129C              					; at bottom of display.
 5602+129C FD CB 02 EE  		SET	5,(IY+$02)	; update TV_FLAG  - signal lower screen will
 5603+12A0              					; require clearing.
 5604+12A0
 5605+12A0 18 07        		JR	o12A9		; forward to MAIN-1
 5606+12A2              					; -------------------------
 5607+12A2              					; THE 'MAIN EXECUTION LOOP'
 5608+12A2              					; -------------------------
 5609+12A2              					;
 5610+12A2              					;
 5611+12A2
 5612+12A2              ;; MAIN-EXEC
 5613+12A2 FD 36 31 02  o12A2:		LD	(IY+$31),$02	; set DF_SZ lower screen display file size to
 5614+12A6              					; two lines.
 5615+12A6 CD 95 17     		CALL	o1795		; routine AUTO-LIST
 5616+12A9
 5617+12A9              ;; MAIN-1
 5618+12A9 CD B0 16     o12A9:		CALL	o16B0		; routine SET-MIN clears work areas.
 5619+12AC
 5620+12AC              ;; MAIN-2
 5621+12AC 3E 00        o12AC:		LD	A,$00		; select channel 'K' the keyboard
 5622+12AE
 5623+12AE CD 01 16     		CALL	o1601		; routine CHAN-OPEN opens it
 5624+12B1
 5625+12B1 CD 2C 0F     		CALL	o0F2C		; routine EDITOR is called.
 5626+12B4              					; Note the above routine is where the Spectrum
 5627+12B4              					; waits for user-interaction. Perhaps the
 5628+12B4              					; most common input at this stage
 5629+12B4              					; is LOAD "".
 5630+12B4
 5631+12B4 CD 17 1B     		CALL	o1B17		; routine LINE-SCAN scans the input.
 5632+12B7
 5633+12B7 FD CB 00 7E  		BIT	7,(IY+$00)	; test ERR_NR - will be $FF if syntax is OK.
 5634+12BB 20 12        		JR	NZ,o12CF	; forward, if correct, to MAIN-3.
 5635+12BD
 5636+12BD              ;
 5637+12BD
 5638+12BD FD CB 30 66  		BIT	4,(IY+$30)	; test FLAGS2 - K channel in use ?
 5639+12C1 28 40        		JR	Z,o1303		; forward to MAIN-4 if not.
 5640+12C3
 5641+12C3              ;
 5642+12C3
 5643+12C3 2A 59 5C     		LD	HL,(	$5C59)	; an editing error so address E_LINE.
 5644+12C6 CD A7 11     		CALL	o11A7		; routine REMOVE-FP removes the hidden
 5645+12C9              					; floating-point forms.
 5646+12C9 FD 36 00 FF  		LD	(IY+$00),$FF	; system variable ERR_NR is reset to 'OK'.
 5647+12CD 18 DD        		JR	o12AC		; back to MAIN-2 to allow user to correct.
 5648+12CF
 5649+12CF              ; ---
 5650+12CF
 5651+12CF              ; the branch was here if syntax has passed test.
 5652+12CF
 5653+12CF              ;; MAIN-3
 5654+12CF 2A 59 5C     o12CF:		LD	HL,(	$5C59)	; fetch the edit line address from E_LINE.
 5655+12D2
 5656+12D2 22 5D 5C     		LD	(	$5C5D),HL	; system variable CH_ADD is set to first
 5657+12D5              					; character of edit line.
 5658+12D5              					; Note. the above two instructions are a little
 5659+12D5              					; inadequate.
 5660+12D5              					; They are repeated with a subtle difference
 5661+12D5              					; at the start of the next subroutine and are
 5662+12D5              					; therefore not required above.
 5663+12D5
 5664+12D5 CD FB 19     		CALL	o19FB		; routine E-LINE-NO will fetch any line
 5665+12D8              					; number to BC if this is a program line.
 5666+12D8
 5667+12D8 78           		LD	A,B		; test if the number of
 5668+12D9 B1           		OR	C		; the line is non-zero.
 5669+12DA C2 5D 15     		JP	NZ,o155D	; jump forward to MAIN-ADD if so to add the
 5670+12DD              					; line to the BASIC program.
 5671+12DD
 5672+12DD              ; Has the user just pressed the ENTER key ?
 5673+12DD
 5674+12DD DF           		RST	18H		; GET-CHAR gets character addressed by CH_ADD.
 5675+12DE FE 0D        		CP	$0D		; is it a carriage return ?
 5676+12E0 28 C0        		JR	Z,o12A2		; back to MAIN-EXEC if so for an automatic
 5677+12E2              					; listing.
 5678+12E2
 5679+12E2              ; this must be a direct command.
 5680+12E2
 5681+12E2 FD CB 30 46  		BIT	0,(IY+$30)	; test FLAGS2 - clear the main screen ?
 5682+12E6
 5683+12E6 C4 AF 0D     		CALL	NZ,o0DAF	; routine CL-ALL, if so, e.g. after listing.
 5684+12E9
 5685+12E9 CD 6E 0D     		CALL	o0D6E		; routine CLS-LOWER anyway.
 5686+12EC
 5687+12EC 3E 19        		LD	A,$19		; compute scroll count as 25 minus
 5688+12EE FD 96 4F     		SUB	(IY+$4F)	; value of S_POSN_hi.
 5689+12F1 32 8C 5C     		LD	(	$5C8C),A	; update SCR_CT system variable.
 5690+12F4 FD CB 01 FE  		SET	7,(IY+$01)	; update FLAGS - signal running program.
 5691+12F8 FD 36 00 FF  		LD	(IY+$00),$FF	; set ERR_NR to 'OK'.
 5692+12FC FD 36 0A 01  		LD	(IY+$0A),$01	; set NSPPC to one for first statement.
 5693+1300 CD 8A 1B     o1300:		CALL	o1B8A		; call routine LINE-RUN to run the line.
 5694+1303              					; sysvar ERR_SP therefore addresses MAIN-4
 5695+1303
 5696+1303              ; Examples of direct commands are RUN, CLS, LOAD "", PRINT USR 40000,
 5697+1303              ; LPRINT "A"; etc..
 5698+1303              ; If a user written machine-code program disables interrupts then it
 5699+1303              ; must enable them to pass the next step. We also jumped to here if the
 5700+1303              ; keyboard was not being used.
 5701+1303
 5702+1303              ;; MAIN-4
 5703+1303 76           o1303:		HALT
 5704+1304              					; set bit 5 of FLAGS.
 5705+1304
 5706+1304 FD CB 01 AE  		RES	5,(IY+$01)	; update bit 5 of FLAGS - signal no new key.
 5707+1308
 5708+1308 FD CB 30 4E  		BIT	1,(IY+$30)	; test FLAGS2 - is printer buffer clear ?
 5709+130C C4 CD 0E     		CALL	NZ,o0ECD	; call routine COPY-BUFF if not.
 5710+130F              					; Note. the programmer has neglected
 5711+130F              					; to set bit 1 of FLAGS first.
 5712+130F
 5713+130F 3A 3A 5C     		LD	A,(	$5C3A)	; fetch ERR_NR
 5714+1312 3C           		INC	A		; increment to give true code.
 5715+1313
 5716+1313              ; Now deal with a runtime error as opposed to an editing error.
 5717+1313              ; However if the error code is now zero then the OK message will be printed.
 5718+1313
 5719+1313              ;; MAIN-G
 5720+1313 F5           o1313:		PUSH	AF		; save the error number.
 5721+1314
 5722+1314 21 00 00     		LD	HL,$0000	; prepare to clear some system variables.
 5723+1317 FD 74 37     		LD	(IY+$37),H	; clear all the bits of FLAGX.
 5724+131A FD 74 26     		LD	(IY+$26),H	; blank X_PTR_hi to suppress error marker.
 5725+131D 22 0B 5C     		LD	(	$5C0B),HL	; blank DEFADD to signal that no defined
 5726+1320              					; function is currently being evaluated.
 5727+1320
 5728+1320 21 01 00     		LD	HL,$0001	; explicit - inc hl would do.
 5729+1323 22 16 5C     		LD	($5C16),HL	; ensure STRMS-00 is keyboard.
 5730+1326
 5731+1326 CD B0 16     		CALL	o16B0		; routine SET-MIN clears workspace etc.
 5732+1329 FD CB 37 AE  		RES	5,(IY+$37)	; update FLAGX - signal in EDIT not INPUT mode.
 5733+132D              					; Note. all the bits were reset earlier.
 5734+132D
 5735+132D CD 6E 0D     		CALL	o0D6E		; call routine CLS-LOWER.
 5736+1330
 5737+1330 FD CB 02 EE  		SET	5,(IY+$02)	; update TV_FLAG - signal lower screen
 5738+1334              					; requires clearing.
 5739+1334
 5740+1334 F1           		POP	AF		; bring back the true error number
 5741+1335 47           		LD	B,A		; and make a copy in B.
 5742+1336 FE 0A        		CP	$0A		; is it a print-ready digit ?
 5743+1338 38 02        		JR	C,o133C		; forward to MAIN-5 if so.
 5744+133A
 5745+133A C6 07        		ADD	A,$07		; add ASCII offset to letters.
 5746+133C
 5747+133C              ;; MAIN-5
 5748+133C CD EF 15     o133C:		CALL	o15EF		; call routine OUT-CODE to print the code.
 5749+133F
 5750+133F 3E 20        		LD	A,$20		; followed by a space.
 5751+1341 D7           		RST	10H		; PRINT-A
 5752+1342
 5753+1342 78           		LD	A,B		; fetch stored report code.
 5754+1343 11 91 13     		LD	DE,o1391	; address: rpt-mesgs.
 5755+1346
 5756+1346 CD 0A 0C     		CALL	o0C0A		; call routine PO-MSG to print the message.
 5757+1349 CD 29 3A     		CALL	o3A29
 5758+134C 00           		NOP
 5759+134D CD 0A 0C     		CALL	o0C0A		; routine PO-MSG prints ', ' although it would
 5760+1350              					; be more succinct to use RST $10.
 5761+1350
 5762+1350 ED 4B 45 5C  		LD	BC,(	$5C45)	; fetch PPC the current line number.
 5763+1354 CD 1B 1A     		CALL	o1A1B		; routine OUT-NUM-1 will print that
 5764+1357
 5765+1357 3E 3A        		LD	A,$3A		; then a ":" character.
 5766+1359 D7           		RST	10H		; PRINT-A
 5767+135A
 5768+135A FD 4E 0D     		LD	C,(IY+$0D)	; then SUBPPC for statement
 5769+135D 06 00        		LD	B,$00		; limited to 127
 5770+135F CD 1B 1A     		CALL	o1A1B		; routine OUT-NUM-1 prints BC.
 5771+1362
 5772+1362 CD 97 10     		CALL	o1097		; routine CLEAR-SP clears editing area which
 5773+1365              					; probably contained 'RUN'.
 5774+1365
 5775+1365 3A 3A 5C     		LD	A,(	$5C3A)	; fetch ERR_NR again
 5776+1368 3C           		INC	A		; test for no error originally $FF.
 5777+1369 28 1B        		JR	Z,o1386		; forward to MAIN-9 if no error.
 5778+136B
 5779+136B FE 09        		CP	$09		; is code Report 9 STOP ?
 5780+136D 28 04        		JR	Z,o1373		; forward to MAIN-6 if so
 5781+136F
 5782+136F FE 15        		CP	$15		; is code Report L Break ?
 5783+1371 20 03        		JR	NZ,o1376	; forward to MAIN-7 if not
 5784+1373
 5785+1373              ; Stop or Break was encountered so consider CONTINUE.
 5786+1373
 5787+1373              ;; MAIN-6
 5788+1373 FD 34 0D     o1373:		INC	(IY+$0D)	; increment SUBPPC to next statement.
 5789+1376
 5790+1376              ;; MAIN-7
 5791+1376 01 03 00     o1376:		LD	BC,$0003	; prepare to copy 3 system variables to
 5792+1379 11 70 5C     		LD	DE,	$5C70	; address OSPPC - statement for CONTINUE.
 5793+137C              					; also updating OLDPPC line number below.
 5794+137C
 5795+137C 21 44 5C     		LD	HL,	$5C44 	; set source top to NSPPC next statement.
 5796+137F CB 7E        		BIT	7,(HL)		; did BREAK occur before the jump ?
 5797+1381              					; e.g. between GO TO and next statement.
 5798+1381 28 01        		JR	Z,o1384		; skip forward to MAIN-8, if not, as set-up
 5799+1383              					; is correct.
 5800+1383
 5801+1383 09           		ADD	HL,BC		; set source to SUBPPC number of current
 5802+1384              					; statement/line which will be repeated.
 5803+1384
 5804+1384              ;; MAIN-8
 5805+1384 ED B8        o1384:		LDDR
 5806+1386              					; or NSPPC to OLDPPC and NEWPPC to OSPCC
 5807+1386
 5808+1386              ;; MAIN-9
 5809+1386 FD 36 0A FF  o1386:		LD	(IY+$0A),$FF	; update NSPPC - signal 'no jump'.
 5810+138A FD CB 01 9E  		RES	3,(IY+$01)	; update FLAGS - signal use 'K' mode for
 5811+138E              					; the first character in the editor and
 5812+138E
 5813+138E C3 AC 12     		JP	o12AC		; jump back to MAIN-2.
 5814+1391
 5815+1391
 5816+1391              ; ----------------------
 5817+1391              ; Canned report messages
 5818+1391              ; ----------------------
 5819+1391              ; The Error reports with the last byte inverted. The first entry
 5820+1391              ; is a dummy entry. The last, which begins with $7F, the Spectrum
 5821+1391              ; character for copyright symbol, is poaced here for convenience
 5822+1391              ; as is the preceding comma and space.
 5823+1391              ; The report line must accommodate a 4-digit line number and a 3-digit
 5824+1391              ; statement number which limits the length of the message text to twenty
 5825+1391              ; characters.
 5826+1391              ; e.g.  "B Integer out of range, 1000:127"
 5827+1391
 5828+1391              ;; rpt-mesgs
 5829+1391
 5830+1391 80           o1391:		DB	$80
 5831+1392 4F CB        		DB	"O","K" + $80	; 0 -> OK
 5832+1394 4E 45 58 54  		DB	"NEXT without FO","R"+$80		; 1
 5832+1398 20 77 69 74
 5832+139C 68 6F 75 74
 5832+13A0 20 46 4F D2
 5833+13A4 56 61 72 69  		DB	"Variable not foun","d"+$80		; 2
 5833+13A8 61 62 6C 65
 5833+13AC 20 6E 6F 74
 5833+13B0 20 66 6F 75
 5833+13B4 6E E4
 5834+13B6 53 75 62 73  		DB	"Subscript wron","g"+$80		; 3
 5834+13BA 63 72 69 70
 5834+13BE 74 20 77 72
 5834+13C2 6F 6E E7
 5835+13C5 4F 75 74 20  		DB	"Out of memor","y"+$80			; 4
 5835+13C9 6F 66 20 6D
 5835+13CD 65 6D 6F 72
 5835+13D1 F9
 5836+13D2 4F 75 74 20  		DB	"Out of scree","n"+$80			; 5
 5836+13D6 6F 66 20 73
 5836+13DA 63 72 65 65
 5836+13DE EE
 5837+13DF 4E 75 6D 62  		DB	"Number too bi","g"+$80			; 6
 5837+13E3 65 72 20 74
 5837+13E7 6F 6F 20 62
 5837+13EB 69 E7
 5838+13ED 52 45 54 55  		DB	"RETURN without GOSU","B"+$80		; 7
 5838+13F1 52 4E 20 77
 5838+13F5 69 74 68 6F
 5838+13F9 75 74 20 47
 5838+13FD 4F 53 55 C2
 5839+1401 45 6E 64 20  		DB	"End of fil","e"+$80			; 8
 5839+1405 6F 66 20 66
 5839+1409 69 6C E5
 5840+140C 53 54 4F 50  		DB	"STOP statemen","t"+$80			; 9
 5840+1410 20 73 74 61
 5840+1414 74 65 6D 65
 5840+1418 6E F4
 5841+141A 49 6E 76 61  		DB	"Invalid argumen","t"+$80		; A
 5841+141E 6C 69 64 20
 5841+1422 61 72 67 75
 5841+1426 6D 65 6E F4
 5842+142A 49 6E 74 65  		DB	"Integer out of rang","e"+$80		; B
 5842+142E 67 65 72 20
 5842+1432 6F 75 74 20
 5842+1436 6F 66 20 72
 5842+143A 61 6E 67 E5
 5843+143E 4E 6F 6E 73  		DB	"Nonsense in BASI","C"+$80		; C
 5843+1442 65 6E 73 65
 5843+1446 20 69 6E 20
 5843+144A 42 41 53 49
 5843+144E C3
 5844+144F 42 52 45 41  		DB	"BREAK - CONT repeat","s"+$80		; D
 5844+1453 4B 20 2D 20
 5844+1457 43 4F 4E 54
 5844+145B 20 72 65 70
 5844+145F 65 61 74 F3
 5845+1463 4F 75 74 20  		DB	"Out of DAT","A"+$80			; E
 5845+1467 6F 66 20 44
 5845+146B 41 54 C1
 5846+146E 49 6E 76 61  		DB	"Invalid file nam","e"+$80		; F
 5846+1472 6C 69 64 20
 5846+1476 66 69 6C 65
 5846+147A 20 6E 61 6D
 5846+147E E5
 5847+147F 4E 6F 20 72  		DB	"No room for lin","e"+$80		; G
 5847+1483 6F 6F 6D 20
 5847+1487 66 6F 72 20
 5847+148B 6C 69 6E E5
 5848+148F 53 54 4F 50  		DB	"STOP in INPU","T"+$80			; H
 5848+1493 20 69 6E 20
 5848+1497 49 4E 50 55
 5848+149B D4
 5849+149C 46 4F 52 20  		DB	"FOR without NEX","T"+$80		; I
 5849+14A0 77 69 74 68
 5849+14A4 6F 75 74 20
 5849+14A8 4E 45 58 D4
 5850+14AC 49 6E 76 61  		DB	"Invalid I/O devic","e"+$80		; J
 5850+14B0 6C 69 64 20
 5850+14B4 49 2F 4F 20
 5850+14B8 64 65 76 69
 5850+14BC 63 E5
 5851+14BE 49 6E 76 61  		DB	"Invalid colou","r"+$80			; K
 5851+14C2 6C 69 64 20
 5851+14C6 63 6F 6C 6F
 5851+14CA 75 F2
 5852+14CC 42 52 45 41  		DB	"BREAK into progra","m"+$80		; L
 5852+14D0 4B 20 69 6E
 5852+14D4 74 6F 20 70
 5852+14D8 72 6F 67 72
 5852+14DC 61 ED
 5853+14DE 52 41 4D 54  		DB	"RAMTOP no goo","d"+$80			; M
 5853+14E2 4F 50 20 6E
 5853+14E6 6F 20 67 6F
 5853+14EA 6F E4
 5854+14EC 53 74 61 74  		DB	"Statement los","t"+$80			; N
 5854+14F0 65 6D 65 6E
 5854+14F4 74 20 6C 6F
 5854+14F8 73 F4
 5855+14FA 49 6E 76 61  		DB	"Invalid strea","m"+$80			; O
 5855+14FE 6C 69 64 20
 5855+1502 73 74 72 65
 5855+1506 61 ED
 5856+1508 46 4E 20 77  		DB	"FN without DE","F"+$80			; P
 5856+150C 69 74 68 6F
 5856+1510 75 74 20 44
 5856+1514 45 C6
 5857+1516 50 61 72 61  		DB	"Parameter erro","r"+$80		; Q
 5857+151A 6D 65 74 65
 5857+151E 72 20 65 72
 5857+1522 72 6F F2
 5858+1525 54 61 70 65  		DB	"Tape loading erro"			; R
 5858+1529 20 6C 6F 61
 5858+152D 64 69 6E 67
 5858+1531 20 65 72 72
 5858+1535 6F
 5859+1536 F2           o1536:		DB	"r"+$80
 5860+1537              					;; comma-sp
 5861+1537 2C A0        o1537:		DB	","," "+$80	; used in report line.
 5862+1539              					;; copyright
 5863+1539              o1539:
 5864+1539 7F           		DB	$7F		; (C) -> chr copyright
 5865+153A
 5866+153A              		IF 1
 5867+153A 20 31 39 38  			DM	" 1982 Sinclair Research Lt","d" + $80
 5867+153E 32 20 53 69
 5867+1542 6E 63 6C 61
 5867+1546 69 72 20 52
 5867+154A 65 73 65 61
 5867+154E 72 63 68 20
 5867+1552 4C 74 E4
 5868+1555              		ELSE
 5869+1555 ~            			DM	" 1982 Amstrad             "," " + $80
 5870+1555              		ENDIF
 5871+1555
 5872+1555              ; -------------
 5873+1555              ; REPORT-G
 5874+1555              ; -------------
 5875+1555              ; Note ERR_SP points here during line entry which allows the
 5876+1555              ; normal 'Out of Memory' report to be augmented to the more
 5877+1555              ; precise 'No Room for line' report.
 5878+1555
 5879+1555              ;; REPORT-G
 5880+1555              ; No Room for line
 5881+1555 3E 10        o1555:		LD	A,$10		; i.e. 'G' -$30 -$07
 5882+1557 01 00 00     		LD	BC,$0000	; this seems unnecessary.
 5883+155A C3 13 13     		JP	o1313		; jump back to MAIN-G
 5884+155D
 5885+155D              ; -----------------------------
 5886+155D              ; Handle addition of BASIC line
 5887+155D              ; -----------------------------
 5888+155D              ; Note this is not a subroutine but a branch of the main execution loop.
 5889+155D              ; System variable ERR_SP still points to editing error handler.
 5890+155D              ; A new line is added to the BASIC program at the appropriate place.
 5891+155D              ; An existing line with same number is deleted first.
 5892+155D              ; Entering an existing line number deletes that line.
 5893+155D              ; Entering a non-existent line allows the subsequent line to be edited next.
 5894+155D
 5895+155D              ;; MAIN-ADD
 5896+155D ED 43 49 5C  o155D:		LD	(	$5C49),BC	; set E_PPC to extracted line number.
 5897+1561 2A 5D 5C     		LD	HL,(	$5C5D)	; fetch CH_ADD - points to location after the
 5898+1564              					; initial digits (set in E_LINE_NO).
 5899+1564 EB           		EX	DE,HL		; save start of BASIC in DE.
 5900+1565
 5901+1565 21 55 15     		LD	HL,o1555	; Address: REPORT-G
 5902+1568 E5           		PUSH	HL		; is pushed on stack and addressed by ERR_SP.
 5903+1569              					; the only error that can occur is
 5904+1569              					; 'Out of memory'.
 5905+1569
 5906+1569 2A 61 5C     		LD	HL,(	$5C61)	; fetch WORKSP - end of line.
 5907+156C 37           		SCF			; prepare for true subtraction.
 5908+156D ED 52        		SBC	HL,DE		; find length of BASIC and
 5909+156F E5           		PUSH	HL		; save it on stack.
 5910+1570 60           		LD	H,B		; transfer line number
 5911+1571 69           		LD	L,C		; to HL register.
 5912+1572 CD 6E 19     		CALL	o196E		; routine LINE-ADDR will see if
 5913+1575              					; a line with the same number exists.
 5914+1575 20 06        		JR	NZ,o157D	; forward if no existing line to MAIN-ADD1.
 5915+1577
 5916+1577 CD B8 19     		CALL	o19B8		; routine NEXT-ONE finds the existing line.
 5917+157A CD E8 19     		CALL	o19E8		; routine RECLAIM-2 reclaims it.
 5918+157D
 5919+157D              ;; MAIN-ADD1
 5920+157D C1           o157D:		POP	BC		; retrieve the length of the new line.
 5921+157E 79           		LD	A,C		; and test if carriage return only
 5922+157F 3D           		DEC	A		; i.e. one byte long.
 5923+1580 B0           		OR	B		; result would be zero.
 5924+1581 28 28        		JR	Z,o15AB		; forward to MAIN-ADD2 is so.
 5925+1583
 5926+1583 C5           		PUSH	BC		; save the length again.
 5927+1584 03           		INC	BC		; adjust for inclusion
 5928+1585 03           		INC	BC		; of line number (two bytes)
 5929+1586 03           		INC	BC		; and line length
 5930+1587 03           		INC	BC		; (two bytes).
 5931+1588 2B           		DEC	HL		; HL points to location before the destination
 5932+1589
 5933+1589 ED 5B 53 5C  		LD	DE,(	$5C53)	; fetch the address of PROG
 5934+158D D5           		PUSH	DE		; and save it on the stack
 5935+158E CD 55 16     		CALL	o1655		; routine MAKE-ROOM creates BC spaces in
 5936+1591              					; program area and updates pointers.
 5937+1591 E1           		POP	HL		; restore old program pointer.
 5938+1592 22 53 5C     		LD	(	$5C53),HL	; and put back in PROG as it may have been
 5939+1595              					; altered by the POINTERS routine.
 5940+1595
 5941+1595 C1           		POP	BC		; retrieve BASIC length
 5942+1596 C5           		PUSH	BC		; and save again.
 5943+1597
 5944+1597 13           		INC	DE		; points to end of new area.
 5945+1598 2A 61 5C     		LD	HL,(	$5C61)	; set HL to WORKSP - location after edit line.
 5946+159B 2B           		DEC	HL		; decrement to address end marker.
 5947+159C 2B           		DEC	HL		; decrement to address carriage return.
 5948+159D ED B8        		LDDR			; copy the BASIC line back to initial command.
 5949+159F
 5950+159F 2A 49 5C     		LD	HL,(	$5C49)	; fetch E_PPC - line number.
 5951+15A2 EB           		EX	DE,HL		; swap it to DE, HL points to last of
 5952+15A3              					; four locations.
 5953+15A3 C1           		POP	BC		; retrieve length of line.
 5954+15A4 70           		LD	(HL),B		; high byte last.
 5955+15A5 2B           		DEC	HL		;
 5956+15A6 71           		LD	(HL),C		; then low byte of length.
 5957+15A7 2B           		DEC	HL		;
 5958+15A8 73           		LD	(HL),E		; then low byte of line number.
 5959+15A9 2B           		DEC	HL		;
 5960+15AA 72           		LD	(HL),D		; then high byte range $0 - $27 (1-9999).
 5961+15AB
 5962+15AB              ;; MAIN-ADD2
 5963+15AB F1           o15AB:		POP	AF		; drop the address of Report G
 5964+15AC C3 A2 12     		JP	o12A2		; and back to MAIN-EXEC producing a listing
 5965+15AF              					; and to reset ERR_SP in EDITOR.
 5966+15AF
 5967+15AF
 5968+15AF              ; ---------------------------------
 5969+15AF              ; THE 'INITIAL CHANNEL' INFORMATION
 5970+15AF              ; ---------------------------------
 5971+15AF              ;   This initial channel information is copied from ROM to RAM, during
 5972+15AF              ;   initialization.  It's new location is after the system variables and is
 5973+15AF              ;   addressed by the system variable CHANS which means that it can slide up and
 5974+15AF              ;   down in memory.  The table is never searched, by this ROM, and the last
 5975+15AF              ;   character, which could be anything other than a comma, provides a
 5976+15AF              ;   convenient resting place for DATADD.
 5977+15AF
 5978+15AF              ;; init-chan
 5979+15AF F4 09        o15AF:		DW	o09F4		; PRINT-OUT
 5980+15B1 A8 10        		DW	o10A8		; KEY-INPUT
 5981+15B3 4B           		DB	$4B		; 'K'
 5982+15B4 F4 09        		DW	o09F4		; PRINT-OUT
 5983+15B6 C4 15        		DW	o15C4		; REPORT-J
 5984+15B8 53           		DB	$53		; 'S'
 5985+15B9 81 0F        		DW	o0F81		; ADD-CHAR
 5986+15BB C4 15        		DW	o15C4		; REPORT-J
 5987+15BD 52           		DB	$52		; 'R'
 5988+15BE F4 09        		DW	o09F4		; PRINT-OUT
 5989+15C0 C4 15        		DW	o15C4		; REPORT-J
 5990+15C2 50           		DB	$50		; 'P'
 5991+15C3
 5992+15C3 80           		DB	$80		; End Marker
 5993+15C4
 5994+15C4              ;; REPORT-J
 5995+15C4 CF           o15C4:		RST	08H		; ERROR-1
 5996+15C5 12           		DB	$12		; Error Report: Invalid I/O device
 5997+15C6
 5998+15C6
 5999+15C6              ; -------------------------
 6000+15C6              ; THE 'INITIAL STREAM' DATA
 6001+15C6              ; -------------------------
 6002+15C6              ;   This is the initial stream data for the seven streams $FD - $03 that is
 6003+15C6              ;   copied from ROM to the STRMS system variables area during initialization.
 6004+15C6              ;   There are reserved locations there for another 12 streams.  Each location
 6005+15C6              ;   contains an offset to the second byte of a channel.  The first byte of a
 6006+15C6              ;   channel can't be used as that would result in an offset of zero for some
 6007+15C6              ;   and zero is used to denote that a stream is closed.
 6008+15C6
 6009+15C6              ;; init-strm
 6010+15C6 01 00        o15C6:		DB	$01,$00		; stream $FD offset to channel 'K'
 6011+15C8 06 00        		DB	$06,$00		; stream $FE offset to channel 'S'
 6012+15CA 0B 00        		DB	$0B,$00		; stream $FF offset to channel 'R'
 6013+15CC
 6014+15CC 01 00        		DB	$01,$00		; stream $00 offset to channel 'K'
 6015+15CE 01 00        		DB	$01,$00		; stream $01 offset to channel 'K'
 6016+15D0 06 00        		DB	$06,$00		; stream $02 offset to channel 'S'
 6017+15D2 10 00        		DB	$10,$00		; stream $03 offset to channel 'P'
 6018+15D4
 6019+15D4              ; ------------------------------
 6020+15D4              ; THE 'INPUT CONTROL' SUBROUTINE
 6021+15D4              ; ------------------------------
 6022+15D4              ;
 6023+15D4
 6024+15D4              ;; WAIT-KEY
 6025+15D4 FD CB 02 6E  o15D4:		BIT	5,(IY+$02)	; test TV_FLAG - clear lower screen ?
 6026+15D8 20 04        		JR	NZ,o15DE	; forward to WAIT-KEY1 if so.
 6027+15DA
 6028+15DA FD CB 02 DE  		SET	3,(IY+$02)	; update TV_FLAG - signal reprint the edit
 6029+15DE              					; line to the lower screen.
 6030+15DE
 6031+15DE              ;; WAIT-KEY1
 6032+15DE CD E6 15     o15DE:		CALL	o15E6		; routine INPUT-AD is called.
 6033+15E1
 6034+15E1 D8           		RET	C		; return with acceptable keys.
 6035+15E2
 6036+15E2 28 FA        		JR	Z,o15DE		; back to WAIT-KEY1 if no key is pressed
 6037+15E4              					; or it has been handled within INPUT-AD.
 6038+15E4
 6039+15E4              ;   Note. When inputting from the keyboard all characters are returned with
 6040+15E4              ;   above conditions so this path is never taken.
 6041+15E4
 6042+15E4              ;; REPORT-8
 6043+15E4 CF           o15E4:		RST	08H		; ERROR-1
 6044+15E5 07           		DB	$07		; Error Report: End of file
 6045+15E6
 6046+15E6              ; ---------------------------
 6047+15E6              ; THE 'INPUT ADDRESS' ROUTINE
 6048+15E6              ; ---------------------------
 6049+15E6              ;   This routine fetches the address of the input stream from the current
 6050+15E6              ;   channel area using the system variable CURCHL.
 6051+15E6
 6052+15E6              ;; INPUT-AD
 6053+15E6 D9           o15E6:		EXX
 6054+15E7 E5           		PUSH	HL		; save HL register
 6055+15E8 2A 51 5C     		LD	HL,(	$5C51)	; fetch address of CURCHL - current channel.
 6056+15EB 23           		INC	HL		; step over output routine
 6057+15EC 23           		INC	HL		; to point to low byte of input routine.
 6058+15ED 18 08        		JR	o15F7		; forward to CALL-SUB.
 6059+15EF
 6060+15EF              ; -------------------------
 6061+15EF              ; THE 'CODE OUTPUT' ROUTINE
 6062+15EF              ; -------------------------
 6063+15EF              ;   This routine is called on five occasions to print the ASCII equivalent of
 6064+15EF              ;   a value 0-9.
 6065+15EF
 6066+15EF              ;; OUT-CODE
 6067+15EF 1E 30        o15EF:		LD	E,$30		; add 48 decimal to give the ASCII character
 6068+15F1 83           		ADD	A,E		; "0" to "9" and continue into the main output
 6069+15F2              					; routine.
 6070+15F2
 6071+15F2              ; -------------------------
 6072+15F2              ; THE 'MAIN OUTPUT' ROUTINE
 6073+15F2              ; -------------------------
 6074+15F2              ;   PRINT-A-2 is a continuation of the RST 10 restart that prints any character.
 6075+15F2              ;   The routine prints to the current channel and the printing of control codes
 6076+15F2              ;   may alter that channel to divert subsequent RST 10 instructions to temporary
 6077+15F2              ;   routines. The normal channel is $09F4.
 6078+15F2
 6079+15F2              ;; PRINT-A-2
 6080+15F2 D9           o15F2:		EXX
 6081+15F3 E5           		PUSH	HL		; save HL register
 6082+15F4 2A 51 5C     		LD	HL,(	$5C51)	; fetch CURCHL the current channel.
 6083+15F7
 6084+15F7              ; input-ad rejoins here also.
 6085+15F7
 6086+15F7              ;; CALL-SUB
 6087+15F7 5E           o15F7:		LD	E,(HL)		; put the low byte in E.
 6088+15F8 23           		INC	HL		; advance address.
 6089+15F9 56           		LD	D,(HL)		; put the high byte to D.
 6090+15FA EB           		EX	DE,HL		; transfer the stream to HL.
 6091+15FB CD 2C 16     		CALL	o162C		; use routine CALL-JUMP.
 6092+15FE              					; in effect CALL (HL).
 6093+15FE
 6094+15FE E1           		POP	HL		; restore saved HL register.
 6095+15FF D9           		EXX			; switch back to the main set and
 6096+1600 C9           		RET			; return.
 6097+1601
 6098+1601              ; --------------------------
 6099+1601              ; THE 'OPEN CHANNEL' ROUTINE
 6100+1601              ; --------------------------
 6101+1601              ;   This subroutine is used by the ROM to open a channel 'K', 'S', 'R' or 'P'.
 6102+1601              ;   This is either for its own use or in response to a user's request, for
 6103+1601              ;   example, when "#" is encountered with output - PRINT, LIST etc.
 6104+1601              ;   or with input - INPUT, INKEY$ etc.
 6105+1601              ;   It is entered with a system stream $FD - $FF, or a user stream $00 - $0F
 6106+1601              ;   in the accumulator.
 6107+1601
 6108+1601              ;; CHAN-OPEN
 6109+1601 87           o1601:		ADD	A,A		; double the stream ($FF will become $FE etc.)
 6110+1602 C6 16        		ADD	A,$16		; add the offset to stream 0 from $5C00
 6111+1604 6F           		LD	L,A		; result to L
 6112+1605 26 5C        		LD	H,$5C		; now form the address in STRMS area.
 6113+1607 5E           		LD	E,(HL)		; fetch low byte of CHANS offset
 6114+1608 23           		INC	HL		; address next
 6115+1609 56           		LD	D,(HL)		; fetch high byte of offset
 6116+160A 7A           		LD	A,D		; test that the stream is open.
 6117+160B B3           		OR	E		; zero if closed.
 6118+160C 20 02        		JR	NZ,o1610	; forward to CHAN-OP-1 if open.
 6119+160E
 6120+160E              ;; REPORT-Oa
 6121+160E CF           o160E:		RST	08H		; ERROR-1
 6122+160F 17           		DB	$17		; Error Report: Invalid stream
 6123+1610
 6124+1610              ; continue here if stream was open. Note that the offset is from CHANS
 6125+1610              ; to the second byte of the channel.
 6126+1610
 6127+1610              ;; CHAN-OP-1
 6128+1610 1B           o1610:		DEC	DE		; reduce offset so it points to the channel.
 6129+1611 2A 4F 5C     		LD	HL,(	$5C4F)	; fetch CHANS the location of the base of
 6130+1614              					; the channel information area
 6131+1614 19           		ADD	HL,DE		; and add the offset to address the channel.
 6132+1615              					; and continue to set flags.
 6133+1615
 6134+1615              ; -----------------
 6135+1615              ; Set channel flags
 6136+1615              ; -----------------
 6137+1615              ; This subroutine is used from ED-EDIT, str$ and read-in to reset the
 6138+1615              ; current channel when it has been temporarily altered.
 6139+1615
 6140+1615              ;; CHAN-FLAG
 6141+1615 22 51 5C     o1615:		LD	(	$5C51),HL	; set CURCHL system variable to the
 6142+1618              					; address in HL
 6143+1618 FD CB 30 A6  		RES	4,(IY+$30)	; update FLAGS2  - signal K channel not in use.
 6144+161C              					; Note. provide a default for channel 'R'.
 6145+161C 23           		INC	HL		; advance past
 6146+161D 23           		INC	HL		; output routine.
 6147+161E 23           		INC	HL		; advance past
 6148+161F 23           		INC	HL		; input routine.
 6149+1620 4E           		LD	C,(HL)		; pick up the letter.
 6150+1621 21 2D 16     		LD	HL,o162D	; address: chn-cd-lu
 6151+1624 CD DC 16     		CALL	o16DC		; routine INDEXER finds offset to a
 6152+1627              					; flag-setting routine.
 6153+1627
 6154+1627 D0           		RET	NC		; but if the letter wasn't found in the
 6155+1628              					; table just return now. - channel 'R'.
 6156+1628
 6157+1628 16 00        		LD	D,$00		; prepare to add
 6158+162A 5E           		LD	E,(HL)		; offset to E
 6159+162B 19           		ADD	HL,DE		; add offset to location of offset to form
 6160+162C              					; address of routine
 6161+162C
 6162+162C              ;; CALL-JUMP
 6163+162C E9           o162C:		JP	(HL)		; jump to the routine
 6164+162D
 6165+162D              ; Footnote. calling any location that holds JP (HL) is the equivalent to
 6166+162D              ; a pseudo Z80 instruction CALL (HL). The ROM uses the instruction above.
 6167+162D
 6168+162D              ; --------------------------
 6169+162D              ; Channel code look-up table
 6170+162D              ; --------------------------
 6171+162D              ; This table is used by the routine above to find one of the three
 6172+162D              ; flag setting routines below it.
 6173+162D              ; A zero end-marker is required as channel 'R' is not present.
 6174+162D
 6175+162D              ;; chn-cd-lu
 6176+162D 4B 06        o162D:		DB	"K", o1634-$-1	; offset $06 to CHAN-K
 6177+162F 53 12        		DB	"S", o1642-$-1	; offset $12 to CHAN-S
 6178+1631 50 1B        		DB	"P", o164D-$-1	; offset $1B to CHAN-P
 6179+1633
 6180+1633 00           		DB	$00		; end marker.
 6181+1634
 6182+1634              ; --------------
 6183+1634              ; Channel K flag
 6184+1634              ; --------------
 6185+1634              ; routine to set flags for lower screen/keyboard channel.
 6186+1634
 6187+1634              ;; CHAN-K
 6188+1634 FD CB 02 C6  o1634:		SET	0,(IY+$02)	; update TV_FLAG  - signal lower screen in use
 6189+1638 FD CB 01 AE  		RES	5,(IY+$01)	; update FLAGS    - signal no new key
 6190+163C FD CB 30 E6  		SET	4,(IY+$30)	; update FLAGS2   - signal K channel in use
 6191+1640 18 04        		JR	o1646		; forward to CHAN-S-1 for indirect exit
 6192+1642
 6193+1642              ; --------------
 6194+1642              ; Channel S flag
 6195+1642              ; --------------
 6196+1642              ; routine to set flags for upper screen channel.
 6197+1642
 6198+1642              ;; CHAN-S
 6199+1642 FD CB 02 86  o1642:		RES	0,(IY+$02)	; TV_FLAG  - signal main screen in use
 6200+1646
 6201+1646              ;; CHAN-S-1
 6202+1646 FD CB 01 8E  o1646:		RES	1,(IY+$01)	; update FLAGS  - signal printer not in use
 6203+164A C3 4D 0D     		JP	o0D4D		; jump back to TEMPS and exit via that
 6204+164D              					; routine after setting temporary attributes.
 6205+164D              					; --------------
 6206+164D              					; Channel P flag
 6207+164D              					; --------------
 6208+164D              					; This routine sets a flag so that subsequent print related commands
 6209+164D              					; print to printer or update the relevant system variables.
 6210+164D              					; This status remains in force until reset by the routine above.
 6211+164D
 6212+164D              ;; CHAN-P
 6213+164D FD CB 01 CE  o164D:		SET	1,(IY+$01)	; update FLAGS  - signal printer in use
 6214+1651 C9           		RET			; return
 6215+1652
 6216+1652              ; --------------------------
 6217+1652              ; THE 'ONE SPACE' SUBROUTINE
 6218+1652              ; --------------------------
 6219+1652              ; This routine is called once only to create a single space
 6220+1652              ; in workspace by ADD-CHAR.
 6221+1652
 6222+1652              ;; ONE-SPACE
 6223+1652 01 01 00     o1652:		LD	BC,$0001	; create space for a single character.
 6224+1655
 6225+1655              ; ---------
 6226+1655              ; Make Room
 6227+1655              ; ---------
 6228+1655              ; This entry point is used to create BC spaces in various areas such as
 6229+1655              ; program area, variables area, workspace etc..
 6230+1655              ; The entire free RAM is available to each BASIC statement.
 6231+1655              ; On entry, HL addresses where the first location is to be created.
 6232+1655              ; Afterwards, HL will point to the location before this.
 6233+1655
 6234+1655              ;; MAKE-ROOM
 6235+1655 E5           o1655:		PUSH	HL		; save the address pointer.
 6236+1656 CD 05 1F     		CALL	o1F05		; routine TEST-ROOM checks if room
 6237+1659              					; exists and generates an error if not.
 6238+1659 E1           		POP	HL		; restore the address pointer.
 6239+165A CD 64 16     		CALL	o1664		; routine POINTERS updates the
 6240+165D              					; dynamic memory location pointers.
 6241+165D              					; DE now holds the old value of STKEND.
 6242+165D 2A 65 5C     		LD	HL,(	$5C65)	; fetch new STKEND the top destination.
 6243+1660
 6244+1660 EB           		EX	DE,HL		; HL now addresses the top of the area to
 6245+1661              					; be moved up - old STKEND.
 6246+1661 ED B8        o1661:		LDDR
 6247+1663 C9           		RET			; return with new area ready to be populated.
 6248+1664              					; HL points to location before new area,
 6249+1664              					; and DE to last of new locations.
 6250+1664
 6251+1664              ; -----------------------------------------------
 6252+1664              ; Adjust pointers before making or reclaiming room
 6253+1664              ; -----------------------------------------------
 6254+1664              ; This routine is called by MAKE-ROOM to adjust upwards and by RECLAIM to
 6255+1664              ; adjust downwards the pointers within dynamic memory.
 6256+1664              ; The fourteen pointers to dynamic memory, starting with VARS and ending
 6257+1664              ; with STKEND, are updated adding BC if they are higher than the position
 6258+1664              ; in HL.
 6259+1664              ; The system variables are in no particular order except that STKEND, the first
 6260+1664              ; free location after dynamic memory must be the last encountered.
 6261+1664
 6262+1664              ;; POINTERS
 6263+1664 F5           o1664:		PUSH	AF		; preserve accumulator.
 6264+1665 E5           		PUSH	HL		; put pos pointer on stack.
 6265+1666 21 4B 5C     		LD	HL,	$5C4B		; address VARS the first of the
 6266+1669 3E 0E        		LD	A,$0E		; fourteen variables to consider.
 6267+166B
 6268+166B              ;; PTR-NEXT
 6269+166B 5E           o166B:		LD	E,(HL)		; fetch the low byte of the system variable.
 6270+166C 23           		INC	HL		; advance address.
 6271+166D 56           		LD	D,(HL)		; fetch high byte of the system variable.
 6272+166E E3           		EX	(SP),HL		; swap pointer on stack with the variable
 6273+166F              					; pointer.
 6274+166F A7           		AND	A		; prepare to subtract.
 6275+1670 ED 52        		SBC	HL,DE		; subtract variable address
 6276+1672 19           		ADD	HL,DE		; and add back
 6277+1673 E3           		EX	(SP),HL		; swap pos with system variable pointer
 6278+1674 30 09        		JR	NC,o167F	; forward to PTR-DONE if var before pos
 6279+1676
 6280+1676 D5           		PUSH	DE		; save system variable address.
 6281+1677 EB           		EX	DE,HL		; transfer to HL
 6282+1678 09           		ADD	HL,BC		; add the offset
 6283+1679 EB           		EX	DE,HL		; back to DE
 6284+167A 72           		LD	(HL),D		; load high byte
 6285+167B 2B           		DEC	HL		; move back
 6286+167C 73           		LD	(HL),E		; load low byte
 6287+167D 23           		INC	HL		; advance to high byte
 6288+167E D1           		POP	DE		; restore old system variable address.
 6289+167F
 6290+167F              ;; PTR-DONE
 6291+167F 23           o167F:		INC	HL		; address next system variable.
 6292+1680 3D           		DEC	A		; decrease counter.
 6293+1681 20 E8        		JR	NZ,o166B	; back to PTR-NEXT if more.
 6294+1683 EB           		EX	DE,HL		; transfer old value of STKEND to HL.
 6295+1684              					; Note. this has always been updated.
 6296+1684 D1           		POP	DE		; pop the address of the position.
 6297+1685
 6298+1685 F1           		POP	AF		; pop preserved accumulator.
 6299+1686 A7           		AND	A		; clear carry flag preparing to subtract.
 6300+1687
 6301+1687 ED 52        		SBC	HL,DE		; subtract position from old stkend
 6302+1689 44           		LD	B,H		; to give number of data bytes
 6303+168A 4D           		LD	C,L		; to be moved.
 6304+168B 03           		INC	BC		; increment as we also copy byte at old STKEND.
 6305+168C 19           		ADD	HL,DE		; recompute old stkend.
 6306+168D EB           		EX	DE,HL		; transfer to DE.
 6307+168E C9           		RET			; return.
 6308+168F
 6309+168F
 6310+168F
 6311+168F              ; -------------------
 6312+168F              ; Collect line number
 6313+168F              ; -------------------
 6314+168F              ; This routine extracts a line number, at an address that has previously
 6315+168F              ; been found using LINE-ADDR, and it is entered at LINE-NO. If it encounters
 6316+168F              ; the program 'end-marker' then the previous line is used and if that
 6317+168F              ; should also be unacceptable then zero is used as it must be a direct
 6318+168F              ; command. The program end-marker is the variables end-marker $80, or
 6319+168F              ; if variables exist, then the first character of any variable name.
 6320+168F
 6321+168F              ;; LINE-ZERO
 6322+168F 00 00        o168F:		DB	$00,$00		; dummy line number used for direct commands
 6323+1691
 6324+1691
 6325+1691              ;; LINE-NO-A
 6326+1691 EB           o1691:		EX	DE,HL		; fetch the previous line to HL and set
 6327+1692 11 8F 16     		LD	DE,o168F	; DE to LINE-ZERO should HL also fail.
 6328+1695
 6329+1695              ; -> The Entry Point.
 6330+1695
 6331+1695              ;; LINE-NO
 6332+1695 7E           o1695:		LD	A,(HL)		; fetch the high byte - max $2F
 6333+1696 E6 C0        		AND	$C0		; mask off the invalid bits.
 6334+1698 20 F7        		JR	NZ,o1691	; to LINE-NO-A if an end-marker.
 6335+169A
 6336+169A 56           		LD	D,(HL)		; reload the high byte.
 6337+169B 23           		INC	HL		; advance address.
 6338+169C 5E           		LD	E,(HL)		; pick up the low byte.
 6339+169D C9           		RET			; return from here.
 6340+169E
 6341+169E              ; -------------------
 6342+169E              ; Handle reserve room
 6343+169E              ; -------------------
 6344+169E              ; This is a continuation of the restart BC-SPACES
 6345+169E
 6346+169E              ;; RESERVE
 6347+169E 2A 63 5C     o169E:		LD	HL,(	$5C63)	; STKBOT first location of calculator stack
 6348+16A1 2B           		DEC	HL		; make one less than new location
 6349+16A2 CD 55 16     		CALL	o1655		; routine MAKE-ROOM creates the room.
 6350+16A5 23           		INC	HL		; address the first new location
 6351+16A6 23           		INC	HL		; advance to second
 6352+16A7 C1           		POP	BC		; restore old WORKSP
 6353+16A8 ED 43 61 5C  		LD	(	$5C61),BC	; system variable WORKSP was perhaps
 6354+16AC              					; changed by POINTERS routine.
 6355+16AC C1           		POP	BC		; restore count for return value.
 6356+16AD EB           		EX	DE,HL		; switch. DE = location after first new space
 6357+16AE 23           		INC	HL		; HL now location after new space
 6358+16AF C9           		RET			; return.
 6359+16B0
 6360+16B0              ; ---------------------------
 6361+16B0              ; Clear various editing areas
 6362+16B0              ; ---------------------------
 6363+16B0              ; This routine sets the editing area, workspace and calculator stack
 6364+16B0              ; to their minimum configurations as at initialization and indeed this
 6365+16B0              ; routine could have been relied on to perform that task.
 6366+16B0              ; This routine uses HL only and returns with that register holding
 6367+16B0              ; WORKSP/STKBOT/STKEND though no use is made of this. The routines also
 6368+16B0              ; reset MEM to its usual place in the systems variable area should it
 6369+16B0              ; have been relocated to a FOR-NEXT variable. The main entry point
 6370+16B0              ; SET-MIN is called at the start of the MAIN-EXEC loop and prior to
 6371+16B0              ; displaying an error.
 6372+16B0
 6373+16B0              ;; SET-MIN
 6374+16B0 2A 59 5C     o16B0:		LD	HL,(	$5C59)	; fetch E_LINE
 6375+16B3 36 0D        		LD	(HL),$0D	; insert carriage return
 6376+16B5 22 5B 5C     		LD	(	$5C5B),HL	; make K_CUR keyboard cursor point there.
 6377+16B8 23           		INC	HL		; next location
 6378+16B9 36 80        		LD	(HL),$80	; holds end-marker $80
 6379+16BB 23           		INC	HL		; next location becomes
 6380+16BC 22 61 5C     		LD	(	$5C61),HL	; start of WORKSP
 6381+16BF
 6382+16BF              ; This entry point is used prior to input and prior to the execution,
 6383+16BF              ; or parsing, of each statement.
 6384+16BF
 6385+16BF              ;; SET-WORK
 6386+16BF 2A 61 5C     o16BF:		LD	HL,(	$5C61)	; fetch WORKSP value
 6387+16C2 22 63 5C     		LD	(	$5C63),HL	; and place in STKBOT
 6388+16C5
 6389+16C5              ; This entry point is used to move the stack back to its normal place
 6390+16C5              ; after temporary relocation during line entry and also from ERROR-3
 6391+16C5
 6392+16C5              ;; SET-STK
 6393+16C5 2A 63 5C     o16C5:		LD	HL,(	$5C63)	; fetch STKBOT value
 6394+16C8 22 65 5C     		LD	(	$5C65),HL	; and place in STKEND.
 6395+16CB
 6396+16CB E5           		PUSH	HL		; perhaps an obsolete entry point.
 6397+16CC 21 92 5C     		LD	HL,	$5C92	; normal location of MEM-0
 6398+16CF 22 68 5C     		LD	(	$5C68),HL	; is restored to system variable MEM.
 6399+16D2 E1           		POP	HL		; saved value not required.
 6400+16D3 C9           		RET			; return.
 6401+16D4
 6402+16D4              ; ------------------
 6403+16D4              ; Reclaim edit-line?
 6404+16D4              ; ------------------
 6405+16D4              ; This seems to be legacy code from the ZX80/ZX81 as it is
 6406+16D4              ; not used in this ROM.
 6407+16D4              ; That task, in fact, is performed here by the dual-area routine CLEAR-SP.
 6408+16D4              ; This routine is designed to deal with something that is known to be in the
 6409+16D4              ; edit buffer and not workspace.
 6410+16D4              ; On entry, HL must point to the end of the something to be deleted.
 6411+16D4
 6412+16D4              ;; REC-EDIT
 6413+16D4 ED 5B 59 5C  o16D4:		LD	DE,(	$5C59)	; fetch start of edit line from E_LINE.
 6414+16D8 C3 E5 19     		JP	o19E5		; jump forward to RECLAIM-1.
 6415+16DB
 6416+16DB              ; --------------------------
 6417+16DB              ; The Table INDEXING routine
 6418+16DB              ; --------------------------
 6419+16DB              ; This routine is used to search two-byte hash tables for a character
 6420+16DB              ; held in C, returning the address of the following offset byte.
 6421+16DB              ; if it is known that the character is in the table e.g. for priorities,
 6422+16DB              ; then the table requires no zero end-marker. If this is not known at the
 6423+16DB              ; outset then a zero end-marker is required and carry is set to signal
 6424+16DB              ; success.
 6425+16DB
 6426+16DB              ;; INDEXER-1
 6427+16DB 23           o16DB:		INC	HL		; address the next pair of values.
 6428+16DC
 6429+16DC              ; -> The Entry Point.
 6430+16DC
 6431+16DC              ;; INDEXER
 6432+16DC 7E           o16DC:		LD	A,(HL)		; fetch the first byte of pair
 6433+16DD A7           		AND	A		; is it the end-marker ?
 6434+16DE C8           		RET	Z		; return with carry reset if so.
 6435+16DF
 6436+16DF B9           		CP	C		; is it the required character ?
 6437+16E0 23           		INC	HL		; address next location.
 6438+16E1 20 F8        		JR	NZ,o16DB	; back to INDEXER-1 if no match.
 6439+16E3
 6440+16E3 37           		SCF			; else set the carry flag.
 6441+16E4 C9           		RET			; return with carry set
 6442+16E5
 6443+16E5              ; --------------------------------
 6444+16E5              ; The Channel and Streams Routines
 6445+16E5              ; --------------------------------
 6446+16E5              ; A channel is an input/output route to a hardware device
 6447+16E5              ; and is identified to the system by a single letter e.g. 'K' for
 6448+16E5              ; the keyboard. A channel can have an input and output route
 6449+16E5              ; associated with it in which case it is bi-directional like
 6450+16E5              ; the keyboard. Others like the upper screen 'S' are output
 6451+16E5              ; only and the input routine usually points to a report message.
 6452+16E5              ; Channels 'K' and 'S' are system channels and it would be inappropriate
 6453+16E5              ; to close the associated streams so a mechanism is provided to
 6454+16E5              ; re-attach them. When the re-attachment is no longer required, then
 6455+16E5              ; closing these streams resets them as at initialization.
 6456+16E5              ; Early adverts said that the network and RS232 were in this ROM.
 6457+16E5              ; Channels 'N' and 'B' are user channels and have been removed successfully
 6458+16E5              ; if, as seems possible, they existed.
 6459+16E5              ; Ironically the tape streamer is not accessed through streams and
 6460+16E5              ; channels.
 6461+16E5              ; Early demonstrations of the Spectrum showed a single microdrive being
 6462+16E5              ; controlled by the main ROM.
 6463+16E5
 6464+16E5              ; ---------------------
 6465+16E5              ; THE 'CLOSE #' COMMAND
 6466+16E5              ; ---------------------
 6467+16E5              ;   This command allows streams to be closed after use.
 6468+16E5              ;   Any temporary memory areas used by the stream would be reclaimed and
 6469+16E5              ;   finally flags set or reset if necessary.
 6470+16E5
 6471+16E5              ;; CLOSE
 6472+16E5 CD 1E 17     o16E5:		CALL	o171E		; routine STR-DATA fetches parameter
 6473+16E8              					; from calculator stack and gets the
 6474+16E8              					; existing STRMS data pointer address in HL
 6475+16E8              					; and stream offset from CHANS in BC.
 6476+16E8
 6477+16E8              ; Note. this offset could be zero if the
 6478+16E8              ; stream is already closed. A check for this
 6479+16E8              ; should occur now and an error should be
 6480+16E8              ; generated, for example,
 6481+16E8              ; Report S 'Stream status closed'.
 6482+16E8
 6483+16E8 CD 01 17     		CALL	o1701		; routine CLOSE-2 would perform any actions
 6484+16EB              					; peculiar to that stream without disturbing
 6485+16EB              					; data pointer to STRMS entry in HL.
 6486+16EB
 6487+16EB 01 00 00     		LD	BC,$0000	; the stream is to be blanked.
 6488+16EE 11 E2 A3     		LD	DE,$A3E2	; the number of bytes from stream 4, $5C1E,
 6489+16F1              					; to $10000
 6490+16F1 EB           		EX	DE,HL		; transfer offset to HL, STRMS data pointer
 6491+16F2              					; to DE.
 6492+16F2 19           		ADD	HL,DE		; add the offset to the data pointer.
 6493+16F3 38 07        		JR	C,o16FC		; forward to CLOSE-1 if a non-system stream.
 6494+16F5              					; i.e. higher than 3.
 6495+16F5
 6496+16F5              ; proceed with a negative result.
 6497+16F5
 6498+16F5 01 D4 15     		LD	BC,o15C6+14	; prepare the address of the byte after
 6499+16F8              					; the initial stream data in ROM. ($15D4)
 6500+16F8 09           		ADD	HL,BC		; index into the data table with negative value.
 6501+16F9 4E           		LD	C,(HL)		; low byte to C
 6502+16FA 23           		INC	HL		; address next.
 6503+16FB 46           		LD	B,(HL)		; high byte to B.
 6504+16FC
 6505+16FC              ;   and for streams 0 - 3 just enter the initial data back into the STRMS entry
 6506+16FC              ;   streams 0 - 2 can't be closed as they are shared by the operating system.
 6507+16FC              ;   -> for streams 4 - 15 then blank the entry.
 6508+16FC
 6509+16FC              ;; CLOSE-1
 6510+16FC EB           o16FC:		EX	DE,HL		; address of stream to HL.
 6511+16FD 71           		LD	(HL),C		; place zero (or low byte).
 6512+16FE 23           		INC	HL		; next address.
 6513+16FF 70           		LD	(HL),B		; place zero (or high byte).
 6514+1700 C9           		RET			; return.
 6515+1701
 6516+1701              ; ------------------------
 6517+1701              ; THE 'CLOSE-2' SUBROUTINE
 6518+1701              ; ------------------------
 6519+1701              ;   There is not much point in coming here.
 6520+1701              ;   The purpose was once to find the offset to a special closing routine,
 6521+1701              ;   in this ROM and within 256 bytes of the close stream look up table that
 6522+1701              ;   would reclaim any buffers associated with a stream. At least one has been
 6523+1701              ;   removed.
 6524+1701              ;   Any attempt to CLOSE streams $00 to $04, without first opening the stream,
 6525+1701              ;   will lead to either a system restart or the production of a strange report.
 6526+1701              ;   credit: Martin Wren-Hilton 1982.
 6527+1701
 6528+1701              ;; CLOSE-2
 6529+1701 E5           o1701:		PUSH	HL		; * save address of stream data pointer
 6530+1702              					; in STRMS on the machine stack.
 6531+1702 2A 4F 5C     		LD	HL,(	$5C4F)	; fetch CHANS address to HL
 6532+1705 09           		ADD	HL,BC		; add the offset to address the second
 6533+1706              					; byte of the output routine hopefully.
 6534+1706 23           		INC	HL		; step past
 6535+1707 23           		INC	HL		; the input routine.
 6536+1708
 6537+1708              ;    Note. When the Sinclair Interface1 is fitted then an instruction fetch
 6538+1708              ;    on the next address pages this ROM out and the shadow ROM in.
 6539+1708
 6540+1708              ;; ROM_TRAP
 6541+1708 23           o1708:		INC	HL		; to address channel's letter
 6542+1709 4E           		LD	C,(HL)		; pick it up in C.
 6543+170A              					; Note. but if stream is already closed we
 6544+170A              					; get the value $10 (the byte preceding 'K').
 6545+170A
 6546+170A EB           		EX	DE,HL		; save the pointer to the letter in DE.
 6547+170B
 6548+170B              ;   Note. The string pointer is saved but not used!!
 6549+170B
 6550+170B 21 16 17     		LD	HL,o1716	; address: cl-str-lu in ROM.
 6551+170E CD DC 16     		CALL	o16DC		; routine INDEXER uses the code to get
 6552+1711              					; the 8-bit offset from the current point to
 6553+1711              					; the address of the closing routine in ROM.
 6554+1711              					; Note. it won't find $10 there!
 6555+1711
 6556+1711 4E           		LD	C,(HL)		; transfer the offset to C.
 6557+1712 06 00        		LD	B,$00		; prepare to add.
 6558+1714 09           		ADD	HL,BC		; add offset to point to the address of the
 6559+1715              					; routine that closes the stream.
 6560+1715              					; (and presumably removes any buffers that
 6561+1715              					; are associated with it.)
 6562+1715 E9           		JP	(HL)		; jump to that routine.
 6563+1716
 6564+1716              ; --------------------------------
 6565+1716              ; THE 'CLOSE STREAM LOOK-UP' TABLE
 6566+1716              ; --------------------------------
 6567+1716              ;   This table contains an entry for a letter found in the CHANS area.
 6568+1716              ;   followed by an 8-bit displacement, from that byte's address in the
 6569+1716              ;   table to the routine that performs any ancillary actions associated
 6570+1716              ;   with closing the stream of that channel.
 6571+1716              ;   The table doesn't require a zero end-marker as the letter has been
 6572+1716              ;   picked up from a channel that has an open stream.
 6573+1716
 6574+1716              ;; cl-str-lu
 6575+1716 4B 05        o1716:		DB	"K", o171C-$-1	; offset 5 to CLOSE-STR
 6576+1718 53 03        		DB	"S", o171C-$-1	; offset 3 to CLOSE-STR
 6577+171A 50 01        		DB	"P", o171C-$-1	; offset 1 to CLOSE-STR
 6578+171C
 6579+171C
 6580+171C              ; ------------------------------
 6581+171C              ; THE 'CLOSE STREAM' SUBROUTINES
 6582+171C              ; ------------------------------
 6583+171C              ; The close stream routines in fact have no ancillary actions to perform
 6584+171C              ; which is not surprising with regard to 'K' and 'S'.
 6585+171C
 6586+171C              ;; CLOSE-STR
 6587+171C E1           o171C:		POP	HL		; * now just restore the stream data pointer
 6588+171D C9           		RET			; in STRMS and return.
 6589+171E
 6590+171E              ; -----------
 6591+171E              ; Stream data
 6592+171E              ; -----------
 6593+171E              ; This routine finds the data entry in the STRMS area for the specified
 6594+171E              ; stream which is passed on the calculator stack. It returns with HL
 6595+171E              ; pointing to this system variable and BC holding a displacement from
 6596+171E              ; the CHANS area to the second byte of the stream's channel. If BC holds
 6597+171E              ; zero, then that signifies that the stream is closed.
 6598+171E
 6599+171E              ;; STR-DATA
 6600+171E CD 94 1E     o171E:		CALL	o1E94		; routine FIND-INT1 fetches parameter to A
 6601+1721 FE 10        		CP	$10		; is it less than 16d ?
 6602+1723 38 02        		JR	C,o1727		; skip forward to STR-DATA1 if so.
 6603+1725
 6604+1725              ;; REPORT-Ob
 6605+1725 CF           o1725:		RST	08H		; ERROR-1
 6606+1726 17           		DB	$17		; Error Report: Invalid stream
 6607+1727
 6608+1727              ;; STR-DATA1
 6609+1727 C6 03        o1727:		ADD	A,$03		; add the offset for 3 system streams.
 6610+1729              					; range 00 - 15d becomes 3 - 18d.
 6611+1729 07           		RLCA			; double as there are two bytes per
 6612+172A              					; stream - now 06 - 36d
 6613+172A 21 10 5C     		LD	HL,	$5C10	; address STRMS - the start of the streams
 6614+172D              					; data area in system variables.
 6615+172D 4F           		LD	C,A		; transfer the low byte to A.
 6616+172E 06 00        		LD	B,$00		; prepare to add offset.
 6617+1730 09           		ADD	HL,BC		; add to address the data entry in STRMS.
 6618+1731
 6619+1731              ; the data entry itself contains an offset from CHANS to the address of the
 6620+1731              ; stream
 6621+1731
 6622+1731 4E           		LD	C,(HL)		; low byte of displacement to C.
 6623+1732 23           		INC	HL		; address next.
 6624+1733 46           		LD	B,(HL)		; high byte of displacement to B.
 6625+1734 2B           		DEC	HL		; step back to leave HL pointing to STRMS
 6626+1735              					; data entry.
 6627+1735 C9           		RET			; return with CHANS displacement in BC
 6628+1736              					; and address of stream data entry in HL.
 6629+1736
 6630+1736              ; --------------------
 6631+1736              ; Handle OPEN# command
 6632+1736              ; --------------------
 6633+1736              ; Command syntax example: OPEN #5,"s"
 6634+1736              ; On entry the channel code entry is on the calculator stack with the next
 6635+1736              ; value containing the stream identifier. They have to swapped.
 6636+1736
 6637+1736              ;; OPEN
 6638+1736 EF           o1736:		RST	28H		; FP-CALC    ;s,c.
 6639+1737 01           		DB	$01		; exchange    ;c,s.
 6640+1738 38           		DB	$38		; end-calc
 6641+1739
 6642+1739 CD 1E 17     		CALL	o171E		; routine STR-DATA fetches the stream off
 6643+173C              					; the stack and returns with the CHANS
 6644+173C              					; displacement in BC and HL addressing
 6645+173C              					; the STRMS data entry.
 6646+173C 78           		LD	A,B		; test for zero which
 6647+173D B1           		OR	C		; indicates the stream is closed.
 6648+173E 28 16        		JR	Z,o1756		; skip forward to OPEN-1 if so.
 6649+1740
 6650+1740              ; if it is a system channel then it can re-attached.
 6651+1740
 6652+1740 EB           		EX	DE,HL		; save STRMS address in DE.
 6653+1741 2A 4F 5C     		LD	HL,(	$5C4F)	; fetch CHANS.
 6654+1744 09           		ADD	HL,BC		; add the offset to address the second
 6655+1745              					; byte of the channel.
 6656+1745 23           		INC	HL		; skip over the
 6657+1746 23           		INC	HL		; input routine.
 6658+1747 23           		INC	HL		; and address the letter.
 6659+1748 7E           		LD	A,(HL)		; pick up the letter.
 6660+1749 EB           		EX	DE,HL		; save letter pointer and bring back
 6661+174A              					; the STRMS pointer.
 6662+174A
 6663+174A FE 4B        		CP	$4B		; is it 'K' ?
 6664+174C 28 08        		JR	Z,o1756		; forward to OPEN-1 if so
 6665+174E
 6666+174E FE 53        		CP	$53		; is it 'S' ?
 6667+1750 28 04        		JR	Z,o1756		; forward to OPEN-1 if so
 6668+1752
 6669+1752 FE 50        		CP	$50		; is it 'P' ?
 6670+1754 20 CF        		JR	NZ,o1725	; back to REPORT-Ob if not.
 6671+1756              					; to report 'Invalid stream'.
 6672+1756
 6673+1756              ; continue if one of the upper-case letters was found.
 6674+1756              ; and rejoin here from above if stream was closed.
 6675+1756
 6676+1756              ;; OPEN-1
 6677+1756 CD 5D 17     o1756:		CALL	o175D		; routine OPEN-2 opens the stream.
 6678+1759
 6679+1759              ; it now remains to update the STRMS variable.
 6680+1759
 6681+1759 73           		LD	(HL),E		; insert or overwrite the low byte.
 6682+175A 23           		INC	HL		; address high byte in STRMS.
 6683+175B 72           		LD	(HL),D		; insert or overwrite the high byte.
 6684+175C C9           		RET			; return.
 6685+175D
 6686+175D              ; -----------------
 6687+175D              ; OPEN-2 Subroutine
 6688+175D              ; -----------------
 6689+175D              ; There is some point in coming here as, as well as once creating buffers,
 6690+175D              ; this routine also sets flags.
 6691+175D
 6692+175D              ;; OPEN-2
 6693+175D E5           o175D:		PUSH	HL		; * save the STRMS data entry pointer.
 6694+175E CD F1 2B     		CALL	o2BF1		; routine STK-FETCH now fetches the
 6695+1761              					; parameters of the channel string.
 6696+1761              					; start in DE, length in BC.
 6697+1761
 6698+1761 78           		LD	A,B		; test that it is not
 6699+1762 B1           		OR	C		; the null string.
 6700+1763 20 02        		JR	NZ,o1767	; skip forward to OPEN-3 with 1 character
 6701+1765              					; or more!
 6702+1765
 6703+1765              ;; REPORT-Fb
 6704+1765 CF           o1765:		RST	08H		; ERROR-1
 6705+1766 0E           		DB	$0E		; Error Report: Invalid file name
 6706+1767
 6707+1767              ;; OPEN-3
 6708+1767 C5           o1767:		PUSH	BC		; save the length of the string.
 6709+1768 1A           		LD	A,(DE)		; pick up the first character.
 6710+1769              					; Note. There can be more than one character.
 6711+1769 E6 DF        		AND	$DF		; make it upper-case.
 6712+176B 4F           		LD	C,A		; place it in C.
 6713+176C 21 7A 17     		LD	HL,o177A	; address: op-str-lu is loaded.
 6714+176F CD DC 16     		CALL	o16DC		; routine INDEXER will search for letter.
 6715+1772 30 F1        		JR	NC,o1765	; back to REPORT-F if not found
 6716+1774              					; 'Invalid filename'
 6717+1774
 6718+1774 4E           		LD	C,(HL)		; fetch the displacement to opening routine.
 6719+1775 06 00        		LD	B,$00		; prepare to add.
 6720+1777 09           		ADD	HL,BC		; now form address of opening routine.
 6721+1778 C1           		POP	BC		; restore the length of string.
 6722+1779 E9           		JP	(HL)		; now jump forward to the relevant routine.
 6723+177A
 6724+177A              ; -------------------------
 6725+177A              ; OPEN stream look-up table
 6726+177A              ; -------------------------
 6727+177A              ; The open stream look-up table consists of matched pairs.
 6728+177A              ; The channel letter is followed by an 8-bit displacement to the
 6729+177A              ; associated stream-opening routine in this ROM.
 6730+177A              ; The table requires a zero end-marker as the letter has been
 6731+177A              ; provided by the user and not the operating system.
 6732+177A
 6733+177A              ;; op-str-lu
 6734+177A 4B 06        o177A:		DB	"K", o1781-$-1	; $06 offset to OPEN-K
 6735+177C 53 08        		DB	"S", o1785-$-1	; $08 offset to OPEN-S
 6736+177E 50 0A        		DB	"P", o1789-$-1	; $0A offset to OPEN-P
 6737+1780
 6738+1780 00           		DB	$00		; end-marker.
 6739+1781
 6740+1781              ; ----------------------------
 6741+1781              ; The Stream Opening Routines.
 6742+1781              ; ----------------------------
 6743+1781              ; These routines would have opened any buffers associated with the stream
 6744+1781              ; before jumping forward to OPEN-END with the displacement value in E
 6745+1781              ; and perhaps a modified value in BC. The strange pathing does seem to
 6746+1781              ; provide for flexibility in this respect.
 6747+1781              ;
 6748+1781              ; There is no need to open the printer buffer as it is there already
 6749+1781              ; even if you are still saving up for a ZX Printer or have moved onto
 6750+1781              ; something bigger. In any case it would have to be created after
 6751+1781              ; the system variables but apart from that it is a simple task
 6752+1781              ; and all but one of the ROM routines can handle a buffer in that position.
 6753+1781              ; (PR-ALL-6 would require an extra 3 bytes of code).
 6754+1781              ; However it wouldn't be wise to have two streams attached to the ZX Printer
 6755+1781              ; as you can now, so one assumes that if PR_CC_hi was non-zero then
 6756+1781              ; the OPEN-P routine would have refused to attach a stream if another
 6757+1781              ; stream was attached.
 6758+1781
 6759+1781              ; Something of significance is being passed to these ghost routines in the
 6760+1781              ; second character. Strings 'RB', 'RT' perhaps or a drive/station number.
 6761+1781              ; The routine would have to deal with that and exit to OPEN_END with BC
 6762+1781              ; containing $0001 or more likely there would be an exit within the routine.
 6763+1781              ; Anyway doesn't matter, these routines are long gone.
 6764+1781
 6765+1781              ; -----------------
 6766+1781              ; OPEN-K Subroutine
 6767+1781              ; -----------------
 6768+1781              ; Open Keyboard stream.
 6769+1781
 6770+1781              ;; OPEN-K
 6771+1781 1E 01        o1781:		LD	E,$01		; 01 is offset to second byte of channel 'K'.
 6772+1783 18 06        		JR	o178B		; forward to OPEN-END
 6773+1785
 6774+1785              ; -----------------
 6775+1785              ; OPEN-S Subroutine
 6776+1785              ; -----------------
 6777+1785              ; Open Screen stream.
 6778+1785
 6779+1785              ;; OPEN-S
 6780+1785 1E 06        o1785:		LD	E,$06		; 06 is offset to 2nd byte of channel 'S'
 6781+1787 18 02        		JR	o178B		; to OPEN-END
 6782+1789
 6783+1789              ; -----------------
 6784+1789              ; OPEN-P Subroutine
 6785+1789              ; -----------------
 6786+1789              ; Open Printer stream.
 6787+1789
 6788+1789              ;; OPEN-P
 6789+1789 1E 10        o1789:		LD	E,$10		; 16d is offset to 2nd byte of channel 'P'
 6790+178B
 6791+178B              ;; OPEN-END
 6792+178B 0B           o178B:		DEC	BC		; the stored length of 'K','S','P' or
 6793+178C              					; whatever is now tested. ??
 6794+178C 78           		LD	A,B		; test now if initial or residual length
 6795+178D B1           		OR	C		; is one character.
 6796+178E 20 D5        		JR	NZ,o1765	; to REPORT-Fb 'Invalid file name' if not.
 6797+1790
 6798+1790 57           		LD	D,A		; load D with zero to form the displacement
 6799+1791              					; in the DE register.
 6800+1791 E1           		POP	HL		; * restore the saved STRMS pointer.
 6801+1792 C9           		RET			; return to update STRMS entry thereby
 6802+1793              					; signaling stream is open.
 6803+1793
 6804+1793              ; ----------------------------------------
 6805+1793              ; Handle CAT, ERASE, FORMAT, MOVE commands
 6806+1793              ; ----------------------------------------
 6807+1793              ; These just generate an error report as the ROM is 'incomplete'.
 6808+1793              ;
 6809+1793              ; Luckily this provides a mechanism for extending these in a shadow ROM
 6810+1793              ; but without the powerful mechanisms set up in this ROM.
 6811+1793              ; An instruction fetch on $0008 may page in a peripheral ROM,
 6812+1793              ; e.g. the Sinclair Interface 1 ROM, to handle these commands.
 6813+1793              ; However that wasn't the plan.
 6814+1793              ; Development of this ROM continued for another three months until the cost
 6815+1793              ; of replacing it and the manual became unfeasible.
 6816+1793              ; The ultimate power of channels and streams died at birth.
 6817+1793
 6818+1793              ;; CAT-ETC
 6819+1793 18 90        o1793:		JR	o1725		; to REPORT-Ob
 6820+1795
 6821+1795              ; -----------------
 6822+1795              ; Perform AUTO-LIST
 6823+1795              ; -----------------
 6824+1795              ; This produces an automatic listing in the upper screen.
 6825+1795
 6826+1795              ;; AUTO-LIST
 6827+1795 ED 73 3F 5C  o1795:		LD	(	$5C3F),SP	; save stack pointer in LIST_SP
 6828+1799 FD 36 02 10  		LD	(IY+$02),$10	; update TV_FLAG set bit 3
 6829+179D CD AF 0D     		CALL	o0DAF		; routine CL-ALL.
 6830+17A0 FD CB 02 C6  		SET	0,(IY+$02)	; update TV_FLAG  - signal lower screen in use
 6831+17A4
 6832+17A4 FD 46 31     		LD	B,(IY+$31)	; fetch DF_SZ to B.
 6833+17A7 CD 44 0E     		CALL	o0E44		; routine CL-LINE clears lower display
 6834+17AA              					; preserving B.
 6835+17AA FD CB 02 86  		RES	0,(IY+$02)	; update TV_FLAG  - signal main screen in use
 6836+17AE FD CB 30 C6  		SET	0,(IY+$30)	; update FLAGS2 - signal will be necessary to
 6837+17B2              					; clear main screen.
 6838+17B2 2A 49 5C     		LD	HL,(	$5C49)	; fetch E_PPC current edit line to HL.
 6839+17B5 ED 5B 6C 5C  		LD	DE,(	$5C6C)	; fetch S_TOP to DE, the current top line
 6840+17B9              					; (initially zero)
 6841+17B9 A7           		AND	A		; prepare for true subtraction.
 6842+17BA ED 52        		SBC	HL,DE		; subtract and
 6843+17BC 19           		ADD	HL,DE		; add back.
 6844+17BD 38 22        		JR	C,o17E1		; to AUTO-L-2 if S_TOP higher than E_PPC
 6845+17BF              					; to set S_TOP to E_PPC
 6846+17BF
 6847+17BF D5           		PUSH	DE		; save the top line number.
 6848+17C0 CD 6E 19     		CALL	o196E		; routine LINE-ADDR gets address of E_PPC.
 6849+17C3 11 C0 02     		LD	DE,$02C0	; prepare known number of characters in
 6850+17C6              					; the default upper screen.
 6851+17C6 EB           		EX	DE,HL		; offset to HL, program address to DE.
 6852+17C7 ED 52        		SBC	HL,DE		; subtract high value from low to obtain
 6853+17C9              					; negated result used in addition.
 6854+17C9 E3           		EX	(SP),HL		; swap result with top line number on stack.
 6855+17CA CD 6E 19     		CALL	o196E		; routine LINE-ADDR  gets address of that
 6856+17CD              					; top line in HL and next line in DE.
 6857+17CD C1           		POP	BC		; restore the result to balance stack.
 6858+17CE
 6859+17CE              ;; AUTO-L-1
 6860+17CE C5           o17CE:		PUSH	BC		; save the result.
 6861+17CF CD B8 19     		CALL	o19B8		; routine NEXT-ONE gets address in HL of
 6862+17D2              					; line after auto-line (in DE).
 6863+17D2 C1           		POP	BC		; restore result.
 6864+17D3 09           		ADD	HL,BC		; compute back.
 6865+17D4 38 0E        		JR	C,o17E4		; to AUTO-L-3 if line 'should' appear
 6866+17D6
 6867+17D6 EB           		EX	DE,HL		; address of next line to HL.
 6868+17D7 56           		LD	D,(HL)		; get line
 6869+17D8 23           		INC	HL		; number
 6870+17D9 5E           		LD	E,(HL)		; in DE.
 6871+17DA 2B           		DEC	HL		; adjust back to start.
 6872+17DB ED 53 6C 5C  		LD	(	$5C6C),DE	; update S_TOP.
 6873+17DF 18 ED        		JR	o17CE		; to AUTO-L-1 until estimate reached.
 6874+17E1
 6875+17E1              ; ---
 6876+17E1
 6877+17E1              ; the jump was to here if S_TOP was greater than E_PPC
 6878+17E1
 6879+17E1              ;; AUTO-L-2
 6880+17E1 22 6C 5C     o17E1:		LD	(	$5C6C),HL	; make S_TOP the same as E_PPC.
 6881+17E4
 6882+17E4              ; continue here with valid starting point from above or good estimate
 6883+17E4              ; from computation
 6884+17E4
 6885+17E4              ;; AUTO-L-3
 6886+17E4 2A 6C 5C     o17E4:		LD	HL,(	$5C6C)	; fetch S_TOP line number to HL.
 6887+17E7 CD 6E 19     		CALL	o196E		; routine LINE-ADDR gets address in HL.
 6888+17EA              					; address of next in DE.
 6889+17EA 28 01        		JR	Z,o17ED		; to AUTO-L-4 if line exists.
 6890+17EC
 6891+17EC EB           		EX	DE,HL		; else use address of next line.
 6892+17ED
 6893+17ED              ;; AUTO-L-4
 6894+17ED CD 33 18     o17ED:		CALL	o1833		; routine LIST-ALL                >>>
 6895+17F0
 6896+17F0              ; The return will be to here if no scrolling occurred
 6897+17F0
 6898+17F0 FD CB 02 A6  		RES	4,(IY+$02)	; update TV_FLAG  - signal no auto listing.
 6899+17F4 C9           		RET			; return.
 6900+17F5
 6901+17F5              ; ------------
 6902+17F5              ; Handle LLIST
 6903+17F5              ; ------------
 6904+17F5              ; A short form of LIST #3. The listing goes to stream 3 - default printer.
 6905+17F5
 6906+17F5              ;; LLIST
 6907+17F5 3E 03        o17F5:		LD	A,$03		; the usual stream for ZX Printer
 6908+17F7 18 02        		JR	o17FB		; forward to LIST-1
 6909+17F9
 6910+17F9              ; -----------
 6911+17F9              ; Handle LIST
 6912+17F9              ; -----------
 6913+17F9              ; List to any stream.
 6914+17F9              ; Note. While a starting line can be specified it is
 6915+17F9              ; not possible to specify an end line.
 6916+17F9              ; Just listing a line makes it the current edit line.
 6917+17F9
 6918+17F9              ;; LIST
 6919+17F9 3E 02        o17F9:		LD	A,$02		; default is stream 2 - the upper screen.
 6920+17FB
 6921+17FB              ;; LIST-1
 6922+17FB FD 36 02 00  o17FB:		LD	(IY+$02),$00	; the TV_FLAG is initialized with bit 0 reset
 6923+17FF              					; indicating upper screen in use.
 6924+17FF CD 30 25     		CALL	o2530		; routine SYNTAX-Z - checking syntax ?
 6925+1802 C4 01 16     		CALL	NZ,o1601	; routine CHAN-OPEN if in run-time.
 6926+1805
 6927+1805 DF           		RST	18H		; GET-CHAR
 6928+1806 CD 70 20     		CALL	o2070		; routine STR-ALTER will alter if "#".
 6929+1809 38 14        		JR	C,o181F		; forward to LIST-4 not a "#" .
 6930+180B
 6931+180B
 6932+180B DF           		RST	18H		; GET-CHAR
 6933+180C FE 3B        		CP	$3B		; is it $3B ?
 6934+180E 28 04        		JR	Z,o1814		; skip to LIST-2 if so.
 6935+1810
 6936+1810 FE 2C        		CP	$2C		; is it ',' ?
 6937+1812 20 06        		JR	NZ,o181A	; forward to LIST-3 if neither separator.
 6938+1814
 6939+1814              ; we have, say,  LIST #15, and a number must follow the separator.
 6940+1814
 6941+1814              ;; LIST-2
 6942+1814 E7           o1814:		RST	20H		; NEXT-CHAR
 6943+1815 CD 82 1C     		CALL	o1C82		; routine EXPT-1NUM
 6944+1818 18 08        		JR	o1822		; forward to LIST-5
 6945+181A
 6946+181A              ; ---
 6947+181A
 6948+181A              ; the branch was here with just LIST #3 etc.
 6949+181A
 6950+181A              ;; LIST-3
 6951+181A CD E6 1C     o181A:		CALL	o1CE6		; routine USE-ZERO
 6952+181D 18 03        		JR	o1822		; forward to LIST-5
 6953+181F
 6954+181F              ; ---
 6955+181F
 6956+181F              ; the branch was here with LIST
 6957+181F
 6958+181F              ;; LIST-4
 6959+181F CD DE 1C     o181F:		CALL	o1CDE		; routine FETCH-NUM checks if a number
 6960+1822              					; follows else uses zero.
 6961+1822
 6962+1822              ;; LIST-5
 6963+1822 CD EE 1B     o1822:		CALL	o1BEE		; routine CHECK-END quits if syntax OK >>>
 6964+1825
 6965+1825 CD 99 1E     		CALL	o1E99		; routine FIND-INT2 fetches the number
 6966+1828              					; from the calculator stack in run-time.
 6967+1828 78           		LD	A,B		; fetch high byte of line number and
 6968+1829 E6 3F        		AND	$3F		; make less than $40 so that NEXT-ONE
 6969+182B              					; (from LINE-ADDR) doesn't lose context.
 6970+182B              					; Note. this is not satisfactory and the typo
 6971+182B              					; LIST 20000 will list an entirely different
 6972+182B              					; section than LIST 2000. Such typos are not
 6973+182B              					; available for checking if they are direct
 6974+182B              					; commands.
 6975+182B
 6976+182B 67           		LD	H,A		; transfer the modified
 6977+182C 69           		LD	L,C		; line number to HL.
 6978+182D 22 49 5C     		LD	(	$5C49),HL	; update E_PPC to new line number.
 6979+1830 CD 6E 19     		CALL	o196E		; routine LINE-ADDR gets the address of the
 6980+1833              					; line.
 6981+1833
 6982+1833              ; This routine is called from AUTO-LIST
 6983+1833
 6984+1833              ;; LIST-ALL
 6985+1833 1E 01        o1833:		LD	E,$01		; signal current line not yet printed
 6986+1835
 6987+1835              ;; LIST-ALL-2
 6988+1835 CD 55 18     o1835:		CALL	o1855		; routine OUT-LINE outputs a BASIC line
 6989+1838              					; using PRINT-OUT and makes an early return
 6990+1838              					; when no more lines to print. >>>
 6991+1838
 6992+1838 D7           		RST	10H		; PRINT-A prints the carriage return (in A)
 6993+1839
 6994+1839 FD CB 02 66  		BIT	4,(IY+$02)	; test TV_FLAG  - automatic listing ?
 6995+183D 28 F6        		JR	Z,o1835		; back to LIST-ALL-2 if not
 6996+183F              					; (loop exit is via OUT-LINE)
 6997+183F
 6998+183F              ; continue here if an automatic listing required.
 6999+183F
 7000+183F 3A 6B 5C     		LD	A,(	$5C6B)	; fetch DF_SZ lower display file size.
 7001+1842 FD 96 4F     		SUB	(IY+$4F)	; subtract S_POSN_hi ithe current line number.
 7002+1845 20 EE        		JR	NZ,o1835	; back to LIST-ALL-2 if upper screen not full.
 7003+1847
 7004+1847 AB           		XOR	E		; A contains zero, E contains one if the
 7005+1848              					; current edit line has not been printed
 7006+1848              					; or zero if it has (from OUT-LINE).
 7007+1848 C8           		RET	Z		; return if the screen is full and the line
 7008+1849              					; has been printed.
 7009+1849
 7010+1849              ; continue with automatic listings if the screen is full and the current
 7011+1849              ; edit line is missing. OUT-LINE will scroll automatically.
 7012+1849
 7013+1849 E5           		PUSH	HL		; save the pointer address.
 7014+184A D5           		PUSH	DE		; save the E flag.
 7015+184B 21 6C 5C     		LD	HL,	$5C6C	; fetch S_TOP the rough estimate.
 7016+184E CD 0F 19     		CALL	o190F		; routine LN-FETCH updates S_TOP with
 7017+1851              					; the number of the next line.
 7018+1851 D1           		POP	DE		; restore the E flag.
 7019+1852 E1           		POP	HL		; restore the address of the next line.
 7020+1853 18 E0        		JR	o1835		; back to LIST-ALL-2.
 7021+1855
 7022+1855              ; ------------------------
 7023+1855              ; Print a whole BASIC line
 7024+1855              ; ------------------------
 7025+1855              ; This routine prints a whole BASIC line and it is called
 7026+1855              ; from LIST-ALL to output the line to current channel
 7027+1855              ; and from ED-EDIT to 'sprint' the line to the edit buffer.
 7028+1855
 7029+1855              ;; OUT-LINE
 7030+1855 ED 4B 49 5C  o1855:		LD	BC,(	$5C49)	; fetch E_PPC the current line which may be
 7031+1859              					; unchecked and not exist.
 7032+1859 CD 80 19     		CALL	o1980		; routine CP-LINES finds match or line after.
 7033+185C 16 3E        		LD	D,$3E		; prepare cursor ">" in D.
 7034+185E 28 05        		JR	Z,o1865		; to OUT-LINE1 if matched or line after.
 7035+1860
 7036+1860 11 00 00     		LD	DE,$0000	; put zero in D, to suppress line cursor.
 7037+1863 CB 13        		RL	E		; pick up carry in E if line before current
 7038+1865              					; leave E zero if same or after.
 7039+1865
 7040+1865              ;; OUT-LINE1
 7041+1865 FD 73 2D     o1865:		LD	(IY+$2D),E	; save flag in BREG which is spare.
 7042+1868 7E           		LD	A,(HL)		; get high byte of line number.
 7043+1869 FE 40        		CP	$40		; is it too high ($2F is maximum possible) ?
 7044+186B C1           		POP	BC		; drop the return address and
 7045+186C D0           		RET	NC		; make an early return if so >>>
 7046+186D
 7047+186D C5           		PUSH	BC		; save return address
 7048+186E CD 28 1A     		CALL	o1A28		; routine OUT-NUM-2 to print addressed number
 7049+1871              					; with leading space.
 7050+1871 23           		INC	HL		; skip low number byte.
 7051+1872 23           		INC	HL		; and the two
 7052+1873 23           		INC	HL		; length bytes.
 7053+1874 FD CB 01 86  		RES	0,(IY+$01)	; update FLAGS - signal leading space required.
 7054+1878 7A           		LD	A,D		; fetch the cursor.
 7055+1879 A7           		AND	A		; test for zero.
 7056+187A 28 05        		JR	Z,o1881		; to OUT-LINE3 if zero.
 7057+187C
 7058+187C
 7059+187C D7           		RST	10H		; PRINT-A prints ">" the current line cursor.
 7060+187D
 7061+187D              ; this entry point is called from ED-COPY
 7062+187D
 7063+187D              ;; OUT-LINE2
 7064+187D FD CB 01 C6  o187D:		SET	0,(IY+$01)	; update FLAGS - suppress leading space.
 7065+1881
 7066+1881              ;; OUT-LINE3
 7067+1881 D5           o1881:		PUSH	DE		; save flag E for a return value.
 7068+1882 EB           		EX	DE,HL		; save HL address in DE.
 7069+1883 FD CB 30 96  		RES	2,(IY+$30)	; update FLAGS2 - signal NOT in QUOTES.
 7070+1887
 7071+1887 21 3B 5C     		LD	HL,	$5C3B	; point to FLAGS.
 7072+188A CB 96        		RES	2,(HL)		; signal 'K' mode. (starts before keyword)
 7073+188C FD CB 37 6E  		BIT	5,(IY+$37)	; test FLAGX - input mode ?
 7074+1890 28 02        		JR	Z,o1894		; forward to OUT-LINE4 if not.
 7075+1892
 7076+1892 CB D6        		SET	2,(HL)		; signal 'L' mode. (used for input)
 7077+1894
 7078+1894              ;; OUT-LINE4
 7079+1894 2A 5F 5C     o1894:		LD	HL,(	$5C5F)	; fetch X_PTR - possibly the error pointer
 7080+1897              					; address.
 7081+1897 A7           		AND	A		; clear the carry flag.
 7082+1898 ED 52        		SBC	HL,DE		; test if an error address has been reached.
 7083+189A 20 05        		JR	NZ,o18A1	; forward to OUT-LINE5 if not.
 7084+189C
 7085+189C 3E 3F        		LD	A,$3F		; load A with "?" the error marker.
 7086+189E CD C1 18     		CALL	o18C1		; routine OUT-FLASH to print flashing marker.
 7087+18A1
 7088+18A1              ;; OUT-LINE5
 7089+18A1 CD E1 18     o18A1:		CALL	o18E1		; routine OUT-CURS will print the cursor if
 7090+18A4              					; this is the right position.
 7091+18A4 EB           		EX	DE,HL		; restore address pointer to HL.
 7092+18A5 7E           		LD	A,(HL)		; fetch the addressed character.
 7093+18A6 CD B6 18     		CALL	o18B6		; routine NUMBER skips a hidden floating
 7094+18A9              					; point number if present.
 7095+18A9 23           		INC	HL		; now increment the pointer.
 7096+18AA FE 0D        		CP	$0D		; is character end-of-line ?
 7097+18AC 28 06        		JR	Z,o18B4		; to OUT-LINE6, if so, as line is finished.
 7098+18AE
 7099+18AE EB           		EX	DE,HL		; save the pointer in DE.
 7100+18AF CD 37 19     		CALL	o1937		; routine OUT-CHAR to output character/token.
 7101+18B2
 7102+18B2 18 E0        		JR	o1894		; back to OUT-LINE4 until entire line is done.
 7103+18B4
 7104+18B4              ; ---
 7105+18B4
 7106+18B4              ;; OUT-LINE6
 7107+18B4 D1           o18B4:		POP	DE		; bring back the flag E, zero if current
 7108+18B5              					; line printed else 1 if still to print.
 7109+18B5 C9           		RET			; return with A holding $0D
 7110+18B6
 7111+18B6              ; -------------------------
 7112+18B6              ; Check for a number marker
 7113+18B6              ; -------------------------
 7114+18B6              ; this subroutine is called from two processes. while outputting BASIC lines
 7115+18B6              ; and while searching statements within a BASIC line.
 7116+18B6              ; during both, this routine will pass over an invisible number indicator
 7117+18B6              ; and the five bytes floating-point number that follows it.
 7118+18B6              ; Note that this causes floating point numbers to be stripped from
 7119+18B6              ; the BASIC line when it is fetched to the edit buffer by OUT_LINE.
 7120+18B6              ; the number marker also appears after the arguments of a DEF FN statement
 7121+18B6              ; and may mask old 5-byte string parameters.
 7122+18B6
 7123+18B6              ;; NUMBER
 7124+18B6 FE 0E        o18B6:		CP	$0E		; character fourteen ?
 7125+18B8 C0           		RET	NZ		; return if not.
 7126+18B9
 7127+18B9 23           		INC	HL		; skip the character
 7128+18BA 23           		INC	HL		; and five bytes
 7129+18BB 23           		INC	HL		; following.
 7130+18BC 23           		INC	HL		;
 7131+18BD 23           		INC	HL		;
 7132+18BE 23           		INC	HL		;
 7133+18BF 7E           		LD	A,(HL)		; fetch the following character
 7134+18C0 C9           		RET			; for return value.
 7135+18C1
 7136+18C1              ; --------------------------
 7137+18C1              ; Print a flashing character
 7138+18C1              ; --------------------------
 7139+18C1              ; This subroutine is called from OUT-LINE to print a flashing error
 7140+18C1              ; marker "?" or from the next routine to print a flashing cursor e.g. 'L'.
 7141+18C1              ; However, this only gets called from OUT-LINE when printing the edit line
 7142+18C1              ; or the input buffer to the lower screen so a direct call to $09F4 can
 7143+18C1              ; be used, even though out-line outputs to other streams.
 7144+18C1              ; In fact the alternate set is used for the whole routine.
 7145+18C1
 7146+18C1              ;; OUT-FLASH
 7147+18C1 D9           o18C1:		EXX
 7148+18C2
 7149+18C2 2A 8F 5C     		LD	HL,(	$5C8F)	; fetch L = ATTR_T, H = MASK-T
 7150+18C5 E5           		PUSH	HL		; save masks.
 7151+18C6 CB BC        		RES	7,H		; reset flash mask bit so active.
 7152+18C8 CB FD        		SET	7,L		; make attribute FLASH.
 7153+18CA 22 8F 5C     		LD	(	$5C8F),HL	; resave ATTR_T and MASK-T
 7154+18CD
 7155+18CD 21 91 5C     		LD	HL,	$5C91	; address P_FLAG
 7156+18D0 56           		LD	D,(HL)		; fetch to D
 7157+18D1 D5           		PUSH	DE		; and save.
 7158+18D2 36 00        		LD	(HL),$00	; clear inverse, over, ink/paper 9
 7159+18D4
 7160+18D4 CD F4 09     		CALL	o09F4		; routine PRINT-OUT outputs character
 7161+18D7              					; without the need to vector via RST 10.
 7162+18D7
 7163+18D7 E1           		POP	HL		; pop P_FLAG to H.
 7164+18D8 FD 74 57     		LD	(IY+$57),H	; and restore system variable P_FLAG.
 7165+18DB E1           		POP	HL		; restore temporary masks
 7166+18DC 22 8F 5C     		LD	(	$5C8F),HL	; and restore system variables ATTR_T/MASK_T
 7167+18DF
 7168+18DF D9           		EXX			; switch back to main set
 7169+18E0 C9           		RET			; return
 7170+18E1
 7171+18E1              ; ----------------
 7172+18E1              ; Print the cursor
 7173+18E1              ; ----------------
 7174+18E1              ; This routine is called before any character is output while outputting
 7175+18E1              ; a BASIC line or the input buffer. This includes listing to a printer
 7176+18E1              ; or screen, copying a BASIC line to the edit buffer and printing the
 7177+18E1              ; input buffer or edit buffer to the lower screen. It is only in the
 7178+18E1              ; latter two cases that it has any relevance and in the last case it
 7179+18E1              ; performs another very important function also.
 7180+18E1
 7181+18E1              ;; OUT-CURS
 7182+18E1 2A 5B 5C     o18E1:		LD	HL,(	$5C5B)	; fetch K_CUR the current cursor address
 7183+18E4 A7           		AND	A		; prepare for true subtraction.
 7184+18E5 ED 52        		SBC	HL,DE		; test against pointer address in DE and
 7185+18E7 C0           		RET	NZ		; return if not at exact position.
 7186+18E8
 7187+18E8              ; the value of MODE, maintained by KEY-INPUT, is tested and if non-zero
 7188+18E8              ; then this value 'E' or 'G' will take precedence.
 7189+18E8
 7190+18E8 3A 41 5C     		LD	A,(	$5C41)	; fetch MODE  0='KLC', 1='E', 2='G'.
 7191+18EB CB 07        		RLC	A		; double the value and set flags.
 7192+18ED 28 04        		JR	Z,o18F3		; to OUT-C-1 if still zero ('KLC').
 7193+18EF
 7194+18EF C6 43        		ADD	A,$43		; add 'C' - will become 'E' if originally 1
 7195+18F1              					; or 'G' if originally 2.
 7196+18F1 18 16        		JR	o1909		; forward to OUT-C-2 to print.
 7197+18F3
 7198+18F3              ; ---
 7199+18F3
 7200+18F3              ; If mode was zero then, while printing a BASIC line, bit 2 of flags has been
 7201+18F3              ; set if 'THEN' or ":" was encountered as a main character and reset otherwise.
 7202+18F3              ; This is now used to determine if the 'K' cursor is to be printed but this
 7203+18F3              ; transient state is also now transferred permanently to bit 3 of FLAGS
 7204+18F3              ; to let the interrupt routine know how to decode the next key.
 7205+18F3
 7206+18F3              ;; OUT-C-1
 7207+18F3 21 3B 5C     o18F3:		LD	HL,	$5C3B	; Address FLAGS
 7208+18F6 CB 9E        		RES	3,(HL)		; signal 'K' mode initially.
 7209+18F8 3E 4B        		LD	A,$4B		; prepare letter 'K'.
 7210+18FA CB 56        		BIT	2,(HL)		; test FLAGS - was the
 7211+18FC              					; previous main character ":" or 'THEN' ?
 7212+18FC 28 0B        		JR	Z,o1909		; forward to OUT-C-2 if so to print.
 7213+18FE
 7214+18FE CB DE        		SET	3,(HL)		; signal 'L' mode to interrupt routine.
 7215+1900              					; Note. transient bit has been made permanent.
 7216+1900 3C           		INC	A		; augment from 'K' to 'L'.
 7217+1901
 7218+1901 FD CB 30 5E  		BIT	3,(IY+$30)	; test FLAGS2 - consider caps lock ?
 7219+1905              					; which is maintained by KEY-INPUT.
 7220+1905 28 02        		JR	Z,o1909		; forward to OUT-C-2 if not set to print.
 7221+1907
 7222+1907 3E 43        		LD	A,$43		; alter 'L' to 'C'.
 7223+1909
 7224+1909              ;; OUT-C-2
 7225+1909 D5           o1909:		PUSH	DE		; save address pointer but OK as OUT-FLASH
 7226+190A              					; uses alternate set without RST 10.
 7227+190A
 7228+190A CD C1 18     		CALL	o18C1		; routine OUT-FLASH to print.
 7229+190D
 7230+190D D1           		POP	DE		; restore and
 7231+190E C9           		RET			; return.
 7232+190F
 7233+190F              ; ----------------------------
 7234+190F              ; Get line number of next line
 7235+190F              ; ----------------------------
 7236+190F              ; These two subroutines are called while editing.
 7237+190F              ; This entry point is from ED-DOWN with HL addressing E_PPC
 7238+190F              ; to fetch the next line number.
 7239+190F              ; Also from AUTO-LIST with HL addressing S_TOP just to update S_TOP
 7240+190F              ; with the value of the next line number. It gets fetched but is discarded.
 7241+190F              ; These routines never get called while the editor is being used for input.
 7242+190F
 7243+190F              ;; LN-FETCH
 7244+190F 5E           o190F:		LD	E,(HL)		; fetch low byte
 7245+1910 23           		INC	HL		; address next
 7246+1911 56           		LD	D,(HL)		; fetch high byte.
 7247+1912 E5           		PUSH	HL		; save system variable hi pointer.
 7248+1913 EB           		EX	DE,HL		; line number to HL,
 7249+1914 23           		INC	HL		; increment as a starting point.
 7250+1915 CD 6E 19     		CALL	o196E		; routine LINE-ADDR gets address in HL.
 7251+1918 CD 95 16     		CALL	o1695		; routine LINE-NO gets line number in DE.
 7252+191B E1           		POP	HL		; restore system variable hi pointer.
 7253+191C
 7254+191C              ; This entry point is from the ED-UP with HL addressing E_PPC_hi
 7255+191C
 7256+191C              ;; LN-STORE
 7257+191C FD CB 37 6E  o191C:		BIT	5,(IY+$37)	; test FLAGX - input mode ?
 7258+1920 C0           		RET	NZ		; return if so.
 7259+1921              					; Note. above already checked by ED-UP/ED-DOWN.
 7260+1921
 7261+1921 72           		LD	(HL),D		; save high byte of line number.
 7262+1922 2B           		DEC	HL		; address lower
 7263+1923 73           		LD	(HL),E		; save low byte of line number.
 7264+1924 C9           		RET			; return.
 7265+1925
 7266+1925              ; -----------------------------------------
 7267+1925              ; Outputting numbers at start of BASIC line
 7268+1925              ; -----------------------------------------
 7269+1925              ; This routine entered at OUT-SP-NO is used to compute then output the first
 7270+1925              ; three digits of a 4-digit BASIC line printing a space if necessary.
 7271+1925              ; The line number, or residual part, is held in HL and the BC register
 7272+1925              ; holds a subtraction value -1000, -100 or -10.
 7273+1925              ; Note. for example line number 200 -
 7274+1925              ; space(out_char), 2(out_code), 0(out_char) final number always out-code.
 7275+1925
 7276+1925              ;; OUT-SP-2
 7277+1925 7B           o1925:		LD	A,E		; will be space if OUT-CODE not yet called.
 7278+1926              					; or $FF if spaces are suppressed.
 7279+1926              					; else $30 ("0").
 7280+1926              					; (from the first instruction at OUT-CODE)
 7281+1926              					; this guy is just too clever.
 7282+1926 A7           		AND	A		; test bit 7 of A.
 7283+1927 F8           		RET	M		; return if $FF, as leading spaces not
 7284+1928              					; required. This is set when printing line
 7285+1928              					; number and statement in MAIN-5.
 7286+1928
 7287+1928 18 0D        		JR	o1937		; forward to exit via OUT-CHAR.
 7288+192A
 7289+192A              ; ---
 7290+192A
 7291+192A              ; -> the single entry point.
 7292+192A
 7293+192A              ;; OUT-SP-NO
 7294+192A AF           o192A:		XOR	A		; initialize digit to 0
 7295+192B
 7296+192B              ;; OUT-SP-1
 7297+192B 09           o192B:		ADD	HL,BC		; add negative number to HL.
 7298+192C 3C           		INC	A		; increment digit
 7299+192D 38 FC        		JR	C,o192B		; back to OUT-SP-1 until no carry from
 7300+192F              					; the addition.
 7301+192F
 7302+192F ED 42        		SBC	HL,BC		; cancel the last addition
 7303+1931 3D           		DEC	A		; and decrement the digit.
 7304+1932 28 F1        		JR	Z,o1925		; back to OUT-SP-2 if it is zero.
 7305+1934
 7306+1934 C3 EF 15     		JP	o15EF		; jump back to exit via OUT-CODE.    ->
 7307+1937
 7308+1937
 7309+1937              ; -------------------------------------
 7310+1937              ; Outputting characters in a BASIC line
 7311+1937              ; -------------------------------------
 7312+1937              ; This subroutine ...
 7313+1937
 7314+1937              ;; OUT-CHAR
 7315+1937 CD 1B 2D     o1937:		CALL	o2D1B		; routine NUMERIC tests if it is a digit ?
 7316+193A 30 30        		JR	NC,o196C	; to OUT-CH-3 to print digit without
 7317+193C              					; changing mode. Will be 'K' mode if digits
 7318+193C              					; are at beginning of edit line.
 7319+193C
 7320+193C FE 21        		CP	$21		; less than quote character ?
 7321+193E 38 2C        		JR	C,o196C		; to OUT-CH-3 to output controls and space.
 7322+1940
 7323+1940 FD CB 01 96  		RES	2,(IY+$01)	; initialize FLAGS to 'K' mode and leave
 7324+1944              					; unchanged if this character would precede
 7325+1944              					; a keyword.
 7326+1944
 7327+1944 FE CB        		CP	$CB		; is character 'THEN' token ?
 7328+1946 28 24        		JR	Z,o196C		; to OUT-CH-3 to output if so.
 7329+1948
 7330+1948 FE 3A        		CP	$3A		; is it ":" ?
 7331+194A 20 0E        		JR	NZ,o195A	; to OUT-CH-1 if not statement separator
 7332+194C              					; to change mode back to 'L'.
 7333+194C
 7334+194C FD CB 37 6E  		BIT	5,(IY+$37)	; FLAGX  - Input Mode ??
 7335+1950 20 16        		JR	NZ,o1968	; to OUT-CH-2 if in input as no statements.
 7336+1952              					; Note. this check should seemingly be at
 7337+1952              					; the start. Commands seem inappropriate in
 7338+1952              					; INPUT mode and are rejected by the syntax
 7339+1952              					; checker anyway.
 7340+1952              					; unless INPUT LINE is being used.
 7341+1952
 7342+1952 FD CB 30 56  		BIT	2,(IY+$30)	; test FLAGS2 - is the ":" within quotes ?
 7343+1956 28 14        		JR	Z,o196C		; to OUT-CH-3 if ":" is outside quoted text.
 7344+1958
 7345+1958 18 0E        		JR	o1968		; to OUT-CH-2 as ":" is within quotes
 7346+195A
 7347+195A              ; ---
 7348+195A
 7349+195A              ;; OUT-CH-1
 7350+195A FE 22        o195A:		CP	$22		; is it quote character '"'  ?
 7351+195C 20 0A        		JR	NZ,o1968	; to OUT-CH-2 with others to set 'L' mode.
 7352+195E
 7353+195E F5           		PUSH	AF		; save character.
 7354+195F 3A 6A 5C     		LD	A,(	$5C6A)	; fetch FLAGS2.
 7355+1962 EE 04        		XOR	$04		; toggle the quotes flag.
 7356+1964 32 6A 5C     		LD	(	$5C6A),A	; update FLAGS2
 7357+1967 F1           		POP	AF		; and restore character.
 7358+1968
 7359+1968              ;; OUT-CH-2
 7360+1968 FD CB 01 D6  o1968:		SET	2,(IY+$01)	; update FLAGS - signal L mode if the cursor
 7361+196C              					; is next.
 7362+196C
 7363+196C              ;; OUT-CH-3
 7364+196C D7           o196C:		RST	10H		; PRINT-A vectors the character to
 7365+196D              					; channel 'S', 'K', 'R' or 'P'.
 7366+196D C9           		RET			; return.
 7367+196E
 7368+196E              ; -------------------------------------------
 7369+196E              ; Get starting address of line, or line after
 7370+196E              ; -------------------------------------------
 7371+196E              ; This routine is used often to get the address, in HL, of a BASIC line
 7372+196E              ; number supplied in HL, or failing that the address of the following line
 7373+196E              ; and the address of the previous line in DE.
 7374+196E
 7375+196E              ;; LINE-ADDR
 7376+196E E5           o196E:		PUSH	HL		; save line number in HL register
 7377+196F 2A 53 5C     		LD	HL,(	$5C53)	; fetch start of program from PROG
 7378+1972 54           		LD	D,H		; transfer address to
 7379+1973 5D           		LD	E,L		; the DE register pair.
 7380+1974
 7381+1974              ;; LINE-AD-1
 7382+1974 C1           o1974:		POP	BC		; restore the line number to BC
 7383+1975 CD 80 19     		CALL	o1980		; routine CP-LINES compares with that
 7384+1978              					; addressed by HL
 7385+1978 D0           		RET	NC		; return if line has been passed or matched.
 7386+1979              					; if NZ, address of previous is in DE
 7387+1979
 7388+1979 C5           		PUSH	BC		; save the current line number
 7389+197A CD B8 19     		CALL	o19B8		; routine NEXT-ONE finds address of next
 7390+197D              					; line number in DE, previous in HL.
 7391+197D EB           		EX	DE,HL		; switch so next in HL
 7392+197E 18 F4        		JR	o1974		; back to LINE-AD-1 for another comparison
 7393+1980
 7394+1980              ; --------------------
 7395+1980              ; Compare line numbers
 7396+1980              ; --------------------
 7397+1980              ; This routine compares a line number supplied in BC with an addressed
 7398+1980              ; line number pointed to by HL.
 7399+1980
 7400+1980              ;; CP-LINES
 7401+1980 7E           o1980:		LD	A,(HL)		; Load the high byte of line number and
 7402+1981 B8           		CP	B		; compare with that of supplied line number.
 7403+1982 C0           		RET	NZ		; return if yet to match (carry will be set).
 7404+1983
 7405+1983 23           		INC	HL		; address low byte of
 7406+1984 7E           		LD	A,(HL)		; number and pick up in A.
 7407+1985 2B           		DEC	HL		; step back to first position.
 7408+1986 B9           		CP	C		; now compare.
 7409+1987 C9           		RET			; zero set if exact match.
 7410+1988              					; carry set if yet to match.
 7411+1988              					; no carry indicates a match or
 7412+1988              					; next available BASIC line or
 7413+1988              					; program end marker.
 7414+1988
 7415+1988              ; -------------------
 7416+1988              ; Find each statement
 7417+1988              ; -------------------
 7418+1988              ; The single entry point EACH-STMT is used to
 7419+1988              ; 1) To find the D'th statement in a line.
 7420+1988              ; 2) To find a token in held E.
 7421+1988
 7422+1988              ;; not-used
 7423+1988 23           o1988:		INC	HL		;
 7424+1989 23           		INC	HL		;
 7425+198A 23           		INC	HL		;
 7426+198B
 7427+198B              ; -> entry point.
 7428+198B
 7429+198B              ;; EACH-STMT
 7430+198B 22 5D 5C     o198B:		LD	(	$5C5D),HL	; save HL in CH_ADD
 7431+198E 0E 00        		LD	C,$00		; initialize quotes flag
 7432+1990
 7433+1990              ;; EACH-S-1
 7434+1990 15           o1990:		DEC	D		; decrease statement count
 7435+1991 C8           		RET	Z		; return if zero
 7436+1992
 7437+1992
 7438+1992 E7           		RST	20H		; NEXT-CHAR
 7439+1993 BB           		CP	E		; is it the search token ?
 7440+1994 20 04        		JR	NZ,o199A	; forward to EACH-S-3 if not
 7441+1996
 7442+1996 A7           		AND	A		; clear carry
 7443+1997 C9           		RET			; return signalling success.
 7444+1998
 7445+1998              ; ---
 7446+1998
 7447+1998              ;; EACH-S-2
 7448+1998 23           o1998:		INC	HL		; next address
 7449+1999 7E           		LD	A,(HL)		; next character
 7450+199A
 7451+199A              ;; EACH-S-3
 7452+199A CD B6 18     o199A:		CALL	o18B6		; routine NUMBER skips if number marker
 7453+199D 22 5D 5C     		LD	(	$5C5D),HL	; save in CH_ADD
 7454+19A0 FE 22        		CP	$22		; is it quotes '"' ?
 7455+19A2 20 01        		JR	NZ,o19A5	; to EACH-S-4 if not
 7456+19A4
 7457+19A4 0D           		DEC	C		; toggle bit 0 of C
 7458+19A5
 7459+19A5              ;; EACH-S-4
 7460+19A5 FE 3A        o19A5:		CP	$3A		; is it ":"
 7461+19A7 28 04        		JR	Z,o19AD		; to EACH-S-5
 7462+19A9
 7463+19A9 FE CB        		CP	$CB		; 'THEN'
 7464+19AB 20 04        		JR	NZ,o19B1	; to EACH-S-6
 7465+19AD
 7466+19AD              ;; EACH-S-5
 7467+19AD CB 41        o19AD:		BIT	0,C		; is it in quotes
 7468+19AF 28 DF        		JR	Z,o1990		; to EACH-S-1 if not
 7469+19B1
 7470+19B1              ;; EACH-S-6
 7471+19B1 FE 0D        o19B1:		CP	$0D		; end of line ?
 7472+19B3 20 E3        		JR	NZ,o1998	; to EACH-S-2
 7473+19B5
 7474+19B5 15           		DEC	D		; decrease the statement counter
 7475+19B6              					; which should be zero else
 7476+19B6              					; 'Statement Lost'.
 7477+19B6 37           		SCF			; set carry flag - not found
 7478+19B7 C9           		RET			; return
 7479+19B8
 7480+19B8              ; -----------------------------------------------------------------------
 7481+19B8              ; Storage of variables. For full details - see chapter 24.
 7482+19B8              ; ZX Spectrum BASIC Programming by Steven Vickers 1982.
 7483+19B8              ; It is bits 7-5 of the first character of a variable that allow
 7484+19B8              ; the six types to be distinguished. Bits 4-0 are the reduced letter.
 7485+19B8              ; So any variable name is higher that $3F and can be distinguished
 7486+19B8              ; also from the variables area end-marker $80.
 7487+19B8              ;
 7488+19B8              ; 76543210 meaning                               brief outline of format.
 7489+19B8              ; -------- ------------------------              -----------------------
 7490+19B8              ; 010      string variable.                      2 byte length + contents.
 7491+19B8              ; 110      string array.                         2 byte length + contents.
 7492+19B8              ; 100      array of numbers.                     2 byte length + contents.
 7493+19B8              ; 011      simple numeric variable.              5 bytes.
 7494+19B8              ; 101      variable length named numeric.        5 bytes.
 7495+19B8              ; 111      for-next loop variable.               18 bytes.
 7496+19B8              ; 10000000 the variables area end-marker.
 7497+19B8              ;
 7498+19B8              ; Note. any of the above seven will serve as a program end-marker.
 7499+19B8              ;
 7500+19B8              ; -----------------------------------------------------------------------
 7501+19B8
 7502+19B8              ; ------------
 7503+19B8              ; Get next one
 7504+19B8              ; ------------
 7505+19B8              ; This versatile routine is used to find the address of the next line
 7506+19B8              ; in the program area or the next variable in the variables area.
 7507+19B8              ; The reason one routine is made to handle two apparently unrelated tasks
 7508+19B8              ; is that it can be called indiscriminately when merging a line or a
 7509+19B8              ; variable.
 7510+19B8
 7511+19B8              ;; NEXT-ONE
 7512+19B8 E5           o19B8:		PUSH	HL		; save the pointer address.
 7513+19B9 7E           		LD	A,(HL)		; get first byte.
 7514+19BA FE 40        		CP	$40		; compare with upper limit for line numbers.
 7515+19BC 38 17        		JR	C,o19D5		; forward to NEXT-O-3 if within BASIC area.
 7516+19BE
 7517+19BE              ; the continuation here is for the next variable unless the supplied
 7518+19BE              ; line number was erroneously over 16383. see RESTORE command.
 7519+19BE
 7520+19BE CB 6F        		BIT	5,A		; is it a string or an array variable ?
 7521+19C0 28 14        		JR	Z,o19D6		; forward to NEXT-O-4 to compute length.
 7522+19C2
 7523+19C2 87           		ADD	A,A		; test bit 6 for single-character variables.
 7524+19C3 FA C7 19     		JP	M,o19C7		; forward to NEXT-O-1 if so
 7525+19C6
 7526+19C6 3F           		CCF			; clear the carry for long-named variables.
 7527+19C7              					; it remains set for for-next loop variables.
 7528+19C7
 7529+19C7              ;; NEXT-O-1
 7530+19C7 01 05 00     o19C7:		LD	BC,$0005	; set BC to 5 for floating point number
 7531+19CA 30 02        		JR	NC,o19CE	; forward to NEXT-O-2 if not a for/next
 7532+19CC              					; variable.
 7533+19CC
 7534+19CC 0E 12        		LD	C,$12		; set BC to eighteen locations.
 7535+19CE              					; value, limit, step, line and statement.
 7536+19CE
 7537+19CE              ; now deal with long-named variables
 7538+19CE
 7539+19CE              ;; NEXT-O-2
 7540+19CE 17           o19CE:		RLA
 7541+19CF              					; be set for single character variables
 7542+19CF 23           		INC	HL		; address next location.
 7543+19D0 7E           		LD	A,(HL)		; and load character.
 7544+19D1 30 FB        		JR	NC,o19CE	; back to NEXT-O-2 if not inverted bit.
 7545+19D3              					; forward immediately with single character
 7546+19D3              					; variable names.
 7547+19D3
 7548+19D3 18 06        		JR	o19DB		; forward to NEXT-O-5 to add length of
 7549+19D5              					; floating point number(s etc.).
 7550+19D5
 7551+19D5              ; ---
 7552+19D5
 7553+19D5              ; this branch is for line numbers.
 7554+19D5
 7555+19D5              ;; NEXT-O-3
 7556+19D5 23           o19D5:		INC	HL		; increment pointer to low byte of line no.
 7557+19D6
 7558+19D6              ; strings and arrays rejoin here
 7559+19D6
 7560+19D6              ;; NEXT-O-4
 7561+19D6 23           o19D6:		INC	HL		; increment to address the length low byte.
 7562+19D7 4E           		LD	C,(HL)		; transfer to C and
 7563+19D8 23           		INC	HL		; point to high byte of length.
 7564+19D9 46           		LD	B,(HL)		; transfer that to B
 7565+19DA 23           		INC	HL		; point to start of BASIC/variable contents.
 7566+19DB
 7567+19DB              ; the three types of numeric variables rejoin here
 7568+19DB
 7569+19DB              ;; NEXT-O-5
 7570+19DB 09           o19DB:		ADD	HL,BC		; add the length to give address of next
 7571+19DC              					; line/variable in HL.
 7572+19DC D1           		POP	DE		; restore previous address to DE.
 7573+19DD
 7574+19DD              ; ------------------
 7575+19DD              ; Difference routine
 7576+19DD              ; ------------------
 7577+19DD              ; This routine terminates the above routine and is also called from the
 7578+19DD              ; start of the next routine to calculate the length to reclaim.
 7579+19DD
 7580+19DD              ;; DIFFER
 7581+19DD A7           o19DD:		AND	A		; prepare for true subtraction.
 7582+19DE ED 52        		SBC	HL,DE		; subtract the two pointers.
 7583+19E0 44           		LD	B,H		; transfer result
 7584+19E1 4D           		LD	C,L		; to BC register pair.
 7585+19E2 19           		ADD	HL,DE		; add back
 7586+19E3 EB           		EX	DE,HL		; and switch pointers
 7587+19E4 C9           		RET			; return values are the length of area in BC,
 7588+19E5              					; low pointer (previous) in HL,
 7589+19E5              					; high pointer (next) in DE.
 7590+19E5
 7591+19E5              ; -----------------------
 7592+19E5              ; Handle reclaiming space
 7593+19E5              ; -----------------------
 7594+19E5              ;
 7595+19E5
 7596+19E5              ;; RECLAIM-1
 7597+19E5 CD DD 19     o19E5:		CALL	o19DD		; routine DIFFER immediately above
 7598+19E8
 7599+19E8              ;; RECLAIM-2
 7600+19E8 C5           o19E8:		PUSH	BC		;
 7601+19E9
 7602+19E9 78           		LD	A,B		;
 7603+19EA 2F           		CPL			;
 7604+19EB 47           		LD	B,A		;
 7605+19EC 79           		LD	A,C		;
 7606+19ED 2F           		CPL			;
 7607+19EE 4F           		LD	C,A		;
 7608+19EF 03           		INC	BC		;
 7609+19F0
 7610+19F0 CD 64 16     		CALL	o1664		; routine POINTERS
 7611+19F3 EB           		EX	DE,HL		;
 7612+19F4 E1           		POP	HL		;
 7613+19F5
 7614+19F5 19           		ADD	HL,DE		;
 7615+19F6 D5           		PUSH	DE		;
 7616+19F7 ED B0        		LDIR			; copy bytes
 7617+19F9
 7618+19F9 E1           		POP	HL		;
 7619+19FA C9           		RET			;
 7620+19FB
 7621+19FB              ; ----------------------------------------
 7622+19FB              ; Read line number of line in editing area
 7623+19FB              ; ----------------------------------------
 7624+19FB              ; This routine reads a line number in the editing area returning the number
 7625+19FB              ; in the BC register or zero if no digits exist before commands.
 7626+19FB              ; It is called from LINE-SCAN to check the syntax of the digits.
 7627+19FB              ; It is called from MAIN-3 to extract the line number in preparation for
 7628+19FB              ; inclusion of the line in the BASIC program area.
 7629+19FB              ;
 7630+19FB              ; Interestingly the calculator stack is moved from its normal place at the
 7631+19FB              ; end of dynamic memory to an adequate area within the system variables area.
 7632+19FB              ; This ensures that in a low memory situation, that valid line numbers can
 7633+19FB              ; be extracted without raising an error and that memory can be reclaimed
 7634+19FB              ; by deleting lines. If the stack was in its normal place then a situation
 7635+19FB              ; arises whereby the Spectrum becomes locked with no means of reclaiming space.
 7636+19FB
 7637+19FB              ;; E-LINE-NO
 7638+19FB 2A 59 5C     o19FB:		LD	HL,(	$5C59)	; load HL from system variable E_LINE.
 7639+19FE
 7640+19FE 2B           		DEC	HL		; decrease so that NEXT_CHAR can be used
 7641+19FF              					; without skipping the first digit.
 7642+19FF
 7643+19FF 22 5D 5C     		LD	(	$5C5D),HL	; store in the system variable CH_ADD.
 7644+1A02
 7645+1A02 E7           		RST	20H		; NEXT-CHAR skips any noise and white-space
 7646+1A03              					; to point exactly at the first digit.
 7647+1A03
 7648+1A03 21 92 5C     		LD	HL,	$5C92	; use MEM-0 as a temporary calculator stack
 7649+1A06              					; an overhead of three locations are needed.
 7650+1A06 22 65 5C     		LD	(	$5C65),HL	; set new STKEND.
 7651+1A09
 7652+1A09 CD 3B 2D     		CALL	o2D3B		; routine INT-TO-FP will read digits till
 7653+1A0C              					; a non-digit found.
 7654+1A0C CD A2 2D     		CALL	o2DA2		; routine FP-TO-BC will retrieve number
 7655+1A0F              					; from stack at membot.
 7656+1A0F 38 04        		JR	C,o1A15		; forward to E-L-1 if overflow i.e. > 65535.
 7657+1A11              					; 'Nonsense in BASIC'
 7658+1A11
 7659+1A11 21 F0 D8     		LD	HL,$D8F0	; load HL with value -9999
 7660+1A14 09           		ADD	HL,BC		; add to line number in BC
 7661+1A15
 7662+1A15              ;; E-L-1
 7663+1A15 DA 8A 1C     o1A15:		JP	C,o1C8A		; to REPORT-C 'Nonsense in BASIC' if over.
 7664+1A18              					; Note. As ERR_SP points to ED_ERROR
 7665+1A18              					; the report is never produced although
 7666+1A18              					; the RST $08 will update X_PTR leading to
 7667+1A18              					; the error marker being displayed when
 7668+1A18              					; the ED_LOOP is reiterated.
 7669+1A18              					; in fact, since it is immediately
 7670+1A18              					; cancelled, any report will do.
 7671+1A18
 7672+1A18              ; a line in the range 0 - 9999 has been entered.
 7673+1A18
 7674+1A18 C3 C5 16     		JP	o16C5		; jump back to SET-STK to set the calculator
 7675+1A1B              					; stack back to its normal place and exit
 7676+1A1B              					; from there.
 7677+1A1B
 7678+1A1B              ; ---------------------------------
 7679+1A1B              ; Report and line number outputting
 7680+1A1B              ; ---------------------------------
 7681+1A1B              ; Entry point OUT-NUM-1 is used by the Error Reporting code to print
 7682+1A1B              ; the line number and later the statement number held in BC.
 7683+1A1B              ; If the statement was part of a direct command then -2 is used as a
 7684+1A1B              ; dummy line number so that zero will be printed in the report.
 7685+1A1B              ; This routine is also used to print the exponent of E-format numbers.
 7686+1A1B              ;
 7687+1A1B              ; Entry point OUT-NUM-2 is used from OUT-LINE to output the line number
 7688+1A1B              ; addressed by HL with leading spaces if necessary.
 7689+1A1B
 7690+1A1B              ;; OUT-NUM-1
 7691+1A1B D5           o1A1B:		PUSH	DE		; save the
 7692+1A1C E5           		PUSH	HL		; registers.
 7693+1A1D AF           		XOR	A		; set A to zero.
 7694+1A1E CB 78        		BIT	7,B		; is the line number minus two ?
 7695+1A20 20 20        		JR	NZ,o1A42	; forward to OUT-NUM-4 if so to print zero
 7696+1A22              					; for a direct command.
 7697+1A22
 7698+1A22 60           		LD	H,B		; transfer the
 7699+1A23 69           		LD	L,C		; number to HL.
 7700+1A24 1E FF        		LD	E,$FF		; signal 'no leading zeros'.
 7701+1A26 18 08        		JR	o1A30		; forward to continue at OUT-NUM-3
 7702+1A28
 7703+1A28              ; ---
 7704+1A28
 7705+1A28              ; from OUT-LINE - HL addresses line number.
 7706+1A28
 7707+1A28              ;; OUT-NUM-2
 7708+1A28 D5           o1A28:		PUSH	DE		; save flags
 7709+1A29 56           		LD	D,(HL)		; high byte to D
 7710+1A2A 23           		INC	HL		; address next
 7711+1A2B 5E           		LD	E,(HL)		; low byte to E
 7712+1A2C E5           		PUSH	HL		; save pointer
 7713+1A2D EB           		EX	DE,HL		; transfer number to HL
 7714+1A2E 1E 20        		LD	E,$20		; signal 'output leading spaces'
 7715+1A30
 7716+1A30              ;; OUT-NUM-3
 7717+1A30 01 18 FC     o1A30:		LD	BC,$FC18	; value -1000
 7718+1A33 CD 2A 19     		CALL	o192A		; routine OUT-SP-NO outputs space or number
 7719+1A36 01 9C FF     		LD	BC,$FF9C	; value -100
 7720+1A39 CD 2A 19     		CALL	o192A		; routine OUT-SP-NO
 7721+1A3C 0E F6        		LD	C,$F6		; value -10 ( B is still $FF )
 7722+1A3E CD 2A 19     		CALL	o192A		; routine OUT-SP-NO
 7723+1A41 7D           		LD	A,L		; remainder to A.
 7724+1A42
 7725+1A42              ;; OUT-NUM-4
 7726+1A42 CD EF 15     o1A42:		CALL	o15EF		; routine OUT-CODE for final digit.
 7727+1A45              					; else report code zero wouldn't get
 7728+1A45              					; printed.
 7729+1A45 E1           		POP	HL		; restore the
 7730+1A46 D1           		POP	DE		; registers and
 7731+1A47 C9           		RET			; return.
 7732+1A48
 7733+1A48
 7734+1A48              ;***************************************************
 7735+1A48              ;** Part 7. BASIC LINE AND COMMAND INTERPRETATION **
 7736+1A48              ;***************************************************
 7737+1A48
 7738+1A48              ; ----------------
 7739+1A48              ; The offset table
 7740+1A48              ; ----------------
 7741+1A48              ; The BASIC interpreter has found a command code $CE - $FF
 7742+1A48              ; which is then reduced to range $00 - $31 and added to the base address
 7743+1A48              ; of this table to give the address of an offset which, when added to
 7744+1A48              ; the offset therein, gives the location in the following parameter table
 7745+1A48              ; where a list of class codes, separators and addresses relevant to the
 7746+1A48              ; command exists.
 7747+1A48
 7748+1A48              ;; offst-tbl
 7749+1A48 B1           o1A48:		DB	o1AF9-$		; B1 offset to Address: P-DEF-FN
 7750+1A49 CB           		DB	o1B14-$		; CB offset to Address: P-CAT
 7751+1A4A BC           		DB	o1B06-$		; BC offset to Address: P-FORMAT
 7752+1A4B BF           		DB	o1B0A-$		; BF offset to Address: P-MOVE
 7753+1A4C C4           		DB	o1B10-$		; C4 offset to Address: P-ERASE
 7754+1A4D AF           		DB	o1AFC-$		; AF offset to Address: P-OPEN
 7755+1A4E B4           		DB	o1B02-$		; B4 offset to Address: P-CLOSE
 7756+1A4F 93           		DB	o1AE2-$		; 93 offset to Address: P-MERGE
 7757+1A50 91           		DB	o1AE1-$		; 91 offset to Address: P-VERIFY
 7758+1A51 92           		DB	o1AE3-$		; 92 offset to Address: P-BEEP
 7759+1A52 95           		DB	o1AE7-$		; 95 offset to Address: P-CIRCLE
 7760+1A53 98           		DB	o1AEB-$		; 98 offset to Address: P-INK
 7761+1A54 98           		DB	o1AEC-$		; 98 offset to Address: P-PAPER
 7762+1A55 98           		DB	o1AED-$		; 98 offset to Address: P-FLASH
 7763+1A56 98           		DB	o1AEE-$		; 98 offset to Address: P-BRIGHT
 7764+1A57 98           		DB	o1AEF-$		; 98 offset to Address: P-INVERSE
 7765+1A58 98           		DB	o1AF0-$		; 98 offset to Address: P-OVER
 7766+1A59 98           		DB	o1AF1-$		; 98 offset to Address: P-OUT
 7767+1A5A 7F           		DB	o1AD9-$		; 7F offset to Address: P-LPRINT
 7768+1A5B 81           		DB	o1ADC-$		; 81 offset to Address: P-LLIST
 7769+1A5C 2E           		DB	o1A8A-$		; 2E offset to Address: P-STOP
 7770+1A5D 6C           		DB	o1AC9-$		; 6C offset to Address: P-READ
 7771+1A5E 6E           		DB	o1ACC-$		; 6E offset to Address: P-DATA
 7772+1A5F 70           		DB	o1ACF-$		; 70 offset to Address: P-RESTORE
 7773+1A60 48           		DB	o1AA8-$		; 48 offset to Address: P-NEW
 7774+1A61 94           		DB	o1AF5-$		; 94 offset to Address: P-BORDER
 7775+1A62 56           		DB	o1AB8-$		; 56 offset to Address: P-CONT
 7776+1A63 3F           		DB	o1AA2-$		; 3F offset to Address: P-DIM
 7777+1A64 41           		DB	o1AA5-$		; 41 offset to Address: P-REM
 7778+1A65 2B           		DB	o1A90-$		; 2B offset to Address: P-FOR
 7779+1A66 17           		DB	o1A7D-$		; 17 offset to Address: P-GO-TO
 7780+1A67 1F           		DB	o1A86-$		; 1F offset to Address: P-GO-SUB
 7781+1A68 37           		DB	o1A9F-$		; 37 offset to Address: P-INPUT
 7782+1A69 77           		DB	o1AE0-$		; 77 offset to Address: P-LOAD
 7783+1A6A 44           		DB	o1AAE-$		; 44 offset to Address: P-LIST
 7784+1A6B 0F           		DB	o1A7A-$		; 0F offset to Address: P-LET
 7785+1A6C 59           		DB	o1AC5-$		; 59 offset to Address: P-PAUSE
 7786+1A6D 2B           		DB	o1A98-$		; 2B offset to Address: P-NEXT
 7787+1A6E 43           		DB	o1AB1-$		; 43 offset to Address: P-POKE
 7788+1A6F 2D           		DB	o1A9C-$		; 2D offset to Address: P-PRINT
 7789+1A70 51           		DB	o1AC1-$		; 51 offset to Address: P-PLOT
 7790+1A71 3A           		DB	o1AAB-$		; 3A offset to Address: P-RUN
 7791+1A72 6D           		DB	o1ADF-$		; 6D offset to Address: P-SAVE
 7792+1A73 42           		DB	o1AB5-$		; 42 offset to Address: P-RANDOM
 7793+1A74 0D           		DB	o1A81-$		; 0D offset to Address: P-IF
 7794+1A75 49           		DB	o1ABE-$		; 49 offset to Address: P-CLS
 7795+1A76 5C           		DB	o1AD2-$		; 5C offset to Address: P-DRAW
 7796+1A77 44           		DB	o1ABB-$		; 44 offset to Address: P-CLEAR
 7797+1A78 15           		DB	o1A8D-$		; 15 offset to Address: P-RETURN
 7798+1A79 5D           		DB	o1AD6-$		; 5D offset to Address: P-COPY
 7799+1A7A
 7800+1A7A
 7801+1A7A              ; -------------------------------
 7802+1A7A              ; The parameter or "Syntax" table
 7803+1A7A              ; -------------------------------
 7804+1A7A              ; For each command there exists a variable list of parameters.
 7805+1A7A              ; If the character is greater than a space it is a required separator.
 7806+1A7A              ; If less, then it is a command class in the range 00 - 0B.
 7807+1A7A              ; Note that classes 00, 03 and 05 will fetch the addresses from this table.
 7808+1A7A              ; Some classes e.g. 07 and 0B have the same address in all invocations
 7809+1A7A              ; and the command is re-computed from the low-byte of the parameter address.
 7810+1A7A              ; Some e.g. 02 are only called once so a call to the command is made from
 7811+1A7A              ; within the class routine rather than holding the address within the table.
 7812+1A7A              ; Some class routines check syntax entirely and some leave this task for the
 7813+1A7A              ; command itself.
 7814+1A7A              ; Others for example CIRCLE (x,y,z) check the first part (x,y) using the
 7815+1A7A              ; class routine and the final part (,z) within the command.
 7816+1A7A              ; The last few commands appear to have been added in a rush but their syntax
 7817+1A7A              ; is rather simple e.g. MOVE "M1","M2"
 7818+1A7A
 7819+1A7A              ;; P-LET
 7820+1A7A 01           o1A7A:		DB	$01		; Class-01 - A variable is required.
 7821+1A7B 3D           		DB	$3D		; Separator:  "="
 7822+1A7C 02           		DB	$02		; Class-02 - An expression, numeric or string,
 7823+1A7D              					; must follow.
 7824+1A7D
 7825+1A7D              ;; P-GO-TO
 7826+1A7D 06           o1A7D:		DB	$06		; Class-06 - A numeric expression must follow.
 7827+1A7E 00           		DB	$00		; Class-00 - No further operands.
 7828+1A7F 67 1E        		DW	o1E67		; Address: $1E67; Address: GO-TO
 7829+1A81
 7830+1A81              ;; P-IF
 7831+1A81 06           o1A81:		DB	$06		; Class-06 - A numeric expression must follow.
 7832+1A82 CB           		DB	$CB		; Separator:  'THEN'
 7833+1A83 05           		DB	$05		; Class-05 - Variable syntax checked
 7834+1A84              					; by routine.
 7835+1A84 F0 1C        		DW	o1CF0		; Address: $1CF0; Address: IF
 7836+1A86
 7837+1A86              ;; P-GO-SUB
 7838+1A86 06           o1A86:		DB	$06		; Class-06 - A numeric expression must follow.
 7839+1A87 00           		DB	$00		; Class-00 - No further operands.
 7840+1A88 ED 1E        		DW	o1EED		; Address: $1EED; Address: GO-SUB
 7841+1A8A
 7842+1A8A              ;; P-STOP
 7843+1A8A 00           o1A8A:		DB	$00		; Class-00 - No further operands.
 7844+1A8B EE 1C        		DW	o1CEE		; Address: $1CEE; Address: STOP
 7845+1A8D
 7846+1A8D              ;; P-RETURN
 7847+1A8D 00           o1A8D:		DB	$00		; Class-00 - No further operands.
 7848+1A8E 23 1F        		DW	o1F23		; Address: $1F23; Address: RETURN
 7849+1A90
 7850+1A90              ;; P-FOR
 7851+1A90 04           o1A90:		DB	$04		; Class-04 - A single character variable must
 7852+1A91              					; follow.
 7853+1A91 3D           		DB	$3D		; Separator:  "="
 7854+1A92 06           		DB	$06		; Class-06 - A numeric expression must follow.
 7855+1A93 CC           		DB	$CC		; Separator:  'TO'
 7856+1A94 06           		DB	$06		; Class-06 - A numeric expression must follow.
 7857+1A95 05           		DB	$05		; Class-05 - Variable syntax checked
 7858+1A96              					; by routine.
 7859+1A96 03 1D        		DW	o1D03		; Address: $1D03; Address: FOR
 7860+1A98
 7861+1A98              ;; P-NEXT
 7862+1A98 04           o1A98:		DB	$04		; Class-04 - A single character variable must
 7863+1A99              					; follow.
 7864+1A99 00           		DB	$00		; Class-00 - No further operands.
 7865+1A9A AB 1D        		DW	o1DAB		; Address: $1DAB; Address: NEXT
 7866+1A9C
 7867+1A9C              ;; P-PRINT
 7868+1A9C 05           o1A9C:		DB	$05		; Class-05 - Variable syntax checked entirely
 7869+1A9D              					; by routine.
 7870+1A9D CD 1F        		DW	o1FCD		; Address: $1FCD; Address: PRINT
 7871+1A9F
 7872+1A9F              ;; P-INPUT
 7873+1A9F 05           o1A9F:		DB	$05		; Class-05 - Variable syntax checked entirely
 7874+1AA0              					; by routine.
 7875+1AA0 89 20        		DW	o2089		; Address: $2089; Address: INPUT
 7876+1AA2
 7877+1AA2              ;; P-DIM
 7878+1AA2 05           o1AA2:		DB	$05		; Class-05 - Variable syntax checked entirely
 7879+1AA3              					; by routine.
 7880+1AA3 02 2C        		DW	o2C02		; Address: $2C02; Address: DIM
 7881+1AA5
 7882+1AA5              ;; P-REM
 7883+1AA5 05           o1AA5:		DB	$05		; Class-05 - Variable syntax checked entirely
 7884+1AA6              					; by routine.
 7885+1AA6 B2 1B        		DW	o1BB2		; Address: $1BB2; Address: REM
 7886+1AA8
 7887+1AA8              ;; P-NEW
 7888+1AA8 00           o1AA8:		DB	$00		; Class-00 - No further operands.
 7889+1AA9 B7 11        		DW	o11B7		; Address: $11B7; Address: NEW
 7890+1AAB
 7891+1AAB              ;; P-RUN
 7892+1AAB 03           o1AAB:		DB	$03		; Class-03 - A numeric expression may follow
 7893+1AAC              					; else default to zero.
 7894+1AAC A1 1E        		DW	o1EA1		; Address: $1EA1; Address: RUN
 7895+1AAE
 7896+1AAE              ;; P-LIST
 7897+1AAE 05           o1AAE:		DB	$05		; Class-05 - Variable syntax checked entirely
 7898+1AAF              					; by routine.
 7899+1AAF F9 17        		DW	o17F9		; Address: $17F9; Address: LIST
 7900+1AB1
 7901+1AB1              ;; P-POKE
 7902+1AB1 08           o1AB1:		DB	$08		; Class-08 - Two comma-separated numeric
 7903+1AB2              					; expressions required.
 7904+1AB2 00           		DB	$00		; Class-00 - No further operands.
 7905+1AB3 80 1E        		DW	o1E80		; Address: $1E80; Address: POKE
 7906+1AB5
 7907+1AB5              ;; P-RANDOM
 7908+1AB5 03           o1AB5:		DB	$03		; Class-03 - A numeric expression may follow
 7909+1AB6              					; else default to zero.
 7910+1AB6 4F 1E        		DW	o1E4F		; Address: $1E4F; Address: RANDOMIZE
 7911+1AB8
 7912+1AB8              ;; P-CONT
 7913+1AB8 00           o1AB8:		DB	$00		; Class-00 - No further operands.
 7914+1AB9 5F 1E        		DW	o1E5F		; Address: $1E5F; Address: CONTINUE
 7915+1ABB
 7916+1ABB              ;; P-CLEAR
 7917+1ABB 03           o1ABB:		DB	$03		; Class-03 - A numeric expression may follow
 7918+1ABC              					; else default to zero.
 7919+1ABC AC 1E        		DW	o1EAC		; Address: $1EAC; Address: CLEAR
 7920+1ABE
 7921+1ABE              ;; P-CLS
 7922+1ABE 00           o1ABE:		DB	$00		; Class-00 - No further operands.
 7923+1ABF 6B 0D        		DW	o0D6B		; Address: $0D6B; Address: CLS
 7924+1AC1
 7925+1AC1              ;; P-PLOT
 7926+1AC1 09           o1AC1:		DB	$09		; Class-09 - Two comma-separated numeric
 7927+1AC2              					; expressions required with optional colour
 7928+1AC2              					; items.
 7929+1AC2 00           		DB	$00		; Class-00 - No further operands.
 7930+1AC3 DC 22        		DW	o22DC		; Address: $22DC; Address: PLOT
 7931+1AC5
 7932+1AC5              ;; P-PAUSE
 7933+1AC5 06           o1AC5:		DB	$06		; Class-06 - A numeric expression must follow.
 7934+1AC6 00           		DB	$00		; Class-00 - No further operands.
 7935+1AC7 3A 1F        		DW	o1F3A		; Address: $1F3A; Address: PAUSE
 7936+1AC9
 7937+1AC9              ;; P-READ
 7938+1AC9 05           o1AC9:		DB	$05		; Class-05 - Variable syntax checked entirely
 7939+1ACA              					; by routine.
 7940+1ACA ED 1D        		DW	o1DED		; Address: $1DED; Address: READ
 7941+1ACC
 7942+1ACC              ;; P-DATA
 7943+1ACC 05           o1ACC:		DB	$05		; Class-05 - Variable syntax checked entirely
 7944+1ACD              					; by routine.
 7945+1ACD 27 1E        		DW	o1E27		; Address: $1E27; Address: DATA
 7946+1ACF
 7947+1ACF              ;; P-RESTORE
 7948+1ACF 03           o1ACF:		DB	$03		; Class-03 - A numeric expression may follow
 7949+1AD0              					; else default to zero.
 7950+1AD0 42 1E        		DW	o1E42		; Address: $1E42; Address: RESTORE
 7951+1AD2
 7952+1AD2              ;; P-DRAW
 7953+1AD2 09           o1AD2:		DB	$09		; Class-09 - Two comma-separated numeric
 7954+1AD3              					; expressions required with optional colour
 7955+1AD3              					; items.
 7956+1AD3 05           		DB	$05		; Class-05 - Variable syntax checked
 7957+1AD4              					; by routine.
 7958+1AD4 82 23        		DW	o2382		; Address: $2382; Address: DRAW
 7959+1AD6
 7960+1AD6              ;; P-COPY
 7961+1AD6 00           o1AD6:		DB	$00		; Class-00 - No further operands.
 7962+1AD7 AC 0E        		DW	o0EAC		; Address: $0EAC; Address: COPY
 7963+1AD9
 7964+1AD9              ;; P-LPRINT
 7965+1AD9 05           o1AD9:		DB	$05		; Class-05 - Variable syntax checked entirely
 7966+1ADA              					; by routine.
 7967+1ADA C9 1F        		DW	o1FC9		; Address: $1FC9; Address: LPRINT
 7968+1ADC
 7969+1ADC              ;; P-LLIST
 7970+1ADC 05           o1ADC:		DB	$05		; Class-05 - Variable syntax checked entirely
 7971+1ADD              					; by routine.
 7972+1ADD F5 17        		DW	o17F5		; Address: $17F5; Address: LLIST
 7973+1ADF
 7974+1ADF              ;; P-SAVE
 7975+1ADF 0B           o1ADF:		DB	$0B		; Class-0B - Offset address converted to tape
 7976+1AE0              					; command.
 7977+1AE0
 7978+1AE0              ;; P-LOAD
 7979+1AE0 0B           o1AE0:		DB	$0B		; Class-0B - Offset address converted to tape
 7980+1AE1              					; command.
 7981+1AE1
 7982+1AE1              ;; P-VERIFY
 7983+1AE1 0B           o1AE1:		DB	$0B		; Class-0B - Offset address converted to tape
 7984+1AE2              					; command.
 7985+1AE2
 7986+1AE2              ;; P-MERGE
 7987+1AE2 0B           o1AE2:		DB	$0B		; Class-0B - Offset address converted to tape
 7988+1AE3              					; command.
 7989+1AE3
 7990+1AE3              ;; P-BEEP
 7991+1AE3 08           o1AE3:		DB	$08		; Class-08 - Two comma-separated numeric
 7992+1AE4              					; expressions required.
 7993+1AE4 00           		DB	$00		; Class-00 - No further operands.
 7994+1AE5 F8 03        		DW	o03F8		; Address: $03F8; Address: BEEP
 7995+1AE7
 7996+1AE7              ;; P-CIRCLE
 7997+1AE7 09           o1AE7:		DB	$09		; Class-09 - Two comma-separated numeric
 7998+1AE8              					; expressions required with optional colour
 7999+1AE8              					; items.
 8000+1AE8 05           		DB	$05		; Class-05 - Variable syntax checked
 8001+1AE9              					; by routine.
 8002+1AE9 20 23        		DW	o2320		; Address: $2320; Address: CIRCLE
 8003+1AEB
 8004+1AEB              ;; P-INK
 8005+1AEB 07           o1AEB:		DB	$07		; Class-07 - Offset address is converted to
 8006+1AEC              					; colour code.
 8007+1AEC
 8008+1AEC              ;; P-PAPER
 8009+1AEC 07           o1AEC:		DB	$07		; Class-07 - Offset address is converted to
 8010+1AED              					; colour code.
 8011+1AED
 8012+1AED              ;; P-FLASH
 8013+1AED 07           o1AED:		DB	$07		; Class-07 - Offset address is converted to
 8014+1AEE              					; colour code.
 8015+1AEE
 8016+1AEE              ;; P-BRIGHT
 8017+1AEE 07           o1AEE:		DB	$07		; Class-07 - Offset address is converted to
 8018+1AEF              					; colour code.
 8019+1AEF
 8020+1AEF              ;; P-INVERSE
 8021+1AEF 07           o1AEF:		DB	$07		; Class-07 - Offset address is converted to
 8022+1AF0              					; colour code.
 8023+1AF0
 8024+1AF0              ;; P-OVER
 8025+1AF0 07           o1AF0:		DB	$07		; Class-07 - Offset address is converted to
 8026+1AF1              					; colour code.
 8027+1AF1
 8028+1AF1              ;; P-OUT
 8029+1AF1 08           o1AF1:		DB	$08		; Class-08 - Two comma-separated numeric
 8030+1AF2              					; expressions required.
 8031+1AF2 00           		DB	$00		; Class-00 - No further operands.
 8032+1AF3 7A 1E        		DW	o1E7A		; Address: $1E7A; Address: OUT
 8033+1AF5
 8034+1AF5              ;; P-BORDER
 8035+1AF5 06           o1AF5:		DB	$06		; Class-06 - A numeric expression must follow.
 8036+1AF6 00           		DB	$00		; Class-00 - No further operands.
 8037+1AF7 94 22        		DW	o2294		; Address: $2294; Address: BORDER
 8038+1AF9
 8039+1AF9              ;; P-DEF-FN
 8040+1AF9 05           o1AF9:		DB	$05		; Class-05 - Variable syntax checked entirely
 8041+1AFA              					; by routine.
 8042+1AFA 60 1F        		DW	o1F60		; Address: $1F60; Address: DEF-FN
 8043+1AFC
 8044+1AFC              ;; P-OPEN
 8045+1AFC 06           o1AFC:		DB	$06		; Class-06 - A numeric expression must follow.
 8046+1AFD 2C           		DB	$2C		; Separator:  ','          see Footnote *
 8047+1AFE 0A           		DB	$0A		; Class-0A - A string expression must follow.
 8048+1AFF 00           		DB	$00		; Class-00 - No further operands.
 8049+1B00 36 17        		DW	o1736		; Address: $1736; Address: OPEN
 8050+1B02
 8051+1B02              ;; P-CLOSE
 8052+1B02 06           o1B02:		DB	$06		; Class-06 - A numeric expression must follow.
 8053+1B03 00           		DB	$00		; Class-00 - No further operands.
 8054+1B04 E5 16        		DW	o16E5		; Address: $16E5; Address: CLOSE
 8055+1B06
 8056+1B06              ;; P-FORMAT
 8057+1B06 0A           o1B06:		DB	$0A		; Class-0A - A string expression must follow.
 8058+1B07 00           		DB	$00		; Class-00 - No further operands.
 8059+1B08 93 17        		DW	o1793		; Address: $1793; Address: CAT-ETC
 8060+1B0A
 8061+1B0A              ;; P-MOVE
 8062+1B0A 0A           o1B0A:		DB	$0A		; Class-0A - A string expression must follow.
 8063+1B0B 2C           		DB	$2C		; Separator:  ','
 8064+1B0C 0A           		DB	$0A		; Class-0A - A string expression must follow.
 8065+1B0D 00           		DB	$00		; Class-00 - No further operands.
 8066+1B0E 93 17        		DW	o1793		; Address: $1793; Address: CAT-ETC
 8067+1B10
 8068+1B10              ;; P-ERASE
 8069+1B10 0A           o1B10:		DB	$0A		; Class-0A - A string expression must follow.
 8070+1B11 00           		DB	$00		; Class-00 - No further operands.
 8071+1B12 93 17        		DW	o1793		; Address: $1793; Address: CAT-ETC
 8072+1B14
 8073+1B14              ;; P-CAT
 8074+1B14 00           o1B14:		DB	$00		; Class-00 - No further operands.
 8075+1B15 93 17        		DW	o1793		; Address: $1793; Address: CAT-ETC
 8076+1B17
 8077+1B17              ; * Note that a comma is required as a separator with the OPEN command
 8078+1B17              ; but the Interface 1 programmers relaxed this allowing $3B as an
 8079+1B17              ; alternativo for their channels creating a confusing mixture of
 8080+1B17              ; allowable syntax as it is this ROM which opens or re-opens the
 8081+1B17              ; normal channels.
 8082+1B17
 8083+1B17              ; -------------------------------
 8084+1B17              ; Main parser (BASIC interpreter)
 8085+1B17              ; -------------------------------
 8086+1B17              ; This routine is called once from MAIN-2 when the BASIC line is to
 8087+1B17              ; be entered or re-entered into the Program area and the syntax
 8088+1B17              ; requires checking.
 8089+1B17
 8090+1B17              ;; LINE-SCAN
 8091+1B17 FD CB 01 BE  o1B17:		RES	7,(IY+$01)	; update FLAGS - signal checking syntax
 8092+1B1B CD FB 19     		CALL	o19FB		; routine E-LINE-NO              >>
 8093+1B1E              					; fetches the line number if in range.
 8094+1B1E
 8095+1B1E AF           		XOR	A		; clear the accumulator.
 8096+1B1F 32 47 5C     		LD	(	$5C47),A	; set statement number SUBPPC to zero.
 8097+1B22 3D           		DEC	A		; set accumulator to $FF.
 8098+1B23 32 3A 5C     		LD	(	$5C3A),A	; set ERR_NR to 'OK' - 1.
 8099+1B26 18 01        		JR	o1B29		; forward to continue at STMT-L-1.
 8100+1B28
 8101+1B28              ; --------------
 8102+1B28              ; Statement loop
 8103+1B28              ; --------------
 8104+1B28              ;
 8105+1B28              ;
 8106+1B28
 8107+1B28              ;; STMT-LOOP
 8108+1B28 E7           o1B28:		RST	20H		; NEXT-CHAR
 8109+1B29
 8110+1B29              ; -> the entry point from above or LINE-RUN
 8111+1B29              ;; STMT-L-1
 8112+1B29 CD BF 16     o1B29:		CALL	o16BF		; routine SET-WORK clears workspace etc.
 8113+1B2C
 8114+1B2C FD 34 0D     		INC	(IY+$0D)	; increment statement number SUBPPC
 8115+1B2F FA 8A 1C     		JP	M,o1C8A		; to REPORT-C to raise
 8116+1B32              					; 'Nonsense in BASIC' if over 127.
 8117+1B32
 8118+1B32 DF           		RST	18H		; GET-CHAR
 8119+1B33
 8120+1B33 06 00        		LD	B,$00		; set B to zero for later indexing.
 8121+1B35              					; early so any other reason ???
 8122+1B35
 8123+1B35 FE 0D        		CP	$0D		; is character carriage return ?
 8124+1B37              					; i.e. an empty statement.
 8125+1B37 28 7A        		JR	Z,o1BB3		; forward to LINE-END if so.
 8126+1B39
 8127+1B39 FE 3A        		CP	$3A		; is it statement end marker ":" ?
 8128+1B3B              					; i.e. another type of empty statement.
 8129+1B3B 28 EB        		JR	Z,o1B28		; back to STMT-LOOP if so.
 8130+1B3D
 8131+1B3D 21 76 1B     		LD	HL,o1B76	; address: STMT-RET
 8132+1B40 E5           		PUSH	HL		; is now pushed as a return address
 8133+1B41 4F           		LD	C,A		; transfer the current character to C.
 8134+1B42
 8135+1B42              ; advance CH_ADD to a position after command and test if it is a command.
 8136+1B42
 8137+1B42 E7           		RST	20H		; NEXT-CHAR to advance pointer
 8138+1B43 79           		LD	A,C		; restore current character
 8139+1B44 D6 CE        		SUB	$CE		; subtract 'DEF FN' - first command
 8140+1B46 DA 8A 1C     		JP	C,o1C8A		; jump to REPORT-C if less than a command
 8141+1B49              					; raising
 8142+1B49              					; 'Nonsense in BASIC'
 8143+1B49
 8144+1B49 4F           		LD	C,A		; put the valid command code back in C.
 8145+1B4A              					; register B is zero.
 8146+1B4A 21 48 1A     		LD	HL,o1A48	; address: offst-tbl
 8147+1B4D 09           		ADD	HL,BC		; index into table with one of 50 commands.
 8148+1B4E 4E           		LD	C,(HL)		; pick up displacement to syntax table entry.
 8149+1B4F 09           		ADD	HL,BC		; add to address the relevant entry.
 8150+1B50 18 03        		JR	o1B55		; forward to continue at GET-PARAM
 8151+1B52
 8152+1B52              ; ----------------------
 8153+1B52              ; The main scanning loop
 8154+1B52              ; ----------------------
 8155+1B52              ; not documented properly
 8156+1B52              ;
 8157+1B52
 8158+1B52              ;; SCAN-LOOP
 8159+1B52 2A 74 5C     o1B52:		LD	HL,(	$5C74)	; fetch temporary address from T_ADDR
 8160+1B55              					; during subsequent loops.
 8161+1B55
 8162+1B55              ; -> the initial entry point with HL addressing start of syntax table entry.
 8163+1B55
 8164+1B55              ;; GET-PARAM
 8165+1B55 7E           o1B55:		LD	A,(HL)		; pick up the parameter.
 8166+1B56 23           		INC	HL		; address next one.
 8167+1B57 22 74 5C     		LD	(	$5C74),HL	; save pointer in system variable T_ADDR
 8168+1B5A
 8169+1B5A 01 52 1B     		LD	BC,o1B52	; address: SCAN-LOOP
 8170+1B5D C5           		PUSH	BC		; is now pushed on stack as looping address.
 8171+1B5E 4F           		LD	C,A		; store parameter in C.
 8172+1B5F FE 20        		CP	$20		; is it greater than " "  ?
 8173+1B61 30 0C        		JR	NC,o1B6F	; forward to SEPARATOR to check that correct
 8174+1B63              					; separator appears in statement if so.
 8175+1B63
 8176+1B63 21 01 1C     		LD	HL,o1C01	; address: class-tbl.
 8177+1B66 06 00        		LD	B,$00		; prepare to index into the class table.
 8178+1B68 09           		ADD	HL,BC		; index to find displacement to routine.
 8179+1B69 4E           		LD	C,(HL)		; displacement to BC
 8180+1B6A 09           		ADD	HL,BC		; add to address the CLASS routine.
 8181+1B6B E5           		PUSH	HL		; push the address on the stack.
 8182+1B6C
 8183+1B6C DF           		RST	18H		; GET-CHAR - HL points to place in statement.
 8184+1B6D
 8185+1B6D 05           		DEC	B		; reset the zero flag - the initial state
 8186+1B6E              					; for all class routines.
 8187+1B6E
 8188+1B6E C9           		RET			; and make an indirect jump to routine
 8189+1B6F              					; and then SCAN-LOOP (also on stack).
 8190+1B6F
 8191+1B6F              ; Note. one of the class routines will eventually drop the return address
 8192+1B6F              ; off the stack breaking out of the above seemingly endless loop.
 8193+1B6F
 8194+1B6F              ; -----------------------
 8195+1B6F              ; THE 'SEPARATOR' ROUTINE
 8196+1B6F              ; -----------------------
 8197+1B6F              ;   This routine is called once to verify that the mandatory separator
 8198+1B6F              ;   present in the parameter table is also present in the correct
 8199+1B6F              ;   location following the command.  For example, the 'THEN' token after
 8200+1B6F              ;   the 'IF' token and expression.
 8201+1B6F
 8202+1B6F              ;; SEPARATOR
 8203+1B6F DF           o1B6F:		RST	18H		; GET-CHAR
 8204+1B70 B9           		CP	C		; does it match the character in C ?
 8205+1B71 C2 8A 1C     		JP	NZ,o1C8A	; jump forward to REPORT-C if not
 8206+1B74              					; 'Nonsense in BASIC'.
 8207+1B74
 8208+1B74 E7           		RST	20H		; NEXT-CHAR advance to next character
 8209+1B75 C9           		RET			; return.
 8210+1B76
 8211+1B76              ; ------------------------------
 8212+1B76              ; Come here after interpretation
 8213+1B76              ; ------------------------------
 8214+1B76              ;
 8215+1B76              ;
 8216+1B76
 8217+1B76              ;; STMT-RET
 8218+1B76 CD 54 1F     o1B76:		CALL	o1F54		; routine BREAK-KEY is tested after every
 8219+1B79              					; statement.
 8220+1B79 38 02        		JR	C,o1B7D		; step forward to STMT-R-1 if not pressed.
 8221+1B7B
 8222+1B7B              ;; REPORT-L
 8223+1B7B CF           o1B7B:		RST	08H		; ERROR-1
 8224+1B7C 14           		DB	$14		; Error Report: BREAK into program
 8225+1B7D
 8226+1B7D              ;; STMT-R-1
 8227+1B7D CD 3B 3A     o1B7D:		CALL	o3A3B
 8228+1B80 00           		NOP
 8229+1B81 20 71        		JR	NZ,o1BF4	; forward to STMT-NEXT if a program line.
 8230+1B83
 8231+1B83 2A 42 5C     		LD	HL,(	$5C42)	; fetch line number from NEWPPC
 8232+1B86 CB 7C        		BIT	7,H		; will be set if minus two - direct command(s)
 8233+1B88 28 14        		JR	Z,o1B9E		; forward to LINE-NEW if a jump is to be
 8234+1B8A              					; made to a new program line/statement.
 8235+1B8A
 8236+1B8A              ; --------------------
 8237+1B8A              ; Run a direct command
 8238+1B8A              ; --------------------
 8239+1B8A              ; A direct command is to be run or, if continuing from above,
 8240+1B8A              ; the next statement of a direct command is to be considered.
 8241+1B8A
 8242+1B8A              ;; LINE-RUN
 8243+1B8A 21 FE FF     o1B8A:		LD	HL,$FFFE	; The dummy value minus two
 8244+1B8D 22 45 5C     		LD	(	$5C45),HL	; is set/reset as line number in PPC.
 8245+1B90 2A 61 5C     		LD	HL,(	$5C61)	; point to end of line + 1 - WORKSP.
 8246+1B93 2B           		DEC	HL		; now point to $80 end-marker.
 8247+1B94 ED 5B 59 5C  		LD	DE,(	$5C59)	; address the start of line E_LINE.
 8248+1B98 1B           		DEC	DE		; now location before - for GET-CHAR.
 8249+1B99 3A 44 5C     		LD	A,(	$5C44 )	; load statement to A from NSPPC.
 8250+1B9C 18 33        		JR	o1BD1		; forward to NEXT-LINE.
 8251+1B9E
 8252+1B9E              ; ------------------------------
 8253+1B9E              ; Find start address of new line
 8254+1B9E              ; ------------------------------
 8255+1B9E              ; The branch was to here if a jump is to made to a new line number
 8256+1B9E              ; and statement.
 8257+1B9E              ; That is the previous statement was a GO TO, GO SUB, RUN, RETURN, NEXT etc..
 8258+1B9E
 8259+1B9E              ;; LINE-NEW
 8260+1B9E CD 6E 19     o1B9E:		CALL	o196E		; routine LINE-ADDR gets address of line
 8261+1BA1              					; returning zero flag set if line found.
 8262+1BA1 3A 44 5C     		LD	A,(	$5C44 )	; fetch new statement from NSPPC
 8263+1BA4 28 19        		JR	Z,o1BBF		; forward to LINE-USE if line matched.
 8264+1BA6
 8265+1BA6              ; continue as must be a direct command.
 8266+1BA6
 8267+1BA6 A7           		AND	A		; test statement which should be zero
 8268+1BA7 20 43        		JR	NZ,o1BEC	; forward to REPORT-N if not.
 8269+1BA9              					; 'Statement lost'
 8270+1BA9
 8271+1BA9              ;
 8272+1BA9
 8273+1BA9 47           		LD	B,A		; save statement in B.??
 8274+1BAA 7E           		LD	A,(HL)		; fetch high byte of line number.
 8275+1BAB E6 C0        		AND	$C0		; test if using direct command
 8276+1BAD              					; a program line is less than $3F
 8277+1BAD 78           		LD	A,B		; retrieve statement.
 8278+1BAE              					; (we can assume it is zero).
 8279+1BAE 28 0F        		JR	Z,o1BBF		; forward to LINE-USE if was a program line
 8280+1BB0
 8281+1BB0              ; alternativoly a direct statement has finished correctly.
 8282+1BB0
 8283+1BB0              ;; REPORT-0
 8284+1BB0 CF           o1BB0:		RST	08H		; ERROR-1
 8285+1BB1 FF           		DB	$FF		; Error Report: OK
 8286+1BB2
 8287+1BB2              ; -----------------
 8288+1BB2              ; THE 'REM' COMMAND
 8289+1BB2              ; -----------------
 8290+1BB2              ; The REM command routine.
 8291+1BB2              ; The return address STMT-RET is dropped and the rest of line ignored.
 8292+1BB2
 8293+1BB2              ;; REM
 8294+1BB2 C1           o1BB2:		POP	BC		; drop return address STMT-RET and
 8295+1BB3              					; continue ignoring rest of line.
 8296+1BB3
 8297+1BB3              ; ------------
 8298+1BB3              ; End of line?
 8299+1BB3              ; ------------
 8300+1BB3              ;
 8301+1BB3              ;
 8302+1BB3
 8303+1BB3              ;; LINE-END
 8304+1BB3 CD 30 25     o1BB3:		CALL	o2530		; routine SYNTAX-Z  (UNSTACK-Z?)
 8305+1BB6 C8           		RET	Z		; return if checking syntax.
 8306+1BB7
 8307+1BB7 2A 55 5C     		LD	HL,(	$5C55)	; fetch NXTLIN to HL.
 8308+1BBA 3E C0        		LD	A,$C0		; test against the
 8309+1BBC A6           		AND	(HL)		; system limit $3F.
 8310+1BBD C0           		RET	NZ		; return if more as must be
 8311+1BBE              					; end of program.
 8312+1BBE              					; (or direct command)
 8313+1BBE
 8314+1BBE AF           		XOR	A		; set statement to zero.
 8315+1BBF
 8316+1BBF              ; and continue to set up the next following line and then consider this new one.
 8317+1BBF
 8318+1BBF              ; ---------------------
 8319+1BBF              ; General line checking
 8320+1BBF              ; ---------------------
 8321+1BBF              ; The branch was here from LINE-NEW if BASIC is branching.
 8322+1BBF              ; or a continuation from above if dealing with a new sequential line.
 8323+1BBF              ; First make statement zero number one leaving others unaffected.
 8324+1BBF
 8325+1BBF              ;; LINE-USE
 8326+1BBF FE 01        o1BBF:		CP	$01		; will set carry if zero.
 8327+1BC1 CE 00        		ADC	A,$00		; add in any carry.
 8328+1BC3
 8329+1BC3 56           		LD	D,(HL)		; high byte of line number to D.
 8330+1BC4 23           		INC	HL		; advance pointer.
 8331+1BC5 5E           		LD	E,(HL)		; low byte of line number to E.
 8332+1BC6 ED 53 45 5C  		LD	(	$5C45),DE	; set system variable PPC.
 8333+1BCA
 8334+1BCA 23           		INC	HL		; advance pointer.
 8335+1BCB 5E           		LD	E,(HL)		; low byte of line length to E.
 8336+1BCC 23           		INC	HL		; advance pointer.
 8337+1BCD 56           		LD	D,(HL)		; high byte of line length to D.
 8338+1BCE
 8339+1BCE EB           		EX	DE,HL		; swap pointer to DE before
 8340+1BCF 19           		ADD	HL,DE		; adding to address the end of line.
 8341+1BD0 23           		INC	HL		; advance to start of next line.
 8342+1BD1
 8343+1BD1              ; -----------------------------
 8344+1BD1              ; Update NEXT LINE but consider
 8345+1BD1              ; previous line or edit line.
 8346+1BD1              ; -----------------------------
 8347+1BD1              ; The pointer will be the next line if continuing from above or to
 8348+1BD1              ; edit line end-marker ($80) if from LINE-RUN.
 8349+1BD1
 8350+1BD1              ;; NEXT-LINE
 8351+1BD1 22 55 5C     o1BD1:		LD	(	$5C55),HL	; store pointer in system variable NXTLIN
 8352+1BD4
 8353+1BD4 EB           		EX	DE,HL		; bring back pointer to previous or edit line
 8354+1BD5 22 5D 5C     		LD	(	$5C5D),HL	; and update CH_ADD with character address.
 8355+1BD8
 8356+1BD8 57           		LD	D,A		; store statement in D.
 8357+1BD9 1E 00        		LD	E,$00		; set E to zero to suppress token searching
 8358+1BDB              					; if EACH-STMT is to be called.
 8359+1BDB FD 36 0A FF  		LD	(IY+$0A),$FF	; set statement NSPPC to $FF signalling
 8360+1BDF              					; no jump to be made.
 8361+1BDF 15           		DEC	D		; decrement and test statement
 8362+1BE0 FD 72 0D     		LD	(IY+$0D),D	; set SUBPPC to decremented statement number.
 8363+1BE3 CA 28 1B     		JP	Z,o1B28		; to STMT-LOOP if result zero as statement is
 8364+1BE6              					; at start of line and address is known.
 8365+1BE6
 8366+1BE6 14           		INC	D		; else restore statement.
 8367+1BE7 CD 8B 19     		CALL	o198B		; routine EACH-STMT finds the D'th statement
 8368+1BEA              					; address as E does not contain a token.
 8369+1BEA 28 08        		JR	Z,o1BF4		; forward to STMT-NEXT if address found.
 8370+1BEC
 8371+1BEC              ;; REPORT-N
 8372+1BEC CF           o1BEC:		RST	08H		; ERROR-1
 8373+1BED 16           		DB	$16		; Error Report: Statement lost
 8374+1BEE
 8375+1BEE              ; -----------------
 8376+1BEE              ; End of statement?
 8377+1BEE              ; -----------------
 8378+1BEE              ; This combination of routines is called from 20 places when
 8379+1BEE              ; the end of a statement should have been reached and all preceding
 8380+1BEE              ; syntax is in order.
 8381+1BEE
 8382+1BEE              ;; CHECK-END
 8383+1BEE CD 30 25     o1BEE:		CALL	o2530		; routine SYNTAX-Z
 8384+1BF1 C0           		RET	NZ		; return immediately in runtime
 8385+1BF2
 8386+1BF2 C1           		POP	BC		; drop address of calling routine.
 8387+1BF3 C1           		POP	BC		; drop address STMT-RET.
 8388+1BF4              					; and continue to find next statement.
 8389+1BF4
 8390+1BF4              ; --------------------
 8391+1BF4              ; Go to next statement
 8392+1BF4              ; --------------------
 8393+1BF4              ; Acceptable characters at this point are carriage return and ":".
 8394+1BF4              ; If so go to next statement which in the first case will be on next line.
 8395+1BF4
 8396+1BF4              ;; STMT-NEXT
 8397+1BF4 CD 4B 3A     o1BF4:		CALL	o3A4B
 8398+1BF7 28 BA        		JR	Z,o1BB3		; back to LINE-END if so.
 8399+1BF9
 8400+1BF9 FE 3A        		CP	$3A		; is it ":" ?
 8401+1BFB CA 28 1B     		JP	Z,o1B28		; jump back to STMT-LOOP to consider
 8402+1BFE              					; further statements
 8403+1BFE
 8404+1BFE C3 8A 1C     		JP	o1C8A		; jump to REPORT-C with any other character
 8405+1C01              					; 'Nonsense in BASIC'.
 8406+1C01
 8407+1C01              ; Note. the two-byte sequence 'rst 08; DB     $0B' could replace the above jp.
 8408+1C01
 8409+1C01              ; -------------------
 8410+1C01              ; Command class table
 8411+1C01              ; -------------------
 8412+1C01              ;
 8413+1C01
 8414+1C01              ;; class-tbl
 8415+1C01 0F           o1C01:		DB	o1C10-$		; 0F offset to Address: CLASS-00
 8416+1C02 1D           		DB	o1C1F-$		; 1D offset to Address: CLASS-01
 8417+1C03 4B           		DB	o1C4E-$		; 4B offset to Address: CLASS-02
 8418+1C04 09           		DB	o1C0D-$		; 09 offset to Address: CLASS-03
 8419+1C05 67           		DB	o1C6C-$		; 67 offset to Address: CLASS-04
 8420+1C06 0B           		DB	o1C11-$		; 0B offset to Address: CLASS-05
 8421+1C07 7B           		DB	o1C82-$		; 7B offset to Address: CLASS-06
 8422+1C08 8E           		DB	o1C96-$		; 8E offset to Address: CLASS-07
 8423+1C09 71           		DB	o1C7A-$		; 71 offset to Address: CLASS-08
 8424+1C0A B4           		DB	o1CBE-$		; B4 offset to Address: CLASS-09
 8425+1C0B 81           		DB	o1C8C-$		; 81 offset to Address: CLASS-0A
 8426+1C0C CF           		DB	o1CDB-$		; CF offset to Address: CLASS-0B
 8427+1C0D
 8428+1C0D
 8429+1C0D              ; --------------------------------
 8430+1C0D              ; Command classes---00, 03, and 05
 8431+1C0D              ; --------------------------------
 8432+1C0D              ; class-03 e.g. RUN or RUN 200   ;  optional operand
 8433+1C0D              ; class-00 e.g. CONTINUE         ;  no operand
 8434+1C0D              ; class-05 e.g. PRINT            ;  variable syntax checked by routine
 8435+1C0D
 8436+1C0D              ;; CLASS-03
 8437+1C0D CD DE 1C     o1C0D:		CALL	o1CDE		; routine FETCH-NUM
 8438+1C10
 8439+1C10              ;; CLASS-00
 8440+1C10
 8441+1C10 BF           o1C10:		CP	A		; reset zero flag.
 8442+1C11
 8443+1C11              ; if entering here then all class routines are entered with zero reset.
 8444+1C11
 8445+1C11              ;; CLASS-05
 8446+1C11 C1           o1C11:		POP	BC		; drop address SCAN-LOOP.
 8447+1C12 CC EE 1B     		CALL	Z,o1BEE		; if zero set then call routine CHECK-END >>>
 8448+1C15              					; as should be no further characters.
 8449+1C15
 8450+1C15 EB           		EX	DE,HL		; save HL to DE.
 8451+1C16 2A 74 5C     		LD	HL,(	$5C74)	; fetch T_ADDR
 8452+1C19 4E           		LD	C,(HL)		; fetch low byte of routine
 8453+1C1A 23           		INC	HL		; address next.
 8454+1C1B 46           		LD	B,(HL)		; fetch high byte of routine.
 8455+1C1C EB           		EX	DE,HL		; restore HL from DE
 8456+1C1D C5           		PUSH	BC		; push the address
 8457+1C1E C9           		RET			; and make an indirect jump to the command.
 8458+1C1F
 8459+1C1F              ; --------------------------------
 8460+1C1F              ; Command classes---01, 02, and 04
 8461+1C1F              ; --------------------------------
 8462+1C1F              ; class-01  e.g. LET A = 2*3     ; a variable is reqd
 8463+1C1F
 8464+1C1F              ; This class routine is also called from INPUT and READ to find the
 8465+1C1F              ; destination variable for an assignment.
 8466+1C1F
 8467+1C1F              ;; CLASS-01
 8468+1C1F CD B2 28     o1C1F:		CALL	o28B2		; routine LOOK-VARS returns carry set if not
 8469+1C22              					; found in runtime.
 8470+1C22
 8471+1C22              ; ----------------------
 8472+1C22              ; Variable in assignment
 8473+1C22              ; ----------------------
 8474+1C22              ;
 8475+1C22              ;
 8476+1C22
 8477+1C22              ;; VAR-A-1
 8478+1C22 FD 36 37 00  o1C22:		LD	(IY+$37),$00	; set FLAGX to zero
 8479+1C26 30 08        		JR	NC,o1C30	; forward to VAR-A-2 if found or checking
 8480+1C28              					; syntax.
 8481+1C28
 8482+1C28 FD CB 37 CE  		SET	1,(IY+$37)	; FLAGX  - Signal a new variable
 8483+1C2C 20 18        		JR	NZ,o1C46	; to VAR-A-3 if not assigning to an array
 8484+1C2E              					; e.g. LET a$(3,3) = "X"
 8485+1C2E
 8486+1C2E              ;; REPORT-2
 8487+1C2E CF           o1C2E:		RST	08H		; ERROR-1
 8488+1C2F 01           		DB	$01		; Error Report: Variable not found
 8489+1C30
 8490+1C30              ;; VAR-A-2
 8491+1C30 CC 96 29     o1C30:		CALL	Z,o2996		; routine STK-VAR considers a subscript/slice
 8492+1C33 FD CB 01 76  		BIT	6,(IY+$01)	; test FLAGS  - Numeric or string result ?
 8493+1C37 20 0D        		JR	NZ,o1C46	; to VAR-A-3 if numeric
 8494+1C39
 8495+1C39 AF           		XOR	A		; default to array/slice - to be retained.
 8496+1C3A CD 30 25     		CALL	o2530		; routine SYNTAX-Z
 8497+1C3D C4 F1 2B     		CALL	NZ,o2BF1	; routine STK-FETCH is called in runtime
 8498+1C40              					; may overwrite A with 1.
 8499+1C40 21 71 5C     		LD	HL,	$5C71	; address system variable FLAGX
 8500+1C43 B6           		OR	(HL)		; set bit 0 if simple variable to be reclaimed
 8501+1C44 77           		LD	(HL),A		; update FLAGX
 8502+1C45 EB           		EX	DE,HL		; start of string/subscript to DE
 8503+1C46
 8504+1C46              ;; VAR-A-3
 8505+1C46 ED 43 72 5C  o1C46:		LD	(	$5C72),BC	; update STRLEN
 8506+1C4A 22 4D 5C     		LD	(	$5C4D),HL	; and DEST of assigned string.
 8507+1C4D C9           		RET			; return.
 8508+1C4E
 8509+1C4E              ; -------------------------------------------------
 8510+1C4E              ; class-02 e.g. LET a = 1 + 1   ; an expression must follow
 8511+1C4E
 8512+1C4E              ;; CLASS-02
 8513+1C4E C1           o1C4E:		POP	BC		; drop return address SCAN-LOOP
 8514+1C4F CD 56 1C     		CALL	o1C56		; routine VAL-FET-1 is called to check
 8515+1C52              					; expression and assign result in runtime
 8516+1C52 CD EE 1B     		CALL	o1BEE		; routine CHECK-END checks nothing else
 8517+1C55              					; is present in statement.
 8518+1C55 C9           		RET			; Return
 8519+1C56
 8520+1C56              ; -------------
 8521+1C56              ; Fetch a value
 8522+1C56              ; -------------
 8523+1C56              ;
 8524+1C56              ;
 8525+1C56
 8526+1C56              ;; VAL-FET-1
 8527+1C56 3A 3B 5C     o1C56:		LD	A,(	$5C3B)	; initial FLAGS to A
 8528+1C59
 8529+1C59              ;; VAL-FET-2
 8530+1C59 F5           o1C59:		PUSH	AF		; save A briefly
 8531+1C5A CD FB 24     		CALL	o24FB		; routine SCANNING evaluates expression.
 8532+1C5D F1           		POP	AF		; restore A
 8533+1C5E FD 56 01     		LD	D,(IY+$01)	; post-SCANNING FLAGS to D
 8534+1C61 AA           		XOR	D		; xor the two sets of flags
 8535+1C62 E6 40        		AND	$40		; pick up bit 6 of xored FLAGS should be zero
 8536+1C64 20 24        		JR	NZ,o1C8A	; forward to REPORT-C if not zero
 8537+1C66              					; 'Nonsense in BASIC' - results don't agree.
 8538+1C66
 8539+1C66 CB 7A        		BIT	7,D		; test FLAGS - is syntax being checked ?
 8540+1C68 C2 FF 2A     		JP	NZ,o2AFF	; jump forward to LET to make the assignment
 8541+1C6B              					; in runtime.
 8542+1C6B
 8543+1C6B C9           		RET			; but return from here if checking syntax.
 8544+1C6C
 8545+1C6C              ; ------------------
 8546+1C6C              ; Command class---04
 8547+1C6C              ; ------------------
 8548+1C6C              ; class-04 e.g. FOR i            ; a single character variable must follow
 8549+1C6C
 8550+1C6C              ;; CLASS-04
 8551+1C6C CD B2 28     o1C6C:		CALL	o28B2		; routine LOOK-VARS
 8552+1C6F F5           		PUSH	AF		; preserve flags.
 8553+1C70 79           		LD	A,C		; fetch type - should be 011xxxxx
 8554+1C71 F6 9F        		OR	$9F		; combine with 10011111.
 8555+1C73 3C           		INC	A		; test if now $FF by incrementing.
 8556+1C74 20 14        		JR	NZ,o1C8A	; forward to REPORT-C if result not zero.
 8557+1C76
 8558+1C76 F1           		POP	AF		; else restore flags.
 8559+1C77 18 A9        		JR	o1C22		; back to VAR-A-1
 8560+1C79
 8561+1C79
 8562+1C79              ; --------------------------------
 8563+1C79              ; Expect numeric/string expression
 8564+1C79              ; --------------------------------
 8565+1C79              ; This routine is used to get the two coordinates of STRING$, ATTR and POINT.
 8566+1C79              ; It is also called from PRINT-ITEM to get the two numeric expressions that
 8567+1C79              ; follow the AT ( in PRINT AT, INPUT AT).
 8568+1C79
 8569+1C79              ;; NEXT-2NUM
 8570+1C79 E7           o1C79:		RST	20H		; NEXT-CHAR advance past 'AT' or "(".
 8571+1C7A
 8572+1C7A              ; --------
 8573+1C7A              ; class-08 e.g. POKE 65535,2     ; two numeric expressions separated by comma
 8574+1C7A              ;; CLASS-08
 8575+1C7A              ;; EXPT-2NUM
 8576+1C7A CD 82 1C     o1C7A:		CALL	o1C82		; routine EXPT-1NUM is called for first
 8577+1C7D              					; numeric expression
 8578+1C7D FE 2C        		CP	$2C		; is character ',' ?
 8579+1C7F 20 09        		JR	NZ,o1C8A	; to REPORT-C if not required separator.
 8580+1C81              					; 'Nonsense in BASIC'.
 8581+1C81
 8582+1C81 E7           		RST	20H		; NEXT-CHAR
 8583+1C82
 8584+1C82              ; ->
 8585+1C82              ;  class-06  e.g. GOTO a*1000   ; a numeric expression must follow
 8586+1C82              ;; CLASS-06
 8587+1C82              ;; EXPT-1NUM
 8588+1C82 CD FB 24     o1C82:		CALL	o24FB		; routine SCANNING
 8589+1C85 FD CB 01 76  		BIT	6,(IY+$01)	; test FLAGS  - Numeric or string result ?
 8590+1C89 C0           		RET	NZ		; return if result is numeric.
 8591+1C8A
 8592+1C8A              ;; REPORT-C
 8593+1C8A CF           o1C8A:		RST	08H		; ERROR-1
 8594+1C8B 0B           		DB	$0B		; Error Report: Nonsense in BASIC
 8595+1C8C
 8596+1C8C              ; ---------------------------------------------------------------
 8597+1C8C              ; class-0A e.g. ERASE "????"    ; a string expression must follow.
 8598+1C8C              ;                               ; these only occur in unimplemented commands
 8599+1C8C              ;                               ; although the routine expt-exp is called
 8600+1C8C              ;                               ; from SAVE-ETC
 8601+1C8C
 8602+1C8C              ;; CLASS-0A
 8603+1C8C              ;; EXPT-EXP
 8604+1C8C CD FB 24     o1C8C:		CALL	o24FB		; routine SCANNING
 8605+1C8F FD CB 01 76  		BIT	6,(IY+$01)	; test FLAGS  - Numeric or string result ?
 8606+1C93 C8           		RET	Z		; return if string result.
 8607+1C94
 8608+1C94 18 F4        		JR	o1C8A		; back to REPORT-C if numeric.
 8609+1C96
 8610+1C96              ; ---------------------
 8611+1C96              ; Set permanent colours
 8612+1C96              ; class 07
 8613+1C96              ; ---------------------
 8614+1C96              ; class-07 e.g. PAPER 6          ; a single class for a collection of
 8615+1C96              ;                               ; similar commands. Clever.
 8616+1C96              ;
 8617+1C96              ; Note. these commands should ensure that current channel is 'S'
 8618+1C96
 8619+1C96              ;; CLASS-07
 8620+1C96 FD CB 01 7E  o1C96:		BIT	7,(IY+$01)	; test FLAGS - checking syntax only ?
 8621+1C9A              					; Note. there is a subroutine to do this.
 8622+1C9A FD CB 02 86  		RES	0,(IY+$02)	; update TV_FLAG - signal main screen in use
 8623+1C9E C4 4D 0D     		CALL	NZ,o0D4D	; routine TEMPS is called in runtime.
 8624+1CA1 F1           		POP	AF		; drop return address SCAN-LOOP
 8625+1CA2 3A 74 5C     		LD	A,(	$5C74)	; T_ADDR_lo to accumulator.
 8626+1CA5              					; points to '$07' entry + 1
 8627+1CA5              					; e.g. for INK points to $EC now
 8628+1CA5
 8629+1CA5              ; Note if you move alter the syntax table next line may have to be altered.
 8630+1CA5
 8631+1CA5              ; Note. For ZASM assembler replace following expression with SUB $13.
 8632+1CA5
 8633+1CA5 D6 13        o1CA5:		SUB	(o1AEB-$D8)%256	; convert $EB to $D8 ('INK') etc.
 8634+1CA7              					; ( is SUB $13 in standard ROM )
 8635+1CA7
 8636+1CA7 CD FC 21     		CALL	o21FC		; routine CO-TEMP-4
 8637+1CAA CD EE 1B     		CALL	o1BEE		; routine CHECK-END check that nothing else
 8638+1CAD              					; in statement.
 8639+1CAD
 8640+1CAD              ; return here in runtime.
 8641+1CAD
 8642+1CAD 2A 8F 5C     		LD	HL,(	$5C8F)	; pick up ATTR_T and MASK_T
 8643+1CB0 22 8D 5C     		LD	(	$5C8D),HL	; and store in ATTR_P and MASK_P
 8644+1CB3 21 91 5C     		LD	HL,	$5C91	; point to P_FLAG.
 8645+1CB6 7E           		LD	A,(HL)		; pick up in A
 8646+1CB7 07           		RLCA			; rotate to left
 8647+1CB8 AE           		XOR	(HL)		; combine with HL
 8648+1CB9 E6 AA        		AND	$AA		; 10101010
 8649+1CBB AE           		XOR	(HL)		; only permanent bits affected
 8650+1CBC 77           		LD	(HL),A		; reload into P_FLAG.
 8651+1CBD C9           		RET			; return.
 8652+1CBE
 8653+1CBE              ; ------------------
 8654+1CBE              ; Command class---09
 8655+1CBE              ; ------------------
 8656+1CBE              ; e.g. PLOT PAPER 0; 128,88     ; two coordinates preceded by optional
 8657+1CBE              ;                               ; embedded colour items.
 8658+1CBE              ;
 8659+1CBE              ; Note. this command should ensure that current channel is actually 'S'.
 8660+1CBE
 8661+1CBE              ;; CLASS-09
 8662+1CBE CD 30 25     o1CBE:		CALL	o2530		; routine SYNTAX-Z
 8663+1CC1 28 13        		JR	Z,o1CD6		; forward to CL-09-1 if checking syntax.
 8664+1CC3
 8665+1CC3 FD CB 02 86  		RES	0,(IY+$02)	; update TV_FLAG - signal main screen in use
 8666+1CC7 CD 4D 0D     		CALL	o0D4D		; routine TEMPS is called.
 8667+1CCA 21 90 5C     		LD	HL,	$5C90	; point to MASK_T
 8668+1CCD 7E           		LD	A,(HL)		; fetch mask to accumulator.
 8669+1CCE F6 F8        		OR	$F8		; or with 11111000 paper/bright/flash 8
 8670+1CD0 77           		LD	(HL),A		; mask back to MASK_T system variable.
 8671+1CD1 FD CB 57 B6  		RES	6,(IY+$57)	; reset P_FLAG  - signal NOT PAPER 9 ?
 8672+1CD5
 8673+1CD5 DF           		RST	18H		; GET-CHAR
 8674+1CD6
 8675+1CD6              ;; CL-09-1
 8676+1CD6 CD E2 21     o1CD6:		CALL	o21E2		; routine CO-TEMP-2 deals with any embedded
 8677+1CD9              					; colour items.
 8678+1CD9 18 9F        		JR	o1C7A		; exit via EXPT-2NUM to check for x,y.
 8679+1CDB
 8680+1CDB              ; Note. if either of the numeric expressions contain STR$ then the flag setting
 8681+1CDB              ; above will be undone when the channel flags are reset during STR$.
 8682+1CDB              ; e.g.
 8683+1CDB              ; 10 BORDER 3 : PLOT VAL STR$ 128, VAL STR$ 100
 8684+1CDB              ; credit John Elliott.
 8685+1CDB
 8686+1CDB              ; ------------------
 8687+1CDB              ; Command class---0B
 8688+1CDB              ; ------------------
 8689+1CDB              ; Again a single class for four commands.
 8690+1CDB              ; This command just jumps back to SAVE-ETC to handle the four tape commands.
 8691+1CDB              ; The routine itself works out which command has called it by examining the
 8692+1CDB              ; address in T_ADDR_lo. Note therefore that the syntax table has to be
 8693+1CDB              ; located where these and other sequential command addresses are not split
 8694+1CDB              ; over a page boundary.
 8695+1CDB
 8696+1CDB              ;; CLASS-0B
 8697+1CDB C3 05 06     o1CDB:		JP	o0605		; jump way back to SAVE-ETC
 8698+1CDE
 8699+1CDE              ; --------------
 8700+1CDE              ; Fetch a number
 8701+1CDE              ; --------------
 8702+1CDE              ; This routine is called from CLASS-03 when a command may be followed by
 8703+1CDE              ; an optional numeric expression e.g. RUN. If the end of statement has
 8704+1CDE              ; been reached then zero is used as the default.
 8705+1CDE              ; Also called from LIST-4.
 8706+1CDE
 8707+1CDE              ;; FETCH-NUM
 8708+1CDE FE 0D        o1CDE:		CP	$0D		; is character a carriage return ?
 8709+1CE0 28 04        		JR	Z,o1CE6		; forward to USE-ZERO if so
 8710+1CE2
 8711+1CE2 FE 3A        		CP	$3A		; is it ":" ?
 8712+1CE4 20 9C        		JR	NZ,o1C82	; forward to EXPT-1NUM if not.
 8713+1CE6              					; else continue and use zero.
 8714+1CE6
 8715+1CE6              ; ----------------
 8716+1CE6              ; Use zero routine
 8717+1CE6              ; ----------------
 8718+1CE6              ; This routine is called four times to place the value zero on the
 8719+1CE6              ; calculator stack as a default value in runtime.
 8720+1CE6
 8721+1CE6              ;; USE-ZERO
 8722+1CE6 CD 30 25     o1CE6:		CALL	o2530		; routine SYNTAX-Z  (UNSTACK-Z?)
 8723+1CE9 C8           		RET	Z		;
 8724+1CEA
 8725+1CEA EF           		RST	28H		; FP-CALC
 8726+1CEB A0           		DB	$A0		; stk-zero       ;0.
 8727+1CEC 38           		DB	$38		; end-calc
 8728+1CED
 8729+1CED C9           		RET			; return.
 8730+1CEE
 8731+1CEE              ; -------------------
 8732+1CEE              ; Handle STOP command
 8733+1CEE              ; -------------------
 8734+1CEE              ; Command Syntax: STOP
 8735+1CEE              ; One of the shortest and least used commands. As with 'OK' not an error.
 8736+1CEE
 8737+1CEE              ;; REPORT-9
 8738+1CEE              ;; STOP
 8739+1CEE CF           o1CEE:		RST	08H		; ERROR-1
 8740+1CEF 08           		DB	$08		; Error Report: STOP statement
 8741+1CF0
 8742+1CF0              ; -----------------
 8743+1CF0              ; Handle IF command
 8744+1CF0              ; -----------------
 8745+1CF0              ; e.g. IF score>100 THEN PRINT "You Win"
 8746+1CF0              ; The parser has already checked the expression the result of which is on
 8747+1CF0              ; the calculator stack. The presence of the 'THEN' separator has also been
 8748+1CF0              ; checked and CH-ADD points to the command after THEN.
 8749+1CF0              ;
 8750+1CF0
 8751+1CF0              ;; IF
 8752+1CF0 C1           o1CF0:		POP	BC		; drop return address - STMT-RET
 8753+1CF1 CD 30 25     		CALL	o2530		; routine SYNTAX-Z
 8754+1CF4 28 0A        		JR	Z,o1D00		; forward to IF-1 if checking syntax
 8755+1CF6              					; to check syntax of PRINT "You Win"
 8756+1CF6
 8757+1CF6
 8758+1CF6 EF           		RST	28H		; FP-CALC    score>100 (1=TRUE 0=FALSE)
 8759+1CF7 02           		DB	$02		; delete      .
 8760+1CF8 38           		DB	$38		; end-calc
 8761+1CF9
 8762+1CF9 EB           		EX	DE,HL		; make HL point to deleted value
 8763+1CFA CD E9 34     		CALL	o34E9		; routine TEST-ZERO
 8764+1CFD DA B3 1B     		JP	C,o1BB3		; jump to LINE-END if FALSE (0)
 8765+1D00
 8766+1D00              ;; IF-1
 8767+1D00 C3 29 1B     o1D00:		JP	o1B29		; to STMT-L-1, if true (1) to execute command
 8768+1D03              					; after 'THEN' token.
 8769+1D03
 8770+1D03              ; ------------------
 8771+1D03              ; Handle FOR command
 8772+1D03              ; ------------------
 8773+1D03              ; e.g. FOR i = 0 TO 1 STEP 0.1
 8774+1D03              ; Using the syntax tables, the parser has already checked for a start and
 8775+1D03              ; limit value and also for the intervening separator.
 8776+1D03              ; the two values v,l are on the calculator stack.
 8777+1D03              ; CLASS-04 has also checked the variable and the name is in STRLEN_lo.
 8778+1D03              ; The routine begins by checking for an optional STEP.
 8779+1D03
 8780+1D03              ;; FOR
 8781+1D03 FE CD        o1D03:		CP	$CD		; is there a 'STEP' ?
 8782+1D05 20 09        		JR	NZ,o1D10	; to F-USE-1 if not to use 1 as default.
 8783+1D07
 8784+1D07 E7           		RST	20H		; NEXT-CHAR
 8785+1D08 CD 82 1C     		CALL	o1C82		; routine EXPT-1NUM
 8786+1D0B CD EE 1B     		CALL	o1BEE		; routine CHECK-END
 8787+1D0E 18 06        		JR	o1D16		; to F-REORDER
 8788+1D10
 8789+1D10              ; ---
 8790+1D10
 8791+1D10              ;; F-USE-1
 8792+1D10 CD EE 1B     o1D10:		CALL	o1BEE		; routine CHECK-END
 8793+1D13
 8794+1D13 EF           		RST	28H		; FP-CALC      v,l.
 8795+1D14 A1           		DB	$A1		; stk-one       v,l,1=s.
 8796+1D15 38           		DB	$38		; end-calc
 8797+1D16
 8798+1D16
 8799+1D16              ;; F-REORDER
 8800+1D16 EF           o1D16:		RST	28H		; FP-CALC       v,l,s.
 8801+1D17 C0           		DB	$C0		; st-mem-0       v,l,s.
 8802+1D18 02           		DB	$02		; delete         v,l.
 8803+1D19 01           		DB	$01		; exchange       l,v.
 8804+1D1A E0           		DB	$E0		; get-mem-0      l,v,s.
 8805+1D1B 01           		DB	$01		; exchange       l,s,v.
 8806+1D1C 38           		DB	$38		; end-calc
 8807+1D1D
 8808+1D1D CD FF 2A     		CALL	o2AFF		; routine LET assigns the initial value v to
 8809+1D20              					; the variable altering type if necessary.
 8810+1D20 22 68 5C     		LD	(	$5C68),HL	; The system variable MEM is made to point to
 8811+1D23              					; the variable instead of its normal
 8812+1D23              					; location MEMBOT
 8813+1D23 2B           		DEC	HL		; point to single-character name
 8814+1D24 7E           		LD	A,(HL)		; fetch name
 8815+1D25 CB FE        		SET	7,(HL)		; set bit 7 at location
 8816+1D27 01 06 00     		LD	BC,$0006	; add six to HL
 8817+1D2A 09           		ADD	HL,BC		; to address where limit should be.
 8818+1D2B 07           		RLCA			; test bit 7 of original name.
 8819+1D2C 38 06        		JR	C,o1D34		; forward to F-L-S if already a FOR/NEXT
 8820+1D2E              					; variable
 8821+1D2E
 8822+1D2E 0E 0D        		LD	C,$0D		; otherwise an additional 13 bytes are needed.
 8823+1D30              					; 5 for each value, two for line number and
 8824+1D30              					; 1 byte for looping statement.
 8825+1D30 CD 55 16     		CALL	o1655		; routine MAKE-ROOM creates them.
 8826+1D33 23           		INC	HL		; make HL address limit.
 8827+1D34
 8828+1D34              ;; F-L-S
 8829+1D34 E5           o1D34:		PUSH	HL		; save position.
 8830+1D35
 8831+1D35 EF           		RST	28H		; FP-CALC         l,s.
 8832+1D36 02           		DB	$02		; delete           l.
 8833+1D37 02           		DB	$02		; delete           .
 8834+1D38 38           		DB	$38		; end-calc
 8835+1D39              					; DE points to STKEND, l.
 8836+1D39
 8837+1D39 E1           		POP	HL		; restore variable position
 8838+1D3A EB           		EX	DE,HL		; swap pointers
 8839+1D3B 0E 0A        		LD	C,$0A		; ten bytes to move
 8840+1D3D ED B0        		LDIR			; Copy 'deleted' values to variable.
 8841+1D3F 2A 45 5C     		LD	HL,(	$5C45)	; Load with current line number from PPC
 8842+1D42 EB           		EX	DE,HL		; exchange pointers.
 8843+1D43 73           		LD	(HL),E		; save the looping line
 8844+1D44 23           		INC	HL		; in the next
 8845+1D45 72           		LD	(HL),D		; two locations.
 8846+1D46 FD 56 0D     		LD	D,(IY+$0D)	; fetch statement from SUBPPC system variable.
 8847+1D49 14           		INC	D		; increment statement.
 8848+1D4A 23           		INC	HL		; and pointer
 8849+1D4B 72           		LD	(HL),D		; and store the looping statement.
 8850+1D4C              					;
 8851+1D4C CD DA 1D     		CALL	o1DDA		; routine NEXT-LOOP considers an initial
 8852+1D4F D0           		RET	NC		; iteration. Return to STMT-RET if a loop is
 8853+1D50              					; possible to execute next statement.
 8854+1D50
 8855+1D50              ; no loop is possible so execution continues after the matching 'NEXT'
 8856+1D50
 8857+1D50 FD 46 38     		LD	B,(IY+$38)	; get single-character name from STRLEN_lo
 8858+1D53 2A 45 5C     		LD	HL,(	$5C45)	; get the current line from PPC
 8859+1D56 22 42 5C     		LD	(	$5C42),HL	; and store it in NEWPPC
 8860+1D59 3A 47 5C     		LD	A,(	$5C47)	; fetch current statement from SUBPPC
 8861+1D5C ED 44        		NEG			; Negate as counter decrements from zero
 8862+1D5E              					; initially and we are in the middle of a
 8863+1D5E              					; line.
 8864+1D5E 57           		LD	D,A		; Store result in D.
 8865+1D5F 2A 5D 5C     		LD	HL,(	$5C5D)	; get current address from CH_ADD
 8866+1D62 1E F3        		LD	E,$F3		; search will be for token 'NEXT'
 8867+1D64
 8868+1D64              ;; F-LOOP
 8869+1D64 C5           o1D64:		PUSH	BC		; save variable name.
 8870+1D65 ED 4B 55 5C  		LD	BC,(	$5C55)	; fetch NXTLIN
 8871+1D69 CD 86 1D     		CALL	o1D86		; routine LOOK-PROG searches for 'NEXT' token.
 8872+1D6C ED 43 55 5C  		LD	(	$5C55),BC	; update NXTLIN
 8873+1D70 C1           		POP	BC		; and fetch the letter
 8874+1D71 38 11        		JR	C,o1D84		; forward to REPORT-I if the end of program
 8875+1D73              					; was reached by LOOK-PROG.
 8876+1D73              					; 'FOR without NEXT'
 8877+1D73
 8878+1D73 E7           		RST	20H		; NEXT-CHAR fetches character after NEXT
 8879+1D74 F6 20        		OR	$20		; ensure it is upper-case.
 8880+1D76 B8           		CP	B		; compare with FOR variable name
 8881+1D77 28 03        		JR	Z,o1D7C		; forward to F-FOUND if it matches.
 8882+1D79
 8883+1D79              ; but if no match i.e. nested FOR/NEXT loops then continue search.
 8884+1D79
 8885+1D79 E7           		RST	20H		; NEXT-CHAR
 8886+1D7A 18 E8        		JR	o1D64		; back to F-LOOP
 8887+1D7C
 8888+1D7C              ; ---
 8889+1D7C
 8890+1D7C
 8891+1D7C              ;; F-FOUND
 8892+1D7C E7           o1D7C:		RST	20H		; NEXT-CHAR
 8893+1D7D 3E 01        		LD	A,$01		; subtract the negated counter from 1
 8894+1D7F 92           		SUB	D		; to give the statement after the NEXT
 8895+1D80 32 44 5C     		LD	(	$5C44 ),A	; set system variable NSPPC
 8896+1D83 C9           		RET			; return to STMT-RET to branch to new
 8897+1D84              					; line and statement. ->
 8898+1D84              					; ---
 8899+1D84
 8900+1D84              ;; REPORT-I
 8901+1D84 CF           o1D84:		RST	08H		; ERROR-1
 8902+1D85 11           		DB	$11		; Error Report: FOR without NEXT
 8903+1D86
 8904+1D86              ; ---------
 8905+1D86              ; LOOK-PROG
 8906+1D86              ; ---------
 8907+1D86              ; Find DATA, DEF FN or NEXT.
 8908+1D86              ; This routine searches the program area for one of the above three keywords.
 8909+1D86              ; On entry, HL points to start of search area.
 8910+1D86              ; The token is in E, and D holds a statement count, decremented from zero.
 8911+1D86
 8912+1D86              ;; LOOK-PROG
 8913+1D86 7E           o1D86:		LD	A,(HL)		; fetch current character
 8914+1D87 FE 3A        		CP	$3A		; is it ":" a statement separator ?
 8915+1D89 28 18        		JR	Z,o1DA3		; forward to LOOK-P-2 if so.
 8916+1D8B
 8917+1D8B              ; The starting point was PROG - 1 or the end of a line.
 8918+1D8B
 8919+1D8B              ;; LOOK-P-1
 8920+1D8B 23           o1D8B:		INC	HL		; increment pointer to address
 8921+1D8C 7E           		LD	A,(HL)		; the high byte of line number
 8922+1D8D E6 C0        		AND	$C0		; test for program end marker $80 or a
 8923+1D8F              					; variable
 8924+1D8F 37           		SCF			; Set Carry Flag
 8925+1D90 C0           		RET	NZ		; return with carry set if at end
 8926+1D91              					; of program.           ->
 8927+1D91
 8928+1D91 46           		LD	B,(HL)		; high byte of line number to B
 8929+1D92 23           		INC	HL		;
 8930+1D93 4E           		LD	C,(HL)		; low byte to C.
 8931+1D94 ED 43 42 5C  		LD	(	$5C42),BC	; set system variable NEWPPC.
 8932+1D98 23           		INC	HL		;
 8933+1D99 4E           		LD	C,(HL)		; low byte of line length to C.
 8934+1D9A 23           		INC	HL		;
 8935+1D9B 46           		LD	B,(HL)		; high byte to B.
 8936+1D9C E5           		PUSH	HL		; save address
 8937+1D9D 09           		ADD	HL,BC		; add length to position.
 8938+1D9E 44           		LD	B,H		; and save result
 8939+1D9F 4D           		LD	C,L		; in BC.
 8940+1DA0 E1           		POP	HL		; restore address.
 8941+1DA1 16 00        		LD	D,$00		; initialize statement counter to zero.
 8942+1DA3
 8943+1DA3              ;; LOOK-P-2
 8944+1DA3 C5           o1DA3:		PUSH	BC		; save address of next line
 8945+1DA4 CD 8B 19     		CALL	o198B		; routine EACH-STMT searches current line.
 8946+1DA7 C1           		POP	BC		; restore address.
 8947+1DA8 D0           		RET	NC		; return if match was found. ->
 8948+1DA9
 8949+1DA9 18 E0        		JR	o1D8B		; back to LOOK-P-1 for next line.
 8950+1DAB
 8951+1DAB              ; -------------------
 8952+1DAB              ; Handle NEXT command
 8953+1DAB              ; -------------------
 8954+1DAB              ; e.g. NEXT i
 8955+1DAB              ; The parameter tables have already evaluated the presence of a variable
 8956+1DAB
 8957+1DAB              ;; NEXT
 8958+1DAB FD CB 37 4E  o1DAB:		BIT	1,(IY+$37)	; test FLAGX - handling a new variable ?
 8959+1DAF C2 2E 1C     		JP	NZ,o1C2E	; jump back to REPORT-2 if so
 8960+1DB2              					; 'Variable not found'
 8961+1DB2
 8962+1DB2              ; now test if found variable is a simple variable uninitialized by a FOR.
 8963+1DB2
 8964+1DB2 2A 4D 5C     		LD	HL,(	$5C4D)	; load address of variable from DEST
 8965+1DB5 CB 7E        		BIT	7,(HL)		; is it correct type ?
 8966+1DB7 28 1F        		JR	Z,o1DD8		; forward to REPORT-1 if not
 8967+1DB9              					; 'NEXT without FOR'
 8968+1DB9
 8969+1DB9 23           		INC	HL		; step past variable name
 8970+1DBA 22 68 5C     		LD	(	$5C68),HL	; and set MEM to point to three 5-byte values
 8971+1DBD              					; value, limit, step.
 8972+1DBD
 8973+1DBD EF           		RST	28H		; FP-CALC     add step and re-store
 8974+1DBE E0           		DB	$E0		; get-mem-0    v.
 8975+1DBF E2           		DB	$E2		; get-mem-2    v,s.
 8976+1DC0 0F           		DB	$0F		; addition     v+s.
 8977+1DC1 C0           		DB	$C0		; st-mem-0     v+s.
 8978+1DC2 02           		DB	$02		; delete       .
 8979+1DC3 38           		DB	$38		; end-calc
 8980+1DC4
 8981+1DC4 CD DA 1D     		CALL	o1DDA		; routine NEXT-LOOP tests against limit.
 8982+1DC7 D8           		RET	C		; return if no more iterations possible.
 8983+1DC8
 8984+1DC8 2A 68 5C     		LD	HL,(	$5C68)	; find start of variable contents from MEM.
 8985+1DCB 11 0F 00     		LD	DE,$000F	; add 3*5 to
 8986+1DCE 19           		ADD	HL,DE		; address the looping line number
 8987+1DCF 5E           		LD	E,(HL)		; low byte to E
 8988+1DD0 23           		INC	HL		;
 8989+1DD1 56           		LD	D,(HL)		; high byte to D
 8990+1DD2 23           		INC	HL		; address looping statement
 8991+1DD3 66           		LD	H,(HL)		; and store in H
 8992+1DD4 EB           		EX	DE,HL		; swap registers
 8993+1DD5 C3 73 1E     		JP	o1E73		; exit via GO-TO-2 to execute another loop.
 8994+1DD8
 8995+1DD8              ; ---
 8996+1DD8
 8997+1DD8              ;; REPORT-1
 8998+1DD8 CF           o1DD8:		RST	08H		; ERROR-1
 8999+1DD9 00           		DB	$00		; Error Report: NEXT without FOR
 9000+1DDA
 9001+1DDA
 9002+1DDA              ; -----------------
 9003+1DDA              ; Perform NEXT loop
 9004+1DDA              ; -----------------
 9005+1DDA              ; This routine is called from the FOR command to test for an initial
 9006+1DDA              ; iteration and from the NEXT command to test for all subsequent iterations.
 9007+1DDA              ; the system variable MEM addresses the variable's contents which, in the
 9008+1DDA              ; latter case, have had the step, possibly negative, added to the value.
 9009+1DDA
 9010+1DDA              ;; NEXT-LOOP
 9011+1DDA EF           o1DDA:		RST	28H		; FP-CALC
 9012+1DDB E1           		DB	$E1		; get-mem-1        l.
 9013+1DDC E0           		DB	$E0		; get-mem-0        l,v.
 9014+1DDD E2           		DB	$E2		; get-mem-2        l,v,s.
 9015+1DDE 36           		DB	$36		; less-0           l,v,(1/0) negative step ?
 9016+1DDF 00           		DB	$00		; jump-true        l,v.(1/0)
 9017+1DE0
 9018+1DE0 02           		DB	$02		; to o1DE2, NEXT-1 if step negative
 9019+1DE1
 9020+1DE1 01           		DB	$01		; exchange         v,l.
 9021+1DE2
 9022+1DE2              ;; NEXT-1
 9023+1DE2 03           o1DE2:		DB	$03		; subtract         l-v OR v-l.
 9024+1DE3 37           		DB	$37		; greater-0        (1/0)
 9025+1DE4 00           		DB	$00		; jump-true        .
 9026+1DE5
 9027+1DE5 04           		DB	$04		; to o1DE9, NEXT-2 if no more iterations.
 9028+1DE6
 9029+1DE6 38           		DB	$38		; end-calc         .
 9030+1DE7
 9031+1DE7 A7           		AND	A		; clear carry flag signalling another loop.
 9032+1DE8 C9           		RET			; return
 9033+1DE9
 9034+1DE9              ; ---
 9035+1DE9
 9036+1DE9              ;; NEXT-2
 9037+1DE9 38           o1DE9:		DB	$38		; end-calc         .
 9038+1DEA
 9039+1DEA 37           		SCF			; set carry flag signalling looping exhausted.
 9040+1DEB C9           		RET			; return
 9041+1DEC
 9042+1DEC
 9043+1DEC              ; -------------------
 9044+1DEC              ; Handle READ command
 9045+1DEC              ; -------------------
 9046+1DEC              ; e.g. READ a, b$, c$(1000 TO 3000)
 9047+1DEC              ; A list of comma-separated variables is assigned from a list of
 9048+1DEC              ; comma-separated expressions.
 9049+1DEC              ; As it moves along the first list, the character address CH_ADD is stored
 9050+1DEC              ; in X_PTR while CH_ADD is used to read the second list.
 9051+1DEC
 9052+1DEC              ;; READ-3
 9053+1DEC E7           o1DEC:		RST	20H		; NEXT-CHAR
 9054+1DED
 9055+1DED              ; -> Entry point.
 9056+1DED              ;; READ
 9057+1DED CD 1F 1C     o1DED:		CALL	o1C1F		; routine CLASS-01 checks variable.
 9058+1DF0 CD 30 25     		CALL	o2530		; routine SYNTAX-Z
 9059+1DF3 28 29        		JR	Z,o1E1E		; forward to READ-2 if checking syntax
 9060+1DF5
 9061+1DF5
 9062+1DF5 DF           		RST	18H		; GET-CHAR
 9063+1DF6 22 5F 5C     		LD	(	$5C5F),HL	; save character position in X_PTR.
 9064+1DF9 2A 57 5C     		LD	HL,(	$5C57)	; load HL with Data Address DATADD, which is
 9065+1DFC              					; the start of the program or the address
 9066+1DFC              					; after the last expression that was read or
 9067+1DFC              					; the address of the line number of the
 9068+1DFC              					; last RESTORE command.
 9069+1DFC 7E           		LD	A,(HL)		; fetch character
 9070+1DFD FE 2C        		CP	$2C		; is it a comma ?
 9071+1DFF 28 09        		JR	Z,o1E0A		; forward to READ-1 if so.
 9072+1E01
 9073+1E01              ; else all data in this statement has been read so look for next DATA token
 9074+1E01
 9075+1E01 1E E4        		LD	E,$E4		; token 'DATA'
 9076+1E03 CD 86 1D     		CALL	o1D86		; routine LOOK-PROG
 9077+1E06 30 02        		JR	NC,o1E0A	; forward to READ-1 if DATA found
 9078+1E08
 9079+1E08              ; else report the error.
 9080+1E08
 9081+1E08              ;; REPORT-E
 9082+1E08 CF           o1E08:		RST	08H		; ERROR-1
 9083+1E09 0D           		DB	$0D		; Error Report: Out of DATA
 9084+1E0A
 9085+1E0A              ;; READ-1
 9086+1E0A CD 77 00     o1E0A:		CALL	o0077		; routine TEMP-PTR1 advances updating CH_ADD
 9087+1E0D              					; with new DATADD position.
 9088+1E0D CD 56 1C     		CALL	o1C56		; routine VAL-FET-1 assigns value to variable
 9089+1E10              					; checking type match and adjusting CH_ADD.
 9090+1E10
 9091+1E10 DF           		RST	18H		; GET-CHAR fetches adjusted character position
 9092+1E11 22 57 5C     		LD	(	$5C57),HL	; store back in DATADD
 9093+1E14 2A 5F 5C     		LD	HL,(	$5C5F)	; fetch X_PTR  the original READ CH_ADD
 9094+1E17 FD 36 26 00  		LD	(IY+$26),$00	; now nullify X_PTR_hi
 9095+1E1B CD 78 00     		CALL	o0078		; routine TEMP-PTR2 restores READ CH_ADD
 9096+1E1E
 9097+1E1E              ;; READ-2
 9098+1E1E DF           o1E1E:		RST	18H		; GET-CHAR
 9099+1E1F FE 2C        		CP	$2C		; is it ',' indicating more variables to read ?
 9100+1E21 28 C9        		JR	Z,o1DEC		; back to READ-3 if so
 9101+1E23
 9102+1E23 CD EE 1B     		CALL	o1BEE		; routine CHECK-END
 9103+1E26 C9           		RET			; return from here in runtime to STMT-RET.
 9104+1E27
 9105+1E27              ; -------------------
 9106+1E27              ; Handle DATA command
 9107+1E27              ; -------------------
 9108+1E27              ; In runtime this 'command' is passed by but the syntax is checked when such
 9109+1E27              ; a statement is found while parsing a line.
 9110+1E27              ; e.g. DATA 1, 2, "text", score-1, a$(location, room, object), FN r(49),
 9111+1E27              ;         wages - tax, TRUE, The meaning of life
 9112+1E27
 9113+1E27              ;; DATA
 9114+1E27 CD 30 25     o1E27:		CALL	o2530		; routine SYNTAX-Z to check status
 9115+1E2A 20 0B        		JR	NZ,o1E37	; forward to DATA-2 if in runtime
 9116+1E2C
 9117+1E2C              ;; DATA-1
 9118+1E2C CD FB 24     o1E2C:		CALL	o24FB		; routine SCANNING to check syntax of
 9119+1E2F              					; expression
 9120+1E2F FE 2C        		CP	$2C		; is it a comma ?
 9121+1E31 C4 EE 1B     		CALL	NZ,o1BEE	; routine CHECK-END checks that statement
 9122+1E34              					; is complete. Will make an early exit if
 9123+1E34              					; so. >>>
 9124+1E34 E7           		RST	20H		; NEXT-CHAR
 9125+1E35 18 F5        		JR	o1E2C		; back to DATA-1
 9126+1E37
 9127+1E37              ; ---
 9128+1E37
 9129+1E37              ;; DATA-2
 9130+1E37 3E E4        o1E37:		LD	A,$E4		; set token to 'DATA' and continue into
 9131+1E39              					; the PASS-BY routine.
 9132+1E39
 9133+1E39
 9134+1E39              ; ----------------------------------
 9135+1E39              ; Check statement for DATA or DEF FN
 9136+1E39              ; ----------------------------------
 9137+1E39              ; This routine is used to backtrack to a command token and then
 9138+1E39              ; forward to the next statement in runtime.
 9139+1E39
 9140+1E39              ;; PASS-BY
 9141+1E39 47           o1E39:		LD	B,A		; Give BC enough space to find token.
 9142+1E3A ED B9        		CPDR			; Compare decrement and repeat. (Only use).
 9143+1E3C              					; Work backwards till keyword is found which
 9144+1E3C              					; is start of statement before any quotes.
 9145+1E3C              					; HL points to location before keyword.
 9146+1E3C 11 00 02     		LD	DE,$0200	; count 1+1 statements, dummy value in E to
 9147+1E3F              					; inhibit searching for a token.
 9148+1E3F C3 8B 19     		JP	o198B		; to EACH-STMT to find next statement
 9149+1E42
 9150+1E42              ; -----------------------------------------------------------------------
 9151+1E42              ; A General Note on Invalid Line Numbers.
 9152+1E42              ; =======================================
 9153+1E42              ; One of the revolutionary concepts of Sinclair BASIC was that it supported
 9154+1E42              ; virtual line numbers. That is the destination of a GO TO, RESTORE etc. need
 9155+1E42              ; not exist. It could be a point before or after an actual line number.
 9156+1E42              ; Zero suffices for a before but the after should logically be infinity.
 9157+1E42              ; Since the maximum actual line limit is 9999 then the system limit, 16383
 9158+1E42              ; when variables kick in, would serve fine as a virtual end point.
 9159+1E42              ; However, ironically, only the LOAD command gets it right. It will not
 9160+1E42              ; autostart a program that has been saved with a line higher than 16383.
 9161+1E42              ; All the other commands deal with the limit unsatisfactorily.
 9162+1E42              ; LIST, RUN, GO TO, GO SUB and RESTORE have problems and the latter may
 9163+1E42              ; crash the machine when supplied with an inappropriate virtual line number.
 9164+1E42              ; This is puzzling as very careful consideration must have been given to
 9165+1E42              ; this point when the new variable types were allocated their masks and also
 9166+1E42              ; when the routine NEXT-ONE was successfully re-written to reflect this.
 9167+1E42              ; An enigma.
 9168+1E42              ; -------------------------------------------------------------------------
 9169+1E42
 9170+1E42              ; ----------------------
 9171+1E42              ; Handle RESTORE command
 9172+1E42              ; ----------------------
 9173+1E42              ; The restore command sets the system variable for the data address to
 9174+1E42              ; point to the location before the supplied line number or first line
 9175+1E42              ; thereafter.
 9176+1E42              ; This alters the position where subsequent READ commands look for data.
 9177+1E42              ; Note. If supplied with inappropriate high numbers the system may crash
 9178+1E42              ; in the LINE-ADDR routine as it will pass the program/variables end-marker
 9179+1E42              ; and then lose control of what it is looking for - variable or line number.
 9180+1E42              ; - observation, Steven Vickers, 1984, Pitman.
 9181+1E42
 9182+1E42              ;; RESTORE
 9183+1E42 CD 99 1E     o1E42:		CALL	o1E99		; routine FIND-INT2 puts integer in BC.
 9184+1E45              					; Note. B should be checked against limit $3F
 9185+1E45              					; and an error generated if higher.
 9186+1E45
 9187+1E45              ; this entry point is used from RUN command with BC holding zero
 9188+1E45
 9189+1E45              ;; REST-RUN
 9190+1E45 60           o1E45:		LD	H,B		; transfer the line
 9191+1E46 69           		LD	L,C		; number to the HL register.
 9192+1E47 CD 6E 19     		CALL	o196E		; routine LINE-ADDR to fetch the address.
 9193+1E4A 2B           		DEC	HL		; point to the location before the line.
 9194+1E4B 22 57 5C     		LD	(	$5C57),HL	; update system variable DATADD.
 9195+1E4E C9           		RET			; return to STMT-RET (or RUN)
 9196+1E4F
 9197+1E4F              ; ------------------------
 9198+1E4F              ; Handle RANDOMIZE command
 9199+1E4F              ; ------------------------
 9200+1E4F              ; This command sets the SEED for the RND function to a fixed value.
 9201+1E4F              ; With the parameter zero, a random start point is used depending on
 9202+1E4F              ; how long the computer has been switched on.
 9203+1E4F
 9204+1E4F              ;; RANDOMIZE
 9205+1E4F CD 99 1E     o1E4F:		CALL	o1E99		; routine FIND-INT2 puts parameter in BC.
 9206+1E52 78           		LD	A,B		; test this
 9207+1E53 B1           		OR	C		; for zero.
 9208+1E54 20 04        		JR	NZ,o1E5A	; forward to RAND-1 if not zero.
 9209+1E56
 9210+1E56 ED 4B 78 5C  		LD	BC,(	$5C78)	; use the lower two bytes at FRAMES1.
 9211+1E5A
 9212+1E5A              ;; RAND-1
 9213+1E5A ED 43 76 5C  o1E5A:		LD	(	$5C76),BC	; place in SEED system variable.
 9214+1E5E C9           		RET			; return to STMT-RET
 9215+1E5F
 9216+1E5F              ; -----------------------
 9217+1E5F              ; Handle CONTINUE command
 9218+1E5F              ; -----------------------
 9219+1E5F              ; The CONTINUE command transfers the OLD (but incremented) values of
 9220+1E5F              ; line number and statement to the equivalent "NEW VALUE" system variables
 9221+1E5F              ; by using the last part of GO TO and exits indirectly to STMT-RET.
 9222+1E5F
 9223+1E5F              ;; CONTINUE
 9224+1E5F 2A 6E 5C     o1E5F:		LD	HL,(	$5C6E)	; fetch OLDPPC line number.
 9225+1E62 FD 56 36     		LD	D,(IY+$36)	; fetch OSPPC statement.
 9226+1E65 18 0C        		JR	o1E73		; forward to GO-TO-2
 9227+1E67
 9228+1E67              ; --------------------
 9229+1E67              ; Handle GO TO command
 9230+1E67              ; --------------------
 9231+1E67              ; The GO TO command routine is also called by GO SUB and RUN routines
 9232+1E67              ; to evaluate the parameters of both commands.
 9233+1E67              ; It updates the system variables used to fetch the next line/statement.
 9234+1E67              ; It is at STMT-RET that the actual change in control takes place.
 9235+1E67              ; Unlike some BASICs the line number need not exist.
 9236+1E67              ; Note. the high byte of the line number is incorrectly compared with $F0
 9237+1E67              ; instead of $3F. This leads to commands with operands greater than 32767
 9238+1E67              ; being considered as having been run from the editing area and the
 9239+1E67              ; error report 'Statement Lost' is given instead of 'OK'.
 9240+1E67              ; - Steven Vickers, 1984.
 9241+1E67
 9242+1E67              ;; GO-TO
 9243+1E67 CD 99 1E     o1E67:		CALL	o1E99		; routine FIND-INT2 puts operand in BC
 9244+1E6A 60           		LD	H,B		; transfer line
 9245+1E6B 69           		LD	L,C		; number to HL.
 9246+1E6C 16 00        		LD	D,$00		; set statement to 0 - first.
 9247+1E6E 7C           		LD	A,H		; compare high byte only
 9248+1E6F FE F0        		CP	$F0		; to $F0 i.e. 61439 in full.
 9249+1E71 30 2C        		JR	NC,o1E9F	; forward to REPORT-B if above.
 9250+1E73
 9251+1E73              ; This call entry point is used to update the system variables e.g. by RETURN.
 9252+1E73
 9253+1E73              ;; GO-TO-2
 9254+1E73 22 42 5C     o1E73:		LD	(	$5C42),HL	; save line number in NEWPPC
 9255+1E76 FD 72 0A     		LD	(IY+$0A),D	; and statement in NSPPC
 9256+1E79 C9           		RET			; to STMT-RET (or GO-SUB command)
 9257+1E7A
 9258+1E7A              ; ------------------
 9259+1E7A              ; Handle OUT command
 9260+1E7A              ; ------------------
 9261+1E7A              ; Syntax has been checked and the two comma-separated values are on the
 9262+1E7A              ; calculator stack.
 9263+1E7A
 9264+1E7A              ;; OUT
 9265+1E7A CD 85 1E     o1E7A:		CALL	o1E85		; routine TWO-PARAM fetches values
 9266+1E7D              					; to BC and A.
 9267+1E7D ED 79        		OUT	(C),A		; perform the operation.
 9268+1E7F C9           		RET			; return to STMT-RET.
 9269+1E80
 9270+1E80              ; -------------------
 9271+1E80              ; Handle POKE command
 9272+1E80              ; -------------------
 9273+1E80              ; This routine alters a single byte in the 64K address space.
 9274+1E80              ; Happily no check is made as to whether ROM or RAM is addressed.
 9275+1E80              ; Sinclair BASIC requires no poking of system variables.
 9276+1E80
 9277+1E80              ;; POKE
 9278+1E80 CD 85 1E     o1E80:		CALL	o1E85		; routine TWO-PARAM fetches values
 9279+1E83              					; to BC and A.
 9280+1E83 02           		LD	(BC),A		; load memory location with A.
 9281+1E84 C9           		RET			; return to STMT-RET.
 9282+1E85
 9283+1E85              ; ------------------------------------
 9284+1E85              ; Fetch two  parameters from calculator stack
 9285+1E85              ; ------------------------------------
 9286+1E85              ; This routine fetches a byte and word from the calculator stack
 9287+1E85              ; producing an error if either is out of range.
 9288+1E85
 9289+1E85              ;; TWO-PARAM
 9290+1E85 CD D5 2D     o1E85:		CALL	o2DD5		; routine FP-TO-A
 9291+1E88 38 15        		JR	C,o1E9F		; forward to REPORT-B if overflow occurred
 9292+1E8A
 9293+1E8A 28 02        		JR	Z,o1E8E		; forward to TWO-P-1 if positive
 9294+1E8C
 9295+1E8C ED 44        		NEG			; negative numbers are made positive
 9296+1E8E
 9297+1E8E              ;; TWO-P-1
 9298+1E8E F5           o1E8E:		PUSH	AF		; save the value
 9299+1E8F CD 99 1E     		CALL	o1E99		; routine FIND-INT2 gets integer to BC
 9300+1E92 F1           		POP	AF		; restore the value
 9301+1E93 C9           		RET			; return
 9302+1E94
 9303+1E94              ; -------------
 9304+1E94              ; Find integers
 9305+1E94              ; -------------
 9306+1E94              ; The first of these routines fetches a 8-bit integer (range 0-255) from the
 9307+1E94              ; calculator stack to the accumulator and is used for colours, streams,
 9308+1E94              ; durations and coordinates.
 9309+1E94              ; The second routine fetches 16-bit integers to the BC register pair
 9310+1E94              ; and is used to fetch command and function arguments involving line numbers
 9311+1E94              ; or memory addresses and also array subscripts and tab arguments.
 9312+1E94              ; ->
 9313+1E94
 9314+1E94              ;; FIND-INT1
 9315+1E94 CD D5 2D     o1E94:		CALL	o2DD5		; routine FP-TO-A
 9316+1E97 18 03        		JR	o1E9C		; forward to FIND-I-1 for common exit routine.
 9317+1E99
 9318+1E99              ; ---
 9319+1E99
 9320+1E99              ; ->
 9321+1E99
 9322+1E99              ;; FIND-INT2
 9323+1E99 CD A2 2D     o1E99:		CALL	o2DA2		; routine FP-TO-BC
 9324+1E9C
 9325+1E9C              ;; FIND-I-1
 9326+1E9C 38 01        o1E9C:		JR	C,o1E9F		; to REPORT-Bb with overflow.
 9327+1E9E
 9328+1E9E C8           		RET	Z		; return if positive.
 9329+1E9F
 9330+1E9F
 9331+1E9F              ;; REPORT-Bb
 9332+1E9F CF           o1E9F:		RST	08H		; ERROR-1
 9333+1EA0 0A           		DB	$0A		; Error Report: Integer out of range
 9334+1EA1
 9335+1EA1              ; ------------------
 9336+1EA1              ; Handle RUN command
 9337+1EA1              ; ------------------
 9338+1EA1              ; This command runs a program starting at an optional line.
 9339+1EA1              ; It performs a 'RESTORE 0' then CLEAR
 9340+1EA1
 9341+1EA1              ;; RUN
 9342+1EA1 CD 67 1E     o1EA1:		CALL	o1E67		; routine GO-TO puts line number in
 9343+1EA4              					; system variables.
 9344+1EA4 01 00 00     		LD	BC,$0000	; prepare to set DATADD to first line.
 9345+1EA7 CD 45 1E     		CALL	o1E45		; routine REST-RUN does the 'restore'.
 9346+1EAA              					; Note BC still holds zero.
 9347+1EAA 18 03        		JR	o1EAF		; forward to CLEAR-RUN to clear variables
 9348+1EAC              					; without disturbing RAMTOP and
 9349+1EAC              					; exit indirectly to STMT-RET
 9350+1EAC
 9351+1EAC              ; --------------------
 9352+1EAC              ; Handle CLEAR command
 9353+1EAC              ; --------------------
 9354+1EAC              ; This command reclaims the space used by the variables.
 9355+1EAC              ; It also clears the screen and the GO SUB stack.
 9356+1EAC              ; With an integer expression, it sets the uppermost memory
 9357+1EAC              ; address within the BASIC system.
 9358+1EAC              ; "Contrary to the manual, CLEAR doesn't execute a RESTORE" -
 9359+1EAC              ; Steven Vickers, Pitman Pocket Guide to the Spectrum, 1984.
 9360+1EAC
 9361+1EAC              ;; CLEAR
 9362+1EAC CD 99 1E     o1EAC:		CALL	o1E99		; routine FIND-INT2 fetches to BC.
 9363+1EAF
 9364+1EAF              ;; CLEAR-RUN
 9365+1EAF 78           o1EAF:		LD	A,B		; test for
 9366+1EB0 B1           		OR	C		; zero.
 9367+1EB1 20 04        		JR	NZ,o1EB7	; skip to CLEAR-1 if not zero.
 9368+1EB3
 9369+1EB3 ED 4B B2 5C  		LD	BC,(	$5CB2)	; use the existing value of RAMTOP if zero.
 9370+1EB7
 9371+1EB7              ;; CLEAR-1
 9372+1EB7 C5           o1EB7:		PUSH	BC		; save ramtop value.
 9373+1EB8
 9374+1EB8 ED 5B 4B 5C  		LD	DE,(	$5C4B)	; fetch VARS
 9375+1EBC 2A 59 5C     		LD	HL,(	$5C59)	; fetch E_LINE
 9376+1EBF 2B           		DEC	HL		; adjust to point at variables end-marker.
 9377+1EC0 CD E5 19     		CALL	o19E5		; routine RECLAIM-1 reclaims the space used by
 9378+1EC3              					; the variables.
 9379+1EC3
 9380+1EC3 CD 6B 0D     		CALL	o0D6B		; routine CLS to clear screen.
 9381+1EC6
 9382+1EC6 2A 65 5C     		LD	HL,(	$5C65)	; fetch STKEND the start of free memory.
 9383+1EC9 11 32 00     		LD	DE,$0032	; allow for another 50 bytes.
 9384+1ECC 19           		ADD	HL,DE		; add the overhead to HL.
 9385+1ECD
 9386+1ECD D1           		POP	DE		; restore the ramtop value.
 9387+1ECE ED 52        		SBC	HL,DE		; if HL is greater than the value then jump
 9388+1ED0 30 08        		JR	NC,o1EDA	; forward to REPORT-M
 9389+1ED2              					; 'RAMTOP no good'
 9390+1ED2
 9391+1ED2 2A B4 5C     		LD	HL,(	$5CB4)	; now P-RAMT ($7FFF on 16K RAM machine)
 9392+1ED5 A7           		AND	A		; exact this time.
 9393+1ED6 ED 52        		SBC	HL,DE		; new ramtop must be lower or the same.
 9394+1ED8 30 02        		JR	NC,o1EDC	; skip to CLEAR-2 if in actual RAM.
 9395+1EDA
 9396+1EDA              ;; REPORT-M
 9397+1EDA CF           o1EDA:		RST	08H		; ERROR-1
 9398+1EDB 15           		DB	$15		; Error Report: RAMTOP no good
 9399+1EDC
 9400+1EDC              ;; CLEAR-2
 9401+1EDC EB           o1EDC:		EX	DE,HL		; transfer ramtop value to HL.
 9402+1EDD 22 B2 5C     		LD	(	$5CB2),HL	; update system variable RAMTOP.
 9403+1EE0 D1           		POP	DE		; pop the return address STMT-RET.
 9404+1EE1 C1           		POP	BC		; pop the Error Address.
 9405+1EE2 36 3E        		LD	(HL),$3E	; now put the GO SUB end-marker at RAMTOP.
 9406+1EE4 2B           		DEC	HL		; leave a location beneath it.
 9407+1EE5 F9           		LD	SP,HL		; initialize the machine stack pointer.
 9408+1EE6 C5           		PUSH	BC		; push the error address.
 9409+1EE7 ED 73 3D 5C  		LD	(	$5C3D),SP	; make ERR_SP point to location.
 9410+1EEB EB           		EX	DE,HL		; put STMT-RET in HL.
 9411+1EEC E9           		JP	(HL)		; and go there directly.
 9412+1EED
 9413+1EED              ; ---------------------
 9414+1EED              ; Handle GO SUB command
 9415+1EED              ; ---------------------
 9416+1EED              ; The GO SUB command diverts BASIC control to a new line number
 9417+1EED              ; in a very similar manner to GO TO but
 9418+1EED              ; the current line number and current statement + 1
 9419+1EED              ; are poaced on the GO SUB stack as a RETURN point.
 9420+1EED
 9421+1EED              ;; GO-SUB
 9422+1EED D1           o1EED:		POP	DE		; drop the address STMT-RET
 9423+1EEE FD 66 0D     		LD	H,(IY+$0D)	; fetch statement from SUBPPC and
 9424+1EF1 24           		INC	H		; increment it
 9425+1EF2 E3           		EX	(SP),HL		; swap - error address to HL,
 9426+1EF3              					; H (statement) at top of stack,
 9427+1EF3              					; L (unimportant) beneath.
 9428+1EF3 33           		INC	SP		; adjust to overwrite unimportant byte
 9429+1EF4 ED 4B 45 5C  		LD	BC,(	$5C45)	; fetch the current line number from PPC
 9430+1EF8 C5           		PUSH	BC		; and PUSH onto GO SUB stack.
 9431+1EF9              					; the empty machine-stack can be rebuilt
 9432+1EF9 E5           		PUSH	HL		; push the error address.
 9433+1EFA ED 73 3D 5C  		LD	(	$5C3D),SP	; make system variable ERR_SP point to it.
 9434+1EFE D5           		PUSH	DE		; push the address STMT-RET.
 9435+1EFF CD 67 1E     		CALL	o1E67		; call routine GO-TO to update the system
 9436+1F02              					; variables NEWPPC and NSPPC.
 9437+1F02              					; then make an indirect exit to STMT-RET via
 9438+1F02 01 14 00     		LD	BC,$0014	; a 20-byte overhead memory check.
 9439+1F05
 9440+1F05              ; ----------------------
 9441+1F05              ; Check available memory
 9442+1F05              ; ----------------------
 9443+1F05              ; This routine is used on many occasions when extending a dynamic area
 9444+1F05              ; upwards or the GO SUB stack downwards.
 9445+1F05
 9446+1F05              ;; TEST-ROOM
 9447+1F05 2A 65 5C     o1F05:		LD	HL,(	$5C65)	; fetch STKEND
 9448+1F08 09           		ADD	HL,BC		; add the supplied test value
 9449+1F09 38 0A        		JR	C,o1F15		; forward to REPORT-4 if over $FFFF
 9450+1F0B
 9451+1F0B EB           		EX	DE,HL		; was less so transfer to DE
 9452+1F0C 21 50 00     		LD	HL,$0050	; test against another 80 bytes
 9453+1F0F 19           		ADD	HL,DE		; anyway
 9454+1F10 38 03        		JR	C,o1F15		; forward to REPORT-4 if this passes $FFFF
 9455+1F12
 9456+1F12 ED 72        		SBC	HL,SP		; if less than the machine stack pointer
 9457+1F14 D8           		RET	C		; then return - OK.
 9458+1F15
 9459+1F15              ;; REPORT-4
 9460+1F15 2E 03        o1F15:		LD	L,$03		; prepare 'Out of Memory'
 9461+1F17 C3 55 00     		JP	o0055		; jump back to ERROR-3 at $0055
 9462+1F1A              					; Note. this error can't be trapped at $0008
 9463+1F1A
 9464+1F1A              ; ------------------------------
 9465+1F1A              ; THE 'FREE MEMORY' USER ROUTINE
 9466+1F1A              ; ------------------------------
 9467+1F1A              ; This routine is not used by the ROM but allows users to evaluate
 9468+1F1A              ; approximate free memory with PRINT 65536 - USR 7962.
 9469+1F1A
 9470+1F1A              ;; free-mem
 9471+1F1A 01 00 00     o1F1A:		LD	BC,$0000	; allow no overhead.
 9472+1F1D
 9473+1F1D CD 05 1F     		CALL	o1F05		; routine TEST-ROOM.
 9474+1F20
 9475+1F20 44           		LD	B,H		; transfer the result
 9476+1F21 4D           		LD	C,L		; to the BC register.
 9477+1F22 C9           		RET			; the USR function returns value of BC.
 9478+1F23
 9479+1F23              ; --------------------
 9480+1F23              ; THE 'RETURN' COMMAND
 9481+1F23              ; --------------------
 9482+1F23              ; As with any command, there are two values on the machine stack at the time
 9483+1F23              ; it is invoked.  The machine stack is below the GOSUB stack.  Both grow
 9484+1F23              ; downwards, the machine stack by two bytes, the GOSUB stack by 3 bytes.
 9485+1F23              ; The highest location is a statement byte followed by a two-byte line number.
 9486+1F23
 9487+1F23              ;; RETURN
 9488+1F23 C1           o1F23:		POP	BC		; drop the address STMT-RET.
 9489+1F24 E1           		POP	HL		; now the error address.
 9490+1F25 D1           		POP	DE		; now a possible BASIC return line.
 9491+1F26 7A           		LD	A,D		; the high byte $00 - $27 is
 9492+1F27 FE 3E        		CP	$3E		; compared with the traditional end-marker $3E.
 9493+1F29 28 0B        		JR	Z,o1F36		; forward to REPORT-7 with a match.
 9494+1F2B              					; 'RETURN without GOSUB'
 9495+1F2B
 9496+1F2B              ; It was not the end-marker so a single statement byte remains at the base of
 9497+1F2B              ; the calculator stack. It can't be popped off.
 9498+1F2B
 9499+1F2B 3B           		DEC	SP		; adjust stack pointer to create room for two
 9500+1F2C              					; bytes.
 9501+1F2C E3           		EX	(SP),HL		; statement to H, error address to base of
 9502+1F2D              					; new machine stack.
 9503+1F2D EB           		EX	DE,HL		; statement to D,  BASIC line number to HL.
 9504+1F2E ED 73 3D 5C  		LD	(	$5C3D),SP	; adjust ERR_SP to point to new stack pointer
 9505+1F32 C5           		PUSH	BC		; now re-stack the address STMT-RET
 9506+1F33 C3 73 1E     		JP	o1E73		; to GO-TO-2 to update statement and line
 9507+1F36              					; system variables and exit indirectly to the
 9508+1F36              					; address just pushed on stack.
 9509+1F36
 9510+1F36              ; ---
 9511+1F36
 9512+1F36              ;; REPORT-7
 9513+1F36 D5           o1F36:		PUSH	DE		; replace the end-marker.
 9514+1F37 E5           		PUSH	HL		; now restore the error address
 9515+1F38              					; as will be required in a few clock cycles.
 9516+1F38
 9517+1F38 CF           		RST	08H		; ERROR-1
 9518+1F39 06           		DB	$06		; Error Report: RETURN without GOSUB
 9519+1F3A
 9520+1F3A              ; --------------------
 9521+1F3A              ; Handle PAUSE command
 9522+1F3A              ; --------------------
 9523+1F3A              ; The pause command takes as its parameter the number of interrupts
 9524+1F3A              ; for which to wait. PAUSE 50 pauses for about a second.
 9525+1F3A              ; PAUSE 0 pauses indefinitely.
 9526+1F3A              ; Both forms can be finished by pressing a key.
 9527+1F3A
 9528+1F3A              ;; PAUSE
 9529+1F3A CD 99 1E     o1F3A:		CALL	o1E99		; routine FIND-INT2 puts value in BC
 9530+1F3D
 9531+1F3D              ;; PAUSE-1
 9532+1F3D 76           o1F3D:		HALT
 9533+1F3E 0B           		DEC	BC		; decrease counter.
 9534+1F3F 78           		LD	A,B		; test if
 9535+1F40 B1           		OR	C		; result is zero.
 9536+1F41 28 0C        		JR	Z,o1F4F		; forward to PAUSE-END if so.
 9537+1F43
 9538+1F43 78           		LD	A,B		; test if
 9539+1F44 A1           		AND	C		; now $FFFF
 9540+1F45 3C           		INC	A		; that is, initially zero.
 9541+1F46 20 01        		JR	NZ,o1F49	; skip forward to PAUSE-2 if not.
 9542+1F48
 9543+1F48 03           		INC	BC		; restore counter to zero.
 9544+1F49
 9545+1F49              ;; PAUSE-2
 9546+1F49 FD CB 01 6E  o1F49:		BIT	5,(IY+$01)	; test FLAGS - has a new key been pressed ?
 9547+1F4D 28 EE        		JR	Z,o1F3D		; back to PAUSE-1 if not.
 9548+1F4F
 9549+1F4F              ;; PAUSE-END
 9550+1F4F FD CB 01 AE  o1F4F:		RES	5,(IY+$01)	; update FLAGS - signal no new key
 9551+1F53 C9           		RET			; and return.
 9552+1F54
 9553+1F54              ; -------------------
 9554+1F54              ; Check for BREAK key
 9555+1F54              ; -------------------
 9556+1F54              ; This routine is called from COPY-LINE, when interrupts are disabled,
 9557+1F54              ; to test if BREAK (SHIFT - SPACE) is being pressed.
 9558+1F54              ; It is also called at STMT-RET after every statement.
 9559+1F54
 9560+1F54              ;; BREAK-KEY
 9561+1F54 3E 7F        o1F54:		LD	A,$7F		; Input address: $7FFE
 9562+1F56 DB FE        		IN	A,($FE)		; read lower right keys
 9563+1F58 1F           		RRA			; rotate bit 0 - SPACE
 9564+1F59 D8           		RET	C		; return if not reset
 9565+1F5A
 9566+1F5A 3E FE        		LD	A,$FE		; Input address: $FEFE
 9567+1F5C DB FE        		IN	A,($FE)		; read lower left keys
 9568+1F5E 1F           		RRA			; rotate bit 0 - SHIFT
 9569+1F5F C9           		RET			; carry will be set if not pressed.
 9570+1F60              					; return with no carry if both keys
 9571+1F60              					; pressed.
 9572+1F60
 9573+1F60              ; ---------------------
 9574+1F60              ; Handle DEF FN command
 9575+1F60              ; ---------------------
 9576+1F60              ; e.g. DEF FN r$(a$,a) = a$(a TO )
 9577+1F60              ; this 'command' is ignored in runtime but has its syntax checked
 9578+1F60              ; during line-entry.
 9579+1F60
 9580+1F60              ;; DEF-FN
 9581+1F60 CD 30 25     o1F60:		CALL	o2530		; routine SYNTAX-Z
 9582+1F63 28 05        		JR	Z,o1F6A		; forward to DEF-FN-1 if parsing
 9583+1F65
 9584+1F65 3E CE        		LD	A,$CE		; else load A with 'DEF FN' and
 9585+1F67 C3 39 1E     		JP	o1E39		; jump back to PASS-BY
 9586+1F6A
 9587+1F6A              ; ---
 9588+1F6A
 9589+1F6A              ; continue here if checking syntax.
 9590+1F6A
 9591+1F6A              ;; DEF-FN-1
 9592+1F6A FD CB 01 F6  o1F6A:		SET	6,(IY+$01)	; set FLAGS  - Assume numeric result
 9593+1F6E CD 8D 2C     		CALL	o2C8D		; call routine ALPHA
 9594+1F71 30 16        		JR	NC,o1F89	; if not then to DEF-FN-4 to jump to
 9595+1F73              					; 'Nonsense in BASIC'
 9596+1F73
 9597+1F73
 9598+1F73 E7           		RST	20H		; NEXT-CHAR
 9599+1F74 FE 24        		CP	$24		; is it "$" ?
 9600+1F76 20 05        		JR	NZ,o1F7D	; to DEF-FN-2 if not as numeric.
 9601+1F78
 9602+1F78 FD CB 01 B6  		RES	6,(IY+$01)	; set FLAGS  - Signal string result
 9603+1F7C
 9604+1F7C E7           		RST	20H		; get NEXT-CHAR
 9605+1F7D
 9606+1F7D              ;; DEF-FN-2
 9607+1F7D FE 28        o1F7D:		CP	$28		; is it "(" ?
 9608+1F7F 20 3C        		JR	NZ,o1FBD	; to DEF-FN-7 'Nonsense in BASIC'
 9609+1F81
 9610+1F81
 9611+1F81 E7           		RST	20H		; NEXT-CHAR
 9612+1F82 FE 29        		CP	$29		; is it ")" ?
 9613+1F84 28 20        		JR	Z,o1FA6		; to DEF-FN-6 if null argument
 9614+1F86
 9615+1F86              ;; DEF-FN-3
 9616+1F86 CD 8D 2C     o1F86:		CALL	o2C8D		; routine ALPHA checks that it is the expected
 9617+1F89              					; alphabetic character.
 9618+1F89
 9619+1F89              ;; DEF-FN-4
 9620+1F89 D2 8A 1C     o1F89:		JP	NC,o1C8A	; to REPORT-C  if not
 9621+1F8C              					; 'Nonsense in BASIC'.
 9622+1F8C
 9623+1F8C EB           		EX	DE,HL		; save pointer in DE
 9624+1F8D
 9625+1F8D E7           		RST	20H		; NEXT-CHAR re-initializes HL from CH_ADD
 9626+1F8E              					; and advances.
 9627+1F8E FE 24        		CP	$24		; "$" ? is it a string argument.
 9628+1F90 20 02        		JR	NZ,o1F94	; forward to DEF-FN-5 if not.
 9629+1F92
 9630+1F92 EB           		EX	DE,HL		; save pointer to "$" in DE
 9631+1F93
 9632+1F93 E7           		RST	20H		; NEXT-CHAR re-initializes HL and advances
 9633+1F94
 9634+1F94              ;; DEF-FN-5
 9635+1F94 EB           o1F94:		EX	DE,HL		; bring back pointer.
 9636+1F95 01 06 00     		LD	BC,$0006	; the function requires six hidden bytes for
 9637+1F98              					; each parameter passed.
 9638+1F98              					; The first byte will be $0E
 9639+1F98              					; then 5-byte numeric value
 9640+1F98              					; or 5-byte string pointer.
 9641+1F98
 9642+1F98 CD 55 16     		CALL	o1655		; routine MAKE-ROOM creates space in program
 9643+1F9B              					; area.
 9644+1F9B
 9645+1F9B 23           		INC	HL		; adjust HL (set by LDDR)
 9646+1F9C 23           		INC	HL		; to point to first location.
 9647+1F9D 36 0E        		LD	(HL),$0E	; insert the 'hidden' marker.
 9648+1F9F
 9649+1F9F              ; Note. these invisible storage locations hold nothing meaningful for the
 9650+1F9F              ; moment. They will be used every time the corresponding function is
 9651+1F9F              ; evaluated in runtime.
 9652+1F9F              ; Now consider the following character fetched earlier.
 9653+1F9F
 9654+1F9F FE 2C        		CP	$2C		; is it ',' ? (more than one parameter)
 9655+1FA1 20 03        		JR	NZ,o1FA6	; to DEF-FN-6 if not
 9656+1FA3
 9657+1FA3
 9658+1FA3 E7           		RST	20H		; else NEXT-CHAR
 9659+1FA4 18 E0        		JR	o1F86		; and back to DEF-FN-3
 9660+1FA6
 9661+1FA6              ; ---
 9662+1FA6
 9663+1FA6              ;; DEF-FN-6
 9664+1FA6 FE 29        o1FA6:		CP	$29		; should close with a ")"
 9665+1FA8 20 13        		JR	NZ,o1FBD	; to DEF-FN-7 if not
 9666+1FAA              					; 'Nonsense in BASIC'
 9667+1FAA
 9668+1FAA
 9669+1FAA E7           		RST	20H		; get NEXT-CHAR
 9670+1FAB FE 3D        		CP	$3D		; is it "=" ?
 9671+1FAD 20 0E        		JR	NZ,o1FBD	; to DEF-FN-7 if not 'Nonsense...'
 9672+1FAF
 9673+1FAF
 9674+1FAF E7           		RST	20H		; address NEXT-CHAR
 9675+1FB0 3A 3B 5C     		LD	A,(	$5C3B)	; get FLAGS which has been set above
 9676+1FB3 F5           		PUSH	AF		; and preserve
 9677+1FB4
 9678+1FB4 CD FB 24     		CALL	o24FB		; routine SCANNING checks syntax of expression
 9679+1FB7              					; and also sets flags.
 9680+1FB7
 9681+1FB7 F1           		POP	AF		; restore previous flags
 9682+1FB8 FD AE 01     		XOR	(IY+$01)	; xor with FLAGS - bit 6 should be same
 9683+1FBB              					; therefore will be reset.
 9684+1FBB E6 40        		AND	$40		; isolate bit 6.
 9685+1FBD
 9686+1FBD              ;; DEF-FN-7
 9687+1FBD C2 8A 1C     o1FBD:		JP	NZ,o1C8A	; jump back to REPORT-C if the expected result
 9688+1FC0              					; is not the same type.
 9689+1FC0              					; 'Nonsense in BASIC'
 9690+1FC0
 9691+1FC0 CD EE 1B     		CALL	o1BEE		; routine CHECK-END will return early if
 9692+1FC3              					; at end of statement and move onto next
 9693+1FC3              					; else produce error report. >>>
 9694+1FC3
 9695+1FC3              ; There will be no return to here.
 9696+1FC3
 9697+1FC3              ; -------------------------------
 9698+1FC3              ; Returning early from subroutine
 9699+1FC3              ; -------------------------------
 9700+1FC3              ; All routines are capable of being run in two modes - syntax checking mode
 9701+1FC3              ; and runtime mode.  This routine is called often to allow a routine to return
 9702+1FC3              ; early if checking syntax.
 9703+1FC3
 9704+1FC3              ;; UNSTACK-Z
 9705+1FC3 CD 30 25     o1FC3:		CALL	o2530		; routine SYNTAX-Z sets zero flag if syntax
 9706+1FC6              					; is being checked.
 9707+1FC6
 9708+1FC6 E1           		POP	HL		; drop the return address.
 9709+1FC7 C8           		RET	Z		; return to previous call in chain if checking
 9710+1FC8              					; syntax.
 9711+1FC8
 9712+1FC8 E9           		JP	(HL)		; jump to return address as BASIC program is
 9713+1FC9              					; actually running.
 9714+1FC9
 9715+1FC9              ; ---------------------
 9716+1FC9              ; Handle LPRINT command
 9717+1FC9              ; ---------------------
 9718+1FC9              ; A simple form of 'PRINT #3' although it can output to 16 streams.
 9719+1FC9              ; Probably for compatibility with other BASICs particularly ZX81 BASIC.
 9720+1FC9              ; An extra UDG might have been better.
 9721+1FC9
 9722+1FC9              ;; LPRINT
 9723+1FC9 3E 03        o1FC9:		LD	A,$03		; the printer channel
 9724+1FCB 18 02        		JR	o1FCF		; forward to PRINT-1
 9725+1FCD
 9726+1FCD              ; ---------------------
 9727+1FCD              ; Handle PRINT commands
 9728+1FCD              ; ---------------------
 9729+1FCD              ; The Spectrum's main stream output command.
 9730+1FCD              ; The default stream is stream 2 which is normally the upper screen
 9731+1FCD              ; of the computer. However the stream can be altered in range 0 - 15.
 9732+1FCD
 9733+1FCD              ;; PRINT
 9734+1FCD 3E 02        o1FCD:		LD	A,$02		; the stream for the upper screen.
 9735+1FCF
 9736+1FCF              ; The LPRINT command joins here.
 9737+1FCF
 9738+1FCF              ;; PRINT-1
 9739+1FCF CD 30 25     o1FCF:		CALL	o2530		; routine SYNTAX-Z checks if program running
 9740+1FD2 C4 01 16     		CALL	NZ,o1601	; routine CHAN-OPEN if so
 9741+1FD5 CD 4D 0D     		CALL	o0D4D		; routine TEMPS sets temporary colours.
 9742+1FD8 CD DF 1F     		CALL	o1FDF		; routine PRINT-2 - the actual item
 9743+1FDB CD EE 1B     		CALL	o1BEE		; routine CHECK-END gives error if not at end
 9744+1FDE              					; of statement
 9745+1FDE C9           		RET			; and return >>>
 9746+1FDF
 9747+1FDF              ; ------------------------------------
 9748+1FDF              ; this subroutine is called from above
 9749+1FDF              ; and also from INPUT.
 9750+1FDF
 9751+1FDF              ;; PRINT-2
 9752+1FDF DF           o1FDF:		RST	18H		; GET-CHAR gets printable character
 9753+1FE0 CD 45 20     		CALL	o2045		; routine PR-END-Z checks if more printing
 9754+1FE3 28 0D        		JR	Z,o1FF2		; to PRINT-4 if not     e.g. just 'PRINT :'
 9755+1FE5
 9756+1FE5              ; This tight loop deals with combinations of positional controls and
 9757+1FE5              ; print items. An early return can be made from within the loop
 9758+1FE5              ; if the end of a print sequence is reached.
 9759+1FE5
 9760+1FE5              ;; PRINT-3
 9761+1FE5 CD 4E 20     o1FE5:		CALL	o204E		; routine PR-POSN-1 returns zero if more
 9762+1FE8              					; but returns early at this point if
 9763+1FE8              					; at end of statement!
 9764+1FE8              					;
 9765+1FE8 28 FB        		JR	Z,o1FE5		; to PRINT-3 if consecutive positioners
 9766+1FEA
 9767+1FEA CD FC 1F     		CALL	o1FFC		; routine PR-ITEM-1 deals with strings etc.
 9768+1FED CD 4E 20     		CALL	o204E		; routine PR-POSN-1 for more position codes
 9769+1FF0 28 F3        		JR	Z,o1FE5		; loop back to PRINT-3 if so
 9770+1FF2
 9771+1FF2              ;; PRINT-4
 9772+1FF2 FE 29        o1FF2:		CP	$29		; return now if this is ")" from input-item.
 9773+1FF4              					; (see INPUT.)
 9774+1FF4 C8           		RET	Z		; or continue and print carriage return in
 9775+1FF5              					; runtime
 9776+1FF5
 9777+1FF5              ; ---------------------
 9778+1FF5              ; Print carriage return
 9779+1FF5              ; ---------------------
 9780+1FF5              ; This routine which continues from above prints a carriage return
 9781+1FF5              ; in run-time. It is also called once from PRINT-POSN.
 9782+1FF5
 9783+1FF5              ;; PRINT-CR
 9784+1FF5 CD C3 1F     o1FF5:		CALL	o1FC3		; routine UNSTACK-Z
 9785+1FF8
 9786+1FF8 3E 0D        		LD	A,$0D		; prepare a carriage return
 9787+1FFA
 9788+1FFA D7           		RST	10H		; PRINT-A
 9789+1FFB C9           		RET			; return
 9790+1FFC
 9791+1FFC
 9792+1FFC              ; -----------
 9793+1FFC              ; Print items
 9794+1FFC              ; -----------
 9795+1FFC              ; This routine deals with print items as in
 9796+1FFC              ; PRINT AT 10,0;"The value of A is ";a
 9797+1FFC              ; It returns once a single item has been dealt with as it is part
 9798+1FFC              ; of a tight loop that considers sequences of positional and print items
 9799+1FFC
 9800+1FFC              ;; PR-ITEM-1
 9801+1FFC DF           o1FFC:		RST	18H		; GET-CHAR
 9802+1FFD FE AC        		CP	$AC		; is character 'AT' ?
 9803+1FFF 20 0D        		JR	NZ,o200E	; forward to PR-ITEM-2 if not.
 9804+2001
 9805+2001 CD 79 1C     		CALL	o1C79		; routine NEXT-2NUM  check for two comma
 9806+2004              					; separated numbers placing them on the
 9807+2004              					; calculator stack in runtime.
 9808+2004 CD C3 1F     		CALL	o1FC3		; routine UNSTACK-Z quits if checking syntax.
 9809+2007
 9810+2007 CD 07 23     		CALL	o2307		; routine STK-TO-BC get the numbers in B and C.
 9811+200A 3E 16        		LD	A,$16		; prepare the 'at' control.
 9812+200C 18 10        		JR	o201E		; forward to PR-AT-TAB to print the sequence.
 9813+200E
 9814+200E              ; ---
 9815+200E
 9816+200E              ;; PR-ITEM-2
 9817+200E FE AD        o200E:		CP	$AD		; is character 'TAB' ?
 9818+2010 20 12        		JR	NZ,o2024	; to PR-ITEM-3 if not
 9819+2012
 9820+2012
 9821+2012 E7           		RST	20H		; NEXT-CHAR to address next character
 9822+2013 CD 82 1C     		CALL	o1C82		; routine EXPT-1NUM
 9823+2016 CD C3 1F     		CALL	o1FC3		; routine UNSTACK-Z quits if checking syntax.
 9824+2019
 9825+2019 CD 99 1E     		CALL	o1E99		; routine FIND-INT2 puts integer in BC.
 9826+201C 3E 17        		LD	A,$17		; prepare the 'tab' control.
 9827+201E
 9828+201E              ;; PR-AT-TAB
 9829+201E D7           o201E:		RST	10H		; PRINT-A outputs the control
 9830+201F
 9831+201F 79           		LD	A,C		; first value to A
 9832+2020 D7           		RST	10H		; PRINT-A outputs it.
 9833+2021
 9834+2021 78           		LD	A,B		; second value
 9835+2022 D7           		RST	10H		; PRINT-A
 9836+2023
 9837+2023 C9           		RET			; return - item finished >>>
 9838+2024
 9839+2024              ; ---
 9840+2024
 9841+2024              ; Now consider paper 2; #2; a$
 9842+2024
 9843+2024              ;; PR-ITEM-3
 9844+2024 CD F2 21     o2024:		CALL	o21F2		; routine CO-TEMP-3 will print any colour
 9845+2027 D0           		RET	NC		; items - return if success.
 9846+2028
 9847+2028 CD 70 20     		CALL	o2070		; routine STR-ALTER considers new stream
 9848+202B D0           		RET	NC		; return if altered.
 9849+202C
 9850+202C CD FB 24     		CALL	o24FB		; routine SCANNING now to evaluate expression
 9851+202F CD C3 1F     		CALL	o1FC3		; routine UNSTACK-Z if not runtime.
 9852+2032
 9853+2032 FD CB 01 76  		BIT	6,(IY+$01)	; test FLAGS  - Numeric or string result ?
 9854+2036 CC F1 2B     		CALL	Z,o2BF1		; routine STK-FETCH if string.
 9855+2039              					; note no flags affected.
 9856+2039 C2 E3 2D     		JP	NZ,o2DE3	; to PRINT-FP to print if numeric >>>
 9857+203C
 9858+203C              ; It was a string expression - start in DE, length in BC
 9859+203C              ; Now enter a loop to print it
 9860+203C
 9861+203C              ;; PR-STRING
 9862+203C 78           o203C:		LD	A,B		; this tests if the
 9863+203D B1           		OR	C		; length is zero and sets flag accordingly.
 9864+203E 0B           		DEC	BC		; this doesn't but decrements counter.
 9865+203F C8           		RET	Z		; return if zero.
 9866+2040
 9867+2040 1A           		LD	A,(DE)		; fetch character.
 9868+2041 13           		INC	DE		; address next location.
 9869+2042
 9870+2042 D7           		RST	10H		; PRINT-A.
 9871+2043
 9872+2043 18 F7        		JR	o203C		; loop back to PR-STRING.
 9873+2045
 9874+2045              ; ---------------
 9875+2045              ; End of printing
 9876+2045              ; ---------------
 9877+2045              ; This subroutine returns zero if no further printing is required
 9878+2045              ; in the current statement.
 9879+2045              ; The first terminator is found in  escaped input items only,
 9880+2045              ; the others in print_items.
 9881+2045
 9882+2045              ;; PR-END-Z
 9883+2045 FE 29        o2045:		CP	$29		; is character a ")" ?
 9884+2047 C8           		RET	Z		; return if so -        e.g. INPUT (p$); a$
 9885+2048
 9886+2048              ;; PR-ST-END
 9887+2048 FE 0D        o2048:		CP	$0D		; is it a carriage return ?
 9888+204A C8           		RET	Z		; return also -         e.g. PRINT a
 9889+204B
 9890+204B FE 3A        		CP	$3A		; is character a ":" ?
 9891+204D C9           		RET			; return - zero flag will be set if so.
 9892+204E              					;                       e.g. PRINT a :
 9893+204E
 9894+204E              ; --------------
 9895+204E              ; Print position
 9896+204E              ; --------------
 9897+204E              ; This routine considers a single positional character $3B, ',', '''
 9898+204E
 9899+204E              ;; PR-POSN-1
 9900+204E DF           o204E:		RST	18H		; GET-CHAR
 9901+204F FE 3B        		CP	$3B		; is it $3B ?
 9902+2051              					; i.e. print from last position.
 9903+2051 28 14        		JR	Z,o2067		; forward to PR-POSN-3 if so.
 9904+2053              					; i.e. do nothing.
 9905+2053
 9906+2053 FE 2C        		CP	$2C		; is it ',' ?
 9907+2055              					; i.e. print at next tabstop.
 9908+2055 20 0A        		JR	NZ,o2061	; forward to PR-POSN-2 if anything else.
 9909+2057
 9910+2057 CD 30 25     		CALL	o2530		; routine SYNTAX-Z
 9911+205A 28 0B        		JR	Z,o2067		; forward to PR-POSN-3 if checking syntax.
 9912+205C
 9913+205C 3E 06        		LD	A,$06		; prepare the 'comma' control character.
 9914+205E
 9915+205E D7           		RST	10H		; PRINT-A  outputs to current channel in
 9916+205F              					; run-time.
 9917+205F
 9918+205F 18 06        		JR	o2067		; skip to PR-POSN-3.
 9919+2061
 9920+2061              ; ---
 9921+2061
 9922+2061              ; check for newline.
 9923+2061
 9924+2061              ;; PR-POSN-2
 9925+2061 FE 27        o2061:		CP	$27		; is character a "'" ? (newline)
 9926+2063 C0           		RET	NZ		; return if no match              >>>
 9927+2064
 9928+2064 CD F5 1F     		CALL	o1FF5		; routine PRINT-CR outputs a carriage return
 9929+2067              					; in runtime only.
 9930+2067
 9931+2067              ;; PR-POSN-3
 9932+2067 E7           o2067:		RST	20H		; NEXT-CHAR to A.
 9933+2068 CD 45 20     		CALL	o2045		; routine PR-END-Z checks if at end.
 9934+206B 20 01        		JR	NZ,o206E	; to PR-POSN-4 if not.
 9935+206D
 9936+206D C1           		POP	BC		; drop return address if at end.
 9937+206E
 9938+206E              ;; PR-POSN-4
 9939+206E BF           o206E:		CP	A		; reset the zero flag.
 9940+206F C9           		RET			; and return to loop or quit.
 9941+2070
 9942+2070              ; ------------
 9943+2070              ; Alter stream
 9944+2070              ; ------------
 9945+2070              ; This routine is called from PRINT ITEMS above, and also LIST as in
 9946+2070              ; LIST #15
 9947+2070
 9948+2070              ;; STR-ALTER
 9949+2070 FE 23        o2070:		CP	$23		; is character "#" ?
 9950+2072 37           		SCF			; set carry flag.
 9951+2073 C0           		RET	NZ		; return if no match.
 9952+2074
 9953+2074
 9954+2074 E7           		RST	20H		; NEXT-CHAR
 9955+2075 CD 82 1C     		CALL	o1C82		; routine EXPT-1NUM gets stream number
 9956+2078 A7           		AND	A		; prepare to exit early with carry reset
 9957+2079 CD C3 1F     		CALL	o1FC3		; routine UNSTACK-Z exits early if parsing
 9958+207C CD 94 1E     		CALL	o1E94		; routine FIND-INT1 gets number off stack
 9959+207F FE 10        		CP	$10		; must be range 0 - 15 decimal.
 9960+2081 D2 0E 16     		JP	NC,o160E	; jump back to REPORT-Oa if not
 9961+2084              					; 'Invalid stream'.
 9962+2084
 9963+2084 CD 01 16     		CALL	o1601		; routine CHAN-OPEN
 9964+2087 A7           		AND	A		; clear carry - signal item dealt with.
 9965+2088 C9           		RET			; return
 9966+2089
 9967+2089              ; -------------------
 9968+2089              ; THE 'INPUT' COMMAND
 9969+2089              ; -------------------
 9970+2089              ; This command is mysterious.
 9971+2089              ;
 9972+2089
 9973+2089              ;; INPUT
 9974+2089 CD 30 25     o2089:		CALL	o2530		; routine SYNTAX-Z to check if in runtime.
 9975+208C
 9976+208C 28 08        		JR	Z,o2096		; forward to INPUT-1 if checking syntax.
 9977+208E
 9978+208E 3E 01        		LD	A,$01		; select channel 'K' the keyboard for input.
 9979+2090 CD 01 16     		CALL	o1601		; routine CHAN-OPEN opens the channel and sets
 9980+2093              					; bit 0 of TV_FLAG.
 9981+2093
 9982+2093              ;   Note. As a consequence of clearing the lower screen channel 0 is made
 9983+2093              ;   the current channel so the above two instructions are superfluous.
 9984+2093
 9985+2093 CD 6E 0D     		CALL	o0D6E		; routine CLS-LOWER clears the lower screen
 9986+2096              					; and sets DF_SZ to two and TV_FLAG to $01.
 9987+2096
 9988+2096              ;; INPUT-1
 9989+2096 FD 36 02 01  o2096:		LD	(IY+$02),$01	; update TV_FLAG - signal lower screen in use
 9990+209A              					; ensuring that the correct set of system
 9991+209A              					; variables are updated and that the border
 9992+209A              					; colour is used.
 9993+209A
 9994+209A              ;   Note. The Complete Spectrum ROM Disassembly incorrectly names DF-SZ as the
 9995+209A              ;   system variable that is updated above and if, as some have done, you make
 9996+209A              ;   this unnecessary alteration then there will be two blank lines between the
 9997+209A              ;   lower screen and the upper screen areas which will also scroll wrongly.
 9998+209A
 9999+209A CD C1 20     		CALL	o20C1		; routine IN-ITEM-1 to handle the input.
10000+209D
10001+209D CD EE 1B     		CALL	o1BEE		; routine CHECK-END will make an early exit
10002+20A0              					; if checking syntax. >>>
10003+20A0
10004+20A0              ;   Keyboard input has been made and it remains to adjust the upper
10005+20A0              ;   screen in case the lower two lines have been extended upwards.
10006+20A0
10007+20A0 ED 4B 88 5C  		LD	BC,(	$5C88)	; fetch S_POSN current line/column of
10008+20A4              					; the upper screen.
10009+20A4 3A 6B 5C     		LD	A,(	$5C6B)	; fetch DF_SZ the display file size of
10010+20A7              					; the lower screen.
10011+20A7 B8           		CP	B		; test that lower screen does not overlap
10012+20A8 38 03        		JR	C,o20AD		; forward to INPUT-2 if not.
10013+20AA
10014+20AA              ; the two screens overlap so adjust upper screen.
10015+20AA
10016+20AA 0E 21        		LD	C,$21		; set column of upper screen to leftmost.
10017+20AC 47           		LD	B,A		; and line to one above lower screen.
10018+20AD              					; continue forward to update upper screen
10019+20AD              					; print position.
10020+20AD
10021+20AD              ;; INPUT-2
10022+20AD ED 43 88 5C  o20AD:		LD	(	$5C88),BC	; set S_POSN update upper screen line/column.
10023+20B1 3E 19        		LD	A,$19		; subtract from twenty five
10024+20B3 90           		SUB	B		; the new line number.
10025+20B4 32 8C 5C     		LD	(	$5C8C),A	; and place result in SCR_CT - scroll count.
10026+20B7 FD CB 02 86  		RES	0,(IY+$02)	; update TV_FLAG - signal main screen in use.
10027+20BB
10028+20BB CD D9 0D     		CALL	o0DD9		; routine CL-SET sets the print position
10029+20BE              					; system variables for the upper screen.
10030+20BE
10031+20BE C3 6E 0D     		JP	o0D6E		; jump back to CLS-LOWER and make
10032+20C1              					; an indirect exit >>.
10033+20C1
10034+20C1              ; ---------------------
10035+20C1              ; INPUT ITEM subroutine
10036+20C1              ; ---------------------
10037+20C1              ;   This subroutine deals with the input items and print items.
10038+20C1              ;   from  the current input channel.
10039+20C1              ;   It is only called from the above INPUT routine but was obviously
10040+20C1              ;   once called from somewhere else in another context.
10041+20C1
10042+20C1              ;; IN-ITEM-1
10043+20C1 CD 4E 20     o20C1:		CALL	o204E		; routine PR-POSN-1 deals with a single
10044+20C4              					; position item at each call.
10045+20C4 28 FB        		JR	Z,o20C1		; back to IN-ITEM-1 until no more in a
10046+20C6              					; sequence.
10047+20C6
10048+20C6 FE 28        		CP	$28		; is character "(" ?
10049+20C8 20 0E        		JR	NZ,o20D8	; forward to IN-ITEM-2 if not.
10050+20CA
10051+20CA              ;   any variables within braces will be treated as part, or all, of the prompt
10052+20CA              ;   instead of being used as destination variables.
10053+20CA
10054+20CA E7           		RST	20H		; NEXT-CHAR
10055+20CB CD DF 1F     		CALL	o1FDF		; routine PRINT-2 to output the dynamic
10056+20CE              					; prompt.
10057+20CE
10058+20CE DF           		RST	18H		; GET-CHAR
10059+20CF FE 29        		CP	$29		; is character a matching ")" ?
10060+20D1 C2 8A 1C     		JP	NZ,o1C8A	; jump back to REPORT-C if not.
10061+20D4              					; 'Nonsense in BASIC'.
10062+20D4
10063+20D4 E7           		RST	20H		; NEXT-CHAR
10064+20D5 C3 B2 21     		JP	o21B2		; forward to IN-NEXT-2
10065+20D8
10066+20D8              ; ---
10067+20D8
10068+20D8              ;; IN-ITEM-2
10069+20D8 FE CA        o20D8:		CP	$CA		; is the character the token 'LINE' ?
10070+20DA 20 11        		JR	NZ,o20ED	; forward to IN-ITEM-3 if not.
10071+20DC
10072+20DC E7           		RST	20H		; NEXT-CHAR - variable must come next.
10073+20DD CD 1F 1C     		CALL	o1C1F		; routine CLASS-01 returns destination
10074+20E0              					; address of variable to be assigned.
10075+20E0              					; or generates an error if no variable
10076+20E0              					; at this position.
10077+20E0
10078+20E0 FD CB 37 FE  		SET	7,(IY+$37)	; update FLAGX  - signal handling INPUT LINE
10079+20E4 FD CB 01 76  		BIT	6,(IY+$01)	; test FLAGS  - numeric or string result ?
10080+20E8 C2 8A 1C     		JP	NZ,o1C8A	; jump back to REPORT-C if not string
10081+20EB              					; 'Nonsense in BASIC'.
10082+20EB
10083+20EB 18 0D        		JR	o20FA		; forward to IN-PROMPT to set up workspace.
10084+20ED
10085+20ED              ; ---
10086+20ED
10087+20ED              ;   the jump was here for other variables.
10088+20ED
10089+20ED              ;; IN-ITEM-3
10090+20ED CD 8D 2C     o20ED:		CALL	o2C8D		; routine ALPHA checks if character is
10091+20F0              					; a suitable variable name.
10092+20F0 D2 AF 21     		JP	NC,o21AF	; forward to IN-NEXT-1 if not
10093+20F3
10094+20F3 CD 1F 1C     		CALL	o1C1F		; routine CLASS-01 returns destination
10095+20F6              					; address of variable to be assigned.
10096+20F6 FD CB 37 BE  		RES	7,(IY+$37)	; update FLAGX  - signal not INPUT LINE.
10097+20FA
10098+20FA              ;; IN-PROMPT
10099+20FA CD 30 25     o20FA:		CALL	o2530		; routine SYNTAX-Z
10100+20FD CA B2 21     		JP	Z,o21B2		; forward to IN-NEXT-2 if checking syntax.
10101+2100
10102+2100 CD BF 16     		CALL	o16BF		; routine SET-WORK clears workspace.
10103+2103 21 71 5C     		LD	HL,	$5C71	; point to system variable FLAGX
10104+2106 CB B6        		RES	6,(HL)		; signal string result.
10105+2108 CB EE        		SET	5,(HL)		; signal in Input Mode for editor.
10106+210A 01 01 00     		LD	BC,$0001	; initialize space required to one for
10107+210D              					; the carriage return.
10108+210D CB 7E        		BIT	7,(HL)		; test FLAGX - INPUT LINE in use ?
10109+210F 20 0B        		JR	NZ,o211C	; forward to IN-PR-2 if so as that is
10110+2111              					; all the space that is required.
10111+2111
10112+2111 3A 3B 5C     		LD	A,(	$5C3B)	; load accumulator from FLAGS
10113+2114 E6 40        		AND	$40		; mask to test BIT 6 of FLAGS and clear
10114+2116              					; the other bits in A.
10115+2116              					; numeric result expected ?
10116+2116 20 02        		JR	NZ,o211A	; forward to IN-PR-1 if so
10117+2118
10118+2118 0E 03        		LD	C,$03		; increase space to three bytes for the
10119+211A              					; pair of surrounding quotes.
10120+211A
10121+211A              ;; IN-PR-1
10122+211A B6           o211A:		OR	(HL)		; if numeric result, set bit 6 of FLAGX.
10123+211B 77           		LD	(HL),A		; and update system variable
10124+211C
10125+211C              ;; IN-PR-2
10126+211C F7           o211C:		RST	30H		; BC-SPACES opens 1 or 3 bytes in workspace
10127+211D 36 0D        		LD	(HL),$0D	; insert carriage return at last new location.
10128+211F 79           		LD	A,C		; fetch the length, one or three.
10129+2120 0F           		RRCA			; lose bit 0.
10130+2121 0F           		RRCA			; test if quotes required.
10131+2122 30 05        		JR	NC,o2129	; forward to IN-PR-3 if not.
10132+2124
10133+2124 3E 22        		LD	A,$22		; load the '"' character
10134+2126 12           		LD	(DE),A		; place quote in first new location at DE.
10135+2127 2B           		DEC	HL		; decrease HL - from carriage return.
10136+2128 77           		LD	(HL),A		; and place a quote in second location.
10137+2129
10138+2129              ;; IN-PR-3
10139+2129 22 5B 5C     o2129:		LD	(	$5C5B),HL	; set keyboard cursor K_CUR to HL
10140+212C FD CB 37 7E  		BIT	7,(IY+$37)	; test FLAGX  - is this INPUT LINE ??
10141+2130 20 2C        		JR	NZ,o215E	; forward to IN-VAR-3 if so as input will
10142+2132              					; be accepted without checking its syntax.
10143+2132
10144+2132 2A 5D 5C     		LD	HL,(	$5C5D)	; fetch CH_ADD
10145+2135 E5           		PUSH	HL		; and save on stack.
10146+2136 2A 3D 5C     		LD	HL,(	$5C3D)	; fetch ERR_SP
10147+2139 E5           		PUSH	HL		; and save on stack
10148+213A
10149+213A              ;; IN-VAR-1
10150+213A 21 3A 21     o213A:		LD	HL,o213A	; address: IN-VAR-1 - this address
10151+213D E5           		PUSH	HL		; is saved on stack to handle errors.
10152+213E FD CB 30 66  		BIT	4,(IY+$30)	; test FLAGS2  - is K channel in use ?
10153+2142 28 04        		JR	Z,o2148		; forward to IN-VAR-2 if not using the
10154+2144              					; keyboard for input. (??)
10155+2144
10156+2144 ED 73 3D 5C  		LD	(	$5C3D),SP	; set ERR_SP to point to IN-VAR-1 on stack.
10157+2148
10158+2148              ;; IN-VAR-2
10159+2148 2A 61 5C     o2148:		LD	HL,(	$5C61)	; set HL to WORKSP - start of workspace.
10160+214B CD A7 11     		CALL	o11A7		; routine REMOVE-FP removes floating point
10161+214E              					; forms when looping in error condition.
10162+214E FD 36 00 FF  		LD	(IY+$00),$FF	; set ERR_NR to 'OK' cancelling the error.
10163+2152              					; but X_PTR causes flashing error marker
10164+2152              					; to be displayed at each call to the editor.
10165+2152 CD 2C 0F     		CALL	o0F2C		; routine EDITOR allows input to be entered
10166+2155              					; or corrected if this is second time around.
10167+2155
10168+2155              ; if we pass to next then there are no system errors
10169+2155
10170+2155 FD CB 01 BE  		RES	7,(IY+$01)	; update FLAGS  - signal checking syntax
10171+2159 CD B9 21     		CALL	o21B9		; routine IN-ASSIGN checks syntax using
10172+215C              					; the VAL-FET-2 and powerful SCANNING routines.
10173+215C              					; any syntax error and its back to IN-VAR-1.
10174+215C              					; but with the flashing error marker showing
10175+215C              					; where the error is.
10176+215C              					; Note. the syntax of string input has to be
10177+215C              					; checked as the user may have removed the
10178+215C              					; bounding quotes or escaped them as with
10179+215C              					; "hat" + "stand" for example.
10180+215C              					; proceed if syntax passed.
10181+215C
10182+215C 18 03        		JR	o2161		; jump forward to IN-VAR-4
10183+215E
10184+215E              ; ---
10185+215E
10186+215E              ; the jump was to here when using INPUT LINE.
10187+215E
10188+215E              ;; IN-VAR-3
10189+215E CD 2C 0F     o215E:		CALL	o0F2C		; routine EDITOR is called for input
10190+2161
10191+2161              ; when ENTER received rejoin other route but with no syntax check.
10192+2161
10193+2161              ; INPUT and INPUT LINE converge here.
10194+2161
10195+2161              ;; IN-VAR-4
10196+2161 FD 36 22 00  o2161:		LD	(IY+$22),$00	; set K_CUR_hi to a low value so that the cursor
10197+2165              					; no longer appears in the input line.
10198+2165
10199+2165 CD D6 21     		CALL	o21D6		; routine IN-CHAN-K tests if the keyboard
10200+2168              					; is being used for input.
10201+2168 20 0A        		JR	NZ,o2174	; forward to IN-VAR-5 if using another input
10202+216A              					; channel.
10203+216A
10204+216A              ; continue here if using the keyboard.
10205+216A
10206+216A CD 1D 11     		CALL	o111D		; routine ED-COPY overprints the edit line
10207+216D              					; to the lower screen. The only visible
10208+216D              					; affect is that the cursor disappears.
10209+216D              					; if you're inputting more than one item in
10210+216D              					; a statement then that becomes apparent.
10211+216D
10212+216D ED 4B 82 5C  		LD	BC,(	$5C82)	; fetch line and column from ECHO_E
10213+2171 CD D9 0D     		CALL	o0DD9		; routine CL-SET sets S-POSNL to those
10214+2174              					; values.
10215+2174
10216+2174              ; if using another input channel rejoin here.
10217+2174
10218+2174              ;; IN-VAR-5
10219+2174 21 71 5C     o2174:		LD	HL,	$5C71	; point HL to FLAGX
10220+2177 CB AE        		RES	5,(HL)		; signal not in input mode
10221+2179 CB 7E        		BIT	7,(HL)		; is this INPUT LINE ?
10222+217B CB BE        		RES	7,(HL)		; cancel the bit anyway.
10223+217D 20 1C        		JR	NZ,o219B	; forward to IN-VAR-6 if INPUT LINE.
10224+217F
10225+217F E1           		POP	HL		; drop the looping address
10226+2180 E1           		POP	HL		; drop the address of previous
10227+2181              					; error handler.
10228+2181 22 3D 5C     		LD	(	$5C3D),HL	; set ERR_SP to point to it.
10229+2184 E1           		POP	HL		; drop original CH_ADD which points to
10230+2185              					; INPUT command in BASIC line.
10231+2185 22 5F 5C     		LD	(	$5C5F),HL	; save in X_PTR while input is assigned.
10232+2188 FD CB 01 FE  		SET	7,(IY+$01)	; update FLAGS - Signal running program
10233+218C CD B9 21     		CALL	o21B9		; routine IN-ASSIGN is called again
10234+218F              					; this time the variable will be assigned
10235+218F              					; the input value without error.
10236+218F              					; Note. the previous example now
10237+218F              					; becomes "hatstand"
10238+218F
10239+218F 2A 5F 5C     		LD	HL,(	$5C5F)	; fetch stored CH_ADD value from X_PTR.
10240+2192 FD 36 26 00  		LD	(IY+$26),$00	; set X_PTR_hi so that iy is no longer relevant.
10241+2196 22 5D 5C     		LD	(	$5C5D),HL	; put restored value back in CH_ADD
10242+2199 18 17        		JR	o21B2		; forward to IN-NEXT-2 to see if anything
10243+219B              					; more in the INPUT list.
10244+219B
10245+219B              ; ---
10246+219B
10247+219B              ; the jump was to here with INPUT LINE only
10248+219B
10249+219B              ;; IN-VAR-6
10250+219B 2A 63 5C     o219B:		LD	HL,(	$5C63)	; STKBOT points to the end of the input.
10251+219E ED 5B 61 5C  		LD	DE,(	$5C61)	; WORKSP points to the beginning.
10252+21A2 37           		SCF			; prepare for true subtraction.
10253+21A3 ED 52        		SBC	HL,DE		; subtract to get length
10254+21A5 44           		LD	B,H		; transfer it to
10255+21A6 4D           		LD	C,L		; the BC register pair.
10256+21A7 CD B2 2A     		CALL	o2AB2		; routine STK-STO-$ stores parameters on
10257+21AA              					; the calculator stack.
10258+21AA CD FF 2A     		CALL	o2AFF		; routine LET assigns it to destination.
10259+21AD 18 03        		JR	o21B2		; forward to IN-NEXT-2 as print items
10260+21AF              					; not allowed with INPUT LINE.
10261+21AF              					; Note. that "hat" + "stand" will, for
10262+21AF              					; example, be unchanged as also would
10263+21AF              					; 'PRINT "Iris was here"'.
10264+21AF
10265+21AF              ; ---
10266+21AF
10267+21AF              ; the jump was to here when ALPHA found more items while looking for
10268+21AF              ; a variable name.
10269+21AF
10270+21AF              ;; IN-NEXT-1
10271+21AF CD FC 1F     o21AF:		CALL	o1FFC		; routine PR-ITEM-1 considers further items.
10272+21B2
10273+21B2              ;; IN-NEXT-2
10274+21B2 CD 4E 20     o21B2:		CALL	o204E		; routine PR-POSN-1 handles a position item.
10275+21B5 CA C1 20     		JP	Z,o20C1		; jump back to IN-ITEM-1 if the zero flag
10276+21B8              					; indicates more items are present.
10277+21B8
10278+21B8 C9           		RET			; return.
10279+21B9
10280+21B9              ; ---------------------------
10281+21B9              ; INPUT ASSIGNMENT Subroutine
10282+21B9              ; ---------------------------
10283+21B9              ; This subroutine is called twice from the INPUT command when normal
10284+21B9              ; keyboard input is assigned. On the first occasion syntax is checked
10285+21B9              ; using SCANNING. The final call with the syntax flag reset is to make
10286+21B9              ; the assignment.
10287+21B9
10288+21B9              ;; IN-ASSIGN
10289+21B9 2A 61 5C     o21B9:		LD	HL,(	$5C61)	; fetch WORKSP start of input
10290+21BC 22 5D 5C     		LD	(	$5C5D),HL	; set CH_ADD to first character
10291+21BF
10292+21BF DF           		RST	18H		; GET-CHAR ignoring leading white-space.
10293+21C0 FE E2        		CP	$E2		; is it 'STOP'
10294+21C2 28 0C        		JR	Z,o21D0		; forward to IN-STOP if so.
10295+21C4
10296+21C4 3A 71 5C     		LD	A,(	$5C71)	; load accumulator from FLAGX
10297+21C7 CD 59 1C     		CALL	o1C59		; routine VAL-FET-2 makes assignment
10298+21CA              					; or goes through the motions if checking
10299+21CA              					; syntax. SCANNING is used.
10300+21CA
10301+21CA DF           		RST	18H		; GET-CHAR
10302+21CB FE 0D        		CP	$0D		; is it carriage return ?
10303+21CD C8           		RET	Z		; return if so
10304+21CE              					; either syntax is OK
10305+21CE              					; or assignment has been made.
10306+21CE
10307+21CE              ; if another character was found then raise an error.
10308+21CE              ; User doesn't see report but the flashing error marker
10309+21CE              ; appears in the lower screen.
10310+21CE
10311+21CE              ;; REPORT-Cb
10312+21CE CF           o21CE:		RST	08H		; ERROR-1
10313+21CF 0B           		DB	$0B		; Error Report: Nonsense in BASIC
10314+21D0
10315+21D0              ;; IN-STOP
10316+21D0 CD 30 25     o21D0:		CALL	o2530		; routine SYNTAX-Z (UNSTACK-Z?)
10317+21D3 C8           		RET	Z		; return if checking syntax
10318+21D4              					; as user wouldn't see error report.
10319+21D4              					; but generate visible error report
10320+21D4              					; on second invocation.
10321+21D4
10322+21D4              ;; REPORT-H
10323+21D4 CF           o21D4:		RST	08H		; ERROR-1
10324+21D5 10           		DB	$10		; Error Report: STOP in INPUT
10325+21D6
10326+21D6              ; -----------------------------------
10327+21D6              ; THE 'TEST FOR CHANNEL K' SUBROUTINE
10328+21D6              ; -----------------------------------
10329+21D6              ;   This subroutine is called once from the keyboard INPUT command to check if
10330+21D6              ;   the input routine in use is the one for the keyboard.
10331+21D6
10332+21D6              ;; IN-CHAN-K
10333+21D6 2A 51 5C     o21D6:		LD	HL,(	$5C51)	; fetch address of current channel CURCHL
10334+21D9 23           		INC	HL		;
10335+21DA 23           		INC	HL		; advance past
10336+21DB 23           		INC	HL		; input and
10337+21DC 23           		INC	HL		; output streams
10338+21DD 7E           		LD	A,(HL)		; fetch the channel identifier.
10339+21DE FE 4B        		CP	$4B		; test for 'K'
10340+21E0 C9           		RET			; return with zero set if keyboard is use.
10341+21E1
10342+21E1              ; --------------------
10343+21E1              ; Colour Item Routines
10344+21E1              ; --------------------
10345+21E1              ;
10346+21E1              ; These routines have 3 entry points -
10347+21E1              ; 1) CO-TEMP-2 to handle a series of embedded Graphic colour items.
10348+21E1              ; 2) CO-TEMP-3 to handle a single embedded print colour item.
10349+21E1              ; 3) CO TEMP-4 to handle a colour command such as FLASH 1
10350+21E1              ;
10351+21E1              ; "Due to a bug, if you bring in a peripheral channel and later use a colour
10352+21E1              ;  statement, colour controls will be sent to it by mistake." - Steven Vickers
10353+21E1              ;  Pitman Pocket Guide, 1984.
10354+21E1              ;
10355+21E1              ; To be fair, this only applies if the last channel was other than 'K', 'S'
10356+21E1              ; or 'P', which are all that are supported by this ROM, but if that last
10357+21E1              ; channel was a microdrive file, network channel etc. then
10358+21E1              ; PAPER 6; CLS will not turn the screen yellow and
10359+21E1              ; CIRCLE INK 2; 128,88,50 will not draw a red circle.
10360+21E1              ;
10361+21E1              ; This bug does not apply to embedded PRINT items as it is quite permissible
10362+21E1              ; to mix stream altering commands and colour items.
10363+21E1              ; The fix therefore would be to ensure that CLASS-07 and CLASS-09 make
10364+21E1              ; channel 'S' the current channel when not checking syntax.
10365+21E1              ; -----------------------------------------------------------------
10366+21E1
10367+21E1              ;; CO-TEMP-1
10368+21E1 E7           o21E1:		RST	20H		; NEXT-CHAR
10369+21E2
10370+21E2              ; -> Entry point from CLASS-09. Embedded Graphic colour items.
10371+21E2              ; e.g. PLOT INK 2; PAPER 8; 128,88
10372+21E2              ; Loops till all colour items output, finally addressing the coordinates.
10373+21E2
10374+21E2              ;; CO-TEMP-2
10375+21E2 CD F2 21     o21E2:		CALL	o21F2		; routine CO-TEMP-3 to output colour control.
10376+21E5 D8           		RET	C		; return if nothing more to output. ->
10377+21E6
10378+21E6
10379+21E6 DF           		RST	18H		; GET-CHAR
10380+21E7 FE 2C        		CP	$2C		; is it ',' separator ?
10381+21E9 28 F6        		JR	Z,o21E1		; back if so to CO-TEMP-1
10382+21EB
10383+21EB FE 3B        		CP	$3B		; is it $3B separator ?
10384+21ED 28 F2        		JR	Z,o21E1		; back to CO-TEMP-1 for more.
10385+21EF
10386+21EF C3 8A 1C     		JP	o1C8A		; to REPORT-C (REPORT-Cb is within range)
10387+21F2              					; 'Nonsense in BASIC'
10388+21F2
10389+21F2              ; -------------------
10390+21F2              ; CO-TEMP-3
10391+21F2              ; -------------------
10392+21F2              ; -> this routine evaluates and outputs a colour control and parameter.
10393+21F2              ; It is called from above and also from PR-ITEM-3 to handle a single embedded
10394+21F2              ; print item e.g. PRINT PAPER 6; "Hi". In the latter case, the looping for
10395+21F2              ; multiple items is within the PR-ITEM routine.
10396+21F2              ; It is quite permissible to send these to any stream.
10397+21F2
10398+21F2              ;; CO-TEMP-3
10399+21F2 FE D9        o21F2:		CP	$D9		; is it 'INK' ?
10400+21F4 D8           		RET	C		; return if less.
10401+21F5
10402+21F5 FE DF        		CP	$DF		; compare with 'OUT'
10403+21F7 3F           		CCF			; Complement Carry Flag
10404+21F8 D8           		RET	C		; return if greater than 'OVER', $DE.
10405+21F9
10406+21F9 F5           		PUSH	AF		; save the colour token.
10407+21FA
10408+21FA E7           		RST	20H		; address NEXT-CHAR
10409+21FB F1           		POP	AF		; restore token and continue.
10410+21FC
10411+21FC              ; -> this entry point used by CLASS-07. e.g. the command PAPER 6.
10412+21FC
10413+21FC              ;; CO-TEMP-4
10414+21FC D6 C9        o21FC:		SUB	$C9		; reduce to control character $10 (INK)
10415+21FE              					; thru $15 (OVER).
10416+21FE F5           		PUSH	AF		; save control.
10417+21FF CD 82 1C     		CALL	o1C82		; routine EXPT-1NUM stacks addressed
10418+2202              					; parameter on calculator stack.
10419+2202 F1           		POP	AF		; restore control.
10420+2203 A7           		AND	A		; clear carry
10421+2204
10422+2204 CD C3 1F     		CALL	o1FC3		; routine UNSTACK-Z returns if checking syntax.
10423+2207
10424+2207 F5           		PUSH	AF		; save again
10425+2208 CD 94 1E     		CALL	o1E94		; routine FIND-INT1 fetches parameter to A.
10426+220B 57           		LD	D,A		; transfer now to D
10427+220C F1           		POP	AF		; restore control.
10428+220D
10429+220D D7           		RST	10H		; PRINT-A outputs the control to current
10430+220E              					; channel.
10431+220E 7A           		LD	A,D		; transfer parameter to A.
10432+220F
10433+220F D7           		RST	10H		; PRINT-A outputs parameter.
10434+2210 C9           		RET			; return. ->
10435+2211
10436+2211              ; -------------------------------------------------------------------------
10437+2211              ;
10438+2211              ;         {fl}{br}{   paper   }{  ink    }    The temporary colour attributes
10439+2211              ;          ___ ___ ___ ___ ___ ___ ___ ___    system variable.
10440+2211              ; ATTR_T  |   |   |   |   |   |   |   |   |
10441+2211              ;         |   |   |   |   |   |   |   |   |
10442+2211              ; 23695   |___|___|___|___|___|___|___|___|
10443+2211              ;           7   6   5   4   3   2   1   0
10444+2211              ;
10445+2211              ;
10446+2211              ;         {fl}{br}{   paper   }{  ink    }    The temporary mask used for
10447+2211              ;          ___ ___ ___ ___ ___ ___ ___ ___    transparent colours. Any bit
10448+2211              ; MASK_T  |   |   |   |   |   |   |   |   |   that is 1 shows that the
10449+2211              ;         |   |   |   |   |   |   |   |   |   corresponding attribute is
10450+2211              ; 23696   |___|___|___|___|___|___|___|___|   taken not from ATTR-T but from
10451+2211              ;           7   6   5   4   3   2   1   0     what is already on the screen.
10452+2211              ;
10453+2211              ;
10454+2211              ;         {paper9 }{ ink9 }{ inv1 }{ over1}   The print flags. Even bits are
10455+2211              ;          ___ ___ ___ ___ ___ ___ ___ ___    temporary flags. The odd bits
10456+2211              ; P_FLAG  |   |   |   |   |   |   |   |   |   are the permanent flags.
10457+2211              ;         | p | t | p | t | p | t | p | t |
10458+2211              ; 23697   |___|___|___|___|___|___|___|___|
10459+2211              ;           7   6   5   4   3   2   1   0
10460+2211              ;
10461+2211              ; -----------------------------------------------------------------------
10462+2211
10463+2211              ; ------------------------------------
10464+2211              ;  The colour system variable handler.
10465+2211              ; ------------------------------------
10466+2211              ; This is an exit branch from PO-1-OPER, PO-2-OPER
10467+2211              ; A holds control $10 (INK) to $15 (OVER)
10468+2211              ; D holds parameter 0-9 for ink/paper 0,1 or 8 for bright/flash,
10469+2211              ; 0 or 1 for over/inverse.
10470+2211
10471+2211              ;; CO-TEMP-5
10472+2211 D6 11        o2211:		SUB	$11		; reduce range $FF-$04
10473+2213 CE 00        		ADC	A,$00		; add in carry if INK
10474+2215 28 1D        		JR	Z,o2234		; forward to CO-TEMP-7 with INK and PAPER.
10475+2217
10476+2217 D6 02        		SUB	$02		; reduce range $FF-$02
10477+2219 CE 00        		ADC	A,$00		; add carry if FLASH
10478+221B 28 56        		JR	Z,o2273		; forward to CO-TEMP-C with FLASH and BRIGHT.
10479+221D
10480+221D FE 01        		CP	$01		; is it 'INVERSE' ?
10481+221F 7A           		LD	A,D		; fetch parameter for INVERSE/OVER
10482+2220 06 01        		LD	B,$01		; prepare OVER mask setting bit 0.
10483+2222 20 04        		JR	NZ,o2228	; forward to CO-TEMP-6 if OVER
10484+2224
10485+2224 07           		RLCA			; shift bit 0
10486+2225 07           		RLCA			; to bit 2
10487+2226 06 04        		LD	B,$04		; set bit 2 of mask for inverse.
10488+2228
10489+2228              ;; CO-TEMP-6
10490+2228 4F           o2228:		LD	C,A		; save the A
10491+2229 7A           		LD	A,D		; re-fetch parameter
10492+222A FE 02        		CP	$02		; is it less than 2
10493+222C 30 16        		JR	NC,o2244	; to REPORT-K if not 0 or 1.
10494+222E              					; 'Invalid colour'.
10495+222E
10496+222E 79           		LD	A,C		; restore A
10497+222F 21 91 5C     		LD	HL,	$5C91	; address system variable P_FLAG
10498+2232 18 38        		JR	o226C		; forward to exit via routine CO-CHANGE
10499+2234
10500+2234              ; ---
10501+2234
10502+2234              ; the branch was here with INK/PAPER and carry set for INK.
10503+2234
10504+2234              ;; CO-TEMP-7
10505+2234 7A           o2234:		LD	A,D		; fetch parameter
10506+2235 06 07        		LD	B,$07		; set ink mask 00000111
10507+2237 38 05        		JR	C,o223E		; forward to CO-TEMP-8 with INK
10508+2239
10509+2239 07           		RLCA			; shift bits 0-2
10510+223A 07           		RLCA			; to
10511+223B 07           		RLCA			; bits 3-5
10512+223C 06 38        		LD	B,$38		; set paper mask 00111000
10513+223E
10514+223E              ; both paper and ink rejoin here
10515+223E
10516+223E              ;; CO-TEMP-8
10517+223E 4F           o223E:		LD	C,A		; value to C
10518+223F 7A           		LD	A,D		; fetch parameter
10519+2240 FE 0A        		CP	$0A		; is it less than 10d ?
10520+2242 38 02        		JR	C,o2246		; forward to CO-TEMP-9 if so.
10521+2244
10522+2244              ; ink 10 etc. is not allowed.
10523+2244
10524+2244              ;; REPORT-K
10525+2244 CF           o2244:		RST	08H		; ERROR-1
10526+2245 13           		DB	$13		; Error Report: Invalid colour
10527+2246
10528+2246              ;; CO-TEMP-9
10529+2246 21 8F 5C     o2246:		LD	HL,	$5C8F	; address system variable ATTR_T initially.
10530+2249 FE 08        		CP	$08		; compare with 8
10531+224B 38 0B        		JR	C,o2258		; forward to CO-TEMP-B with 0-7.
10532+224D
10533+224D 7E           		LD	A,(HL)		; fetch temporary attribute as no change.
10534+224E 28 07        		JR	Z,o2257		; forward to CO-TEMP-A with INK/PAPER 8
10535+2250
10536+2250              ; it is either ink 9 or paper 9 (contrasting)
10537+2250
10538+2250 B0           		OR	B		; or with mask to make white
10539+2251 2F           		CPL			; make black and change other to dark
10540+2252 E6 24        		AND	$24		; 00100100
10541+2254 28 01        		JR	Z,o2257		; forward to CO-TEMP-A if black and
10542+2256              					; originally light.
10543+2256
10544+2256 78           		LD	A,B		; else just use the mask (white)
10545+2257
10546+2257              ;; CO-TEMP-A
10547+2257 4F           o2257:		LD	C,A		; save A in C
10548+2258
10549+2258              ;; CO-TEMP-B
10550+2258 79           o2258:		LD	A,C		; load colour to A
10551+2259 CD 6C 22     		CALL	o226C		; routine CO-CHANGE addressing ATTR-T
10552+225C
10553+225C 3E 07        		LD	A,$07		; put 7 in accumulator
10554+225E BA           		CP	D		; compare with parameter
10555+225F 9F           		SBC	A,A		; $00 if 0-7, $FF if 8
10556+2260 CD 6C 22     		CALL	o226C		; routine CO-CHANGE addressing MASK-T
10557+2263              					; mask returned in A.
10558+2263
10559+2263              ; now consider P-FLAG.
10560+2263
10561+2263 07           		RLCA			; 01110000 or 00001110
10562+2264 07           		RLCA			; 11100000 or 00011100
10563+2265 E6 50        		AND	$50		; 01000000 or 00010000  (AND 01010000)
10564+2267 47           		LD	B,A		; transfer to mask
10565+2268 3E 08        		LD	A,$08		; load A with 8
10566+226A BA           		CP	D		; compare with parameter
10567+226B 9F           		SBC	A,A		; $FF if was 9,  $00 if 0-8
10568+226C              					; continue while addressing P-FLAG
10569+226C              					; setting bit 4 if ink 9
10570+226C              					; setting bit 6 if paper 9
10571+226C
10572+226C              ; -----------------------
10573+226C              ; Handle change of colour
10574+226C              ; -----------------------
10575+226C              ; This routine addresses a system variable ATTR_T, MASK_T or P-FLAG in HL.
10576+226C              ; colour value in A, mask in B.
10577+226C
10578+226C              ;; CO-CHANGE
10579+226C AE           o226C:		XOR	(HL)		; impress bits specified
10580+226D A0           		AND	B		; by mask
10581+226E AE           		XOR	(HL)		; on system variable.
10582+226F 77           		LD	(HL),A		; update system variable.
10583+2270 23           		INC	HL		; address next location.
10584+2271 78           		LD	A,B		; put current value of mask in A
10585+2272 C9           		RET			; return.
10586+2273
10587+2273              ; ---
10588+2273
10589+2273              ; the branch was here with flash and bright
10590+2273
10591+2273              ;; CO-TEMP-C
10592+2273 9F           o2273:		SBC	A,A		; set zero flag for bright.
10593+2274 7A           		LD	A,D		; fetch original parameter 0,1 or 8
10594+2275 0F           		RRCA			; rotate bit 0 to bit 7
10595+2276 06 80        		LD	B,$80		; mask for flash 10000000
10596+2278 20 03        		JR	NZ,o227D	; forward to CO-TEMP-D if flash
10597+227A
10598+227A 0F           		RRCA			; rotate bit 7 to bit 6
10599+227B 06 40        		LD	B,$40		; mask for bright 01000000
10600+227D
10601+227D              ;; CO-TEMP-D
10602+227D 4F           o227D:		LD	C,A		; store value in C
10603+227E 7A           		LD	A,D		; fetch parameter
10604+227F FE 08        		CP	$08		; compare with 8
10605+2281 28 04        		JR	Z,o2287		; forward to CO-TEMP-E if 8
10606+2283
10607+2283 FE 02        		CP	$02		; test if 0 or 1
10608+2285 30 BD        		JR	NC,o2244	; back to REPORT-K if not
10609+2287              					; 'Invalid colour'
10610+2287
10611+2287              ;; CO-TEMP-E
10612+2287 79           o2287:		LD	A,C		; value to A
10613+2288 21 8F 5C     		LD	HL,	$5C8F	; address ATTR_T
10614+228B CD 6C 22     		CALL	o226C		; routine CO-CHANGE addressing ATTR_T
10615+228E 79           		LD	A,C		; fetch value
10616+228F 0F           		RRCA			; for flash8/bright8 complete
10617+2290 0F           		RRCA			; rotations to put set bit in
10618+2291 0F           		RRCA			; bit 7 (flash) bit 6 (bright)
10619+2292 18 D8        		JR	o226C		; back to CO-CHANGE addressing MASK_T
10620+2294              					; and indirect return.
10621+2294
10622+2294              ; ---------------------
10623+2294              ; Handle BORDER command
10624+2294              ; ---------------------
10625+2294              ; Command syntax example: BORDER 7
10626+2294              ; This command routine sets the border to one of the eight colours.
10627+2294              ; The colours used for the lower screen are based on this.
10628+2294
10629+2294              ;; BORDER
10630+2294 CD 94 1E     o2294:		CALL	o1E94		; routine FIND-INT1
10631+2297 FE 08        		CP	$08		; must be in range 0 (black) to 7 (white)
10632+2299 30 A9        		JR	NC,o2244	; back to REPORT-K if not
10633+229B              					; 'Invalid colour'.
10634+229B
10635+229B D3 FE        		OUT	($FE),A		; outputting to port effects an immediate
10636+229D              					; change.
10637+229D 07           		RLCA			; shift the colour to
10638+229E 07           		RLCA			; the paper bits setting the
10639+229F 07           		RLCA			; ink colour black.
10640+22A0 CB 6F        		BIT	5,A		; is the number light coloured ?
10641+22A2              					; i.e. in the range green to white.
10642+22A2 20 02        		JR	NZ,o22A6	; skip to BORDER-1 if so
10643+22A4
10644+22A4 EE 07        		XOR	$07		; make the ink white.
10645+22A6
10646+22A6              ;; BORDER-1
10647+22A6 32 48 5C     o22A6:		LD	(	$5C48),A	; update BORDCR with new paper/ink
10648+22A9 C9           		RET			; return.
10649+22AA
10650+22AA              ; -----------------
10651+22AA              ; Get pixel address
10652+22AA              ; -----------------
10653+22AA              ;
10654+22AA              ;
10655+22AA
10656+22AA              ;; PIXEL-ADD
10657+22AA 3E AF        o22AA:		LD	A,$AF		; load with 175 decimal.
10658+22AC 90           		SUB	B		; subtract the y value.
10659+22AD DA F9 24     		JP	C,o24F9		; jump forward to REPORT-Bc if greater.
10660+22B0              					; 'Integer out of range'
10661+22B0
10662+22B0              ; the high byte is derived from Y only.
10663+22B0              ; the first 3 bits are always 010
10664+22B0              ; the next 2 bits denote in which third of the screen the byte is.
10665+22B0              ; the last 3 bits denote in which of the 8 scan lines within a third
10666+22B0              ; the byte is located. There are 24 discrete values.
10667+22B0
10668+22B0
10669+22B0 47           		LD	B,A		; the line number from top of screen to B.
10670+22B1 A7           		AND	A		; clear carry (already clear)
10671+22B2 1F           		RRA			;                     0xxxxxxx
10672+22B3 37           		SCF			; set carry flag
10673+22B4 1F           		RRA			;                     10xxxxxx
10674+22B5 A7           		AND	A		; clear carry flag
10675+22B6 1F           		RRA			;                     010xxxxx
10676+22B7
10677+22B7 A8           		XOR	B		;
10678+22B8 E6 F8        		AND	$F8		; keep the top 5 bits 11111000
10679+22BA A8           		XOR	B		;                     010xxbbb
10680+22BB 67           		LD	H,A		; transfer high byte to H.
10681+22BC
10682+22BC              ; the low byte is derived from both X and Y.
10683+22BC
10684+22BC 79           		LD	A,C		; the x value 0-255.
10685+22BD 07           		RLCA			;
10686+22BE 07           		RLCA			;
10687+22BF 07           		RLCA			;
10688+22C0 A8           		XOR	B		; the y value
10689+22C1 E6 C7        		AND	$C7		; apply mask             11000111
10690+22C3 A8           		XOR	B		; restore unmasked bits  xxyyyxxx
10691+22C4 07           		RLCA			; rotate to              xyyyxxxx
10692+22C5 07           		RLCA			; required position.     yyyxxxxx
10693+22C6 6F           		LD	L,A		; low byte to L.
10694+22C7
10695+22C7              ; finally form the pixel position in A.
10696+22C7
10697+22C7 79           		LD	A,C		; x value to A
10698+22C8 E6 07        		AND	$07		; mod 8
10699+22CA C9           		RET			; return
10700+22CB
10701+22CB              ; ----------------
10702+22CB              ; Point Subroutine
10703+22CB              ; ----------------
10704+22CB              ; The point subroutine is called from s-point via the scanning functions
10705+22CB              ; table.
10706+22CB
10707+22CB              ;; POINT-SUB
10708+22CB CD 07 23     o22CB:		CALL	o2307		; routine STK-TO-BC
10709+22CE CD AA 22     		CALL	o22AA		; routine PIXEL-ADD finds address of pixel.
10710+22D1 47           		LD	B,A		; pixel position to B, 0-7.
10711+22D2 04           		INC	B		; increment to give rotation count 1-8.
10712+22D3 7E           		LD	A,(HL)		; fetch byte from screen.
10713+22D4
10714+22D4              ;; POINT-LP
10715+22D4 07           o22D4:		RLCA
10716+22D5 10 FD        		DJNZ	o22D4		; to POINT-LP until pixel at right.
10717+22D7
10718+22D7 E6 01        		AND	$01		; test to give zero or one.
10719+22D9 C3 28 2D     		JP	o2D28		; jump forward to STACK-A to save result.
10720+22DC
10721+22DC              ; -------------------
10722+22DC              ; Handle PLOT command
10723+22DC              ; -------------------
10724+22DC              ; Command Syntax example: PLOT 128,88
10725+22DC              ;
10726+22DC
10727+22DC              ;; PLOT
10728+22DC CD 07 23     o22DC:		CALL	o2307		; routine STK-TO-BC
10729+22DF CD E5 22     		CALL	o22E5		; routine PLOT-SUB
10730+22E2 C3 4D 0D     		JP	o0D4D		; to TEMPS
10731+22E5
10732+22E5              ; -------------------
10733+22E5              ; The Plot subroutine
10734+22E5              ; -------------------
10735+22E5              ; A screen byte holds 8 pixels so it is necessary to rotate a mask
10736+22E5              ; into the correct position to leave the other 7 pixels unaffected.
10737+22E5              ; However all 64 pixels in the character cell take any embedded colour
10738+22E5              ; items.
10739+22E5              ; A pixel can be reset (inverse 1), toggled (over 1), or set ( with inverse
10740+22E5              ; and over switches off). With both switches on, the byte is simply put
10741+22E5              ; back on the screen though the colours may change.
10742+22E5
10743+22E5              ;; PLOT-SUB
10744+22E5 ED 43 7D 5C  o22E5:		LD	(	$5C7D),BC	; store new x/y values in COORDS
10745+22E9 CD AA 22     		CALL	o22AA		; routine PIXEL-ADD gets address in HL,
10746+22EC              					; count from left 0-7 in B.
10747+22EC 47           		LD	B,A		; transfer count to B.
10748+22ED 04           		INC	B		; increase 1-8.
10749+22EE 3E FE        		LD	A,$FE		; 11111110 in A.
10750+22F0
10751+22F0              ;; PLOT-LOOP
10752+22F0 0F           o22F0:		RRCA
10753+22F1 10 FD        		DJNZ	o22F0		; to PLOT-LOOP until B circular rotations.
10754+22F3
10755+22F3 47           		LD	B,A		; load mask to B
10756+22F4 7E           		LD	A,(HL)		; fetch screen byte to A
10757+22F5
10758+22F5 FD 4E 57     		LD	C,(IY+$57)	; P_FLAG to C
10759+22F8 CB 41        		BIT	0,C		; is it to be OVER 1 ?
10760+22FA 20 01        		JR	NZ,o22FD	; forward to PL-TST-IN if so.
10761+22FC
10762+22FC              ; was over 0
10763+22FC
10764+22FC A0           		AND	B		; combine with mask to blank pixel.
10765+22FD
10766+22FD              ;; PL-TST-IN
10767+22FD CB 51        o22FD:		BIT	2,C		; is it inverse 1 ?
10768+22FF 20 02        		JR	NZ,o2303	; to PLOT-END if so.
10769+2301
10770+2301 A8           		XOR	B		; switch the pixel
10771+2302 2F           		CPL			; restore other 7 bits
10772+2303
10773+2303              ;; PLOT-END
10774+2303 77           o2303:		LD	(HL),A		; load byte to the screen.
10775+2304 C3 DB 0B     		JP	o0BDB		; exit to PO-ATTR to set colours for cell.
10776+2307
10777+2307              ; ------------------------------
10778+2307              ; Put two numbers in BC register
10779+2307              ; ------------------------------
10780+2307              ;
10781+2307              ;
10782+2307
10783+2307              ;; STK-TO-BC
10784+2307 CD 14 23     o2307:		CALL	o2314		; routine STK-TO-A
10785+230A 47           		LD	B,A		;
10786+230B C5           		PUSH	BC		;
10787+230C CD 14 23     		CALL	o2314		; routine STK-TO-A
10788+230F 59           		LD	E,C		;
10789+2310 C1           		POP	BC		;
10790+2311 51           		LD	D,C		;
10791+2312 4F           		LD	C,A		;
10792+2313 C9           		RET			;
10793+2314
10794+2314              ; -----------------------
10795+2314              ; Put stack in A register
10796+2314              ; -----------------------
10797+2314              ; This routine puts the last value on the calculator stack into the accumulator
10798+2314              ; deleting the last value.
10799+2314
10800+2314              ;; STK-TO-A
10801+2314 CD D5 2D     o2314:		CALL	o2DD5		; routine FP-TO-A compresses last value into
10802+2317              					; accumulator. e.g. PI would become 3.
10803+2317              					; zero flag set if positive.
10804+2317 DA F9 24     		JP	C,o24F9		; jump forward to REPORT-Bc if >= 255.5.
10805+231A
10806+231A 0E 01        		LD	C,$01		; prepare a positive sign byte.
10807+231C C8           		RET	Z		; return if FP-TO-BC indicated positive.
10808+231D
10809+231D 0E FF        		LD	C,$FF		; prepare negative sign byte and
10810+231F C9           		RET			; return.
10811+2320
10812+2320
10813+2320              ; --------------------
10814+2320              ; THE 'CIRCLE' COMMAND
10815+2320              ; --------------------
10816+2320              ;   "Goe not Thou about to Square eyther circle" -
10817+2320              ;   - John Donne, Cambridge educated theologian, 1624
10818+2320              ;
10819+2320              ;   The CIRCLE command draws a circle as a series of straight lines.
10820+2320              ;   In some ways it can be regarded as a polygon, but the first line is drawn
10821+2320              ;   as a tangent, taking the radius as its distance from the centre.
10822+2320              ;
10823+2320              ;   Both the CIRCLE algorithm and the ARC drawing algorithm make use of the
10824+2320              ;   'ROTATION FORMULA' (see later).  It is only necessary to work out where
10825+2320              ;   the first line will be drawn and how long it is and then the rotation
10826+2320              ;   formula takes over and calculates all other rotated points.
10827+2320              ;
10828+2320              ;   All Spectrum circles consist of two vertical lines at each side and two
10829+2320              ;   horizontal lines at the top and bottom. The number of lines is calculated
10830+2320              ;   from the radius of the circle and is always divisible by 4. For complete
10831+2320              ;   circles it will range from 4 for a square circle to 32 for a circle of
10832+2320              ;   radius 87. The Spectrum can attempt larger circles e.g. CIRCLE 0,14,255
10833+2320              ;   but these will error as they go off-screen after four lines are drawn.
10834+2320              ;   At the opposite end, CIRCLE 128,88,1.23 will draw a circle as a perfect 3x3
10835+2320              ;   square using 4 straight lines although very small circles are just drawn as
10836+2320              ;   a dot on the screen.
10837+2320              ;
10838+2320              ;   The first chord drawn is the vertical chord on the right of the circle.
10839+2320              ;   The starting point is at the base of this chord which is drawn upwards and
10840+2320              ;   the circle continues in an anti-clockwise direction. As noted earlier the
10841+2320              ;   x-coordinate of this point measured from the centre of the circle is the
10842+2320              ;   radius.
10843+2320              ;
10844+2320              ;   The CIRCLE command makes extensive use of the calculator and as part of
10845+2320              ;   process of drawing a large circle, free memory is checked 1315 times.
10846+2320              ;   When drawing a large arc, free memory is checked 928 times.
10847+2320              ;   A single call to 'sin' involves 63 memory checks and so values of sine
10848+2320              ;   and cosine are pre-calculated and held in the mem locations. As a
10849+2320              ;   clever trick 'cos' is derived from 'sin' using simple arithmetic operations
10850+2320              ;   instead of the more expensive 'cos' function.
10851+2320              ;
10852+2320              ;   Initially, the syntax has been partly checked using the class for the DRAW
10853+2320              ;   command which stacks the origin of the circle (X,Y).
10854+2320
10855+2320              ;; CIRCLE
10856+2320 DF           o2320:		RST	18H		; GET-CHAR              x, y.
10857+2321 FE 2C        		CP	$2C		; Is character the required comma ?
10858+2323 C2 8A 1C     		JP	NZ,o1C8A	; Jump, if not, to REPORT-C
10859+2326              					; 'Nonsense in basic'
10860+2326
10861+2326 E7           		RST	20H		; NEXT-CHAR advances the parsed character address.
10862+2327 CD 82 1C     		CALL	o1C82		; routine EXPT-1NUM stacks radius in runtime.
10863+232A CD EE 1B     		CALL	o1BEE		; routine CHECK-END will return here in runtime
10864+232D              					; if nothing follows the command.
10865+232D
10866+232D              ;   Now make the radius positive and ensure that it is in floating point form
10867+232D              ;   so that the exponent byte can be accessed for quick testing.
10868+232D
10869+232D EF           		RST	28H		; FP-CALC              x, y, r.
10870+232E 2A           		DB	$2A		; abs                   x, y, r.
10871+232F 3D           		DB	$3D		; re-stack              x, y, r.
10872+2330 38           		DB	$38		; end-calc              x, y, r.
10873+2331
10874+2331 7E           		LD	A,(HL)		; Fetch first, floating-point, exponent byte.
10875+2332 FE 81        		CP	$81		; Compare to one.
10876+2334 30 05        		JR	NC,o233B	; Forward to C-R-GRE-1
10877+2336              					; if circle radius is greater than one.
10878+2336
10879+2336              ;    The circle is no larger than a single pixel so delete the radius from the
10880+2336              ;    calculator stack and plot a point at the centre.
10881+2336
10882+2336 EF           		RST	28H		; FP-CALC              x, y, r.
10883+2337 02           		DB	$02		; delete                x, y.
10884+2338 38           		DB	$38		; end-calc              x, y.
10885+2339
10886+2339 18 A1        		JR	o22DC		; back to PLOT routine to just plot x,y.
10887+233B
10888+233B              ; ---
10889+233B
10890+233B              ;   Continue when the circle's radius measures greater than one by forming
10891+233B              ;   the angle 2 * PI radians which is 360 degrees.
10892+233B
10893+233B              ;; C-R-GRE-1
10894+233B EF           o233B:		RST	28H		; FP-CALC      x, y, r
10895+233C A3           		DB	$A3		; stk-pi/2      x, y, r, pi/2.
10896+233D 38           		DB	$38		; end-calc      x, y, r, pi/2.
10897+233E
10898+233E              ;   Change the exponent of pi/2 from $81 to $83 giving 2*PI the central angle.
10899+233E              ;   This is quicker than multiplying by four.
10900+233E
10901+233E 36 83        		LD	(HL),$83	;               x, y, r, 2*PI.
10902+2340
10903+2340              ;   Now store this important constant in mem-5 and delete so that other
10904+2340              ;   parameters can be derived from it, by a routine shared with DRAW.
10905+2340
10906+2340 EF           		RST	28H		; FP-CALC      x, y, r, 2*PI.
10907+2341 C5           		DB	$C5		; st-mem-5      store 2*PI in mem-5
10908+2342 02           		DB	$02		; delete        x, y, r.
10909+2343 38           		DB	$38		; end-calc      x, y, r.
10910+2344
10911+2344              ;   The parameters derived from mem-5 (A) and from the radius are set up in
10912+2344              ;   four of the other mem locations by the CIRCLE DRAW PARAMETERS routine which
10913+2344              ;   also returns the number of straight lines in the B register.
10914+2344
10915+2344 CD 7D 24     		CALL	o247D		; routine CD-PRMS1
10916+2347
10917+2347              ; mem-0 ; A/No of lines (=a)            unused
10918+2347              ; mem-1 ; sin(a/2)  will be moving x    var
10919+2347              ; mem-2 ; -         will be moving y    var
10920+2347              ; mem-3 ; cos(a)                        const
10921+2347              ; mem-4 ; sin(a)                        const
10922+2347              ; mem-5 ; Angle of rotation (A) (2*PI)  const
10923+2347              ; B     ; Number of straight lines.
10924+2347
10925+2347 C5           		PUSH	BC		; Preserve the number of lines in B.
10926+2348
10927+2348              ;   Next calculate the length of half a chord by multiplying the sine of half
10928+2348              ;   the central angle by the radius of the circle.
10929+2348
10930+2348 EF           		RST	28H		; FP-CALC      x, y, r.
10931+2349 31           		DB	$31		; duplicate     x, y, r, r.
10932+234A E1           		DB	$E1		; get-mem-1     x, y, r, r, sin(a/2).
10933+234B 04           		DB	$04		; multiply      x, y, r, half-chord.
10934+234C 38           		DB	$38		; end-calc      x, y, r, half-chord.
10935+234D
10936+234D 7E           		LD	A,(HL)		; fetch exponent  of the half arc to A.
10937+234E FE 80        		CP	$80		; compare to a half pixel
10938+2350 30 08        		JR	NC,o235A	; forward, if greater than .5, to C-ARC-GE1
10939+2352
10940+2352              ;   If the first line is less than .5 then 4 'lines' would be drawn on the same
10941+2352              ;   spot so tidy the calculator stack and machine stack and plot the centre.
10942+2352
10943+2352 EF           		RST	28H		; FP-CALC      x, y, r, hc.
10944+2353 02           		DB	$02		; delete        x, y, r.
10945+2354 02           		DB	$02		; delete        x, y.
10946+2355 38           		DB	$38		; end-calc      x, y.
10947+2356
10948+2356 C1           		POP	BC		; Balance machine stack by taking chord-count.
10949+2357
10950+2357 C3 DC 22     		JP	o22DC		; JUMP to PLOT
10951+235A
10952+235A              ; ---
10953+235A
10954+235A              ;   The arc is greater than 0.5 so the circle can be drawn.
10955+235A
10956+235A              ;; C-ARC-GE1
10957+235A EF           o235A:		RST	28H		; FP-CALC      x, y, r, hc.
10958+235B C2           		DB	$C2		; st-mem-2      x, y, r, half chord to mem-2.
10959+235C 01           		DB	$01		; exchange      x, y, hc, r.
10960+235D C0           		DB	$C0		; st-mem-0      x, y, hc, r.
10961+235E 02           		DB	$02		; delete        x, y, hc.
10962+235F
10963+235F              ;   Subtract the length of the half-chord from the absolute y coordinate to
10964+235F              ;   give the starting y coordinate sy.
10965+235F              ;   Note that for a circle this is also the end coordinate.
10966+235F
10967+235F 03           		DB	$03		; subtract      x, y-hc.  (The start y-coord)
10968+2360 01           		DB	$01		; exchange      sy, x.
10969+2361
10970+2361              ;   Next simply add the radius to the x coordinate to give a fuzzy x-coordinate.
10971+2361              ;   Strictly speaking, the radius should be multiplied by cos(a/2) first but
10972+2361              ;   doing it this way makes the circle slightly larger.
10973+2361
10974+2361 E0           		DB	$E0		; get-mem-0     sy, x, r.
10975+2362 0F           		DB	$0F		; addition      sy, x+r.  (The start x-coord)
10976+2363
10977+2363              ;   We now want three copies of this pair of values on the calculator stack.
10978+2363              ;   The first pair remain on the stack throughout the circle routine and are
10979+2363              ;   the end points. The next pair will be the moving absolute values of x and y
10980+2363              ;   that are updated after each line is drawn. The final pair will be loaded
10981+2363              ;   into the COORDS system variable so that the first vertical line starts at
10982+2363              ;   the right place.
10983+2363
10984+2363 C0           		DB	$C0		; st-mem-0      sy, sx.
10985+2364 01           		DB	$01		; exchange      sx, sy.
10986+2365 31           		DB	$31		; duplicate     sx, sy, sy.
10987+2366 E0           		DB	$E0		; get-mem-0     sx, sy, sy, sx.
10988+2367 01           		DB	$01		; exchange      sx, sy, sx, sy.
10989+2368 31           		DB	$31		; duplicate     sx, sy, sx, sy, sy.
10990+2369 E0           		DB	$E0		; get-mem-0     sx, sy, sx, sy, sy, sx.
10991+236A
10992+236A              ;   Locations mem-1 and mem-2 are the relative x and y values which are updated
10993+236A              ;   after each line is drawn. Since we are drawing a vertical line then the rx
10994+236A              ;   value in mem-1 is zero and the ry value in mem-2 is the full chord.
10995+236A
10996+236A A0           		DB	$A0		; stk-zero      sx, sy, sx, sy, sy, sx, 0.
10997+236B C1           		DB	$C1		; st-mem-1      sx, sy, sx, sy, sy, sx, 0.
10998+236C 02           		DB	$02		; delete        sx, sy, sx, sy, sy, sx.
10999+236D
11000+236D              ;   Although the three pairs of x/y values are the same for a circle, they
11001+236D              ;   will be labelled terminating, absolute and start coordinates.
11002+236D
11003+236D 38           		DB	$38		; end-calc      tx, ty, ax, ay, sy, sx.
11004+236E
11005+236E              ;   Use the exponent manipulating trick again to double the value of mem-2.
11006+236E
11007+236E FD 34 62     		INC	(IY+$62)	; Increment MEM-2-1st doubling half chord.
11008+2371
11009+2371              ;   Note. this first vertical chord is drawn at the radius so circles are
11010+2371              ;   slightly dispoaced to the right.
11011+2371              ;   It is only necessary to place the values (sx) and (sy) in the system
11012+2371              ;   variable COORDS to ensure that drawing commences at the correct pixel.
11013+2371              ;   Note. a couple of LD (COORDS),A instructions would have been quicker, and
11014+2371              ;   simpler, than using LD (COORDS),HL.
11015+2371
11016+2371 CD 94 1E     		CALL	o1E94		; routine FIND-INT1 fetches sx from stack to A.
11017+2374
11018+2374 6F           		LD	L,A		; place X value in L.
11019+2375 E5           		PUSH	HL		; save the holding register.
11020+2376
11021+2376 CD 94 1E     		CALL	o1E94		; routine FIND-INT1 fetches sy to A
11022+2379
11023+2379 E1           		POP	HL		; restore the holding register.
11024+237A 67           		LD	H,A		; and place y value in high byte.
11025+237B
11026+237B 22 7D 5C     		LD	(	$5C7D),HL	; Update the COORDS system variable.
11027+237E              					;
11028+237E              					;               tx, ty, ax, ay.
11029+237E
11030+237E C1           		POP	BC		; restore the chord count
11031+237F              					; values 4,8,12,16,20,24,28 or 32.
11032+237F
11033+237F C3 20 24     		JP	o2420		; forward to DRW-STEPS
11034+2382              					;               tx, ty, ax, ay.
11035+2382
11036+2382              ;   Note. the jump to DRW-STEPS is just to decrement B and jump into the
11037+2382              ;   middle of the arc-drawing loop. The arc count which includes the first
11038+2382              ;   vertical arc draws one less than the perceived number of arcs.
11039+2382              ;   The final arc offsets are obtained by subtracting the final COORDS value
11040+2382              ;   from the initial sx and sy values which are kept at the base of the
11041+2382              ;   calculator stack throughout the arc loop.
11042+2382              ;   This ensures that the final line finishes exactly at the starting pixel
11043+2382              ;   removing the possibility of any inaccuracy.
11044+2382              ;   Since the initial sx and sy values are not required until the final arc
11045+2382              ;   is drawn, they are not shown until then.
11046+2382              ;   As the calculator stack is quite busy, only the active parts are shown in
11047+2382              ;   each section.
11048+2382
11049+2382
11050+2382              ; ------------------
11051+2382              ; THE 'DRAW' COMMAND
11052+2382              ; ------------------
11053+2382              ;   The Spectrum's DRAW command is overloaded and can take two parameters sets.
11054+2382              ;
11055+2382              ;   With two parameters, it simply draws an approximation to a straight line
11056+2382              ;   at offset x,y using the LINE-DRAW routine.
11057+2382              ;
11058+2382              ;   With three parameters, an arc is drawn to the point at offset x,y turning
11059+2382              ;   through an angle, in radians, supplied by the third parameter.
11060+2382              ;   The arc will consist of 4 to 252 straight lines each one of which is drawn
11061+2382              ;   by calls to the DRAW-LINE routine.
11062+2382
11063+2382              ;; DRAW
11064+2382 DF           o2382:		RST	18H		; GET-CHAR
11065+2383 FE 2C        		CP	$2C		; is it the comma character ?
11066+2385 28 06        		JR	Z,o238D		; forward, if so, to DR-3-PRMS
11067+2387
11068+2387              ;   There are two parameters e.g. DRAW 255,175
11069+2387
11070+2387 CD EE 1B     		CALL	o1BEE		; routine CHECK-END
11071+238A
11072+238A C3 77 24     		JP	o2477		; jump forward to LINE-DRAW
11073+238D
11074+238D              ; ---
11075+238D
11076+238D              ;    There are three parameters e.g. DRAW 255, 175, .5
11077+238D              ;    The first two are relative coordinates and the third is the angle of
11078+238D              ;    rotation in radians (A).
11079+238D
11080+238D              ;; DR-3-PRMS
11081+238D E7           o238D:		RST	20H		; NEXT-CHAR skips over the 'comma'.
11082+238E
11083+238E CD 82 1C     		CALL	o1C82		; routine EXPT-1NUM stacks the rotation angle.
11084+2391
11085+2391 CD EE 1B     		CALL	o1BEE		; routine CHECK-END
11086+2394
11087+2394              ;   Now enter the calculator and store the complete rotation angle in mem-5
11088+2394
11089+2394 EF           		RST	28H		; FP-CALC      x, y, A.
11090+2395 C5           		DB	$C5		; st-mem-5      x, y, A.
11091+2396
11092+2396              ;   Test the angle for the special case of 360 degrees.
11093+2396
11094+2396 A2           		DB	$A2		; stk-half      x, y, A, 1/2.
11095+2397 04           		DB	$04		; multiply      x, y, A/2.
11096+2398 1F           		DB	$1F		; sin           x, y, sin(A/2).
11097+2399 31           		DB	$31		; duplicate     x, y, sin(A/2),sin(A/2)
11098+239A 30           		DB	$30		; not           x, y, sin(A/2), (0/1).
11099+239B 30           		DB	$30		; not           x, y, sin(A/2), (1/0).
11100+239C 00           		DB	$00		; jump-true     x, y, sin(A/2).
11101+239D
11102+239D 06           		DB	$06		; forward to o23A3, DR-SIN-NZ
11103+239E              					; if sin(r/2) is not zero.
11104+239E
11105+239E              ;   The third parameter is 2*PI (or a multiple of 2*PI) so a 360 degrees turn
11106+239E              ;   would just be a straight line.  Eliminating this case here prevents
11107+239E              ;   division by zero at later stage.
11108+239E
11109+239E 02           		DB	$02		; delete        x, y.
11110+239F 38           		DB	$38		; end-calc      x, y.
11111+23A0
11112+23A0 C3 77 24     		JP	o2477		; forward to LINE-DRAW
11113+23A3
11114+23A3              ; ---
11115+23A3
11116+23A3              ;   An arc can be drawn.
11117+23A3
11118+23A3              ;; DR-SIN-NZ
11119+23A3 C0           o23A3:		DB	$C0		; st-mem-0      x, y, sin(A/2).   store mem-0
11120+23A4 02           		DB	$02		; delete        x, y.
11121+23A5
11122+23A5              ;   The next step calculates (roughly) the diameter of the circle of which the
11123+23A5              ;   arc will form part.  This value does not have to be too accurate as it is
11124+23A5              ;   only used to evaluate the number of straight lines and then discarded.
11125+23A5              ;   After all for a circle, the radius is used. Consequently, a circle of
11126+23A5              ;   radius 50 will have 24 straight lines but an arc of radius 50 will have 20
11127+23A5              ;   straight lines - when drawn in any direction.
11128+23A5              ;   So that simple arithmetic can be used, the length of the chord can be
11129+23A5              ;   calculated as X+Y rather than by Pythagoras Theorem and the sine of the
11130+23A5              ;   nearest angle within reach is used.
11131+23A5
11132+23A5 C1           		DB	$C1		; st-mem-1      x, y.             store mem-1
11133+23A6 02           		DB	$02		; delete        x.
11134+23A7
11135+23A7 31           		DB	$31		; duplicate     x, x.
11136+23A8 2A           		DB	$2A		; abs           x, x (+ve).
11137+23A9 E1           		DB	$E1		; get-mem-1     x, X, y.
11138+23AA 01           		DB	$01		; exchange      x, y, X.
11139+23AB E1           		DB	$E1		; get-mem-1     x, y, X, y.
11140+23AC 2A           		DB	$2A		; abs           x, y, X, Y (+ve).
11141+23AD 0F           		DB	$0F		; addition      x, y, X+Y.
11142+23AE E0           		DB	$E0		; get-mem-0     x, y, X+Y, sin(A/2).
11143+23AF 05           		DB	$05		; division      x, y, X+Y/sin(A/2).
11144+23B0 2A           		DB	$2A		; abs           x, y, X+Y/sin(A/2) = D.
11145+23B1
11146+23B1              ;    Bring back sin(A/2) from mem-0 which will shortly get trashed.
11147+23B1              ;    Then bring D to the top of the stack again.
11148+23B1
11149+23B1 E0           		DB	$E0		; get-mem-0     x, y, D, sin(A/2).
11150+23B2 01           		DB	$01		; exchange      x, y, sin(A/2), D.
11151+23B3
11152+23B3              ;   Note. that since the value at the top of the stack has arisen as a result
11153+23B3              ;   of division then it can no longer be in integer form and the next re-stack
11154+23B3              ;   is unnecessary. Only the Sinclair ZX80 had integer division.
11155+23B3
11156+23B3 3D           		DB	$3D		; re-stack      (unnecessary)
11157+23B4
11158+23B4 38           		DB	$38		; end-calc      x, y, sin(A/2), D.
11159+23B5
11160+23B5              ;   The next test avoids drawing 4 straight lines when the start and end pixels
11161+23B5              ;   are adjacent (or the same) but is probably best dispensed with.
11162+23B5
11163+23B5 7E           		LD	A,(HL)		; fetch exponent byte of D.
11164+23B6 FE 81        		CP	$81		; compare to 1
11165+23B8 30 07        		JR	NC,o23C1	; forward, if > 1,  to DR-PRMS
11166+23BA
11167+23BA              ;   else delete the top two stack values and draw a simple straight line.
11168+23BA
11169+23BA EF           		RST	28H		; FP-CALC
11170+23BB 02           		DB	$02		; delete
11171+23BC 02           		DB	$02		; delete
11172+23BD 38           		DB	$38		; end-calc      x, y.
11173+23BE
11174+23BE C3 77 24     		JP	o2477		; to LINE-DRAW
11175+23C1
11176+23C1              ; ---
11177+23C1
11178+23C1              ;   The ARC will consist of multiple straight lines so call the CIRCLE-DRAW
11179+23C1              ;   PARAMETERS ROUTINE to pre-calculate sine values from the angle (in mem-5)
11180+23C1              ;   and determine also the number of straight lines from that value and the
11181+23C1              ;   'diameter' which is at the top of the calculator stack.
11182+23C1
11183+23C1              ;; DR-PRMS
11184+23C1 CD 7D 24     o23C1:		CALL	o247D		; routine CD-PRMS1
11185+23C4
11186+23C4              ; mem-0 ; (A)/No. of lines (=a) (step angle)
11187+23C4              ; mem-1 ; sin(a/2)
11188+23C4              ; mem-2 ; -
11189+23C4              ; mem-3 ; cos(a)                        const
11190+23C4              ; mem-4 ; sin(a)                        const
11191+23C4              ; mem-5 ; Angle of rotation (A)         in
11192+23C4              ; B     ; Count of straight lines - max 252.
11193+23C4
11194+23C4 C5           		PUSH	BC		; Save the line count on the machine stack.
11195+23C5
11196+23C5              ;   Remove the now redundant diameter value D.
11197+23C5
11198+23C5 EF           		RST	28H		; FP-CALC      x, y, sin(A/2), D.
11199+23C6 02           		DB	$02		; delete        x, y, sin(A/2).
11200+23C7
11201+23C7              ;   Dividing the sine of the step angle by the sine of the total angle gives
11202+23C7              ;   the length of the initial chord on a unary circle. This factor f is used
11203+23C7              ;   to scale the coordinates of the first line which still points in the
11204+23C7              ;   direction of the end point and may be larger.
11205+23C7
11206+23C7 E1           		DB	$E1		; get-mem-1     x, y, sin(A/2), sin(a/2)
11207+23C8 01           		DB	$01		; exchange      x, y, sin(a/2), sin(A/2)
11208+23C9 05           		DB	$05		; division      x, y, sin(a/2)/sin(A/2)
11209+23CA C1           		DB	$C1		; st-mem-1      x, y. f.
11210+23CB 02           		DB	$02		; delete        x, y.
11211+23CC
11212+23CC              ;   With the factor stored, scale the x coordinate first.
11213+23CC
11214+23CC 01           		DB	$01		; exchange      y, x.
11215+23CD 31           		DB	$31		; duplicate     y, x, x.
11216+23CE E1           		DB	$E1		; get-mem-1     y, x, x, f.
11217+23CF 04           		DB	$04		; multiply      y, x, x*f    (=xx)
11218+23D0 C2           		DB	$C2		; st-mem-2      y, x, xx.
11219+23D1 02           		DB	$02		; delete        y. x.
11220+23D2
11221+23D2              ;   Now scale the y coordinate.
11222+23D2
11223+23D2 01           		DB	$01		; exchange      x, y.
11224+23D3 31           		DB	$31		; duplicate     x, y, y.
11225+23D4 E1           		DB	$E1		; get-mem-1     x, y, y, f
11226+23D5 04           		DB	$04		; multiply      x, y, y*f    (=yy)
11227+23D6
11228+23D6              ;   Note. 'sin' and 'cos' trash locations mem-0 to mem-2 so fetch mem-2 to the
11229+23D6              ;   calculator stack for safe keeping.
11230+23D6
11231+23D6 E2           		DB	$E2		; get-mem-2     x, y, yy, xx.
11232+23D7
11233+23D7              ;   Once we get the coordinates of the first straight line then the 'ROTATION
11234+23D7              ;   FORMULA' used in the arc loop will take care of all other points, but we
11235+23D7              ;   now use a variation of that formula to rotate the first arc through (A-a)/2
11236+23D7              ;   radians.
11237+23D7              ;
11238+23D7              ;       xRotated = y * sin(angle) + x * cos(angle)
11239+23D7              ;       yRotated = y * cos(angle) - x * sin(angle)
11240+23D7              ;
11241+23D7
11242+23D7 E5           		DB	$E5		; get-mem-5     x, y, yy, xx, A.
11243+23D8 E0           		DB	$E0		; get-mem-0     x, y, yy, xx, A, a.
11244+23D9 03           		DB	$03		; subtract      x, y, yy, xx, A-a.
11245+23DA A2           		DB	$A2		; stk-half      x, y, yy, xx, A-a, 1/2.
11246+23DB 04           		DB	$04		; multiply      x, y, yy, xx, (A-a)/2. (=angle)
11247+23DC 31           		DB	$31		; duplicate     x, y, yy, xx, angle, angle.
11248+23DD 1F           		DB	$1F		; sin           x, y, yy, xx, angle, sin(angle)
11249+23DE C5           		DB	$C5		; st-mem-5      x, y, yy, xx, angle, sin(angle)
11250+23DF 02           		DB	$02		; delete        x, y, yy, xx, angle
11251+23E0
11252+23E0 20           		DB	$20		; cos           x, y, yy, xx, cos(angle).
11253+23E1
11254+23E1              ;   Note. mem-0, mem-1 and mem-2 can be used again now...
11255+23E1
11256+23E1 C0           		DB	$C0		; st-mem-0      x, y, yy, xx, cos(angle).
11257+23E2 02           		DB	$02		; delete        x, y, yy, xx.
11258+23E3
11259+23E3 C2           		DB	$C2		; st-mem-2      x, y, yy, xx.
11260+23E4 02           		DB	$02		; delete        x, y, yy.
11261+23E5
11262+23E5 C1           		DB	$C1		; st-mem-1      x, y, yy.
11263+23E6 E5           		DB	$E5		; get-mem-5     x, y, yy, sin(angle)
11264+23E7 04           		DB	$04		; multiply      x, y, yy*sin(angle).
11265+23E8 E0           		DB	$E0		; get-mem-0     x, y, yy*sin(angle), cos(angle)
11266+23E9 E2           		DB	$E2		; get-mem-2     x, y, yy*sin(angle), cos(angle), xx.
11267+23EA 04           		DB	$04		; multiply      x, y, yy*sin(angle), xx*cos(angle).
11268+23EB 0F           		DB	$0F		; addition      x, y, xRotated.
11269+23EC E1           		DB	$E1		; get-mem-1     x, y, xRotated, yy.
11270+23ED 01           		DB	$01		; exchange      x, y, yy, xRotated.
11271+23EE C1           		DB	$C1		; st-mem-1      x, y, yy, xRotated.
11272+23EF 02           		DB	$02		; delete        x, y, yy.
11273+23F0
11274+23F0 E0           		DB	$E0		; get-mem-0     x, y, yy, cos(angle).
11275+23F1 04           		DB	$04		; multiply      x, y, yy*cos(angle).
11276+23F2 E2           		DB	$E2		; get-mem-2     x, y, yy*cos(angle), xx.
11277+23F3 E5           		DB	$E5		; get-mem-5     x, y, yy*cos(angle), xx, sin(angle).
11278+23F4 04           		DB	$04		; multiply      x, y, yy*cos(angle), xx*sin(angle).
11279+23F5 03           		DB	$03		; subtract      x, y, yRotated.
11280+23F6 C2           		DB	$C2		; st-mem-2      x, y, yRotated.
11281+23F7
11282+23F7              ;   Now the initial x and y coordinates are made positive and summed to see
11283+23F7              ;   if they measure up to anything significant.
11284+23F7
11285+23F7 2A           		DB	$2A		; abs           x, y, yRotated'.
11286+23F8 E1           		DB	$E1		; get-mem-1     x, y, yRotated', xRotated.
11287+23F9 2A           		DB	$2A		; abs           x, y, yRotated', xRotated'.
11288+23FA 0F           		DB	$0F		; addition      x, y, yRotated+xRotated.
11289+23FB 02           		DB	$02		; delete        x, y.
11290+23FC
11291+23FC 38           		DB	$38		; end-calc      x, y.
11292+23FD
11293+23FD              ;   Although the test value has been deleted it is still above the calculator
11294+23FD              ;   stack in memory and conveniently DE which points to the first free byte
11295+23FD              ;   addresses the exponent of the test value.
11296+23FD
11297+23FD 1A           		LD	A,(DE)		; Fetch exponent of the length indicator.
11298+23FE FE 81        		CP	$81		; Compare to that for 1
11299+2400
11300+2400 C1           		POP	BC		; Balance the machine stack
11301+2401
11302+2401 DA 77 24     		JP	C,o2477		; forward, if the coordinates of first line
11303+2404              					; don't add up to more than 1, to LINE-DRAW
11304+2404
11305+2404              ;   Continue when the arc will have a discernable shape.
11306+2404
11307+2404 C5           		PUSH	BC		; Restore line counter to the machine stack.
11308+2405
11309+2405              ;   The parameters of the DRAW command were relative and they are now converted
11310+2405              ;   to absolute coordinates by adding to the coordinates of the last point
11311+2405              ;   plotted. The first two values on the stack are the terminal tx and ty
11312+2405              ;   coordinates.  The x-coordinate is converted first but first the last point
11313+2405              ;   plotted is saved as it will initialize the moving ax, value.
11314+2405
11315+2405 EF           		RST	28H		; FP-CALC      x, y.
11316+2406 01           		DB	$01		; exchange      y, x.
11317+2407 38           		DB	$38		; end-calc      y, x.
11318+2408
11319+2408 3A 7D 5C     		LD	A,(	$5C7D)	; Fetch System Variable COORDS-x
11320+240B CD 28 2D     		CALL	o2D28		; routine STACK-A
11321+240E
11322+240E EF           		RST	28H		; FP-CALC      y, x, last-x.
11323+240F
11324+240F              ;   Store the last point plotted to initialize the moving ax value.
11325+240F
11326+240F C0           		DB	$C0		; st-mem-0      y, x, last-x.
11327+2410 0F           		DB	$0F		; addition      y, absolute x.
11328+2411 01           		DB	$01		; exchange      tx, y.
11329+2412 38           		DB	$38		; end-calc      tx, y.
11330+2413
11331+2413 3A 7E 5C     		LD	A,($5C7E)	; Fetch System Variable COORDS-y
11332+2416 CD 28 2D     		CALL	o2D28		; routine STACK-A
11333+2419
11334+2419 EF           		RST	28H		; FP-CALC      tx, y, last-y.
11335+241A
11336+241A              ;   Store the last point plotted to initialize the moving ay value.
11337+241A
11338+241A C5           		DB	$C5		; st-mem-5      tx, y, last-y.
11339+241B 0F           		DB	$0F		; addition      tx, ty.
11340+241C
11341+241C              ;   Fetch the moving ax and ay to the calculator stack.
11342+241C
11343+241C E0           		DB	$E0		; get-mem-0     tx, ty, ax.
11344+241D E5           		DB	$E5		; get-mem-5     tx, ty, ax, ay.
11345+241E 38           		DB	$38		; end-calc      tx, ty, ax, ay.
11346+241F
11347+241F C1           		POP	BC		; Restore the straight line count.
11348+2420
11349+2420              ; -----------------------------------
11350+2420              ; THE 'CIRCLE/DRAW CONVERGENCE POINT'
11351+2420              ; -----------------------------------
11352+2420              ;   The CIRCLE and ARC-DRAW commands converge here.
11353+2420              ;
11354+2420              ;   Note. for both the CIRCLE and ARC commands the minimum initial line count
11355+2420              ;   is 4 (as set up by the CD_PARAMS routine) and so the zero flag will never
11356+2420              ;   be set and the loop is always entered.  The first test is superfluous and
11357+2420              ;   the jump will always be made to ARC-START.
11358+2420
11359+2420              ;; DRW-STEPS
11360+2420 05           o2420:		DEC	B		; decrement the arc count (4,8,12,16...).
11361+2421
11362+2421 28 3C        		JR	Z,o245F		; forward, if zero (not possible), to ARC-END
11363+2423
11364+2423 18 14        		JR	o2439		; forward to ARC-START
11365+2425
11366+2425              ; --------------
11367+2425              ; THE 'ARC LOOP'
11368+2425              ; --------------
11369+2425              ;
11370+2425              ;   The arc drawing loop will draw up to 31 straight lines for a circle and up
11371+2425              ;   251 straight lines for an arc between two points. In both cases the final
11372+2425              ;   closing straight line is drawn at ARC_END, but it otherwise loops back to
11373+2425              ;   here to calculate the next coordinate using the ROTATION FORMULA where (a)
11374+2425              ;   is the previously calculated, constant CENTRAL ANGLE of the arcs.
11375+2425              ;
11376+2425              ;       Xrotated = x * cos(a) - y * sin(a)
11377+2425              ;       Yrotated = x * sin(a) + y * cos(a)
11378+2425              ;
11379+2425              ;   The values cos(a) and sin(a) are pre-calculated and held in mem-3 and mem-4
11380+2425              ;   for the duration of the routine.
11381+2425              ;   Memory location mem-1 holds the last relative x value (rx) and mem-2 holds
11382+2425              ;   the last relative y value (ry) used by DRAW.
11383+2425              ;
11384+2425              ;   Note. that this is a very clever twist on what is after all a very clever,
11385+2425              ;   well-used formula.  Normally the rotation formula is used with the x and y
11386+2425              ;   coordinates from the centre of the circle (or arc) and a supplied angle to
11387+2425              ;   produce two new x and y coordinates in an anticlockwise direction on the
11388+2425              ;   circumference of the circle.
11389+2425              ;   What is being used here, instead, is the relative X and Y parameters from
11390+2425              ;   the last point plotted that are required to get to the current point and
11391+2425              ;   the formula returns the next relative coordinates to use.
11392+2425
11393+2425              ;; ARC-LOOP
11394+2425 EF           o2425:		RST	28H		; FP-CALC
11395+2426 E1           		DB	$E1		; get-mem-1     rx.
11396+2427 31           		DB	$31		; duplicate     rx, rx.
11397+2428 E3           		DB	$E3		; get-mem-3     cos(a)
11398+2429 04           		DB	$04		; multiply      rx, rx*cos(a).
11399+242A E2           		DB	$E2		; get-mem-2     rx, rx*cos(a), ry.
11400+242B E4           		DB	$E4		; get-mem-4     rx, rx*cos(a), ry, sin(a).
11401+242C 04           		DB	$04		; multiply      rx, rx*cos(a), ry*sin(a).
11402+242D 03           		DB	$03		; subtract      rx, rx*cos(a) - ry*sin(a)
11403+242E C1           		DB	$C1		; st-mem-1      rx, new relative x rotated.
11404+242F 02           		DB	$02		; delete        rx.
11405+2430
11406+2430 E4           		DB	$E4		; get-mem-4     rx, sin(a).
11407+2431 04           		DB	$04		; multiply      rx*sin(a)
11408+2432 E2           		DB	$E2		; get-mem-2     rx*sin(a), ry.
11409+2433 E3           		DB	$E3		; get-mem-3     rx*sin(a), ry, cos(a).
11410+2434 04           		DB	$04		; multiply      rx*sin(a), ry*cos(a).
11411+2435 0F           		DB	$0F		; addition      rx*sin(a) + ry*cos(a).
11412+2436 C2           		DB	$C2		; st-mem-2      new relative y rotated.
11413+2437 02           		DB	$02		; delete        .
11414+2438 38           		DB	$38		; end-calc      .
11415+2439
11416+2439              ;   Note. the calculator stack actually holds   tx, ty, ax, ay
11417+2439              ;   and the last absolute values of x and y
11418+2439              ;   are now brought into play.
11419+2439              ;
11420+2439              ;   Magically, the two new rotated coordinates rx and ry are all that we would
11421+2439              ;   require to draw a circle or arc - on paper!
11422+2439              ;   The Spectrum DRAW routine draws to the rounded x and y coordinate and so
11423+2439              ;   repetitions of values like 3.49 would mean that the fractional parts
11424+2439              ;   would be lost until eventually the draw coordinates might differ from the
11425+2439              ;   floating point values used above by several pixels.
11426+2439              ;   For this reason the accurate offsets calculated above are added to the
11427+2439              ;   accurate, absolute coordinates maintained in ax and ay and these new
11428+2439              ;   coordinates have the integer coordinates of the last plot position
11429+2439              ;   ( from System Variable COORDS ) subtracted from them to give the relative
11430+2439              ;   coordinates required by the DRAW routine.
11431+2439
11432+2439              ;   The mid entry point.
11433+2439
11434+2439              ;; ARC-START
11435+2439 C5           o2439:		PUSH	BC		; Preserve the arc counter on the machine stack.
11436+243A
11437+243A              ;   Store the absolute ay in temporary variable mem-0 for the moment.
11438+243A
11439+243A EF           		RST	28H		; FP-CALC      ax, ay.
11440+243B C0           		DB	$C0		; st-mem-0      ax, ay.
11441+243C 02           		DB	$02		; delete        ax.
11442+243D
11443+243D              ;   Now add the fractional relative x coordinate to the fractional absolute
11444+243D              ;   x coordinate to obtain a new fractional x-coordinate.
11445+243D
11446+243D E1           		DB	$E1		; get-mem-1     ax, xr.
11447+243E 0F           		DB	$0F		; addition      ax+xr (= new ax).
11448+243F 31           		DB	$31		; duplicate     ax, ax.
11449+2440 38           		DB	$38		; end-calc      ax, ax.
11450+2441
11451+2441 3A 7D 5C     		LD	A,(	$5C7D)	; COORDS-x      last x    (integer ix 0-255)
11452+2444 CD 28 2D     		CALL	o2D28		; routine STACK-A
11453+2447
11454+2447 EF           		RST	28H		; FP-CALC      ax, ax, ix.
11455+2448 03           		DB	$03		; subtract      ax, ax-ix  = relative DRAW Dx.
11456+2449
11457+2449              ;   Having calculated the x value for DRAW do the same for the y value.
11458+2449
11459+2449 E0           		DB	$E0		; get-mem-0     ax, Dx, ay.
11460+244A E2           		DB	$E2		; get-mem-2     ax, Dx, ay, ry.
11461+244B 0F           		DB	$0F		; addition      ax, Dx, ay+ry (= new ay).
11462+244C C0           		DB	$C0		; st-mem-0      ax, Dx, ay.
11463+244D 01           		DB	$01		; exchange      ax, ay, Dx,
11464+244E E0           		DB	$E0		; get-mem-0     ax, ay, Dx, ay.
11465+244F 38           		DB	$38		; end-calc      ax, ay, Dx, ay.
11466+2450
11467+2450 3A 7E 5C     		LD	A,($5C7E)	; COORDS-y      last y (integer iy 0-175)
11468+2453 CD 28 2D     		CALL	o2D28		; routine STACK-A
11469+2456
11470+2456 EF           		RST	28H		; FP-CALC      ax, ay, Dx, ay, iy.
11471+2457 03           		DB	$03		; subtract      ax, ay, Dx, ay-iy ( = Dy).
11472+2458 38           		DB	$38		; end-calc      ax, ay, Dx, Dy.
11473+2459
11474+2459 CD B7 24     		CALL	o24B7		; Routine DRAW-LINE draws (Dx,Dy) relative to
11475+245C              					; the last pixel plotted leaving absolute x
11476+245C              					; and y on the calculator stack.
11477+245C              					;               ax, ay.
11478+245C
11479+245C C1           		POP	BC		; Restore the arc counter from the machine stack.
11480+245D
11481+245D 10 C6        		DJNZ	o2425		; Decrement and loop while > 0 to ARC-LOOP
11482+245F
11483+245F              ; -------------
11484+245F              ; THE 'ARC END'
11485+245F              ; -------------
11486+245F
11487+245F              ;   To recap the full calculator stack is       tx, ty, ax, ay.
11488+245F
11489+245F              ;   Just as one would do if drawing the curve on paper, the final line would
11490+245F              ;   be drawn by joining the last point plotted to the initial start point
11491+245F              ;   in the case of a CIRCLE or to the calculated end point in the case of
11492+245F              ;   an ARC.
11493+245F              ;   The moving absolute values of x and y are no longer required and they
11494+245F              ;   can be deleted to expose the closing coordinates.
11495+245F
11496+245F              ;; ARC-END
11497+245F EF           o245F:		RST	28H		; FP-CALC      tx, ty, ax, ay.
11498+2460 02           		DB	$02		; delete        tx, ty, ax.
11499+2461 02           		DB	$02		; delete        tx, ty.
11500+2462 01           		DB	$01		; exchange      ty, tx.
11501+2463 38           		DB	$38		; end-calc      ty, tx.
11502+2464
11503+2464              ;   First calculate the relative x coordinate to the end-point.
11504+2464
11505+2464 3A 7D 5C     		LD	A,(	$5C7D)	; COORDS-x
11506+2467 CD 28 2D     		CALL	o2D28		; routine STACK-A
11507+246A
11508+246A EF           		RST	28H		; FP-CALC      ty, tx, coords_x.
11509+246B 03           		DB	$03		; subtract      ty, rx.
11510+246C
11511+246C              ;   Next calculate the relative y coordinate to the end-point.
11512+246C
11513+246C 01           		DB	$01		; exchange      rx, ty.
11514+246D 38           		DB	$38		; end-calc      rx, ty.
11515+246E
11516+246E 3A 7E 5C     		LD	A,($5C7E)	; COORDS-y
11517+2471 CD 28 2D     		CALL	o2D28		; routine STACK-A
11518+2474
11519+2474 EF           		RST	28H		; FP-CALC      rx, ty, coords_y
11520+2475 03           		DB	$03		; subtract      rx, ry.
11521+2476 38           		DB	$38		; end-calc      rx, ry.
11522+2477
11523+2477              ;   Finally draw the last straight line.
11524+2477
11525+2477              ;; LINE-DRAW
11526+2477 CD B7 24     o2477:		CALL	o24B7		; routine DRAW-LINE draws to the relative
11527+247A              					; coordinates (rx, ry).
11528+247A
11529+247A C3 4D 0D     		JP	o0D4D		; jump back and exit via TEMPS          >>>
11530+247D
11531+247D
11532+247D              ; --------------------------------------------
11533+247D              ; THE 'INITIAL CIRCLE/DRAW PARAMETERS' ROUTINE
11534+247D              ; --------------------------------------------
11535+247D              ;   Begin by calculating the number of chords which will be returned in B.
11536+247D              ;   A rule of thumb is employed that uses a value z which for a circle is the
11537+247D              ;   radius and for an arc is the diameter with, as it happens, a pinch more if
11538+247D              ;   the arc is on a slope.
11539+247D              ;
11540+247D              ;   NUMBER OF STRAIGHT LINES = ANGLE OF ROTATION * SQUARE ROOT ( Z ) / 2
11541+247D
11542+247D              ;; CD-PRMS1
11543+247D EF           o247D:		RST	28H		; FP-CALC      z.
11544+247E 31           		DB	$31		; duplicate     z, z.
11545+247F 28           		DB	$28		; sqr           z, sqr(z).
11546+2480 34           		DB	$34		; stk-data      z, sqr(z), 2.
11547+2481 32           		DB	$32		; Exponent: $82, Bytes: 1
11548+2482 00           		DB	$00		; (+00,+00,+00)
11549+2483 01           		DB	$01		; exchange      z, 2, sqr(z).
11550+2484 05           		DB	$05		; division      z, 2/sqr(z).
11551+2485 E5           		DB	$E5		; get-mem-5     z, 2/sqr(z), ANGLE.
11552+2486 01           		DB	$01		; exchange      z, ANGLE, 2/sqr (z)
11553+2487 05           		DB	$05		; division      z, ANGLE*sqr(z)/2 (= No. of lines)
11554+2488 2A           		DB	$2A		; abs           (for arc only)
11555+2489 38           		DB	$38		; end-calc      z, number of lines.
11556+248A
11557+248A              ;    As an example for a circle of radius 87 the number of lines will be 29.
11558+248A
11559+248A CD D5 2D     		CALL	o2DD5		; routine FP-TO-A
11560+248D
11561+248D              ;    The value is compressed into A register, no carry with valid circle.
11562+248D
11563+248D 38 06        		JR	C,o2495		; forward, if over 256, to USE-252
11564+248F
11565+248F              ;    now make a multiple of 4 e.g. 29 becomes 28
11566+248F
11567+248F E6 FC        		AND	$FC		; AND 252
11568+2491
11569+2491              ;    Adding 4 could set carry for arc, for the circle example, 28 becomes 32.
11570+2491
11571+2491 C6 04        		ADD	A,$04		; adding 4 could set carry if result is 256.
11572+2493
11573+2493 30 02        		JR	NC,o2497	; forward if less than 256 to DRAW-SAVE
11574+2495
11575+2495              ;    For an arc, a limit of 252 is imposed.
11576+2495
11577+2495              ;; USE-252
11578+2495 3E FC        o2495:		LD	A,$FC		; Use a value of 252 (for arc).
11579+2497
11580+2497
11581+2497              ;   For both arcs and circles, constants derived from the central angle are
11582+2497              ;   stored in the 'mem' locations.  Some are not relevant for the circle.
11583+2497
11584+2497              ;; DRAW-SAVE
11585+2497 F5           o2497:		PUSH	AF		; Save the line count (A) on the machine stack.
11586+2498
11587+2498 CD 28 2D     		CALL	o2D28		; Routine STACK-A stacks the modified count(A).
11588+249B
11589+249B EF           		RST	28H		; FP-CALC      z, A.
11590+249C E5           		DB	$E5		; get-mem-5     z, A, ANGLE.
11591+249D 01           		DB	$01		; exchange      z, ANGLE, A.
11592+249E 05           		DB	$05		; division      z, ANGLE/A. (Angle/count = a)
11593+249F 31           		DB	$31		; duplicate     z, a, a.
11594+24A0
11595+24A0              ;  Note. that cos (a) could be formed here directly using 'cos' and stored in
11596+24A0              ;  mem-3 but that would spoil a good story and be slightly slower, as also
11597+24A0              ;  would using square roots to form cos (a) from sin (a).
11598+24A0
11599+24A0 1F           		DB	$1F		; sin           z, a, sin(a)
11600+24A1 C4           		DB	$C4		; st-mem-4      z, a, sin(a)
11601+24A2 02           		DB	$02		; delete        z, a.
11602+24A3 31           		DB	$31		; duplicate     z, a, a.
11603+24A4 A2           		DB	$A2		; stk-half      z, a, a, 1/2.
11604+24A5 04           		DB	$04		; multiply      z, a, a/2.
11605+24A6 1F           		DB	$1F		; sin           z, a, sin(a/2).
11606+24A7
11607+24A7              ;   Note. after second sin, mem-0 and mem-1 become free.
11608+24A7
11609+24A7 C1           		DB	$C1		; st-mem-1      z, a, sin(a/2).
11610+24A8 01           		DB	$01		; exchange      z, sin(a/2), a.
11611+24A9 C0           		DB	$C0		; st-mem-0      z, sin(a/2), a.  (for arc only)
11612+24AA
11613+24AA              ;   Now form cos(a) from sin(a/2) using the 'DOUBLE ANGLE FORMULA'.
11614+24AA
11615+24AA 02           		DB	$02		; delete        z, sin(a/2).
11616+24AB 31           		DB	$31		; duplicate     z, sin(a/2), sin(a/2).
11617+24AC 04           		DB	$04		; multiply      z, sin(a/2)*sin(a/2).
11618+24AD 31           		DB	$31		; duplicate     z, sin(a/2)*sin(a/2),
11619+24AE              					;;                           sin(a/2)*sin(a/2).
11620+24AE 0F           		DB	$0F		; addition      z, 2*sin(a/2)*sin(a/2).
11621+24AF A1           		DB	$A1		; stk-one       z, 2*sin(a/2)*sin(a/2), 1.
11622+24B0 03           		DB	$03		; subtract      z, 2*sin(a/2)*sin(a/2)-1.
11623+24B1
11624+24B1 1B           		DB	$1B		; negate        z, 1-2*sin(a/2)*sin(a/2).
11625+24B2
11626+24B2 C3           		DB	$C3		; st-mem-3      z, cos(a).
11627+24B3 02           		DB	$02		; delete        z.
11628+24B4 38           		DB	$38		; end-calc      z.
11629+24B5
11630+24B5              ;   The radius/diameter is left on the calculator stack.
11631+24B5
11632+24B5 C1           		POP	BC		; Restore the line count to the B register.
11633+24B6
11634+24B6 C9           		RET			; Return.
11635+24B7
11636+24B7              ; --------------------------
11637+24B7              ; THE 'DOUBLE ANGLE FORMULA'
11638+24B7              ; --------------------------
11639+24B7              ;   This formula forms cos(a) from sin(a/2) using simple arithmetic.
11640+24B7              ;
11641+24B7              ;   THE GEOMETRIC PROOF OF FORMULA   cos (a) = 1 - 2 * sin(a/2) * sin(a/2)
11642+24B7              ;
11643+24B7              ;
11644+24B7              ;                                            A
11645+24B7              ;
11646+24B7              ;                                         . /|\
11647+24B7              ;                                     .    / | \
11648+24B7              ;                                  .      /  |  \
11649+24B7              ;                               .        /   |a/2\
11650+24B7              ;                            .          /    |    \
11651+24B7              ;                         .          1 /     |     \
11652+24B7              ;                      .              /      |      \
11653+24B7              ;                   .                /       |       \
11654+24B7              ;                .                  /        |        \
11655+24B7              ;             .  a/2             D / a      E|-+       \
11656+24B7              ;          B ---------------------/----------+-+--------\ C
11657+24B7              ;            <-         1       -><-       1           ->
11658+24B7              ;
11659+24B7              ;   cos a = 1 - 2 * sin(a/2) * sin(a/2)
11660+24B7              ;
11661+24B7              ;   The figure shows a right triangle that inscribes a circle of radius 1 with
11662+24B7              ;   centre, or origin, D.  Line BC is the diameter of length 2 and A is a point
11663+24B7              ;   on the circle. The periphery angle BAC is therefore a right angle by the
11664+24B7              ;   Rule of Thales.
11665+24B7              ;   Line AC is a chord touching two points on the circle and the angle at the
11666+24B7              ;   centre is (a).
11667+24B7              ;   Since the vertex of the largest triangle B touches the circle, the
11668+24B7              ;   inscribed angle (a/2) is half the central angle (a).
11669+24B7              ;   The cosine of (a) is the length DE as the hypotenuse is of length 1.
11670+24B7              ;   This can also be expressed as 1-length CE.  Examining the triangle at the
11671+24B7              ;   right, the top angle is also (a/2) as angle BAE and EBA add to give a right
11672+24B7              ;   angle as do BAE and EAC.
11673+24B7              ;   So cos (a) = 1 - AC * sin(a/2)
11674+24B7              ;   Looking at the largest triangle, side AC can be expressed as
11675+24B7              ;   AC = 2 * sin(a/2)   and so combining these we get
11676+24B7              ;   cos (a) = 1 - 2 * sin(a/2) * sin(a/2).
11677+24B7              ;
11678+24B7              ;   "I will be sufficiently rewarded if when telling it to others, you will
11679+24B7              ;    not claim the discovery as your own, but will say it is mine."
11680+24B7              ;   - Thales, 640 - 546 B.C.
11681+24B7              ;
11682+24B7              ; --------------------------
11683+24B7              ; THE 'LINE DRAWING' ROUTINE
11684+24B7              ; --------------------------
11685+24B7              ;
11686+24B7              ;
11687+24B7
11688+24B7              ;; DRAW-LINE
11689+24B7 CD 07 23     o24B7:		CALL	o2307		; routine STK-TO-BC
11690+24BA 79           		LD	A,C		;
11691+24BB B8           		CP	B		;
11692+24BC 30 06        		JR	NC,o24C4	; to DL-X-GE-Y
11693+24BE
11694+24BE 69           		LD	L,C		;
11695+24BF D5           		PUSH	DE		;
11696+24C0 AF           		XOR	A		;
11697+24C1 5F           		LD	E,A		;
11698+24C2 18 07        		JR	o24CB		; to DL-LARGER
11699+24C4
11700+24C4              ; ---
11701+24C4
11702+24C4              ;; DL-X-GE-Y
11703+24C4 B1           o24C4:		OR	C		;
11704+24C5 C8           		RET	Z		;
11705+24C6
11706+24C6 68           		LD	L,B		;
11707+24C7 41           		LD	B,C		;
11708+24C8 D5           		PUSH	DE		;
11709+24C9 16 00        		LD	D,$00		;
11710+24CB
11711+24CB              ;; DL-LARGER
11712+24CB 60           o24CB:		LD	H,B		;
11713+24CC 78           		LD	A,B		;
11714+24CD 1F           		RRA			;
11715+24CE
11716+24CE              ;; D-L-LOOP
11717+24CE 85           o24CE:		ADD	A,L		;
11718+24CF 38 03        		JR	C,o24D4		; to D-L-DIAG
11719+24D1
11720+24D1 BC           		CP	H		;
11721+24D2 38 07        		JR	C,o24DB		; to D-L-HR-VT
11722+24D4
11723+24D4              ;; D-L-DIAG
11724+24D4 94           o24D4:		SUB	H		;
11725+24D5 4F           		LD	C,A		;
11726+24D6 D9           		EXX			;
11727+24D7 C1           		POP	BC		;
11728+24D8 C5           		PUSH	BC		;
11729+24D9 18 04        		JR	o24DF		; to D-L-STEP
11730+24DB
11731+24DB              ; ---
11732+24DB
11733+24DB              ;; D-L-HR-VT
11734+24DB 4F           o24DB:		LD	C,A		;
11735+24DC D5           		PUSH	DE		;
11736+24DD D9           		EXX			;
11737+24DE C1           		POP	BC		;
11738+24DF
11739+24DF              ;; D-L-STEP
11740+24DF 2A 7D 5C     o24DF:		LD	HL,(	$5C7D)	; COORDS
11741+24E2 78           		LD	A,B		;
11742+24E3 84           		ADD	A,H		;
11743+24E4 47           		LD	B,A		;
11744+24E5 79           		LD	A,C		;
11745+24E6 3C           		INC	A		;
11746+24E7 85           		ADD	A,L		;
11747+24E8 38 0D        		JR	C,o24F7		; to D-L-RANGE
11748+24EA
11749+24EA 28 0D        		JR	Z,o24F9		; to REPORT-Bc
11750+24EC
11751+24EC              ;; D-L-PLOT
11752+24EC 3D           o24EC:		DEC	A		;
11753+24ED 4F           		LD	C,A		;
11754+24EE CD E5 22     		CALL	o22E5		; routine PLOT-SUB
11755+24F1 D9           		EXX			;
11756+24F2 79           		LD	A,C		;
11757+24F3 10 D9        		DJNZ	o24CE		; to D-L-LOOP
11758+24F5
11759+24F5 D1           		POP	DE		;
11760+24F6 C9           		RET			;
11761+24F7
11762+24F7              ; ---
11763+24F7
11764+24F7              ;; D-L-RANGE
11765+24F7 28 F3        o24F7:		JR	Z,o24EC		; to D-L-PLOT
11766+24F9
11767+24F9
11768+24F9              ;; REPORT-Bc
11769+24F9 CF           o24F9:		RST	08H		; ERROR-1
11770+24FA 0A           		DB	$0A		; Error Report: Integer out of range
11771+24FB
11772+24FB
11773+24FB
11774+24FB              ;***********************************
11775+24FB              ;** Part 8. EXPRESSION EVALUATION **
11776+24FB              ;***********************************
11777+24FB              ;
11778+24FB              ; It is a this stage of the ROM that the Spectrum ceases altogether to be
11779+24FB              ; just a colourful novelty. One remarkable feature is that in all previous
11780+24FB              ; commands when the Spectrum is expecting a number or a string then an
11781+24FB              ; expression of the same type can be substituted ad infinitum.
11782+24FB              ; This is the routine that evaluates that expression.
11783+24FB              ; This is what causes 2 + 2 to give the answer 4.
11784+24FB              ; That is quite easy to understand. However you don't have to make it much
11785+24FB              ; more complex to start a remarkable juggling act.
11786+24FB              ; e.g. PRINT 2 * (VAL "2+2" + TAN 3)
11787+24FB              ; In fact, provided there is enough free RAM, the Spectrum can evaluate
11788+24FB              ; an expression of unlimited complexity.
11789+24FB              ; Apart from a couple of minor glitches, which you can now correct, the
11790+24FB              ; system is remarkably robust.
11791+24FB
11792+24FB
11793+24FB              ; ---------------------------------
11794+24FB              ; Scan expression or sub-expression
11795+24FB              ; ---------------------------------
11796+24FB              ;
11797+24FB              ;
11798+24FB
11799+24FB              ;; SCANNING
11800+24FB DF           o24FB:		RST	18H		; GET-CHAR
11801+24FC 06 00        		LD	B,$00		; priority marker zero is pushed on stack
11802+24FE              					; to signify end of expression when it is
11803+24FE              					; popped off again.
11804+24FE C5           		PUSH	BC		; put in on stack.
11805+24FF              					; and proceed to consider the first character
11806+24FF              					; of the expression.
11807+24FF
11808+24FF              ;; S-LOOP-1
11809+24FF 4F           o24FF:		LD	C,A		; store the character while a look up is done.
11810+2500 21 96 25     		LD	HL,o2596	; Address: scan-func
11811+2503 CD DC 16     		CALL	o16DC		; routine INDEXER is called to see if it is
11812+2506              					; part of a limited range '+', "(", 'ATTR' etc.
11813+2506
11814+2506 79           		LD	A,C		; fetch the character back
11815+2507 D2 84 26     		JP	NC,o2684	; jump forward to S-ALPHNUM if not in primary
11816+250A              					; operators and functions to consider in the
11817+250A              					; first instance a digit or a variable and
11818+250A              					; then anything else.                >>>
11819+250A
11820+250A 06 00        		LD	B,$00		; but here if it was found in table so
11821+250C 4E           		LD	C,(HL)		; fetch offset from table and make B zero.
11822+250D 09           		ADD	HL,BC		; add the offset to position found
11823+250E E9           		JP	(HL)		; and jump to the routine e.g. S-BIN
11824+250F              					; making an indirect exit from there.
11825+250F
11826+250F              ; -------------------------------------------------------------------------
11827+250F              ; The four service subroutines for routines in the scanning function table
11828+250F              ; -------------------------------------------------------------------------
11829+250F
11830+250F              ; PRINT """Hooray!"" he cried."
11831+250F
11832+250F              ;; S-QUOTE-S
11833+250F CD 74 00     o250F:		CALL	o0074		; routine CH-ADD+1 points to next character
11834+2512              					; and fetches that character.
11835+2512 03           		INC	BC		; increase length counter.
11836+2513 FE 0D        		CP	$0D		; is it carriage return ?
11837+2515              					; inside a quote.
11838+2515 CA 8A 1C     		JP	Z,o1C8A		; jump back to REPORT-C if so.
11839+2518              					; 'Nonsense in BASIC'.
11840+2518
11841+2518 FE 22        		CP	$22		; is it a quote '"' ?
11842+251A 20 F3        		JR	NZ,o250F	; back to S-QUOTE-S if not for more.
11843+251C
11844+251C CD 74 00     		CALL	o0074		; routine CH-ADD+1
11845+251F FE 22        		CP	$22		; compare with possible adjacent quote
11846+2521 C9           		RET			; return. with zero set if two together.
11847+2522
11848+2522              ; ---
11849+2522
11850+2522              ; This subroutine is used to get two coordinate expressions for the three
11851+2522              ; functions SCREEN$, ATTR and POINT that have two fixed parameters and
11852+2522              ; therefore require surrounding braces.
11853+2522
11854+2522              ;; S-2-COORD
11855+2522 E7           o2522:		RST	20H		; NEXT-CHAR
11856+2523 FE 28        		CP	$28		; is it the opening "(" ?
11857+2525 20 06        		JR	NZ,o252D	; forward to S-RPORT-C if not
11858+2527              					; 'Nonsense in BASIC'.
11859+2527
11860+2527 CD 79 1C     		CALL	o1C79		; routine NEXT-2NUM gets two comma-separated
11861+252A              					; numeric expressions. Note. this could cause
11862+252A              					; many more recursive calls to SCANNING but
11863+252A              					; the parent function will be evaluated fully
11864+252A              					; before rejoining the main juggling act.
11865+252A
11866+252A DF           		RST	18H		; GET-CHAR
11867+252B FE 29        		CP	$29		; is it the closing ")" ?
11868+252D
11869+252D              ;; S-RPORT-C
11870+252D C2 8A 1C     o252D:		JP	NZ,o1C8A	; jump back to REPORT-C if not.
11871+2530              					; 'Nonsense in BASIC'.
11872+2530
11873+2530              ; ------------
11874+2530              ; Check syntax
11875+2530              ; ------------
11876+2530              ; This routine is called on a number of occasions to check if syntax is being
11877+2530              ; checked or if the program is being run. To test the flag inline would use
11878+2530              ; four bytes of code, but a call instruction only uses 3 bytes of code.
11879+2530
11880+2530              ;; SYNTAX-Z
11881+2530 FD CB 01 7E  o2530:		BIT	7,(IY+$01)	; test FLAGS  - checking syntax only ?
11882+2534 C9           		RET			; return.
11883+2535
11884+2535              ; ----------------
11885+2535              ; Scanning SCREEN$
11886+2535              ; ----------------
11887+2535              ; This function returns the code of a bit-mapped character at screen
11888+2535              ; position at line C, column B. It is unable to detect the mosaic characters
11889+2535              ; which are not bit-mapped but detects the ASCII 32 - 127 range.
11890+2535              ; The bit-mapped UDGs are ignored which is curious as it requires only a
11891+2535              ; few extra bytes of code. As usual, anything to do with CHARS is weird.
11892+2535              ; If no match is found a null string is returned.
11893+2535              ; No actual check on ranges is performed - that's up to the BASIC programmer.
11894+2535              ; No real harm can come from SCREEN$(255,255) although the BASIC manual
11895+2535              ; says that invalid values will be trapped.
11896+2535              ; Interestingly, in the Pitman pocket guide, 1984, Vickers says that the
11897+2535              ; range checking will be performed.
11898+2535
11899+2535              ;; S-SCRN$-S
11900+2535 CD 07 23     o2535:		CALL	o2307		; routine STK-TO-BC.
11901+2538 2A 36 5C     		LD	HL,(	$5C36)	; fetch address of CHARS.
11902+253B 11 00 01     		LD	DE,$0100	; fetch offset to chr$ 32
11903+253E 19           		ADD	HL,DE		; and find start of bitmaps.
11904+253F              					; Note. not inc h. ??
11905+253F 79           		LD	A,C		; transfer line to A.
11906+2540 0F           		RRCA			; multiply
11907+2541 0F           		RRCA			; by
11908+2542 0F           		RRCA			; thirty-two.
11909+2543 E6 E0        		AND	$E0		; and with 11100000
11910+2545 A8           		XOR	B		; combine with column $00 - $1F
11911+2546 5F           		LD	E,A		; to give the low byte of top line
11912+2547 79           		LD	A,C		; column to A range 00000000 to 00011111
11913+2548 E6 18        		AND	$18		; and with 00011000
11914+254A EE 40        		XOR	$40		; xor with 01000000 (high byte screen start)
11915+254C 57           		LD	D,A		; register DE now holds start address of cell.
11916+254D 06 60        		LD	B,$60		; there are 96 characters in ASCII set.
11917+254F
11918+254F              ;; S-SCRN-LP
11919+254F C5           o254F:		PUSH	BC		; save count
11920+2550 D5           		PUSH	DE		; save screen start address
11921+2551 E5           		PUSH	HL		; save bitmap start
11922+2552 1A           		LD	A,(DE)		; first byte of screen to A
11923+2553 AE           		XOR	(HL)		; xor with corresponding character byte
11924+2554 28 04        		JR	Z,o255A		; forward to S-SC-MTCH if they match
11925+2556              					; if inverse result would be $FF
11926+2556              					; if any other then mismatch
11927+2556
11928+2556 3C           		INC	A		; set to $00 if inverse
11929+2557 20 1A        		JR	NZ,o2573	; forward to S-SCR-NXT if a mismatch
11930+2559
11931+2559 3D           		DEC	A		; restore $FF
11932+255A
11933+255A              ; a match has been found so seven more to test.
11934+255A
11935+255A              ;; S-SC-MTCH
11936+255A 4F           o255A:		LD	C,A		; load C with inverse mask $00 or $FF
11937+255B 06 07        		LD	B,$07		; count seven more bytes
11938+255D
11939+255D              ;; S-SC-ROWS
11940+255D 14           o255D:		INC	D		; increment screen address.
11941+255E 23           		INC	HL		; increment bitmap address.
11942+255F 1A           		LD	A,(DE)		; byte to A
11943+2560 AE           		XOR	(HL)		; will give $00 or $FF (inverse)
11944+2561 A9           		XOR	C		; xor with inverse mask
11945+2562 20 0F        		JR	NZ,o2573	; forward to S-SCR-NXT if no match.
11946+2564
11947+2564 10 F7        		DJNZ	o255D		; back to S-SC-ROWS until all eight matched.
11948+2566
11949+2566              ; continue if a match of all eight bytes was found
11950+2566
11951+2566 C1           		POP	BC		; discard the
11952+2567 C1           		POP	BC		; saved
11953+2568 C1           		POP	BC		; pointers
11954+2569 3E 80        		LD	A,$80		; the endpoint of character set
11955+256B 90           		SUB	B		; subtract the counter
11956+256C              					; to give the code 32-127
11957+256C 01 01 00     		LD	BC,$0001	; make one space in workspace.
11958+256F
11959+256F F7           		RST	30H		; BC-SPACES creates the space sliding
11960+2570              					; the calculator stack upwards.
11961+2570 12           		LD	(DE),A		; start is addressed by DE, so insert code
11962+2571 18 0A        		JR	o257D		; forward to S-SCR-STO
11963+2573
11964+2573              ; ---
11965+2573
11966+2573              ; the jump was here if no match and more bitmaps to test.
11967+2573
11968+2573              ;; S-SCR-NXT
11969+2573 E1           o2573:		POP	HL		; restore the last bitmap start
11970+2574 11 08 00     		LD	DE,$0008	; and prepare to add 8.
11971+2577 19           		ADD	HL,DE		; now addresses next character bitmap.
11972+2578 D1           		POP	DE		; restore screen address
11973+2579 C1           		POP	BC		; and character counter in B
11974+257A 10 D3        		DJNZ	o254F		; back to S-SCRN-LP if more characters.
11975+257C
11976+257C 48           		LD	C,B		; B is now zero, so BC now zero.
11977+257D
11978+257D              ;; S-SCR-STO
11979+257D C3 B2 2A     o257D:		JP	o2AB2		; to STK-STO-$ to store the string in
11980+2580              					; workspace or a string with zero length.
11981+2580              					; (value of DE doesn't matter in last case)
11982+2580
11983+2580              ; Note. this exit seems correct but the general-purpose routine S-STRING
11984+2580              ; that calls this one will also stack any of its string results so this
11985+2580              ; leads to a double storing of the result in this case.
11986+2580              ; The instruction at o257D should just be a RET.
11987+2580              ; credit Stephen Kelly and others, 1982.
11988+2580
11989+2580              ; -------------
11990+2580              ; Scanning ATTR
11991+2580              ; -------------
11992+2580              ; This function subroutine returns the attributes of a screen location -
11993+2580              ; a numeric result.
11994+2580              ; Again it's up to the BASIC programmer to supply valid values of line/column.
11995+2580
11996+2580              ;; S-ATTR-S
11997+2580 CD 07 23     o2580:		CALL	o2307		; routine STK-TO-BC fetches line to C,
11998+2583              					; and column to B.
11999+2583 79           		LD	A,C		; line to A $00 - $17   (max 00010111)
12000+2584 0F           		RRCA			; rotate
12001+2585 0F           		RRCA			; bits
12002+2586 0F           		RRCA			; left.
12003+2587 4F           		LD	C,A		; store in C as an intermediate value.
12004+2588
12005+2588 E6 E0        		AND	$E0		; pick up bits 11100000 ( was 00011100 )
12006+258A A8           		XOR	B		; combine with column $00 - $1F
12007+258B 6F           		LD	L,A		; low byte now correct.
12008+258C
12009+258C 79           		LD	A,C		; bring back intermediate result from C
12010+258D E6 03        		AND	$03		; mask to give correct third of
12011+258F              					; screen $00 - $02
12012+258F EE 58        		XOR	$58		; combine with base address.
12013+2591 67           		LD	H,A		; high byte correct.
12014+2592 7E           		LD	A,(HL)		; pick up the colour attribute.
12015+2593 C3 28 2D     		JP	o2D28		; forward to STACK-A to store result
12016+2596              					; and make an indirect exit.
12017+2596
12018+2596              ; -----------------------
12019+2596              ; Scanning function table
12020+2596              ; -----------------------
12021+2596              ; This table is used by INDEXER routine to find the offsets to
12022+2596              ; four operators and eight functions. e.g. $A8 is the token 'FN'.
12023+2596              ; This table is used in the first instance for the first character of an
12024+2596              ; expression or by a recursive call to SCANNING for the first character of
12025+2596              ; any sub-expression. It eliminates functions that have no argument or
12026+2596              ; functions that can have more than one argument and therefore require
12027+2596              ; braces. By eliminating and dealing with these now it can later take a
12028+2596              ; simplistic approach to all other functions and assume that they have
12029+2596              ; one argument.
12030+2596              ; Similarly by eliminating BIN and '.' now it is later able to assume that
12031+2596              ; all numbers begin with a digit and that the presence of a number or
12032+2596              ; variable can be detected by a call to ALPHANUM.
12033+2596              ; By default all expressions are positive and the spurious '+' is eliminated
12034+2596              ; now as in print +2. This should not be confused with the operator '+'.
12035+2596              ; Note. this does allow a degree of nonsense to be accepted as in
12036+2596              ; PRINT +"3 is the greatest.".
12037+2596              ; An acquired programming skill is the ability to include brackets where
12038+2596              ; they are not necessary.
12039+2596              ; A bracket at the start of a sub-expression may be spurious or necessary
12040+2596              ; to denote that the contained expression is to be evaluated as an entity.
12041+2596              ; In either case this is dealt with by recursive calls to SCANNING.
12042+2596              ; An expression that begins with a quote requires special treatment.
12043+2596
12044+2596              ;; scan-func
12045+2596 22 1C        o2596:		DB	$22, o25B3-$-1	; $1C offset to S-QUOTE
12046+2598 28 4F        		DB	"(", o25E8-$-1	; $4F offset to S-BRACKET
12047+259A 2E F2        		DB	'.', o268D-$-1	; $F2 offset to S-DECIMAL
12048+259C 2B 12        		DB	'+', o25AF-$-1	; $12 offset to S-U-PLUS
12049+259E
12050+259E A8 56        		DB	$A8, o25F5-$-1	; $56 offset to S-FN
12051+25A0 A5 57        		DB	$A5, o25F8-$-1	; $57 offset to S-RND
12052+25A2 A7 84        		DB	$A7, o2627-$-1	; $84 offset to S-PI
12053+25A4 A6 8F        		DB	$A6, o2634-$-1	; $8F offset to S-INKEY$
12054+25A6 C4 E6        		DB	$C4, o268D-$-1	; $E6 offset to S-BIN
12055+25A8 AA BF        		DB	$AA, o2668-$-1	; $BF offset to S-SCREEN$
12056+25AA AB C7        		DB	$AB, o2672-$-1	; $C7 offset to S-ATTR
12057+25AC A9 CE        		DB	$A9, o267B-$-1	; $CE offset to S-POINT
12058+25AE
12059+25AE 00           		DB	$00		; zero end marker
12060+25AF
12061+25AF              ; --------------------------
12062+25AF              ; Scanning function routines
12063+25AF              ; --------------------------
12064+25AF              ; These are the 11 subroutines accessed by the above table.
12065+25AF              ; S-BIN and S-DECIMAL are the same
12066+25AF              ; The 1-byte offset limits their location to within 255 bytes of their
12067+25AF              ; entry in the table.
12068+25AF
12069+25AF              ; ->
12070+25AF              ;; S-U-PLUS
12071+25AF E7           o25AF:		RST	20H		; NEXT-CHAR just ignore
12072+25B0 C3 FF 24     		JP	o24FF		; to S-LOOP-1
12073+25B3
12074+25B3              ; ---
12075+25B3
12076+25B3              ; ->
12077+25B3              ;; S-QUOTE
12078+25B3 DF           o25B3:		RST	18H		; GET-CHAR
12079+25B4 23           		INC	HL		; address next character (first in quotes)
12080+25B5 E5           		PUSH	HL		; save start of quoted text.
12081+25B6 01 00 00     		LD	BC,$0000	; initialize length of string to zero.
12082+25B9 CD 0F 25     		CALL	o250F		; routine S-QUOTE-S
12083+25BC 20 1B        		JR	NZ,o25D9	; forward to S-Q-PRMS if
12084+25BE
12085+25BE              ;; S-Q-AGAIN
12086+25BE CD 0F 25     o25BE:		CALL	o250F		; routine S-QUOTE-S copies string until a
12087+25C1              					; quote is encountered
12088+25C1 28 FB        		JR	Z,o25BE		; back to S-Q-AGAIN if two quotes WERE
12089+25C3              					; together.
12090+25C3
12091+25C3              ; but if just an isolated quote then that terminates the string.
12092+25C3
12093+25C3 CD 30 25     		CALL	o2530		; routine SYNTAX-Z
12094+25C6 28 11        		JR	Z,o25D9		; forward to S-Q-PRMS if checking syntax.
12095+25C8
12096+25C8
12097+25C8 F7           		RST	30H		; BC-SPACES creates the space for true
12098+25C9              					; copy of string in workspace.
12099+25C9 E1           		POP	HL		; re-fetch start of quoted text.
12100+25CA D5           		PUSH	DE		; save start in workspace.
12101+25CB
12102+25CB              ;; S-Q-COPY
12103+25CB 7E           o25CB:		LD	A,(HL)		; fetch a character from source.
12104+25CC 23           		INC	HL		; advance source address.
12105+25CD 12           		LD	(DE),A		; place in destination.
12106+25CE 13           		INC	DE		; advance destination address.
12107+25CF FE 22        		CP	$22		; was it a '"' just copied ?
12108+25D1 20 F8        		JR	NZ,o25CB	; back to S-Q-COPY to copy more if not
12109+25D3
12110+25D3 7E           		LD	A,(HL)		; fetch adjacent character from source.
12111+25D4 23           		INC	HL		; advance source address.
12112+25D5 FE 22        		CP	$22		; is this '"' ? - i.e. two quotes together ?
12113+25D7 28 F2        		JR	Z,o25CB		; to S-Q-COPY if so including just one of the
12114+25D9              					; pair of quotes.
12115+25D9
12116+25D9              ; proceed when terminating quote encountered.
12117+25D9
12118+25D9              ;; S-Q-PRMS
12119+25D9 0B           o25D9:		DEC	BC		; decrease count by 1.
12120+25DA D1           		POP	DE		; restore start of string in workspace.
12121+25DB
12122+25DB              ;; S-STRING
12123+25DB 21 3B 5C     o25DB:		LD	HL,	$5C3B	; Address FLAGS system variable.
12124+25DE CB B6        		RES	6,(HL)		; signal string result.
12125+25E0 CB 7E        		BIT	7,(HL)		; is syntax being checked.
12126+25E2 C4 B2 2A     		CALL	NZ,o2AB2	; routine STK-STO-$ is called in runtime.
12127+25E5 C3 12 27     		JP	o2712		; jump forward to S-CONT-2          ===>
12128+25E8
12129+25E8              ; ---
12130+25E8
12131+25E8              ; ->
12132+25E8              ;; S-BRACKET
12133+25E8 E7           o25E8:		RST	20H		; NEXT-CHAR
12134+25E9 CD FB 24     		CALL	o24FB		; routine SCANNING is called recursively.
12135+25EC FE 29        		CP	$29		; is it the closing ")" ?
12136+25EE C2 8A 1C     		JP	NZ,o1C8A	; jump back to REPORT-C if not
12137+25F1              					; 'Nonsense in BASIC'
12138+25F1
12139+25F1 E7           		RST	20H		; NEXT-CHAR
12140+25F2 C3 12 27     		JP	o2712		; jump forward to S-CONT-2          ===>
12141+25F5
12142+25F5              ; ---
12143+25F5
12144+25F5              ; ->
12145+25F5              ;; S-FN
12146+25F5 C3 BD 27     o25F5:		JP	o27BD		; jump forward to S-FN-SBRN.
12147+25F8
12148+25F8              ; --------------------------------------------------------------------
12149+25F8              ;
12150+25F8              ;   RANDOM THEORY from the ZX81 manual by Steven Vickers
12151+25F8              ;
12152+25F8              ;   (same algorithm as the ZX Spectrum).
12153+25F8              ;
12154+25F8              ;   Chapter 5. Exercise 6. (For mathematicians only.)
12155+25F8              ;
12156+25F8              ;   Let p be a [large] prime, & let a be a primitive root modulo p.
12157+25F8              ;   Then if b_i is the residue of a^i modulo p (1<=b_i<p-1), the
12158+25F8              ;   sequence
12159+25F8              ;
12160+25F8              ;                           (b_i-1)/(p-1)
12161+25F8              ;
12162+25F8              ;   is a cyclical sequence of p-1 distinct numbers in the range 0 to 1
12163+25F8              ;   (excluding 1). By choosing a suitably, these can be made to look
12164+25F8              ;   fairly random.
12165+25F8              ;
12166+25F8              ;     65537 is a Mersenne prime 2^16-1. Note.
12167+25F8              ;
12168+25F8              ;   Use this, & Gauss' law of quadratic reciprocity, to show that 75
12169+25F8              ;   is a primitive root modulo 65537.
12170+25F8              ;
12171+25F8              ;     The ZX81 uses p=65537 & a=75, & stores some b_i-1 in memory.
12172+25F8              ;   The function RND involves replacing b_i-1 in memory by b_(i+1)-1,
12173+25F8              ;   & yielding the result (b_(i+1)-1)/(p-1). RAND n (with 1<=n<=65535)
12174+25F8              ;   makes b_i equal to n+1.
12175+25F8              ;
12176+25F8              ; --------------------------------------------------------------------
12177+25F8              ;
12178+25F8              ; Steven Vickers writing in comp.sys.sinclair on 20-DEC-1993
12179+25F8              ;
12180+25F8              ;   Note. (Of course, 65537 is 2^16 + 1, not -1.)
12181+25F8              ;
12182+25F8              ;   Consider arithmetic modulo a prime p. There are p residue classes, and the
12183+25F8              ;   non-zero ones are all invertible. Hence under multiplication they form a
12184+25F8              ;   group (Fp*, say) of order p-1; moreover (and not so obvious) Fp* is cyclic.
12185+25F8              ;   Its generators are the "primitive roots". The "quadratic residues modulo p"
12186+25F8              ;   are the squares in Fp*, and the "Legendre symbol" (d/p) is defined (when p
12187+25F8              ;   does not divide d) as +1 or -1, according as d is or is not a quadratic
12188+25F8              ;   residue mod p.
12189+25F8              ;
12190+25F8              ;   In the case when p = 65537, we can show that d is a primitive root if and
12191+25F8              ;   only if it's not a quadratic residue. For let w be a primitive root, d
12192+25F8              ;   congruent to w^r (mod p). If d is not primitive, then its order is a proper
12193+25F8              ;   factor of 65536: hence w^{32768*r} = 1 (mod p), so 65536 divides 32768*r,
12194+25F8              ;   and hence r is even and d is a square (mod p). Conversely, the squares in
12195+25F8              ;   Fp* form a subgroup of (Fp*)^2 of index 2, and so cannot be generators.
12196+25F8              ;
12197+25F8              ;   Hence to check whether 75 is primitive mod 65537, we want to calculate that
12198+25F8              ;   (75/65537) = -1. There is a multiplicative formula (ab/p) = (a/p)(b/p) (mod
12199+25F8              ;   p), so (75/65537) = (5/65537)^2 * (3/65537) = (3/65537). Now the law of
12200+25F8              ;   quadratic reciprocity says that if p and q are distinct odd primes, then
12201+25F8              ;
12202+25F8              ;    (p/q)(q/p) = (-1)^{(p-1)(q-1)/4}
12203+25F8              ;
12204+25F8              ;   Hence (3/65537) = (65537/3) * (-1)^{65536*2/4} = (65537/3)
12205+25F8              ;            = (2/3)  (because 65537 = 2 mod 3)
12206+25F8              ;            = -1
12207+25F8              ;
12208+25F8              ;   (I referred to Pierre Samuel's "Algebraic Theory of Numbers".)
12209+25F8              ;
12210+25F8              ; ->
12211+25F8
12212+25F8              ;; S-RND
12213+25F8 CD 30 25     o25F8:		CALL	o2530		; routine SYNTAX-Z
12214+25FB 28 28        		JR	Z,o2625		; forward to S-RND-END if checking syntax.
12215+25FD
12216+25FD ED 4B 76 5C  		LD	BC,(	$5C76)	; fetch system variable SEED
12217+2601 CD 2B 2D     		CALL	o2D2B		; routine STACK-BC places on calculator stack
12218+2604
12219+2604 EF           		RST	28H		; FP-CALC           ;s.
12220+2605 A1           		DB	$A1		; stk-one            ;s,1.
12221+2606 0F           		DB	$0F		; addition           ;s+1.
12222+2607 34           		DB	$34		; stk-data           ;
12223+2608 37           		DB	$37		; Exponent: $87,
12224+2609              					;;Bytes: 1
12225+2609 16           		DB	$16		; (+00,+00,+00)      ;s+1,75.
12226+260A 04           		DB	$04		; multiply           ;(s+1)*75 = v
12227+260B 34           		DB	$34		; stk-data           ;v.
12228+260C 80           		DB	$80		; Bytes: 3
12229+260D 41           		DB	$41		; Exponent $91
12230+260E 00 00 80     		DB	$00,$00,$80	; (+00)              ;v,65537.
12231+2611 32           		DB	$32		; n-mod-m            ;remainder, result.
12232+2612 02           		DB	$02		; delete             ;remainder.
12233+2613 A1           		DB	$A1		; stk-one            ;remainder, 1.
12234+2614 03           		DB	$03		; subtract           ;remainder - 1. = rnd
12235+2615 31           		DB	$31		; duplicate          ;rnd,rnd.
12236+2616 38           		DB	$38		; end-calc
12237+2617
12238+2617 CD A2 2D     		CALL	o2DA2		; routine FP-TO-BC
12239+261A ED 43 76 5C  		LD	(	$5C76),BC	; store in SEED for next starting point.
12240+261E 7E           		LD	A,(HL)		; fetch exponent
12241+261F A7           		AND	A		; is it zero ?
12242+2620 28 03        		JR	Z,o2625		; forward if so to S-RND-END
12243+2622
12244+2622 D6 10        		SUB	$10		; reduce exponent by 2^16
12245+2624 77           		LD	(HL),A		; place back
12246+2625
12247+2625              ;; S-RND-END
12248+2625 18 09        o2625:		JR	o2630		; forward to S-PI-END
12249+2627
12250+2627              ; ---
12251+2627
12252+2627              ; the number PI 3.14159...
12253+2627
12254+2627              ; ->
12255+2627              ;; S-PI
12256+2627 CD 30 25     o2627:		CALL	o2530		; routine SYNTAX-Z
12257+262A 28 04        		JR	Z,o2630		; to S-PI-END if checking syntax.
12258+262C
12259+262C EF           		RST	28H		; FP-CALC
12260+262D A3           		DB	$A3		; stk-pi/2                          pi/2.
12261+262E 38           		DB	$38		; end-calc
12262+262F
12263+262F 34           		INC	(HL)		; increment the exponent leaving pi
12264+2630              					; on the calculator stack.
12265+2630
12266+2630              ;; S-PI-END
12267+2630 E7           o2630:		RST	20H		; NEXT-CHAR
12268+2631 C3 C3 26     		JP	o26C3		; jump forward to S-NUMERIC
12269+2634
12270+2634              ; ---
12271+2634
12272+2634              ; ->
12273+2634              ;; S-INKEY$
12274+2634 01 5A 10     o2634:		LD	BC,$105A	; priority $10, operation code $1A ('read-in')
12275+2637              					; +$40 for string result, numeric operand.
12276+2637              					; set this up now in case we need to use the
12277+2637              					; calculator.
12278+2637 E7           		RST	20H		; NEXT-CHAR
12279+2638 FE 23        		CP	$23		; "#" ?
12280+263A CA 0D 27     		JP	Z,o270D		; to S-PUSH-PO if so to use the calculator
12281+263D              					; single operation
12282+263D              					; to read from network/RS232 etc. .
12283+263D
12284+263D              ; else read a key from the keyboard.
12285+263D
12286+263D 21 3B 5C     		LD	HL,	$5C3B	; fetch FLAGS
12287+2640 CB B6        		RES	6,(HL)		; signal string result.
12288+2642 CB 7E        		BIT	7,(HL)		; checking syntax ?
12289+2644 28 1F        		JR	Z,o2665		; forward to S-INK$-EN if so
12290+2646
12291+2646 C3 5A 3A     		JP	o3A5A
12292+2649 0E 00        		LD	C,$00		; the length of an empty string
12293+264B 20 13        		JR	NZ,o2660	; to S-IK$-STK to store empty string if
12294+264D              					; no key returned.
12295+264D
12296+264D CD 1E 03     		CALL	o031E		; routine K-TEST get main code in A
12297+2650 30 0E        		JR	NC,o2660	; to S-IK$-STK to stack null string if
12298+2652              					; invalid
12299+2652
12300+2652 15           		DEC	D		; D is expected to be FLAGS so set bit 3 $FF
12301+2653              					; 'L' Mode so no keywords.
12302+2653 5F           		LD	E,A		; main key to A
12303+2654              					; C is MODE 0 'KLC' from above still.
12304+2654 CD 33 03     		CALL	o0333		; routine K-DECODE
12305+2657 F5           o2657:		PUSH	AF		; save the code
12306+2658 01 01 00     		LD	BC,$0001	; make room for one character
12307+265B
12308+265B F7           		RST	30H		; BC-SPACES
12309+265C F1           		POP	AF		; bring the code back
12310+265D 12           		LD	(DE),A		; put the key in workspace
12311+265E 0E 01        		LD	C,$01		; set C length to one
12312+2660
12313+2660              ;; S-IK$-STK
12314+2660 06 00        o2660:		LD	B,$00		; set high byte of length to zero
12315+2662 CD B2 2A     		CALL	o2AB2		; routine STK-STO-$
12316+2665
12317+2665              ;; S-INK$-EN
12318+2665 C3 12 27     o2665:		JP	o2712		; to S-CONT-2            ===>
12319+2668
12320+2668              ; ---
12321+2668
12322+2668              ; ->
12323+2668              ;; S-SCREEN$
12324+2668 CD 22 25     o2668:		CALL	o2522		; routine S-2-COORD
12325+266B C4 35 25     		CALL	NZ,o2535	; routine S-SCRN$-S
12326+266E
12327+266E E7           		RST	20H		; NEXT-CHAR
12328+266F C3 DB 25     		JP	o25DB		; forward to S-STRING to stack result
12329+2672
12330+2672              ; ---
12331+2672
12332+2672              ; ->
12333+2672              ;; S-ATTR
12334+2672 CD 22 25     o2672:		CALL	o2522		; routine S-2-COORD
12335+2675 C4 80 25     		CALL	NZ,o2580	; routine S-ATTR-S
12336+2678
12337+2678 E7           		RST	20H		; NEXT-CHAR
12338+2679 18 48        		JR	o26C3		; forward to S-NUMERIC
12339+267B
12340+267B              ; ---
12341+267B
12342+267B              ; ->
12343+267B              ;; S-POINT
12344+267B CD 22 25     o267B:		CALL	o2522		; routine S-2-COORD
12345+267E C4 CB 22     		CALL	NZ,o22CB	; routine POINT-SUB
12346+2681
12347+2681 E7           		RST	20H		; NEXT-CHAR
12348+2682 18 3F        		JR	o26C3		; forward to S-NUMERIC
12349+2684
12350+2684              ; -----------------------------
12351+2684
12352+2684              ; ==> The branch was here if not in table.
12353+2684
12354+2684              ;; S-ALPHNUM
12355+2684 CD 88 2C     o2684:		CALL	o2C88		; routine ALPHANUM checks if variable or
12356+2687              					; a digit.
12357+2687 30 56        		JR	NC,o26DF	; forward to S-NEGATE if not to consider
12358+2689              					; a '-' character then functions.
12359+2689
12360+2689 FE 41        		CP	$41		; compare 'A'
12361+268B 30 3C        		JR	NC,o26C9	; forward to S-LETTER if alpha       ->
12362+268D              					; else must have been numeric so continue
12363+268D              					; into that routine.
12364+268D
12365+268D              ; This important routine is called during runtime and from LINE-SCAN
12366+268D              ; when a BASIC line is checked for syntax. It is this routine that
12367+268D              ; inserts, during syntax checking, the invisible floating point numbers
12368+268D              ; after the numeric expression. During runtime it just picks these
12369+268D              ; numbers up. It also handles BIN format numbers.
12370+268D
12371+268D              ; ->
12372+268D              ;; S-BIN
12373+268D              ;; S-DECIMAL
12374+268D CD 30 25     o268D:		CALL	o2530		; routine SYNTAX-Z
12375+2690 20 23        		JR	NZ,o26B5	; to S-STK-DEC in runtime
12376+2692
12377+2692              ; this route is taken when checking syntax.
12378+2692
12379+2692 CD 9B 2C     		CALL	o2C9B		; routine DEC-TO-FP to evaluate number
12380+2695
12381+2695 DF           		RST	18H		; GET-CHAR to fetch HL
12382+2696 01 06 00     		LD	BC,$0006	; six locations required
12383+2699 CD 55 16     		CALL	o1655		; routine MAKE-ROOM
12384+269C 23           		INC	HL		; to first new location
12385+269D 36 0E        		LD	(HL),$0E	; insert number marker
12386+269F 23           		INC	HL		; address next
12387+26A0 EB           		EX	DE,HL		; make DE destination.
12388+26A1 2A 65 5C     		LD	HL,(	$5C65)	; STKEND points to end of stack.
12389+26A4 0E 05        		LD	C,$05		; result is five locations lower
12390+26A6 A7           		AND	A		; prepare for true subtraction
12391+26A7 ED 42        		SBC	HL,BC		; point to start of value.
12392+26A9 22 65 5C     		LD	(	$5C65),HL	; update STKEND as we are taking number.
12393+26AC ED B0        		LDIR			; Copy five bytes to program location
12394+26AE EB           		EX	DE,HL		; transfer pointer to HL
12395+26AF 2B           		DEC	HL		; adjust
12396+26B0 CD 77 00     		CALL	o0077		; routine TEMP-PTR1 sets CH-ADD
12397+26B3 18 0E        		JR	o26C3		; to S-NUMERIC to record nature of result
12398+26B5
12399+26B5              ; ---
12400+26B5
12401+26B5              ; branch here in runtime.
12402+26B5
12403+26B5              ;; S-STK-DEC
12404+26B5 DF           o26B5:		RST	18H		; GET-CHAR positions HL at digit.
12405+26B6
12406+26B6              ;; S-SD-SKIP
12407+26B6 23           o26B6:		INC	HL		; advance pointer
12408+26B7 7E           		LD	A,(HL)		; until we find
12409+26B8 FE 0E        		CP	$0E		; chr 14d - the number indicator
12410+26BA 20 FA        		JR	NZ,o26B6	; to S-SD-SKIP until a match
12411+26BC              					; it has to be here.
12412+26BC
12413+26BC 23           		INC	HL		; point to first byte of number
12414+26BD CD B4 33     		CALL	o33B4		; routine STACK-NUM stacks it
12415+26C0 22 5D 5C     		LD	(	$5C5D),HL	; update system variable CH_ADD
12416+26C3
12417+26C3              ;; S-NUMERIC
12418+26C3 FD CB 01 F6  o26C3:		SET	6,(IY+$01)	; update FLAGS  - Signal numeric result
12419+26C7 18 14        		JR	o26DD		; forward to S-CONT-1               ===>
12420+26C9              					; actually S-CONT-2 is destination but why
12421+26C9              					; waste a byte on a jump when a JR will do.
12422+26C9              					; Actually a JR o2712 can be used. Rats.
12423+26C9
12424+26C9              ; end of functions accessed from scanning functions table.
12425+26C9
12426+26C9              ; --------------------------
12427+26C9              ; Scanning variable routines
12428+26C9              ; --------------------------
12429+26C9              ;
12430+26C9              ;
12431+26C9
12432+26C9              ;; S-LETTER
12433+26C9 CD B2 28     o26C9:		CALL	o28B2		; routine LOOK-VARS
12434+26CC
12435+26CC DA 2E 1C     		JP	C,o1C2E		; jump back to REPORT-2 if variable not found
12436+26CF              					; 'Variable not found'
12437+26CF              					; but a variable is always 'found' if syntax
12438+26CF              					; is being checked.
12439+26CF
12440+26CF CC 96 29     		CALL	Z,o2996		; routine STK-VAR considers a subscript/slice
12441+26D2 3A 3B 5C     		LD	A,(	$5C3B)	; fetch FLAGS value
12442+26D5 FE C0        		CP	$C0		; compare 11000000
12443+26D7 38 04        		JR	C,o26DD		; step forward to S-CONT-1 if string  ===>
12444+26D9
12445+26D9 23           		INC	HL		; advance pointer
12446+26DA CD B4 33     		CALL	o33B4		; routine STACK-NUM
12447+26DD
12448+26DD              ;; S-CONT-1
12449+26DD 18 33        o26DD:		JR	o2712		; forward to S-CONT-2                 ===>
12450+26DF
12451+26DF              ; ----------------------------------------
12452+26DF              ; -> the scanning branch was here if not alphanumeric.
12453+26DF              ; All the remaining functions will be evaluated by a single call to the
12454+26DF              ; calculator. The correct priority for the operation has to be poaced in
12455+26DF              ; the B register and the operation code, calculator literal in the C register.
12456+26DF              ; the operation code has bit 7 set if result is numeric and bit 6 is
12457+26DF              ; set if operand is numeric. so
12458+26DF              ; $C0 = numeric result, numeric operand.            e.g. 'sin'
12459+26DF              ; $80 = numeric result, string operand.             e.g. 'code'
12460+26DF              ; $40 = string result, numeric operand.             e.g. 'str$'
12461+26DF              ; $00 = string result, string operand.              e.g. 'val$'
12462+26DF
12463+26DF              ;; S-NEGATE
12464+26DF 01 DB 09     o26DF:		LD	BC,$09DB	; prepare priority 09, operation code $C0 +
12465+26E2              					; 'negate' ($1B) - bits 6 and 7 set for numeric
12466+26E2              					; result and numeric operand.
12467+26E2
12468+26E2 FE 2D        		CP	$2D		; is it '-' ?
12469+26E4 28 27        		JR	Z,o270D		; forward if so to S-PUSH-PO
12470+26E6
12471+26E6 01 18 10     		LD	BC,$1018	; prepare priority $10, operation code 'val$' -
12472+26E9              					; bits 6 and 7 reset for string result and
12473+26E9              					; string operand.
12474+26E9
12475+26E9 FE AE        		CP	$AE		; is it 'VAL$' ?
12476+26EB 28 20        		JR	Z,o270D		; forward if so to S-PUSH-PO
12477+26ED
12478+26ED D6 AF        		SUB	$AF		; subtract token 'CODE' value to reduce
12479+26EF              					; functions 'CODE' to 'NOT' although the
12480+26EF              					; upper range is, as yet, unchecked.
12481+26EF              					; valid range would be $00 - $14.
12482+26EF
12483+26EF DA 8A 1C     		JP	C,o1C8A		; jump back to REPORT-C with anything else
12484+26F2              					; 'Nonsense in BASIC'
12485+26F2
12486+26F2 01 F0 04     		LD	BC,$04F0	; prepare priority $04, operation $C0 +
12487+26F5              					; 'not' ($30)
12488+26F5
12489+26F5 FE 14        		CP	$14		; is it 'NOT'
12490+26F7 28 14        		JR	Z,o270D		; forward to S-PUSH-PO if so
12491+26F9
12492+26F9 D2 8A 1C     		JP	NC,o1C8A	; to REPORT-C if higher
12493+26FC              					; 'Nonsense in BASIC'
12494+26FC
12495+26FC 06 10        		LD	B,$10		; priority $10 for all the rest
12496+26FE C6 DC        		ADD	A,$DC		; make range $DC - $EF
12497+2700              					; $C0 + 'code'($1C) thru 'chr$' ($2F)
12498+2700
12499+2700 4F           		LD	C,A		; transfer 'function' to C
12500+2701 FE DF        		CP	$DF		; is it 'sin' ?
12501+2703 30 02        		JR	NC,o2707	; forward to S-NO-TO-$  with 'sin' through
12502+2705              					; 'chr$' as operand is numeric.
12503+2705
12504+2705              ; all the rest 'cos' through 'chr$' give a numeric result except 'str$'
12505+2705              ; and 'chr$'.
12506+2705
12507+2705 CB B1        		RES	6,C		; signal string operand for 'code', 'val' and
12508+2707              					; 'len'.
12509+2707
12510+2707              ;; S-NO-TO-$
12511+2707 FE EE        o2707:		CP	$EE		; compare 'str$'
12512+2709 38 02        		JR	C,o270D		; forward to S-PUSH-PO if lower as result
12513+270B              					; is numeric.
12514+270B
12515+270B CB B9        		RES	7,C		; reset bit 7 of op code for 'str$', 'chr$'
12516+270D              					; as result is string.
12517+270D
12518+270D              ; >> This is where they were all headed for.
12519+270D
12520+270D              ;; S-PUSH-PO
12521+270D C5           o270D:		PUSH	BC		; push the priority and calculator operation
12522+270E              					; code.
12523+270E
12524+270E E7           		RST	20H		; NEXT-CHAR
12525+270F C3 FF 24     		JP	o24FF		; jump back to S-LOOP-1 to go round the loop
12526+2712              					; again with the next character.
12527+2712
12528+2712              ; --------------------------------
12529+2712
12530+2712              ; ===>  there were many branches forward to here
12531+2712
12532+2712              ;   An important step after the evaluation of an expression is to test for
12533+2712              ;   a string expression and allow it to be sliced.  If a numeric expression is
12534+2712              ;   followed by a "(" then the numeric expression is complete.
12535+2712              ;   Since a string slice can itself be sliced then loop repeatedly
12536+2712              ;   e.g. (STR$ PI) (3 TO) (TO 2)    or "nonsense" (4 TO )
12537+2712
12538+2712              ;; S-CONT-2
12539+2712 DF           o2712:		RST	18H		; GET-CHAR
12540+2713
12541+2713              ;; S-CONT-3
12542+2713 FE 28        o2713:		CP	$28		; is it "(" ?
12543+2715 20 0C        		JR	NZ,o2723	; forward, if not, to S-OPERTR
12544+2717
12545+2717 FD CB 01 76  		BIT	6,(IY+$01)	; test FLAGS - numeric or string result ?
12546+271B 20 17        		JR	NZ,o2734	; forward, if numeric, to S-LOOP
12547+271D
12548+271D              ;   if a string expression preceded the "(" then slice it.
12549+271D
12550+271D CD 52 2A     		CALL	o2A52		; routine SLICING
12551+2720
12552+2720 E7           		RST	20H		; NEXT-CHAR
12553+2721 18 F0        		JR	o2713		; loop back to S-CONT-3
12554+2723
12555+2723              ; ---------------------------
12556+2723
12557+2723              ;   the branch was here when possibility of a "(" has been excluded.
12558+2723
12559+2723              ;; S-OPERTR
12560+2723 06 00        o2723:		LD	B,$00		; prepare to add
12561+2725 4F           		LD	C,A		; possible operator to C
12562+2726 21 95 27     		LD	HL,o2795	; Address: $2795 - tbl-of-ops
12563+2729 CD DC 16     		CALL	o16DC		; routine INDEXER
12564+272C 30 06        		JR	NC,o2734	; forward to S-LOOP if not in table
12565+272E
12566+272E              ;   but if found in table the priority has to be looked up.
12567+272E
12568+272E 4E           		LD	C,(HL)		; operation code to C ( B is still zero )
12569+272F 21 ED 26     		LD	HL,o27B0-$C3	; $26ED is base of table
12570+2732 09           		ADD	HL,BC		; index into table.
12571+2733 46           		LD	B,(HL)		; priority to B.
12572+2734
12573+2734              ; ------------------
12574+2734              ; Scanning main loop
12575+2734              ; ------------------
12576+2734              ; the juggling act
12577+2734
12578+2734              ;; S-LOOP
12579+2734 D1           o2734:		POP	DE		; fetch last priority and operation
12580+2735 7A           		LD	A,D		; priority to A
12581+2736 B8           		CP	B		; compare with this one
12582+2737 38 3A        		JR	C,o2773		; forward to S-TIGHTER to execute the
12583+2739              					; last operation before this one as it has
12584+2739              					; higher priority.
12585+2739
12586+2739              ; the last priority was greater or equal this one.
12587+2739
12588+2739 A7           		AND	A		; if it is zero then so is this
12589+273A CA 18 00     		JP	Z,o0018		; jump to exit via get-char pointing at
12590+273D              					; next character.
12591+273D              					; This may be the character after the
12592+273D              					; expression or, if exiting a recursive call,
12593+273D              					; the next part of the expression to be
12594+273D              					; evaluated.
12595+273D
12596+273D C5           		PUSH	BC		; save current priority/operation
12597+273E              					; as it has lower precedence than the one
12598+273E              					; now in DE.
12599+273E
12600+273E              ; the 'USR' function is special in that it is overloaded to give two types
12601+273E              ; of result.
12602+273E
12603+273E 21 3B 5C     		LD	HL,	$5C3B	; address FLAGS
12604+2741 7B           		LD	A,E		; new operation to A register
12605+2742 FE ED        		CP	$ED		; is it $C0 + 'usr-no' ($2D)  ?
12606+2744 20 06        		JR	NZ,o274C	; forward to S-STK-LST if not
12607+2746
12608+2746 CB 76        		BIT	6,(HL)		; string result expected ?
12609+2748              					; (from the lower priority operand we've
12610+2748              					; just pushed on stack )
12611+2748 20 02        		JR	NZ,o274C	; forward to S-STK-LST if numeric
12612+274A              					; as operand bits match.
12613+274A
12614+274A 1E 99        		LD	E,$99		; reset bit 6 and substitute $19 'usr-$'
12615+274C              					; for string operand.
12616+274C
12617+274C              ;; S-STK-LST
12618+274C D5           o274C:		PUSH	DE		; now stack this priority/operation
12619+274D CD 30 25     		CALL	o2530		; routine SYNTAX-Z
12620+2750 28 09        		JR	Z,o275B		; forward to S-SYNTEST if checking syntax.
12621+2752
12622+2752 7B           		LD	A,E		; fetch the operation code
12623+2753 E6 3F        		AND	$3F		; mask off the result/operand bits to leave
12624+2755              					; a calculator literal.
12625+2755 47           		LD	B,A		; transfer to B register
12626+2756
12627+2756              ; now use the calculator to perform the single operation - operand is on
12628+2756              ; the calculator stack.
12629+2756              ; Note. although the calculator is performing a single operation most
12630+2756              ; functions e.g. TAN are written using other functions and literals and
12631+2756              ; these in turn are written using further strings of calculator literals so
12632+2756              ; another level of magical recursion joins the juggling act for a while
12633+2756              ; as the calculator too is calling itself.
12634+2756
12635+2756 EF           		RST	28H		; FP-CALC
12636+2757 3B           		DB	$3B		; fp-calc-2
12637+2758 38           o2758:		DB	$38		; end-calc
12638+2759
12639+2759 18 09        		JR	o2764		; forward to S-RUNTEST
12640+275B
12641+275B              ; ---
12642+275B
12643+275B              ; the branch was here if checking syntax only.
12644+275B
12645+275B              ;; S-SYNTEST
12646+275B 7B           o275B:		LD	A,E		; fetch the operation code to accumulator
12647+275C FD AE 01     		XOR	(IY+$01)	; compare with bits of FLAGS
12648+275F E6 40        		AND	$40		; bit 6 will be zero now if operand
12649+2761              					; matched expected result.
12650+2761
12651+2761              ;; S-RPORT-C2
12652+2761 C2 8A 1C     o2761:		JP	NZ,o1C8A	; to REPORT-C if mismatch
12653+2764              					; 'Nonsense in BASIC'
12654+2764              					; else continue to set flags for next
12655+2764
12656+2764              ; the branch is to here in runtime after a successful operation.
12657+2764
12658+2764              ;; S-RUNTEST
12659+2764 D1           o2764:		POP	DE		; fetch the last operation from stack
12660+2765 21 3B 5C     		LD	HL,	$5C3B	; address FLAGS
12661+2768 CB F6        		SET	6,(HL)		; set default to numeric result in FLAGS
12662+276A CB 7B        		BIT	7,E		; test the operational result
12663+276C 20 02        		JR	NZ,o2770	; forward to S-LOOPEND if numeric
12664+276E
12665+276E CB B6        		RES	6,(HL)		; reset bit 6 of FLAGS to show string result.
12666+2770
12667+2770              ;; S-LOOPEND
12668+2770 C1           o2770:		POP	BC		; fetch the previous priority/operation
12669+2771 18 C1        		JR	o2734		; back to S-LOOP to perform these
12670+2773
12671+2773              ; ---
12672+2773
12673+2773              ; the branch was here when a stacked priority/operator had higher priority
12674+2773              ; than the current one.
12675+2773
12676+2773              ;; S-TIGHTER
12677+2773 D5           o2773:		PUSH	DE		; save high priority op on stack again
12678+2774 79           		LD	A,C		; fetch lower priority operation code
12679+2775 FD CB 01 76  		BIT	6,(IY+$01)	; test FLAGS - Numeric or string result ?
12680+2779 20 15        		JR	NZ,o2790	; forward to S-NEXT if numeric result
12681+277B
12682+277B              ; if this is lower priority yet has string then must be a comparison.
12683+277B              ; Since these can only be evaluated in context and were defaulted to
12684+277B              ; numeric in operator look up they must be changed to string equivalents.
12685+277B
12686+277B E6 3F        		AND	$3F		; mask to give true calculator literal
12687+277D C6 08        		ADD	A,$08		; augment numeric literals to string
12688+277F              					; equivalents.
12689+277F              					; 'no-&-no'  => 'str-&-no'
12690+277F              					; 'no-l-eql' => 'str-l-eql'
12691+277F              					; 'no-gr-eq' => 'str-gr-eq'
12692+277F              					; 'nos-neql' => 'strs-neql'
12693+277F              					; 'no-grtr'  => 'str-grtr'
12694+277F              					; 'no-less'  => 'str-less'
12695+277F              					; 'nos-eql'  => 'strs-eql'
12696+277F              					; 'addition' => 'strs-add'
12697+277F 4F           		LD	C,A		; put modified comparison operator back
12698+2780 FE 10        		CP	$10		; is it now 'str-&-no' ?
12699+2782 20 04        		JR	NZ,o2788	; forward to S-NOT-AND  if not.
12700+2784
12701+2784 CB F1        		SET	6,C		; set numeric operand bit
12702+2786 18 08        		JR	o2790		; forward to S-NEXT
12703+2788
12704+2788              ; ---
12705+2788
12706+2788              ;; S-NOT-AND
12707+2788 38 D7        o2788:		JR	C,o2761		; back to S-RPORT-C2 if less
12708+278A              					; 'Nonsense in BASIC'.
12709+278A              					; e.g. a$ * b$
12710+278A
12711+278A FE 17        		CP	$17		; is it 'strs-add' ?
12712+278C 28 02        		JR	Z,o2790		; forward to S-NEXT if so
12713+278E              					; (bit 6 and 7 are reset)
12714+278E
12715+278E CB F9        		SET	7,C		; set numeric (Boolean) result for all others
12716+2790
12717+2790              ;; S-NEXT
12718+2790 C5           o2790:		PUSH	BC		; now save this priority/operation on stack
12719+2791
12720+2791 E7           		RST	20H		; NEXT-CHAR
12721+2792 C3 FF 24     		JP	o24FF		; jump back to S-LOOP-1
12722+2795
12723+2795              ; ------------------
12724+2795              ; Table of operators
12725+2795              ; ------------------
12726+2795              ; This table is used to look up the calculator literals associated with
12727+2795              ; the operator character. The thirteen calculator operations $03 - $0F
12728+2795              ; have bits 6 and 7 set to signify a numeric result.
12729+2795              ; Some of these codes and bits may be altered later if the context suggests
12730+2795              ; a string comparison or operation.
12731+2795              ; that is '+', "=", ">", "<", '<=', '>=' or '<>'.
12732+2795
12733+2795              ;; tbl-of-ops
12734+2795 2B CF        o2795:		DB	'+', $CF	;        $C0 + 'addition'
12735+2797 2D C3        		DB	'-', $C3	;        $C0 + 'subtract'
12736+2799 2A C4        		DB	"*", $C4	;        $C0 + 'multiply'
12737+279B 2F C5        		DB	"/", $C5	;        $C0 + 'division'
12738+279D 5E C6        		DB	'^', $C6	;        $C0 + 'to-power'
12739+279F 3D CE        		DB	"=", $CE	;        $C0 + 'nos-eql'
12740+27A1 3E CC        		DB	">", $CC	;        $C0 + 'no-grtr'
12741+27A3 3C CD        		DB	"<", $CD	;        $C0 + 'no-less'
12742+27A5
12743+27A5 C7 C9        		DB	$C7,$C9		; '<='   $C0 + 'no-l-eql'
12744+27A7 C8 CA        		DB	$C8,$CA		; '>='   $C0 + 'no-gr-eql'
12745+27A9 C9 CB        		DB	$C9,$CB		; '<>'   $C0 + 'nos-neql'
12746+27AB C5 C7        		DB	$C5,$C7		; 'OR'   $C0 + 'or'
12747+27AD C6 C8        		DB	$C6,$C8		; 'AND'  $C0 + 'no-&-no'
12748+27AF
12749+27AF 00           		DB	$00		; zero end-marker.
12750+27B0
12751+27B0
12752+27B0              ; -------------------
12753+27B0              ; Table of priorities
12754+27B0              ; -------------------
12755+27B0              ; This table is indexed with the operation code obtained from the above
12756+27B0              ; table $C3 - $CF to obtain the priority for the respective operation.
12757+27B0
12758+27B0              ;; tbl-priors
12759+27B0 06           o27B0:		DB	$06		; '-'   opcode $C3
12760+27B1 08           		DB	$08		; "*"   opcode $C4
12761+27B2 08           		DB	$08		; "/"   opcode $C5
12762+27B3 0A           		DB	$0A		; '^'   opcode $C6
12763+27B4 02           		DB	$02		; 'OR'  opcode $C7
12764+27B5 03           		DB	$03		; 'AND' opcode $C8
12765+27B6 05           		DB	$05		; '<='  opcode $C9
12766+27B7 05           		DB	$05		; '>='  opcode $CA
12767+27B8 05           		DB	$05		; '<>'  opcode $CB
12768+27B9 05           		DB	$05		; ">"   opcode $CC
12769+27BA 05           		DB	$05		; "<"   opcode $CD
12770+27BB 05           		DB	$05		; "="   opcode $CE
12771+27BC 06           		DB	$06		; '+'   opcode $CF
12772+27BD
12773+27BD              ; ----------------------
12774+27BD              ; Scanning function (FN)
12775+27BD              ; ----------------------
12776+27BD              ; This routine deals with user-defined functions.
12777+27BD              ; The definition can be anywhere in the program area but these are best
12778+27BD              ; poaced near the start of the program as we shall see.
12779+27BD              ; The evaluation process is quite complex as the Spectrum has to parse two
12780+27BD              ; statements at the same time. Syntax of both has been checked previously
12781+27BD              ; and hidden locations have been created immediately after each argument
12782+27BD              ; of the DEF FN statement. Each of the arguments of the FN function is
12783+27BD              ; evaluated by SCANNING and poaced in the hidden locations. Then the
12784+27BD              ; expression to the right of the DEF FN "=" is evaluated by SCANNING and for
12785+27BD              ; any variables encountered, a search is made in the DEF FN variable list
12786+27BD              ; in the program area before searching in the normal variables area.
12787+27BD              ;
12788+27BD              ; Recursion is not allowed: i.e. the definition of a function should not use
12789+27BD              ; the same function, either directly or indirectly ( through another function).
12790+27BD              ; You'll normally get error 4, ('Out of memory'), although sometimes the system
12791+27BD              ; will crash. - Vickers, Pitman 1984.
12792+27BD              ;
12793+27BD              ; As the definition is just an expression, there would seem to be no means
12794+27BD              ; of breaking out of such recursion.
12795+27BD              ; However, by the clever use of string expressions and VAL, such recursion is
12796+27BD              ; possible.
12797+27BD              ; e.g. DEF FN a(n) = VAL "n+FN a(n-1)+0" ((n<1) * 10 + 1 TO )
12798+27BD              ; will evaluate the full 11-character expression for all values where n is
12799+27BD              ; greater than zero but just the 11th character, "0", when n drops to zero
12800+27BD              ; thereby ending the recursion producing the correct result.
12801+27BD              ; Recursive string functions are possible using VAL$ instead of VAL and the
12802+27BD              ; null string as the final addend.
12803+27BD              ; - from a turn of the century newsgroup discussion initiated by Mike Wynne.
12804+27BD
12805+27BD              ;; S-FN-SBRN
12806+27BD CD 30 25     o27BD:		CALL	o2530		; routine SYNTAX-Z
12807+27C0 20 35        		JR	NZ,o27F7	; forward to SF-RUN in runtime
12808+27C2
12809+27C2
12810+27C2 E7           		RST	20H		; NEXT-CHAR
12811+27C3 CD 8D 2C     		CALL	o2C8D		; routine ALPHA check for letters A-Z a-z
12812+27C6 D2 8A 1C     		JP	NC,o1C8A	; jump back to REPORT-C if not
12813+27C9              					; 'Nonsense in BASIC'
12814+27C9
12815+27C9
12816+27C9 E7           		RST	20H		; NEXT-CHAR
12817+27CA FE 24        		CP	$24		; is it "$" ?
12818+27CC F5           		PUSH	AF		; save character and flags
12819+27CD 20 01        		JR	NZ,o27D0	; forward to SF-BRKT-1 with numeric function
12820+27CF
12821+27CF
12822+27CF E7           		RST	20H		; NEXT-CHAR
12823+27D0
12824+27D0              ;; SF-BRKT-1
12825+27D0 FE 28        o27D0:		CP	$28		; is "(" ?
12826+27D2 20 12        		JR	NZ,o27E6	; forward to SF-RPRT-C if not
12827+27D4              					; 'Nonsense in BASIC'
12828+27D4
12829+27D4
12830+27D4 E7           		RST	20H		; NEXT-CHAR
12831+27D5 FE 29        		CP	$29		; is it ")" ?
12832+27D7 28 10        		JR	Z,o27E9		; forward to SF-FLAG-6 if no arguments.
12833+27D9
12834+27D9              ;; SF-ARGMTS
12835+27D9 CD FB 24     o27D9:		CALL	o24FB		; routine SCANNING checks each argument
12836+27DC              					; which may be an expression.
12837+27DC
12838+27DC DF           		RST	18H		; GET-CHAR
12839+27DD FE 2C        		CP	$2C		; is it a ',' ?
12840+27DF 20 03        		JR	NZ,o27E4	; forward if not to SF-BRKT-2 to test bracket
12841+27E1
12842+27E1
12843+27E1 E7           		RST	20H		; NEXT-CHAR if a comma was found
12844+27E2 18 F5        		JR	o27D9		; back to SF-ARGMTS to parse all arguments.
12845+27E4
12846+27E4              ; ---
12847+27E4
12848+27E4              ;; SF-BRKT-2
12849+27E4 FE 29        o27E4:		CP	$29		; is character the closing ")" ?
12850+27E6
12851+27E6              ;; SF-RPRT-C
12852+27E6 C2 8A 1C     o27E6:		JP	NZ,o1C8A	; jump to REPORT-C
12853+27E9              					; 'Nonsense in BASIC'
12854+27E9
12855+27E9              ; at this point any optional arguments have had their syntax checked.
12856+27E9
12857+27E9              ;; SF-FLAG-6
12858+27E9 E7           o27E9:		RST	20H		; NEXT-CHAR
12859+27EA 21 3B 5C     		LD	HL,	$5C3B	; address system variable FLAGS
12860+27ED CB B6        		RES	6,(HL)		; signal string result
12861+27EF F1           		POP	AF		; restore test against "$".
12862+27F0 28 02        		JR	Z,o27F4		; forward to SF-SYN-EN if string function.
12863+27F2
12864+27F2 CB F6        		SET	6,(HL)		; signal numeric result
12865+27F4
12866+27F4              ;; SF-SYN-EN
12867+27F4 C3 12 27     o27F4:		JP	o2712		; jump back to S-CONT-2 to continue scanning.
12868+27F7
12869+27F7              ; ---
12870+27F7
12871+27F7              ; the branch was here in runtime.
12872+27F7
12873+27F7              ;; SF-RUN
12874+27F7 E7           o27F7:		RST	20H		; NEXT-CHAR fetches name
12875+27F8 E6 DF        		AND	$DF		; AND 11101111 - reset bit 5 - upper-case.
12876+27FA 47           		LD	B,A		; save in B
12877+27FB
12878+27FB E7           		RST	20H		; NEXT-CHAR
12879+27FC D6 24        		SUB	$24		; subtract "$"
12880+27FE 4F           		LD	C,A		; save result in C
12881+27FF 20 01        		JR	NZ,o2802	; forward if not "$" to SF-ARGMT1
12882+2801
12883+2801 E7           		RST	20H		; NEXT-CHAR advances to bracket
12884+2802
12885+2802              ;; SF-ARGMT1
12886+2802 E7           o2802:		RST	20H		; NEXT-CHAR advances to start of argument
12887+2803 E5           		PUSH	HL		; save address
12888+2804 2A 53 5C     		LD	HL,(	$5C53)	; fetch start of program area from PROG
12889+2807 2B           		DEC	HL		; the search starting point is the previous
12890+2808              					; location.
12891+2808
12892+2808              ;; SF-FND-DF
12893+2808 11 CE 00     o2808:		LD	DE,$00CE	; search is for token 'DEF FN' in E,
12894+280B              					; statement count in D.
12895+280B C5           		PUSH	BC		; save C the string test, and B the letter.
12896+280C CD 86 1D     		CALL	o1D86		; routine LOOK-PROG will search for token.
12897+280F C1           		POP	BC		; restore BC.
12898+2810 30 02        		JR	NC,o2814	; forward to SF-CP-DEF if a match was found.
12899+2812
12900+2812
12901+2812              ;; REPORT-P
12902+2812 CF           o2812:		RST	08H		; ERROR-1
12903+2813 18           		DB	$18		; Error Report: FN without DEF
12904+2814
12905+2814              ;; SF-CP-DEF
12906+2814 E5           o2814:		PUSH	HL		; save address of DEF FN
12907+2815 CD AB 28     		CALL	o28AB		; routine FN-SKPOVR skips over white-space etc.
12908+2818              					; without disturbing CH-ADD.
12909+2818 E6 DF        		AND	$DF		; make fetched character upper-case.
12910+281A B8           		CP	B		; compare with FN name
12911+281B 20 08        		JR	NZ,o2825	; forward to SF-NOT-FD if no match.
12912+281D
12913+281D              ; the letters match so test the type.
12914+281D
12915+281D CD AB 28     		CALL	o28AB		; routine FN-SKPOVR skips white-space
12916+2820 D6 24        		SUB	$24		; subtract "$" from fetched character
12917+2822 B9           		CP	C		; compare with saved result of same operation
12918+2823              					; on FN name.
12919+2823 28 0C        		JR	Z,o2831		; forward to SF-VALUES with a match.
12920+2825
12921+2825              ; the letters matched but one was string and the other numeric.
12922+2825
12923+2825              ;; SF-NOT-FD
12924+2825 E1           o2825:		POP	HL		; restore search point.
12925+2826 2B           		DEC	HL		; make location before
12926+2827 11 00 02     		LD	DE,$0200	; the search is to be for the end of the
12927+282A              					; current definition - 2 statements forward.
12928+282A C5           		PUSH	BC		; save the letter/type
12929+282B CD 8B 19     		CALL	o198B		; routine EACH-STMT steps past rejected
12930+282E              					; definition.
12931+282E C1           		POP	BC		; restore letter/type
12932+282F 18 D7        		JR	o2808		; back to SF-FND-DF to continue search
12933+2831
12934+2831              ; ---
12935+2831
12936+2831              ; Success!
12937+2831              ; the branch was here with matching letter and numeric/string type.
12938+2831
12939+2831              ;; SF-VALUES
12940+2831 A7           o2831:		AND	A		; test A ( will be zero if string "$" - "$" )
12941+2832
12942+2832 CC AB 28     		CALL	Z,o28AB		; routine FN-SKPOVR advances HL past "$".
12943+2835
12944+2835 D1           		POP	DE		; discard pointer to 'DEF FN'.
12945+2836 D1           		POP	DE		; restore pointer to first FN argument.
12946+2837 ED 53 5D 5C  		LD	(	$5C5D),DE	; save in CH_ADD
12947+283B
12948+283B CD AB 28     		CALL	o28AB		; routine FN-SKPOVR advances HL past "("
12949+283E E5           		PUSH	HL		; save start address in DEF FN  ***
12950+283F FE 29        		CP	$29		; is character a ")" ?
12951+2841 28 42        		JR	Z,o2885		; forward to SF-R-BR-2 if no arguments.
12952+2843
12953+2843              ;; SF-ARG-LP
12954+2843 23           o2843:		INC	HL		; point to next character.
12955+2844 7E           		LD	A,(HL)		; fetch it.
12956+2845 FE 0E        		CP	$0E		; is it the number marker
12957+2847 16 40        		LD	D,$40		; signal numeric in D.
12958+2849 28 07        		JR	Z,o2852		; forward to SF-ARG-VL if numeric.
12959+284B
12960+284B 2B           		DEC	HL		; back to letter
12961+284C CD AB 28     		CALL	o28AB		; routine FN-SKPOVR skips any white-space
12962+284F 23           		INC	HL		; advance past the expected "$" to
12963+2850              					; the 'hidden' marker.
12964+2850 16 00        		LD	D,$00		; signal string.
12965+2852
12966+2852              ;; SF-ARG-VL
12967+2852 23           o2852:		INC	HL		; now address first of 5-byte location.
12968+2853 E5           		PUSH	HL		; save address in DEF FN statement
12969+2854 D5           		PUSH	DE		; save D - result type
12970+2855
12971+2855 CD FB 24     		CALL	o24FB		; routine SCANNING evaluates expression in
12972+2858              					; the FN statement setting FLAGS and leaving
12973+2858              					; result as last value on calculator stack.
12974+2858
12975+2858 F1           		POP	AF		; restore saved result type to A
12976+2859
12977+2859 FD AE 01     		XOR	(IY+$01)	; xor with FLAGS
12978+285C E6 40        		AND	$40		; and with 01000000 to test bit 6
12979+285E 20 2B        		JR	NZ,o288B	; forward to REPORT-Q if type mismatch.
12980+2860              					; 'Parameter error'
12981+2860
12982+2860 E1           		POP	HL		; pop the start address in DEF FN statement
12983+2861 EB           		EX	DE,HL		; transfer to DE ?? pop straight into de ?
12984+2862
12985+2862 2A 65 5C     		LD	HL,(	$5C65)	; set HL to STKEND location after value
12986+2865 01 05 00     		LD	BC,$0005	; five bytes to move
12987+2868 ED 42        		SBC	HL,BC		; decrease HL by 5 to point to start.
12988+286A 22 65 5C     		LD	(	$5C65),HL	; set STKEND 'removing' value from stack.
12989+286D
12990+286D ED B0        		LDIR			; copy value into DEF FN statement
12991+286F EB           		EX	DE,HL		; set HL to location after value in DEF FN
12992+2870 2B           		DEC	HL		; step back one
12993+2871 CD AB 28     		CALL	o28AB		; routine FN-SKPOVR gets next valid character
12994+2874 FE 29        		CP	$29		; is it ")" end of arguments ?
12995+2876 28 0D        		JR	Z,o2885		; forward to SF-R-BR-2 if so.
12996+2878
12997+2878              ; a comma separator has been encountered in the DEF FN argument list.
12998+2878
12999+2878 E5           		PUSH	HL		; save position in DEF FN statement
13000+2879
13001+2879 DF           		RST	18H		; GET-CHAR from FN statement
13002+287A FE 2C        		CP	$2C		; is it ',' ?
13003+287C 20 0D        		JR	NZ,o288B	; forward to REPORT-Q if not
13004+287E              					; 'Parameter error'
13005+287E
13006+287E E7           		RST	20H		; NEXT-CHAR in FN statement advances to next
13007+287F              					; argument.
13008+287F
13009+287F E1           		POP	HL		; restore DEF FN pointer
13010+2880 CD AB 28     		CALL	o28AB		; routine FN-SKPOVR advances to corresponding
13011+2883              					; argument.
13012+2883
13013+2883 18 BE        		JR	o2843		; back to SF-ARG-LP looping until all
13014+2885              					; arguments are passed into the DEF FN
13015+2885              					; hidden locations.
13016+2885
13017+2885              ; ---
13018+2885
13019+2885              ; the branch was here when all arguments passed.
13020+2885
13021+2885              ;; SF-R-BR-2
13022+2885 E5           o2885:		PUSH	HL		; save location of ")" in DEF FN
13023+2886
13024+2886 DF           		RST	18H		; GET-CHAR gets next character in FN
13025+2887 FE 29        		CP	$29		; is it a ")" also ?
13026+2889 28 02        		JR	Z,o288D		; forward to SF-VALUE if so.
13027+288B
13028+288B
13029+288B              ;; REPORT-Q
13030+288B CF           o288B:		RST	08H		; ERROR-1
13031+288C 19           		DB	$19		; Error Report: Parameter error
13032+288D
13033+288D              ;; SF-VALUE
13034+288D D1           o288D:		POP	DE		; location of ")" in DEF FN to DE.
13035+288E EB           		EX	DE,HL		; now to HL, FN ")" pointer to DE.
13036+288F 22 5D 5C     		LD	(	$5C5D),HL	; initialize CH_ADD to this value.
13037+2892
13038+2892              ; At this point the start of the DEF FN argument list is on the machine stack.
13039+2892              ; We also have to consider that this defined function may form part of the
13040+2892              ; definition of another defined function (though not itself).
13041+2892              ; As this defined function may be part of a hierarchy of defined functions
13042+2892              ; currently being evaluated by recursive calls to SCANNING, then we have to
13043+2892              ; preserve the original value of DEFADD and not assume that it is zero.
13044+2892
13045+2892 2A 0B 5C     		LD	HL,(	$5C0B)	; get original DEFADD address
13046+2895 E3           		EX	(SP),HL		; swap with DEF FN address on stack ***
13047+2896 22 0B 5C     		LD	(	$5C0B),HL	; set DEFADD to point to this argument list
13048+2899              					; during scanning.
13049+2899
13050+2899 D5           		PUSH	DE		; save FN ")" pointer.
13051+289A
13052+289A E7           		RST	20H		; NEXT-CHAR advances past ")" in define
13053+289B
13054+289B E7           		RST	20H		; NEXT-CHAR advances past "=" to expression
13055+289C
13056+289C CD FB 24     		CALL	o24FB		; routine SCANNING evaluates but searches
13057+289F              					; initially for variables at DEFADD
13058+289F
13059+289F E1           		POP	HL		; pop the FN ")" pointer
13060+28A0 22 5D 5C     		LD	(	$5C5D),HL	; set CH_ADD to this
13061+28A3 E1           		POP	HL		; pop the original DEFADD value
13062+28A4 22 0B 5C     		LD	(	$5C0B),HL	; and re-insert into DEFADD system variable.
13063+28A7
13064+28A7 E7           		RST	20H		; NEXT-CHAR advances to character after ")"
13065+28A8 C3 12 27     		JP	o2712		; to S-CONT-2 - to continue current
13066+28AB              					; invocation of scanning
13067+28AB
13068+28AB              ; --------------------
13069+28AB              ; Used to parse DEF FN
13070+28AB              ; --------------------
13071+28AB              ; e.g. DEF FN     s $ ( x )     =  b     $ (  TO  x  ) : REM exaggerated
13072+28AB              ;
13073+28AB              ; This routine is used 10 times to advance along a DEF FN statement
13074+28AB              ; skipping spaces and colour control codes. It is similar to NEXT-CHAR
13075+28AB              ; which is, at the same time, used to skip along the corresponding FN function
13076+28AB              ; except the latter has to deal with AT and TAB characters in string
13077+28AB              ; expressions. These cannot occur in a program area so this routine is
13078+28AB              ; simpler as both colour controls and their parameters are less than space.
13079+28AB
13080+28AB              ;; FN-SKPOVR
13081+28AB 23           o28AB:		INC	HL		; increase pointer
13082+28AC 7E           		LD	A,(HL)		; fetch addressed character
13083+28AD FE 21        		CP	$21		; compare with space + 1
13084+28AF 38 FA        		JR	C,o28AB		; back to FN-SKPOVR if less
13085+28B1
13086+28B1 C9           		RET			; return pointing to a valid character.
13087+28B2
13088+28B2              ; ---------
13089+28B2              ; LOOK-VARS
13090+28B2              ; ---------
13091+28B2              ;
13092+28B2              ;
13093+28B2
13094+28B2              ;; LOOK-VARS
13095+28B2 FD CB 01 F6  o28B2:		SET	6,(IY+$01)	; update FLAGS - presume numeric result
13096+28B6
13097+28B6 DF           		RST	18H		; GET-CHAR
13098+28B7 CD 8D 2C     		CALL	o2C8D		; routine ALPHA tests for A-Za-z
13099+28BA D2 8A 1C     		JP	NC,o1C8A	; jump to REPORT-C if not.
13100+28BD              					; 'Nonsense in BASIC'
13101+28BD
13102+28BD E5           		PUSH	HL		; save pointer to first letter       ^1
13103+28BE E6 1F        		AND	$1F		; mask lower bits, 1 - 26 decimal     000xxxxx
13104+28C0 4F           		LD	C,A		; store in C.
13105+28C1
13106+28C1 E7           		RST	20H		; NEXT-CHAR
13107+28C2 E5           		PUSH	HL		; save pointer to second character   ^2
13108+28C3 FE 28        		CP	$28		; is it "(" - an array ?
13109+28C5 28 28        		JR	Z,o28EF		; forward to V-RUN/SYN if so.
13110+28C7
13111+28C7 CB F1        		SET	6,C		; set 6 signaling string if solitary  010
13112+28C9 FE 24        		CP	$24		; is character a "$" ?
13113+28CB 28 11        		JR	Z,o28DE		; forward to V-STR-VAR
13114+28CD
13115+28CD CB E9        		SET	5,C		; signal numeric                       011
13116+28CF CD 88 2C     		CALL	o2C88		; routine ALPHANUM sets carry if second
13117+28D2              					; character is alphanumeric.
13118+28D2 30 0F        		JR	NC,o28E3	; forward to V-TEST-FN if just one character
13119+28D4
13120+28D4              ; It is more than one character but re-test current character so that 6 reset
13121+28D4              ; This loop renders the similar loop at V-PASS redundant.
13122+28D4
13123+28D4              ;; V-CHAR
13124+28D4 CD 88 2C     o28D4:		CALL	o2C88		; routine ALPHANUM
13125+28D7 30 16        		JR	NC,o28EF	; to V-RUN/SYN when no more
13126+28D9
13127+28D9 CB B1        		RES	6,C		; make long named type                 001
13128+28DB
13129+28DB E7           		RST	20H		; NEXT-CHAR
13130+28DC 18 F6        		JR	o28D4		; loop back to V-CHAR
13131+28DE
13132+28DE              ; ---
13133+28DE
13134+28DE
13135+28DE              ;; V-STR-VAR
13136+28DE E7           o28DE:		RST	20H		; NEXT-CHAR advances past "$"
13137+28DF FD CB 01 B6  		RES	6,(IY+$01)	; update FLAGS - signal string result.
13138+28E3
13139+28E3              ;; V-TEST-FN
13140+28E3 3A 0C 5C     o28E3:		LD	A,($5C0C)	; load A with DEFADD_hi
13141+28E6 A7           		AND	A		; and test for zero.
13142+28E7 28 06        		JR	Z,o28EF		; forward to V-RUN/SYN if a defined function
13143+28E9              					; is not being evaluated.
13144+28E9
13145+28E9              ; Note.
13146+28E9
13147+28E9 CD 30 25     		CALL	o2530		; routine SYNTAX-Z
13148+28EC C2 51 29     		JP	NZ,o2951	; JUMP to STK-F-ARG in runtime and then
13149+28EF              					; back to this point if no variable found.
13150+28EF
13151+28EF              ;; V-RUN/SYN
13152+28EF 41           o28EF:		LD	B,C		; save flags in B
13153+28F0 CD 30 25     		CALL	o2530		; routine SYNTAX-Z
13154+28F3 20 08        		JR	NZ,o28FD	; to V-RUN to look for the variable in runtime
13155+28F5
13156+28F5              ; if checking syntax the letter is not returned
13157+28F5
13158+28F5 79           		LD	A,C		; copy letter/flags to A
13159+28F6 E6 E0        		AND	$E0		; and with 11100000 to get rid of the letter
13160+28F8 CB FF        		SET	7,A		; use spare bit to signal checking syntax.
13161+28FA 4F           		LD	C,A		; and transfer to C.
13162+28FB 18 37        		JR	o2934		; forward to V-SYNTAX
13163+28FD
13164+28FD              ; ---
13165+28FD
13166+28FD              ; but in runtime search for the variable.
13167+28FD
13168+28FD              ;; V-RUN
13169+28FD 2A 4B 5C     o28FD:		LD	HL,(	$5C4B)	; set HL to start of variables from VARS
13170+2900
13171+2900              ;; V-EACH
13172+2900 7E           o2900:		LD	A,(HL)		; get first character
13173+2901 E6 7F        		AND	$7F		; and with 01111111
13174+2903              					; ignoring bit 7 which distinguishes
13175+2903              					; arrays or for/next variables.
13176+2903
13177+2903 28 2D        		JR	Z,o2932		; to V-80-BYTE if zero as must be 10000000
13178+2905              					; the variables end-marker.
13179+2905
13180+2905 B9           		CP	C		; compare with supplied value.
13181+2906 20 22        		JR	NZ,o292A	; forward to V-NEXT if no match.
13182+2908
13183+2908 17           		RLA			; destructively test
13184+2909 87           		ADD	A,A		; bits 5 and 6 of A
13185+290A              					; jumping if bit 5 reset or 6 set
13186+290A
13187+290A F2 3F 29     		JP	P,o293F		; to V-FOUND-2  strings and arrays
13188+290D
13189+290D 38 30        		JR	C,o293F		; to V-FOUND-2  simple and for next
13190+290F
13191+290F              ; leaving long name variables.
13192+290F
13193+290F D1           		POP	DE		; pop pointer to 2nd. char
13194+2910 D5           		PUSH	DE		; save it again
13195+2911 E5           		PUSH	HL		; save variable first character pointer
13196+2912
13197+2912              ;; V-MATCHES
13198+2912 23           o2912:		INC	HL		; address next character in vars area
13199+2913
13200+2913              ;; V-SPACES
13201+2913 1A           o2913:		LD	A,(DE)		; pick up letter from prog area
13202+2914 13           		INC	DE		; and advance address
13203+2915 FE 20        		CP	$20		; is it a space
13204+2917 28 FA        		JR	Z,o2913		; back to V-SPACES until non-space
13205+2919
13206+2919 F6 20        		OR	$20		; convert to range 1 - 26.
13207+291B BE           		CP	(HL)		; compare with addressed variables character
13208+291C 28 F4        		JR	Z,o2912		; loop back to V-MATCHES if a match on an
13209+291E              					; intermediate letter.
13210+291E
13211+291E F6 80        		OR	$80		; now set bit 7 as last character of long
13212+2920              					; names are inverted.
13213+2920 BE           		CP	(HL)		; compare again
13214+2921 20 06        		JR	NZ,o2929	; forward to V-GET-PTR if no match
13215+2923
13216+2923              ; but if they match check that this is also last letter in prog area
13217+2923
13218+2923 1A           		LD	A,(DE)		; fetch next character
13219+2924 CD 88 2C     		CALL	o2C88		; routine ALPHANUM sets carry if not alphanum
13220+2927 30 15        		JR	NC,o293E	; forward to V-FOUND-1 with a full match.
13221+2929
13222+2929              ;; V-GET-PTR
13223+2929 E1           o2929:		POP	HL		; pop saved pointer to char 1
13224+292A
13225+292A              ;; V-NEXT
13226+292A C5           o292A:		PUSH	BC		; save flags
13227+292B CD B8 19     		CALL	o19B8		; routine NEXT-ONE gets next variable in DE
13228+292E EB           		EX	DE,HL		; transfer to HL.
13229+292F C1           		POP	BC		; restore the flags
13230+2930 18 CE        		JR	o2900		; loop back to V-EACH
13231+2932              					; to compare each variable
13232+2932
13233+2932              ; ---
13234+2932
13235+2932              ;; V-80-BYTE
13236+2932 CB F8        o2932:		SET	7,B		; will signal not found
13237+2934
13238+2934              ; the branch was here when checking syntax
13239+2934
13240+2934              ;; V-SYNTAX
13241+2934 D1           o2934:		POP	DE		; discard the pointer to 2nd. character  v2
13242+2935              					; in BASIC line/workspace.
13243+2935
13244+2935 DF           		RST	18H		; GET-CHAR gets character after variable name.
13245+2936 FE 28        		CP	$28		; is it "(" ?
13246+2938 28 09        		JR	Z,o2943		; forward to V-PASS
13247+293A              					; Note. could go straight to V-END ?
13248+293A
13249+293A CB E8        		SET	5,B		; signal not an array
13250+293C 18 0D        		JR	o294B		; forward to V-END
13251+293E
13252+293E              ; ---------------------------
13253+293E
13254+293E              ; the jump was here when a long name matched and HL pointing to last character
13255+293E              ; in variables area.
13256+293E
13257+293E              ;; V-FOUND-1
13258+293E D1           o293E:		POP	DE		; discard pointer to first var letter
13259+293F
13260+293F              ; the jump was here with all other matches HL points to first var char.
13261+293F
13262+293F              ;; V-FOUND-2
13263+293F D1           o293F:		POP	DE		; discard pointer to 2nd prog char       v2
13264+2940 D1           		POP	DE		; drop pointer to 1st prog char          v1
13265+2941 E5           		PUSH	HL		; save pointer to last char in vars
13266+2942
13267+2942 DF           		RST	18H		; GET-CHAR
13268+2943
13269+2943              ;; V-PASS
13270+2943 CD 88 2C     o2943:		CALL	o2C88		; routine ALPHANUM
13271+2946 30 03        		JR	NC,o294B	; forward to V-END if not
13272+2948
13273+2948              ; but it never will be as we advanced past long-named variables earlier.
13274+2948
13275+2948 E7           		RST	20H		; NEXT-CHAR
13276+2949 18 F8        		JR	o2943		; back to V-PASS
13277+294B
13278+294B              ; ---
13279+294B
13280+294B              ;; V-END
13281+294B E1           o294B:		POP	HL		; pop the pointer to first character in
13282+294C              					; BASIC line/workspace.
13283+294C CB 10        		RL	B		; rotate the B register left
13284+294E              					; bit 7 to carry
13285+294E CB 70        		BIT	6,B		; test the array indicator bit.
13286+2950 C9           		RET			; return
13287+2951
13288+2951              ; -----------------------
13289+2951              ; Stack function argument
13290+2951              ; -----------------------
13291+2951              ; This branch is taken from LOOK-VARS when a defined function is currently
13292+2951              ; being evaluated.
13293+2951              ; Scanning is evaluating the expression after the "=" and the variable
13294+2951              ; found could be in the argument list to the left of the "=" or in the
13295+2951              ; normal place after the program. Preference will be given to the former.
13296+2951              ; The variable name to be matched is in C.
13297+2951
13298+2951              ;; STK-F-ARG
13299+2951 2A 0B 5C     o2951:		LD	HL,(	$5C0B)	; set HL to DEFADD
13300+2954 7E           		LD	A,(HL)		; load the first character
13301+2955 FE 29        		CP	$29		; is it ")" ?
13302+2957 CA EF 28     		JP	Z,o28EF		; JUMP back to V-RUN/SYN, if so, as there are
13303+295A              					; no arguments.
13304+295A
13305+295A              ; but proceed to search argument list of defined function first if not empty.
13306+295A
13307+295A              ;; SFA-LOOP
13308+295A 7E           o295A:		LD	A,(HL)		; fetch character again.
13309+295B F6 60        		OR	$60		; or with 01100000 presume a simple variable.
13310+295D 47           		LD	B,A		; save result in B.
13311+295E 23           		INC	HL		; address next location.
13312+295F 7E           		LD	A,(HL)		; pick up byte.
13313+2960 FE 0E        		CP	$0E		; is it the number marker ?
13314+2962 28 07        		JR	Z,o296B		; forward to SFA-CP-VR if so.
13315+2964
13316+2964              ; it was a string. White-space may be present but syntax has been checked.
13317+2964
13318+2964 2B           		DEC	HL		; point back to letter.
13319+2965 CD AB 28     		CALL	o28AB		; routine FN-SKPOVR skips to the "$"
13320+2968 23           		INC	HL		; now address the hidden marker.
13321+2969 CB A8        		RES	5,B		; signal a string variable.
13322+296B
13323+296B              ;; SFA-CP-VR
13324+296B 78           o296B:		LD	A,B		; transfer found variable letter to A.
13325+296C B9           		CP	C		; compare with expected.
13326+296D 28 12        		JR	Z,o2981		; forward to SFA-MATCH with a match.
13327+296F
13328+296F 23           		INC	HL		; step
13329+2970 23           		INC	HL		; past
13330+2971 23           		INC	HL		; the
13331+2972 23           		INC	HL		; five
13332+2973 23           		INC	HL		; bytes.
13333+2974
13334+2974 CD AB 28     		CALL	o28AB		; routine FN-SKPOVR skips to next character
13335+2977 FE 29        		CP	$29		; is it ")" ?
13336+2979 CA EF 28     		JP	Z,o28EF		; jump back if so to V-RUN/SYN to look in
13337+297C              					; normal variables area.
13338+297C
13339+297C CD AB 28     		CALL	o28AB		; routine FN-SKPOVR skips past the ','
13340+297F              					; all syntax has been checked and these
13341+297F              					; things can be taken as read.
13342+297F 18 D9        		JR	o295A		; back to SFA-LOOP while there are more
13343+2981              					; arguments.
13344+2981
13345+2981              ; ---
13346+2981
13347+2981              ;; SFA-MATCH
13348+2981 CB 69        o2981:		BIT	5,C		; test if numeric
13349+2983 20 0C        		JR	NZ,o2991	; to SFA-END if so as will be stacked
13350+2985              					; by scanning
13351+2985
13352+2985 23           		INC	HL		; point to start of string descriptor
13353+2986 ED 5B 65 5C  		LD	DE,(	$5C65)	; set DE to STKEND
13354+298A CD C0 33     		CALL	o33C0		; routine MOVE-FP puts parameters on stack.
13355+298D EB           		EX	DE,HL		; new free location to HL.
13356+298E 22 65 5C     		LD	(	$5C65),HL	; use it to set STKEND system variable.
13357+2991
13358+2991              ;; SFA-END
13359+2991 D1           o2991:		POP	DE		; discard
13360+2992 D1           		POP	DE		; pointers.
13361+2993 AF           		XOR	A		; clear carry flag.
13362+2994 3C           		INC	A		; and zero flag.
13363+2995 C9           		RET			; return.
13364+2996
13365+2996              ; ------------------------
13366+2996              ; Stack variable component
13367+2996              ; ------------------------
13368+2996              ; This is called to evaluate a complex structure that has been found, in
13369+2996              ; runtime, by LOOK-VARS in the variables area.
13370+2996              ; In this case HL points to the initial letter, bits 7-5
13371+2996              ; of which indicate the type of variable.
13372+2996              ; 010 - simple string, 110 - string array, 100 - array of numbers.
13373+2996              ;
13374+2996              ; It is called from CLASS-01 when assigning to a string or array including
13375+2996              ; a slice.
13376+2996              ; It is called from SCANNING to isolate the required part of the structure.
13377+2996              ;
13378+2996              ; An important part of the runtime process is to check that the number of
13379+2996              ; dimensions of the variable match the number of subscripts supplied in the
13380+2996              ; BASIC line.
13381+2996              ;
13382+2996              ; If checking syntax,
13383+2996              ; the B register, which counts dimensions is set to zero (256) to allow
13384+2996              ; the loop to continue till all subscripts are checked. While doing this it
13385+2996              ; is reading dimension sizes from some arbitrary area of memory. Although
13386+2996              ; these are meaningless it is of no concern as the limit is never checked by
13387+2996              ; int-exp during syntax checking.
13388+2996              ;
13389+2996              ; The routine is also called from the syntax path of DIM command to check the
13390+2996              ; syntax of both string and numeric arrays definitions except that bit 6 of C
13391+2996              ; is reset so both are checked as numeric arrays. This ruse avoids a terminal
13392+2996              ; slice being accepted as part of the DIM command.
13393+2996              ; All that is being checked is that there are a valid set of comma-separated
13394+2996              ; expressions before a terminal ")", although, as above, it will still go
13395+2996              ; through the motions of checking dummy dimension sizes.
13396+2996
13397+2996              ;; STK-VAR
13398+2996 AF           o2996:		XOR	A		; clear A
13399+2997 47           		LD	B,A		; and B, the syntax dimension counter (256)
13400+2998 CB 79        		BIT	7,C		; checking syntax ?
13401+299A 20 4B        		JR	NZ,o29E7	; forward to SV-COUNT if so.
13402+299C
13403+299C              ; runtime evaluation.
13404+299C
13405+299C CB 7E        		BIT	7,(HL)		; will be reset if a simple string.
13406+299E 20 0E        		JR	NZ,o29AE	; forward to SV-ARRAYS otherwise
13407+29A0
13408+29A0 3C           		INC	A		; set A to 1, simple string.
13409+29A1
13410+29A1              ;; SV-SIMPLE$
13411+29A1 23           o29A1:		INC	HL		; address length low
13412+29A2 4E           		LD	C,(HL)		; place in C
13413+29A3 23           		INC	HL		; address length high
13414+29A4 46           		LD	B,(HL)		; place in B
13415+29A5 23           		INC	HL		; address start of string
13416+29A6 EB           		EX	DE,HL		; DE = start now.
13417+29A7 CD B2 2A     		CALL	o2AB2		; routine STK-STO-$ stacks string parameters
13418+29AA              					; DE start in variables area,
13419+29AA              					; BC length, A=1 simple string
13420+29AA
13421+29AA              ; the only thing now is to consider if a slice is required.
13422+29AA
13423+29AA DF           		RST	18H		; GET-CHAR puts character at CH_ADD in A
13424+29AB C3 49 2A     		JP	o2A49		; jump forward to SV-SLICE? to test for "("
13425+29AE
13426+29AE              ; --------------------------------------------------------
13427+29AE
13428+29AE              ; the branch was here with string and numeric arrays in runtime.
13429+29AE
13430+29AE              ;; SV-ARRAYS
13431+29AE 23           o29AE:		INC	HL		; step past
13432+29AF 23           		INC	HL		; the total length
13433+29B0 23           		INC	HL		; to address Number of dimensions.
13434+29B1 46           		LD	B,(HL)		; transfer to B overwriting zero.
13435+29B2 CB 71        		BIT	6,C		; a numeric array ?
13436+29B4 28 0A        		JR	Z,o29C0		; forward to SV-PTR with numeric arrays
13437+29B6
13438+29B6 05           		DEC	B		; ignore the final element of a string array
13439+29B7              					; the fixed string size.
13440+29B7
13441+29B7 28 E8        		JR	Z,o29A1		; back to SV-SIMPLE$ if result is zero as has
13442+29B9              					; been created with DIM a$(10) for instance
13443+29B9              					; and can be treated as a simple string.
13444+29B9
13445+29B9              ; proceed with multi-dimensioned string arrays in runtime.
13446+29B9
13447+29B9 EB           		EX	DE,HL		; save pointer to dimensions in DE
13448+29BA
13449+29BA DF           		RST	18H		; GET-CHAR looks at the BASIC line
13450+29BB FE 28        		CP	$28		; is character "(" ?
13451+29BD 20 61        		JR	NZ,o2A20	; to REPORT-3 if not
13452+29BF              					; 'Subscript wrong'
13453+29BF
13454+29BF EB           		EX	DE,HL		; dimensions pointer to HL to synchronize
13455+29C0              					; with next instruction.
13456+29C0
13457+29C0              ; runtime numeric arrays path rejoins here.
13458+29C0
13459+29C0              ;; SV-PTR
13460+29C0 EB           o29C0:		EX	DE,HL		; save dimension pointer in DE
13461+29C1 18 24        		JR	o29E7		; forward to SV-COUNT with true no of dims
13462+29C3              					; in B. As there is no initial comma the
13463+29C3              					; loop is entered at the midpoint.
13464+29C3
13465+29C3              ; ----------------------------------------------------------
13466+29C3              ; the dimension counting loop which is entered at mid-point.
13467+29C3
13468+29C3              ;; SV-COMMA
13469+29C3 E5           o29C3:		PUSH	HL		; save counter
13470+29C4
13471+29C4 DF           		RST	18H		; GET-CHAR
13472+29C5
13473+29C5 E1           		POP	HL		; pop counter
13474+29C6 FE 2C        		CP	$2C		; is character ',' ?
13475+29C8 28 20        		JR	Z,o29EA		; forward to SV-LOOP if so
13476+29CA
13477+29CA              ; in runtime the variable definition indicates a comma should appear here
13478+29CA
13479+29CA CB 79        		BIT	7,C		; checking syntax ?
13480+29CC 28 52        		JR	Z,o2A20		; forward to REPORT-3 if not
13481+29CE              					; 'Subscript error'
13482+29CE
13483+29CE              ; proceed if checking syntax of an array?
13484+29CE
13485+29CE CB 71        		BIT	6,C		; array of strings
13486+29D0 20 06        		JR	NZ,o29D8	; forward to SV-CLOSE if so
13487+29D2
13488+29D2              ; an array of numbers.
13489+29D2
13490+29D2 FE 29        		CP	$29		; is character ")" ?
13491+29D4 20 3C        		JR	NZ,o2A12	; forward to SV-RPT-C if not
13492+29D6              					; 'Nonsense in BASIC'
13493+29D6
13494+29D6 E7           		RST	20H		; NEXT-CHAR moves CH-ADD past the statement
13495+29D7 C9           		RET			; return ->
13496+29D8
13497+29D8              ; ---
13498+29D8
13499+29D8              ; the branch was here with an array of strings.
13500+29D8
13501+29D8              ;; SV-CLOSE
13502+29D8 FE 29        o29D8:		CP	$29		; as above ")" could follow the expression
13503+29DA 28 6C        		JR	Z,o2A48		; forward to SV-DIM if so
13504+29DC
13505+29DC FE CC        		CP	$CC		; is it 'TO' ?
13506+29DE 20 32        		JR	NZ,o2A12	; to SV-RPT-C with anything else
13507+29E0              					; 'Nonsense in BASIC'
13508+29E0
13509+29E0              ; now backtrack CH_ADD to set up for slicing routine.
13510+29E0              ; Note. in a BASIC line we can safely backtrack to a colour parameter.
13511+29E0
13512+29E0              ;; SV-CH-ADD
13513+29E0 DF           o29E0:		RST	18H		; GET-CHAR
13514+29E1 2B           		DEC	HL		; backtrack HL
13515+29E2 22 5D 5C     		LD	(	$5C5D),HL	; to set CH_ADD up for slicing routine
13516+29E5 18 5E        		JR	o2A45		; forward to SV-SLICE and make a return
13517+29E7              					; when all slicing complete.
13518+29E7
13519+29E7              ; ----------------------------------------
13520+29E7              ; -> the mid-point entry point of the loop
13521+29E7
13522+29E7              ;; SV-COUNT
13523+29E7 21 00 00     o29E7:		LD	HL,$0000	; initialize data pointer to zero.
13524+29EA
13525+29EA              ;; SV-LOOP
13526+29EA E5           o29EA:		PUSH	HL		; save the data pointer.
13527+29EB
13528+29EB E7           		RST	20H		; NEXT-CHAR in BASIC area points to an
13529+29EC              					; expression.
13530+29EC
13531+29EC E1           		POP	HL		; restore the data pointer.
13532+29ED 79           		LD	A,C		; transfer name/type to A.
13533+29EE FE C0        		CP	$C0		; is it 11000000 ?
13534+29F0              					; Note. the letter component is absent if
13535+29F0              					; syntax checking.
13536+29F0 20 09        		JR	NZ,o29FB	; forward to SV-MULT if not an array of
13537+29F2              					; strings.
13538+29F2
13539+29F2              ; proceed to check string arrays during syntax.
13540+29F2
13541+29F2 DF           		RST	18H		; GET-CHAR
13542+29F3 FE 29        		CP	$29		; ")"  end of subscripts ?
13543+29F5 28 51        		JR	Z,o2A48		; forward to SV-DIM to consider further slice
13544+29F7
13545+29F7 FE CC        		CP	$CC		; is it 'TO' ?
13546+29F9 28 E5        		JR	Z,o29E0		; back to SV-CH-ADD to consider a slice.
13547+29FB              					; (no need to repeat get-char at o29E0)
13548+29FB
13549+29FB              ; if neither, then an expression is required so rejoin runtime loop ??
13550+29FB              ; registers HL and DE only point to somewhere meaningful in runtime so
13551+29FB              ; comments apply to that situation.
13552+29FB
13553+29FB              ;; SV-MULT
13554+29FB C5           o29FB:		PUSH	BC		; save dimension number.
13555+29FC E5           		PUSH	HL		; push data pointer/rubbish.
13556+29FD              					; DE points to current dimension.
13557+29FD CD EE 2A     		CALL	o2AEE		; routine DE,(DE+1) gets next dimension in DE
13558+2A00              					; and HL points to it.
13559+2A00 E3           		EX	(SP),HL		; dim pointer to stack, data pointer to HL (*)
13560+2A01 EB           		EX	DE,HL		; data pointer to DE, dim size to HL.
13561+2A02
13562+2A02 CD CC 2A     		CALL	o2ACC		; routine INT-EXP1 checks integer expression
13563+2A05              					; and gets result in BC in runtime.
13564+2A05 38 19        		JR	C,o2A20		; to REPORT-3 if > HL
13565+2A07              					; 'Subscript out of range'
13566+2A07
13567+2A07 0B           		DEC	BC		; adjust returned result from 1-x to 0-x
13568+2A08 CD F4 2A     		CALL	o2AF4		; routine GET-HL*DE multiplies data pointer by
13569+2A0B              					; dimension size.
13570+2A0B 09           		ADD	HL,BC		; add the integer returned by expression.
13571+2A0C D1           		POP	DE		; pop the dimension pointer.                              ***
13572+2A0D C1           		POP	BC		; pop dimension counter.
13573+2A0E 10 B3        		DJNZ	o29C3		; back to SV-COMMA if more dimensions
13574+2A10              					; Note. during syntax checking, unless there
13575+2A10              					; are more than 256 subscripts, the branch
13576+2A10              					; back to SV-COMMA is always taken.
13577+2A10
13578+2A10 CB 79        		BIT	7,C		; are we checking syntax ?
13579+2A12              					; then we've got a joker here.
13580+2A12
13581+2A12              ;; SV-RPT-C
13582+2A12 20 66        o2A12:		JR	NZ,o2A7A	; forward to SL-RPT-C if so
13583+2A14              					; 'Nonsense in BASIC'
13584+2A14              					; more than 256 subscripts in BASIC line.
13585+2A14
13586+2A14              ; but in runtime the number of subscripts are at least the same as dims
13587+2A14
13588+2A14 E5           		PUSH	HL		; save data pointer.
13589+2A15 CB 71        		BIT	6,C		; is it a string array ?
13590+2A17 20 13        		JR	NZ,o2A2C	; forward to SV-ELEM$ if so.
13591+2A19
13592+2A19              ; a runtime numeric array subscript.
13593+2A19
13594+2A19 42           		LD	B,D		; register DE has advanced past all dimensions
13595+2A1A 4B           		LD	C,E		; and points to start of data in variable.
13596+2A1B              					; transfer it to BC.
13597+2A1B
13598+2A1B DF           		RST	18H		; GET-CHAR checks BASIC line
13599+2A1C FE 29        		CP	$29		; must be a ")" ?
13600+2A1E 28 02        		JR	Z,o2A22		; skip to SV-NUMBER if so
13601+2A20
13602+2A20              ; else more subscripts in BASIC line than the variable definition.
13603+2A20
13604+2A20              ;; REPORT-3
13605+2A20 CF           o2A20:		RST	08H		; ERROR-1
13606+2A21 02           		DB	$02		; Error Report: Subscript wrong
13607+2A22
13608+2A22              ; continue if subscripts matched the numeric array.
13609+2A22
13610+2A22              ;; SV-NUMBER
13611+2A22 E7           o2A22:		RST	20H		; NEXT-CHAR moves CH_ADD to next statement
13612+2A23              					; - finished parsing.
13613+2A23
13614+2A23 E1           		POP	HL		; pop the data pointer.
13615+2A24 11 05 00     		LD	DE,$0005	; each numeric element is 5 bytes.
13616+2A27 CD F4 2A     		CALL	o2AF4		; routine GET-HL*DE multiplies.
13617+2A2A 09           		ADD	HL,BC		; now add to start of data in the variable.
13618+2A2B
13619+2A2B C9           		RET			; return with HL pointing at the numeric
13620+2A2C              					; array subscript.                       ->
13621+2A2C
13622+2A2C              ; ---------------------------------------------------------------
13623+2A2C
13624+2A2C              ; the branch was here for string subscripts when the number of subscripts
13625+2A2C              ; in the BASIC line was one less than in variable definition.
13626+2A2C
13627+2A2C              ;; SV-ELEM$
13628+2A2C CD EE 2A     o2A2C:		CALL	o2AEE		; routine DE,(DE+1) gets final dimension
13629+2A2F              					; the length of strings in this array.
13630+2A2F E3           		EX	(SP),HL		; start pointer to stack, data pointer to HL.
13631+2A30 CD F4 2A     		CALL	o2AF4		; routine GET-HL*DE multiplies by element
13632+2A33              					; size.
13633+2A33 C1           		POP	BC		; the start of data pointer is added
13634+2A34 09           		ADD	HL,BC		; in - now points to location before.
13635+2A35 23           		INC	HL		; point to start of required string.
13636+2A36 42           		LD	B,D		; transfer the length (final dimension size)
13637+2A37 4B           		LD	C,E		; from DE to BC.
13638+2A38 EB           		EX	DE,HL		; put start in DE.
13639+2A39 CD B1 2A     		CALL	o2AB1		; routine STK-ST-0 stores the string parameters
13640+2A3C              					; with A=0 - a slice or subscript.
13641+2A3C
13642+2A3C              ; now check that there were no more subscripts in the BASIC line.
13643+2A3C
13644+2A3C DF           		RST	18H		; GET-CHAR
13645+2A3D FE 29        		CP	$29		; is it ")" ?
13646+2A3F 28 07        		JR	Z,o2A48		; forward to SV-DIM to consider a separate
13647+2A41              					; subscript or/and a slice.
13648+2A41
13649+2A41 FE 2C        		CP	$2C		; a comma is allowed if the final subscript
13650+2A43              					; is to be sliced e.g. a$(2,3,4 TO 6).
13651+2A43 20 DB        		JR	NZ,o2A20	; to REPORT-3 with anything else
13652+2A45              					; 'Subscript error'
13653+2A45
13654+2A45              ;; SV-SLICE
13655+2A45 CD 52 2A     o2A45:		CALL	o2A52		; routine SLICING slices the string.
13656+2A48
13657+2A48              ; but a slice of a simple string can itself be sliced.
13658+2A48
13659+2A48              ;; SV-DIM
13660+2A48 E7           o2A48:		RST	20H		; NEXT-CHAR
13661+2A49
13662+2A49              ;; SV-SLICE?
13663+2A49 FE 28        o2A49:		CP	$28		; is character "(" ?
13664+2A4B 28 F8        		JR	Z,o2A45		; loop back if so to SV-SLICE
13665+2A4D
13666+2A4D FD CB 01 B6  		RES	6,(IY+$01)	; update FLAGS  - Signal string result
13667+2A51 C9           		RET			; and return.
13668+2A52
13669+2A52              ; ---
13670+2A52
13671+2A52              ; The above section deals with the flexible syntax allowed.
13672+2A52              ; DIM a$(3,3,10) can be considered as two dimensional array of ten-character
13673+2A52              ; strings or a 3-dimensional array of characters.
13674+2A52              ; a$(1,1) will return a 10-character string as will a$(1,1,1 TO 10)
13675+2A52              ; a$(1,1,1) will return a single character.
13676+2A52              ; a$(1,1) (1 TO 6) is the same as a$(1,1,1 TO 6)
13677+2A52              ; A slice can itself be sliced ad infinitum
13678+2A52              ; b$ () () () () () () (2 TO 10) (2 TO 9) (3) is the same as b$(5)
13679+2A52
13680+2A52
13681+2A52
13682+2A52              ; -------------------------
13683+2A52              ; Handle slicing of strings
13684+2A52              ; -------------------------
13685+2A52              ; The syntax of string slicing is very natural and it is as well to reflect
13686+2A52              ; on the permutations possible.
13687+2A52              ; a$() and a$( TO ) indicate the entire string although just a$ would do
13688+2A52              ; and would avoid coming here.
13689+2A52              ; h$(16) indicates the single character at position 16.
13690+2A52              ; a$( TO 32) indicates the first 32 characters.
13691+2A52              ; a$(257 TO) indicates all except the first 256 characters.
13692+2A52              ; a$(19000 TO 19999) indicates the thousand characters at position 19000.
13693+2A52              ; Also a$(9 TO 5) returns a null string not an error.
13694+2A52              ; This enables a$(2 TO) to return a null string if the passed string is
13695+2A52              ; of length zero or 1.
13696+2A52              ; A string expression in brackets can be sliced. e.g. (STR$ PI) (3 TO )
13697+2A52              ; We arrived here from SCANNING with CH-ADD pointing to the initial "("
13698+2A52              ; or from above.
13699+2A52
13700+2A52              ;; SLICING
13701+2A52 CD 30 25     o2A52:		CALL	o2530		; routine SYNTAX-Z
13702+2A55 C4 F1 2B     		CALL	NZ,o2BF1	; routine STK-FETCH fetches parameters of
13703+2A58              					; string at runtime, start in DE, length
13704+2A58              					; in BC. This could be an array subscript.
13705+2A58
13706+2A58 E7           		RST	20H		; NEXT-CHAR
13707+2A59 FE 29        		CP	$29		; is it ")" ?     e.g. a$()
13708+2A5B 28 50        		JR	Z,o2AAD		; forward to SL-STORE to store entire string.
13709+2A5D
13710+2A5D D5           		PUSH	DE		; else save start address of string
13711+2A5E
13712+2A5E AF           		XOR	A		; clear accumulator to use as a running flag.
13713+2A5F F5           		PUSH	AF		; and save on stack before any branching.
13714+2A60
13715+2A60 C5           		PUSH	BC		; save length of string to be sliced.
13716+2A61 11 01 00     		LD	DE,$0001	; default the start point to position 1.
13717+2A64
13718+2A64 DF           		RST	18H		; GET-CHAR
13719+2A65
13720+2A65 E1           		POP	HL		; pop length to HL as default end point
13721+2A66              					; and limit.
13722+2A66
13723+2A66 FE CC        		CP	$CC		; is it 'TO' ?    e.g. a$( TO 10000)
13724+2A68 28 17        		JR	Z,o2A81		; to SL-SECOND to evaluate second parameter.
13725+2A6A
13726+2A6A F1           		POP	AF		; pop the running flag.
13727+2A6B
13728+2A6B CD CD 2A     		CALL	o2ACD		; routine INT-EXP2 fetches first parameter.
13729+2A6E
13730+2A6E F5           		PUSH	AF		; save flag (will be $FF if parameter>limit)
13731+2A6F
13732+2A6F 50           		LD	D,B		; transfer the start
13733+2A70 59           		LD	E,C		; to DE overwriting 0001.
13734+2A71 E5           		PUSH	HL		; save original length.
13735+2A72
13736+2A72 DF           		RST	18H		; GET-CHAR
13737+2A73 E1           		POP	HL		; pop the limit length.
13738+2A74 FE CC        		CP	$CC		; is it 'TO' after a start ?
13739+2A76 28 09        		JR	Z,o2A81		; to SL-SECOND to evaluate second parameter
13740+2A78
13741+2A78 FE 29        		CP	$29		; is it ")" ?       e.g. a$(365)
13742+2A7A
13743+2A7A              ;; SL-RPT-C
13744+2A7A C2 8A 1C     o2A7A:		JP	NZ,o1C8A	; jump to REPORT-C with anything else
13745+2A7D              					; 'Nonsense in BASIC'
13746+2A7D
13747+2A7D 62           		LD	H,D		; copy start
13748+2A7E 6B           		LD	L,E		; to end - just a one character slice.
13749+2A7F 18 13        		JR	o2A94		; forward to SL-DEFINE.
13750+2A81
13751+2A81              ; ---------------------
13752+2A81
13753+2A81              ;; SL-SECOND
13754+2A81 E5           o2A81:		PUSH	HL		; save limit length.
13755+2A82
13756+2A82 E7           		RST	20H		; NEXT-CHAR
13757+2A83
13758+2A83 E1           		POP	HL		; pop the length.
13759+2A84
13760+2A84 FE 29        		CP	$29		; is character ")" ?        e.g. a$(7 TO )
13761+2A86 28 0C        		JR	Z,o2A94		; to SL-DEFINE using length as end point.
13762+2A88
13763+2A88 F1           		POP	AF		; else restore flag.
13764+2A89 CD CD 2A     		CALL	o2ACD		; routine INT-EXP2 gets second expression.
13765+2A8C
13766+2A8C F5           		PUSH	AF		; save the running flag.
13767+2A8D
13768+2A8D DF           		RST	18H		; GET-CHAR
13769+2A8E
13770+2A8E 60           		LD	H,B		; transfer second parameter
13771+2A8F 69           		LD	L,C		; to HL.              e.g. a$(42 to 99)
13772+2A90 FE 29        		CP	$29		; is character a ")" ?
13773+2A92 20 E6        		JR	NZ,o2A7A	; to SL-RPT-C if not
13774+2A94              					; 'Nonsense in BASIC'
13775+2A94
13776+2A94              ; we now have start in DE and an end in HL.
13777+2A94
13778+2A94              ;; SL-DEFINE
13779+2A94 F1           o2A94:		POP	AF		; pop the running flag.
13780+2A95 E3           		EX	(SP),HL		; put end point on stack, start address to HL
13781+2A96 19           		ADD	HL,DE		; add address of string to the start point.
13782+2A97 2B           		DEC	HL		; point to first character of slice.
13783+2A98 E3           		EX	(SP),HL		; start address to stack, end point to HL (*)
13784+2A99 A7           		AND	A		; prepare to subtract.
13785+2A9A ED 52        		SBC	HL,DE		; subtract start point from end point.
13786+2A9C 01 00 00     		LD	BC,$0000	; default the length result to zero.
13787+2A9F 38 07        		JR	C,o2AA8		; forward to SL-OVER if start > end.
13788+2AA1
13789+2AA1 23           		INC	HL		; increment the length for inclusive byte.
13790+2AA2
13791+2AA2 A7           		AND	A		; now test the running flag.
13792+2AA3 FA 20 2A     		JP	M,o2A20		; jump back to REPORT-3 if $FF.
13793+2AA6              					; 'Subscript out of range'
13794+2AA6
13795+2AA6 44           		LD	B,H		; transfer the length
13796+2AA7 4D           		LD	C,L		; to BC.
13797+2AA8
13798+2AA8              ;; SL-OVER
13799+2AA8 D1           o2AA8:		POP	DE		; restore start address from machine stack ***
13800+2AA9 FD CB 01 B6  		RES	6,(IY+$01)	; update FLAGS - signal string result for
13801+2AAD              					; syntax.
13802+2AAD
13803+2AAD              ;; SL-STORE
13804+2AAD CD 30 25     o2AAD:		CALL	o2530		; routine SYNTAX-Z  (UNSTACK-Z?)
13805+2AB0 C8           		RET	Z		; return if checking syntax.
13806+2AB1              					; but continue to store the string in runtime.
13807+2AB1
13808+2AB1              ; ------------------------------------
13809+2AB1              ; other than from above, this routine is called from STK-VAR to stack
13810+2AB1              ; a known string array element.
13811+2AB1              ; ------------------------------------
13812+2AB1
13813+2AB1              ;; STK-ST-0
13814+2AB1 AF           o2AB1:		XOR	A		; clear to signal a sliced string or element.
13815+2AB2
13816+2AB2              ; -------------------------
13817+2AB2              ; this routine is called from chr$, scrn$ etc. to store a simple string result.
13818+2AB2              ; --------------------------
13819+2AB2
13820+2AB2              ;; STK-STO-$
13821+2AB2 FD CB 01 B6  o2AB2:		RES	6,(IY+$01)	; update FLAGS - signal string result.
13822+2AB6              					; and continue to store parameters of string.
13823+2AB6
13824+2AB6              ; ---------------------------------------
13825+2AB6              ; Pass five registers to calculator stack
13826+2AB6              ; ---------------------------------------
13827+2AB6              ; This subroutine puts five registers on the calculator stack.
13828+2AB6
13829+2AB6              ;; STK-STORE
13830+2AB6 C5           o2AB6:		PUSH	BC		; save two registers
13831+2AB7 CD A9 33     		CALL	o33A9		; routine TEST-5-SP checks room and puts 5
13832+2ABA              					; in BC.
13833+2ABA C1           		POP	BC		; fetch the saved registers.
13834+2ABB 2A 65 5C     		LD	HL,(	$5C65)	; make HL point to first empty location STKEND
13835+2ABE 77           		LD	(HL),A		; place the 5 registers.
13836+2ABF 23           		INC	HL		;
13837+2AC0 73           		LD	(HL),E		;
13838+2AC1 23           		INC	HL		;
13839+2AC2 72           		LD	(HL),D		;
13840+2AC3 23           		INC	HL		;
13841+2AC4 71           		LD	(HL),C		;
13842+2AC5 23           		INC	HL		;
13843+2AC6 70           		LD	(HL),B		;
13844+2AC7 23           		INC	HL		;
13845+2AC8 22 65 5C     		LD	(	$5C65),HL	; update system variable STKEND.
13846+2ACB C9           		RET			; and return.
13847+2ACC
13848+2ACC              ; -------------------------------------------
13849+2ACC              ; Return result of evaluating next expression
13850+2ACC              ; -------------------------------------------
13851+2ACC              ; This clever routine is used to check and evaluate an integer expression
13852+2ACC              ; which is returned in BC, setting A to $FF, if greater than a limit supplied
13853+2ACC              ; in HL. It is used to check array subscripts, parameters of a string slice
13854+2ACC              ; and the arguments of the DIM command. In the latter case, the limit check
13855+2ACC              ; is not required and H is set to $FF. When checking optional string slice
13856+2ACC              ; parameters, it is entered at the second entry point so as not to disturb
13857+2ACC              ; the running flag A, which may be $00 or $FF from a previous invocation.
13858+2ACC
13859+2ACC              ;; INT-EXP1
13860+2ACC AF           o2ACC:		XOR	A		; set result flag to zero.
13861+2ACD
13862+2ACD              ; -> The entry point is here if A is used as a running flag.
13863+2ACD
13864+2ACD              ;; INT-EXP2
13865+2ACD D5           o2ACD:		PUSH	DE		; preserve DE register throughout.
13866+2ACE E5           		PUSH	HL		; save the supplied limit.
13867+2ACF F5           		PUSH	AF		; save the flag.
13868+2AD0
13869+2AD0 CD 82 1C     		CALL	o1C82		; routine EXPT-1NUM evaluates expression
13870+2AD3              					; at CH_ADD returning if numeric result,
13871+2AD3              					; with value on calculator stack.
13872+2AD3
13873+2AD3 F1           		POP	AF		; pop the flag.
13874+2AD4 CD 30 25     		CALL	o2530		; routine SYNTAX-Z
13875+2AD7 28 12        		JR	Z,o2AEB		; forward to I-RESTORE if checking syntax so
13876+2AD9              					; avoiding a comparison with supplied limit.
13877+2AD9
13878+2AD9 F5           		PUSH	AF		; save the flag.
13879+2ADA
13880+2ADA CD 99 1E     		CALL	o1E99		; routine FIND-INT2 fetches value from
13881+2ADD              					; calculator stack to BC producing an error
13882+2ADD              					; if too high.
13883+2ADD
13884+2ADD D1           		POP	DE		; pop the flag to D.
13885+2ADE 78           		LD	A,B		; test value for zero and reject
13886+2ADF B1           		OR	C		; as arrays and strings begin at 1.
13887+2AE0 37           		SCF			; set carry flag.
13888+2AE1 28 05        		JR	Z,o2AE8		; forward to I-CARRY if zero.
13889+2AE3
13890+2AE3 E1           		POP	HL		; restore the limit.
13891+2AE4 E5           		PUSH	HL		; and save.
13892+2AE5 A7           		AND	A		; prepare to subtract.
13893+2AE6 ED 42        		SBC	HL,BC		; subtract value from limit.
13894+2AE8
13895+2AE8              ;; I-CARRY
13896+2AE8 7A           o2AE8:		LD	A,D		; move flag to accumulator $00 or $FF.
13897+2AE9 DE 00        		SBC	A,$00		; will set to $FF if carry set.
13898+2AEB
13899+2AEB              ;; I-RESTORE
13900+2AEB E1           o2AEB:		POP	HL		; restore the limit.
13901+2AEC D1           		POP	DE		; and DE register.
13902+2AED C9           		RET			; return.
13903+2AEE
13904+2AEE
13905+2AEE              ; -----------------------
13906+2AEE              ; LD DE,(DE+1) Subroutine
13907+2AEE              ; -----------------------
13908+2AEE              ; This routine just loads the DE register with the contents of the two
13909+2AEE              ; locations following the location addressed by DE.
13910+2AEE              ; It is used to step along the 16-bit dimension sizes in array definitions.
13911+2AEE              ; Note. Such code is made into subroutines to make programs easier to
13912+2AEE              ; write and it would use less space to include the five instructions in-line.
13913+2AEE              ; However, there are so many exchanges going on at the places this is invoked
13914+2AEE              ; that to implement it in-line would make the code hard to follow.
13915+2AEE              ; It probably had a zippier label though as the intention is to simplify the
13916+2AEE              ; program.
13917+2AEE
13918+2AEE              ;; DE,(DE+1)
13919+2AEE EB           o2AEE:		EX	DE,HL		;
13920+2AEF 23           		INC	HL		;
13921+2AF0 5E           		LD	E,(HL)		;
13922+2AF1 23           		INC	HL		;
13923+2AF2 56           		LD	D,(HL)		;
13924+2AF3 C9           		RET			;
13925+2AF4
13926+2AF4              ; -------------------
13927+2AF4              ; HL=HL*DE Subroutine
13928+2AF4              ; -------------------
13929+2AF4              ; This routine calls the mathematical routine to multiply HL by DE in runtime.
13930+2AF4              ; It is called from STK-VAR and from DIM. In the latter case syntax is not
13931+2AF4              ; being checked so the entry point could have been at the second CALL
13932+2AF4              ; instruction to save a few clock-cycles.
13933+2AF4
13934+2AF4              ;; GET-HL*DE
13935+2AF4 CD 30 25     o2AF4:		CALL	o2530		; routine SYNTAX-Z.
13936+2AF7 C8           		RET	Z		; return if checking syntax.
13937+2AF8
13938+2AF8 CD A9 30     		CALL	o30A9		; routine HL-HL*DE.
13939+2AFB DA 15 1F     		JP	C,o1F15		; jump back to REPORT-4 if over 65535.
13940+2AFE
13941+2AFE C9           		RET			; else return with 16-bit result in HL.
13942+2AFF
13943+2AFF              ; -----------------
13944+2AFF              ; THE 'LET' COMMAND
13945+2AFF              ; -----------------
13946+2AFF              ; Sinclair BASIC adheres to the ANSI-78 standard and a LET is required in
13947+2AFF              ; assignments e.g. LET a = 1  :   LET h$ = "hat".
13948+2AFF              ;
13949+2AFF              ; Long names may contain spaces but not colour controls (when assigned).
13950+2AFF              ; a substring can appear to the left of the equals sign.
13951+2AFF
13952+2AFF              ; An earlier mathematician Lewis Carroll may have been pleased that
13953+2AFF              ; 10 LET Babies cannot manage crocodiles = Babies are illogical AND
13954+2AFF              ;    Nobody is despised who can manage a crocodile AND Illogical persons
13955+2AFF              ;    are despised
13956+2AFF              ; does not give the 'Nonsense..' error if the three variables exist.
13957+2AFF              ; I digress.
13958+2AFF
13959+2AFF              ;; LET
13960+2AFF 2A 4D 5C     o2AFF:		LD	HL,(	$5C4D)	; fetch system variable DEST to HL.
13961+2B02 FD CB 37 4E  		BIT	1,(IY+$37)	; test FLAGX - handling a new variable ?
13962+2B06 28 5E        		JR	Z,o2B66		; forward to L-EXISTS if not.
13963+2B08
13964+2B08              ; continue for a new variable. DEST points to start in BASIC line.
13965+2B08              ; from the CLASS routines.
13966+2B08
13967+2B08 01 05 00     		LD	BC,$0005	; assume numeric and assign an initial 5 bytes
13968+2B0B
13969+2B0B              ;; L-EACH-CH
13970+2B0B 03           o2B0B:		INC	BC		; increase byte count for each relevant
13971+2B0C              					; character
13972+2B0C
13973+2B0C              ;; L-NO-SP
13974+2B0C 23           o2B0C:		INC	HL		; increase pointer.
13975+2B0D 7E           		LD	A,(HL)		; fetch character.
13976+2B0E FE 20        		CP	$20		; is it a space ?
13977+2B10 28 FA        		JR	Z,o2B0C		; back to L-NO-SP is so.
13978+2B12
13979+2B12 30 0B        		JR	NC,o2B1F	; forward to L-TEST-CH if higher.
13980+2B14
13981+2B14 FE 10        		CP	$10		; is it $00 - $0F ?
13982+2B16 38 11        		JR	C,o2B29		; forward to L-SPACES if so.
13983+2B18
13984+2B18 FE 16        		CP	$16		; is it $16 - $1F ?
13985+2B1A 30 0D        		JR	NC,o2B29	; forward to L-SPACES if so.
13986+2B1C
13987+2B1C              ; it was $10 - $15  so step over a colour code.
13988+2B1C
13989+2B1C 23           		INC	HL		; increase pointer.
13990+2B1D 18 ED        		JR	o2B0C		; loop back to L-NO-SP.
13991+2B1F
13992+2B1F              ; ---
13993+2B1F
13994+2B1F              ; the branch was to here if higher than space.
13995+2B1F
13996+2B1F              ;; L-TEST-CH
13997+2B1F CD 88 2C     o2B1F:		CALL	o2C88		; routine ALPHANUM sets carry if alphanumeric
13998+2B22 38 E7        		JR	C,o2B0B		; loop back to L-EACH-CH for more if so.
13999+2B24
14000+2B24 FE 24        		CP	$24		; is it "$" ?
14001+2B26 CA C0 2B     		JP	Z,o2BC0		; jump forward if so, to L-NEW$
14002+2B29              					; with a new string.
14003+2B29
14004+2B29              ;; L-SPACES
14005+2B29 79           o2B29:		LD	A,C		; save length lo in A.
14006+2B2A 2A 59 5C     		LD	HL,(	$5C59)	; fetch E_LINE to HL.
14007+2B2D 2B           		DEC	HL		; point to location before, the variables
14008+2B2E              					; end-marker.
14009+2B2E CD 55 16     		CALL	o1655		; routine MAKE-ROOM creates BC spaces
14010+2B31              					; for name and numeric value.
14011+2B31 23           		INC	HL		; advance to first new location.
14012+2B32 23           		INC	HL		; then to second.
14013+2B33 EB           		EX	DE,HL		; set DE to second location.
14014+2B34 D5           		PUSH	DE		; save this pointer.
14015+2B35 2A 4D 5C     		LD	HL,(	$5C4D)	; reload HL with DEST.
14016+2B38 1B           		DEC	DE		; point to first.
14017+2B39 D6 06        		SUB	$06		; subtract six from length_lo.
14018+2B3B 47           		LD	B,A		; save count in B.
14019+2B3C 28 11        		JR	Z,o2B4F		; forward to L-SINGLE if it was just
14020+2B3E              					; one character.
14021+2B3E
14022+2B3E              ; HL points to start of variable name after 'LET' in BASIC line.
14023+2B3E
14024+2B3E              ;; L-CHAR
14025+2B3E 23           o2B3E:		INC	HL		; increase pointer.
14026+2B3F 7E           		LD	A,(HL)		; pick up character.
14027+2B40 FE 21        		CP	$21		; is it space or higher ?
14028+2B42 38 FA        		JR	C,o2B3E		; back to L-CHAR with space and less.
14029+2B44
14030+2B44 F6 20        		OR	$20		; make variable lower-case.
14031+2B46 13           		INC	DE		; increase destination pointer.
14032+2B47 12           		LD	(DE),A		; and load to edit line.
14033+2B48 10 F4        		DJNZ	o2B3E		; loop back to L-CHAR until B is zero.
14034+2B4A
14035+2B4A F6 80        		OR	$80		; invert the last character.
14036+2B4C 12           		LD	(DE),A		; and overwrite that in edit line.
14037+2B4D
14038+2B4D              ; now consider first character which has bit 6 set
14039+2B4D
14040+2B4D 3E C0        		LD	A,$C0		; set A 11000000 is xor mask for a long name.
14041+2B4F              					; %101      is xor/or  result
14042+2B4F
14043+2B4F              ; single character numerics rejoin here with %00000000 in mask.
14044+2B4F              ;                                            %011      will be xor/or result
14045+2B4F
14046+2B4F              ;; L-SINGLE
14047+2B4F 2A 4D 5C     o2B4F:		LD	HL,(	$5C4D)	; fetch DEST - HL addresses first character.
14048+2B52 AE           		XOR	(HL)		; apply variable type indicator mask (above).
14049+2B53 F6 20        		OR	$20		; make lowercase - set bit 5.
14050+2B55 E1           		POP	HL		; restore pointer to 2nd character.
14051+2B56 CD EA 2B     		CALL	o2BEA		; routine L-FIRST puts A in first character.
14052+2B59              					; and returns with HL holding
14053+2B59              					; new E_LINE-1  the $80 vars end-marker.
14054+2B59
14055+2B59              ;; L-NUMERIC
14056+2B59 E5           o2B59:		PUSH	HL		; save the pointer.
14057+2B5A
14058+2B5A              ; the value of variable is deleted but remains after calculator stack.
14059+2B5A
14060+2B5A EF           		RST	28H		; FP-CALC
14061+2B5B 02           		DB	$02		; delete      ; delete variable value
14062+2B5C 38           		DB	$38		; end-calc
14063+2B5D
14064+2B5D              ; DE (STKEND) points to start of value.
14065+2B5D
14066+2B5D E1           		POP	HL		; restore the pointer.
14067+2B5E 01 05 00     		LD	BC,$0005	; start of number is five bytes before.
14068+2B61 A7           		AND	A		; prepare for true subtraction.
14069+2B62 ED 42        		SBC	HL,BC		; HL points to start of value.
14070+2B64 18 40        		JR	o2BA6		; forward to L-ENTER  ==>
14071+2B66
14072+2B66              ; ---
14073+2B66
14074+2B66
14075+2B66              ; the jump was to here if the variable already existed.
14076+2B66
14077+2B66              ;; L-EXISTS
14078+2B66 FD CB 01 76  o2B66:		BIT	6,(IY+$01)	; test FLAGS - numeric or string result ?
14079+2B6A 28 06        		JR	Z,o2B72		; skip forward to L-DELETE$   -*->
14080+2B6C              					; if string result.
14081+2B6C
14082+2B6C              ; A numeric variable could be simple or an array element.
14083+2B6C              ; They are treated the same and the old value is overwritten.
14084+2B6C
14085+2B6C 11 06 00     		LD	DE,$0006	; six bytes forward points to loc past value.
14086+2B6F 19           		ADD	HL,DE		; add to start of number.
14087+2B70 18 E7        		JR	o2B59		; back to L-NUMERIC to overwrite value.
14088+2B72
14089+2B72              ; ---
14090+2B72
14091+2B72              ; -*-> the branch was here if a string existed.
14092+2B72
14093+2B72              ;; L-DELETE$
14094+2B72 2A 4D 5C     o2B72:		LD	HL,(	$5C4D)	; fetch DEST to HL.
14095+2B75              					; (still set from first instruction)
14096+2B75 ED 4B 72 5C  		LD	BC,(	$5C72)	; fetch STRLEN to BC.
14097+2B79 FD CB 37 46  		BIT	0,(IY+$37)	; test FLAGX - handling a complete simple
14098+2B7D              					; string ?
14099+2B7D 20 30        		JR	NZ,o2BAF	; forward to L-ADD$ if so.
14100+2B7F
14101+2B7F              ; must be a string array or a slice in workspace.
14102+2B7F              ; Note. LET a$(3 TO 6) = h$   will assign "hat " if h$ = "hat"
14103+2B7F              ;                                  and    "hats" if h$ = "hatstand".
14104+2B7F              ;
14105+2B7F              ; This is known as Procrustean lengthening and shortening after a
14106+2B7F              ; character Procrustes in Greek legend who made travellers sleep in his bed,
14107+2B7F              ; cutting off their feet or stretching them so they fitted the bed perfectly.
14108+2B7F              ; The bloke was hatstand and slain by Theseus.
14109+2B7F
14110+2B7F 78           		LD	A,B		; test if length
14111+2B80 B1           		OR	C		; is zero and
14112+2B81 C8           		RET	Z		; return if so.
14113+2B82
14114+2B82 E5           		PUSH	HL		; save pointer to start.
14115+2B83
14116+2B83 F7           		RST	30H		; BC-SPACES creates room.
14117+2B84 D5           		PUSH	DE		; save pointer to first new location.
14118+2B85 C5           		PUSH	BC		; and length            (*)
14119+2B86 54           		LD	D,H		; set DE to point to last location.
14120+2B87 5D           		LD	E,L		;
14121+2B88 23           		INC	HL		; set HL to next location.
14122+2B89 36 20        		LD	(HL),$20	; place a space there.
14123+2B8B ED B8        		LDDR			; copy bytes filling with spaces.
14124+2B8D
14125+2B8D E5           		PUSH	HL		; save pointer to start.
14126+2B8E CD F1 2B     		CALL	o2BF1		; routine STK-FETCH start to DE,
14127+2B91              					; length to BC.
14128+2B91 E1           		POP	HL		; restore the pointer.
14129+2B92 E3           		EX	(SP),HL		; (*) length to HL, pointer to stack.
14130+2B93 A7           		AND	A		; prepare for true subtraction.
14131+2B94 ED 42        		SBC	HL,BC		; subtract old length from new.
14132+2B96 09           		ADD	HL,BC		; and add back.
14133+2B97 30 02        		JR	NC,o2B9B	; forward if it fits to L-LENGTH.
14134+2B99
14135+2B99 44           		LD	B,H		; otherwise set
14136+2B9A 4D           		LD	C,L		; length to old length.
14137+2B9B              					; "hatstand" becomes "hats"
14138+2B9B
14139+2B9B              ;; L-LENGTH
14140+2B9B E3           o2B9B:		EX	(SP),HL		; (*) length to stack, pointer to HL.
14141+2B9C EB           		EX	DE,HL		; pointer to DE, start of string to HL.
14142+2B9D 78           		LD	A,B		; is the length zero ?
14143+2B9E B1           		OR	C		;
14144+2B9F 28 02        		JR	Z,o2BA3		; forward to L-IN-W/S if so
14145+2BA1              					; leaving prepared spaces.
14146+2BA1
14147+2BA1 ED B0        		LDIR			; else copy bytes overwriting some spaces.
14148+2BA3
14149+2BA3              ;; L-IN-W/S
14150+2BA3 C1           o2BA3:		POP	BC		; pop the new length.  (*)
14151+2BA4 D1           		POP	DE		; pop pointer to new area.
14152+2BA5 E1           		POP	HL		; pop pointer to variable in assignment.
14153+2BA6              					; and continue copying from workspace
14154+2BA6              					; to variables area.
14155+2BA6
14156+2BA6              ; ==> branch here from  L-NUMERIC
14157+2BA6
14158+2BA6              ;; L-ENTER
14159+2BA6 EB           o2BA6:		EX	DE,HL		; exchange pointers HL=STKEND DE=end of vars.
14160+2BA7 78           		LD	A,B		; test the length
14161+2BA8 B1           		OR	C		; and make a
14162+2BA9 C8           		RET	Z		; return if zero (strings only).
14163+2BAA
14164+2BAA D5           		PUSH	DE		; save start of destination.
14165+2BAB ED B0        		LDIR			; copy bytes.
14166+2BAD E1           		POP	HL		; address the start.
14167+2BAE C9           		RET			; and return.
14168+2BAF
14169+2BAF              ; ---
14170+2BAF
14171+2BAF              ; the branch was here from L-DELETE$ if an existing simple string.
14172+2BAF              ; register HL addresses start of string in variables area.
14173+2BAF
14174+2BAF              ;; L-ADD$
14175+2BAF 2B           o2BAF:		DEC	HL		; point to high byte of length.
14176+2BB0 2B           		DEC	HL		; to low byte.
14177+2BB1 2B           		DEC	HL		; to letter.
14178+2BB2 7E           		LD	A,(HL)		; fetch masked letter to A.
14179+2BB3 E5           		PUSH	HL		; save the pointer on stack.
14180+2BB4 C5           		PUSH	BC		; save new length.
14181+2BB5 CD C6 2B     		CALL	o2BC6		; routine L-STRING adds new string at end
14182+2BB8              					; of variables area.
14183+2BB8              					; if no room we still have old one.
14184+2BB8 C1           		POP	BC		; restore length.
14185+2BB9 E1           		POP	HL		; restore start.
14186+2BBA 03           		INC	BC		; increase
14187+2BBB 03           		INC	BC		; length by three
14188+2BBC 03           		INC	BC		; to include character and length bytes.
14189+2BBD C3 E8 19     		JP	o19E8		; jump to indirect exit via RECLAIM-2
14190+2BC0              					; deleting old version and adjusting pointers.
14191+2BC0
14192+2BC0              ; ---
14193+2BC0
14194+2BC0              ; the jump was here with a new string variable.
14195+2BC0
14196+2BC0              ;; L-NEW$
14197+2BC0 3E DF        o2BC0:		LD	A,$DF		; indicator mask %11011111 for
14198+2BC2              					;                %010xxxxx will be result
14199+2BC2 2A 4D 5C     		LD	HL,(	$5C4D)	; address DEST first character.
14200+2BC5 A6           		AND	(HL)		; combine mask with character.
14201+2BC6
14202+2BC6              ;; L-STRING
14203+2BC6 F5           o2BC6:		PUSH	AF		; save first character and mask.
14204+2BC7 CD F1 2B     		CALL	o2BF1		; routine STK-FETCH fetches parameters of
14205+2BCA              					; the string.
14206+2BCA EB           		EX	DE,HL		; transfer start to HL.
14207+2BCB 09           		ADD	HL,BC		; add to length.
14208+2BCC C5           		PUSH	BC		; save the length.
14209+2BCD 2B           		DEC	HL		; point to end of string.
14210+2BCE 22 4D 5C     		LD	(	$5C4D),HL	; save pointer in DEST.
14211+2BD1              					; (updated by POINTERS if in workspace)
14212+2BD1 03           		INC	BC		; extra byte for letter.
14213+2BD2 03           		INC	BC		; two bytes
14214+2BD3 03           		INC	BC		; for the length of string.
14215+2BD4 2A 59 5C     		LD	HL,(	$5C59)	; address E_LINE.
14216+2BD7 2B           		DEC	HL		; now end of VARS area.
14217+2BD8 CD 55 16     		CALL	o1655		; routine MAKE-ROOM makes room for string.
14218+2BDB              					; updating pointers including DEST.
14219+2BDB 2A 4D 5C     		LD	HL,(	$5C4D)	; pick up pointer to end of string from DEST.
14220+2BDE C1           		POP	BC		; restore length from stack.
14221+2BDF C5           		PUSH	BC		; and save again on stack.
14222+2BE0 03           		INC	BC		; add a byte.
14223+2BE1 ED B8        		LDDR			; copy bytes from end to start.
14224+2BE3 EB           		EX	DE,HL		; HL addresses length low
14225+2BE4 23           		INC	HL		; increase to address high byte
14226+2BE5 C1           		POP	BC		; restore length to BC
14227+2BE6 70           		LD	(HL),B		; insert high byte
14228+2BE7 2B           		DEC	HL		; address low byte location
14229+2BE8 71           		LD	(HL),C		; insert that byte
14230+2BE9 F1           		POP	AF		; restore character and mask
14231+2BEA
14232+2BEA              ;; L-FIRST
14233+2BEA 2B           o2BEA:		DEC	HL		; address variable name
14234+2BEB 77           		LD	(HL),A		; and insert character.
14235+2BEC 2A 59 5C     		LD	HL,(	$5C59)	; load HL with E_LINE.
14236+2BEF 2B           		DEC	HL		; now end of VARS area.
14237+2BF0 C9           		RET			; return
14238+2BF1
14239+2BF1              ; ------------------------------------
14240+2BF1              ; Get last value from calculator stack
14241+2BF1              ; ------------------------------------
14242+2BF1              ;
14243+2BF1              ;
14244+2BF1
14245+2BF1              ;; STK-FETCH
14246+2BF1 2A 65 5C     o2BF1:		LD	HL,(	$5C65)	; STKEND
14247+2BF4 2B           		DEC	HL		;
14248+2BF5 46           		LD	B,(HL)		;
14249+2BF6 2B           		DEC	HL		;
14250+2BF7 4E           		LD	C,(HL)		;
14251+2BF8 2B           		DEC	HL		;
14252+2BF9 56           		LD	D,(HL)		;
14253+2BFA 2B           		DEC	HL		;
14254+2BFB 5E           		LD	E,(HL)		;
14255+2BFC 2B           		DEC	HL		;
14256+2BFD 7E           		LD	A,(HL)		;
14257+2BFE 22 65 5C     		LD	(	$5C65),HL	; STKEND
14258+2C01 C9           		RET			;
14259+2C02
14260+2C02              ; ------------------
14261+2C02              ; Handle DIM command
14262+2C02              ; ------------------
14263+2C02              ; e.g. DIM a(2,3,4,7): DIM a$(32) : DIM b$(20,2,768) : DIM c$(20000)
14264+2C02              ; the only limit to dimensions is memory so, for example,
14265+2C02              ; DIM a(2,2,2,2,2,2,2,2,2,2,2,2,2) is possible and creates a multi-
14266+2C02              ; dimensional array of zeros. String arrays are initialized to spaces.
14267+2C02              ; It is not possible to erase an array, but it can be re-dimensioned to
14268+2C02              ; a minimal size of 1, after use, to free up memory.
14269+2C02
14270+2C02              ;; DIM
14271+2C02 CD B2 28     o2C02:		CALL	o28B2		; routine LOOK-VARS
14272+2C05
14273+2C05              ;; D-RPORT-C
14274+2C05 C2 8A 1C     o2C05:		JP	NZ,o1C8A	; jump to REPORT-C if a long-name variable.
14275+2C08              					; DIM lottery numbers(49) doesn't work.
14276+2C08
14277+2C08 CD 30 25     		CALL	o2530		; routine SYNTAX-Z
14278+2C0B 20 08        		JR	NZ,o2C15	; forward to D-RUN in runtime.
14279+2C0D
14280+2C0D CB B1        		RES	6,C		; signal 'numeric' array even if string as
14281+2C0F              					; this simplifies the syntax checking.
14282+2C0F
14283+2C0F CD 96 29     		CALL	o2996		; routine STK-VAR checks syntax.
14284+2C12 CD EE 1B     		CALL	o1BEE		; routine CHECK-END performs early exit ->
14285+2C15
14286+2C15              ; the branch was here in runtime.
14287+2C15
14288+2C15              ;; D-RUN
14289+2C15 38 08        o2C15:		JR	C,o2C1F		; skip to D-LETTER if variable did not exist.
14290+2C17              					; else reclaim the old one.
14291+2C17
14292+2C17 C5           		PUSH	BC		; save type in C.
14293+2C18 CD B8 19     		CALL	o19B8		; routine NEXT-ONE find following variable
14294+2C1B              					; or position of $80 end-marker.
14295+2C1B CD E8 19     		CALL	o19E8		; routine RECLAIM-2 reclaims the
14296+2C1E              					; space between.
14297+2C1E C1           		POP	BC		; pop the type.
14298+2C1F
14299+2C1F              ;; D-LETTER
14300+2C1F CB F9        o2C1F:		SET	7,C		; signal array.
14301+2C21 06 00        		LD	B,$00		; initialize dimensions to zero and
14302+2C23 C5           		PUSH	BC		; save with the type.
14303+2C24 21 01 00     		LD	HL,$0001	; make elements one character presuming string
14304+2C27 CB 71        		BIT	6,C		; is it a string ?
14305+2C29 20 02        		JR	NZ,o2C2D	; forward to D-SIZE if so.
14306+2C2B
14307+2C2B 2E 05        		LD	L,$05		; make elements 5 bytes as is numeric.
14308+2C2D
14309+2C2D              ;; D-SIZE
14310+2C2D EB           o2C2D:		EX	DE,HL		; save the element size in DE.
14311+2C2E
14312+2C2E              ; now enter a loop to parse each of the integers in the list.
14313+2C2E
14314+2C2E              ;; D-NO-LOOP
14315+2C2E E7           o2C2E:		RST	20H		; NEXT-CHAR
14316+2C2F 26 FF        		LD	H,$FF		; disable limit check by setting HL high
14317+2C31 CD CC 2A     		CALL	o2ACC		; routine INT-EXP1
14318+2C34 DA 20 2A     		JP	C,o2A20		; to REPORT-3 if > 65280 and then some
14319+2C37              					; 'Subscript out of range'
14320+2C37
14321+2C37 E1           		POP	HL		; pop dimension counter, array type
14322+2C38 C5           		PUSH	BC		; save dimension size                     ***
14323+2C39 24           		INC	H		; increment the dimension counter
14324+2C3A E5           		PUSH	HL		; save the dimension counter
14325+2C3B 60           		LD	H,B		; transfer size
14326+2C3C 69           		LD	L,C		; to HL
14327+2C3D CD F4 2A     		CALL	o2AF4		; routine GET-HL*DE multiplies dimension by
14328+2C40              					; running total of size required initially
14329+2C40              					; 1 or 5.
14330+2C40 EB           		EX	DE,HL		; save running total in DE
14331+2C41
14332+2C41 DF           		RST	18H		; GET-CHAR
14333+2C42 FE 2C        		CP	$2C		; is it ',' ?
14334+2C44 28 E8        		JR	Z,o2C2E		; loop back to D-NO-LOOP until all dimensions
14335+2C46              					; have been considered
14336+2C46
14337+2C46              ; when loop complete continue.
14338+2C46
14339+2C46 FE 29        		CP	$29		; is it ")" ?
14340+2C48 20 BB        		JR	NZ,o2C05	; to D-RPORT-C with anything else
14341+2C4A              					; 'Nonsense in BASIC'
14342+2C4A
14343+2C4A
14344+2C4A E7           		RST	20H		; NEXT-CHAR advances to next statement/CR
14345+2C4B
14346+2C4B C1           		POP	BC		; pop dimension counter/type
14347+2C4C 79           		LD	A,C		; type to A
14348+2C4D
14349+2C4D              ; now calculate space required for array variable
14350+2C4D
14351+2C4D 68           		LD	L,B		; dimensions to L since these require 16 bits
14352+2C4E              					; then this value will be doubled
14353+2C4E 26 00        		LD	H,$00		; set high byte to zero
14354+2C50
14355+2C50              ; another four bytes are required for letter(1), total length(2), number of
14356+2C50              ; dimensions(1) but since we have yet to double allow for two
14357+2C50
14358+2C50 23           		INC	HL		; increment
14359+2C51 23           		INC	HL		; increment
14360+2C52
14361+2C52 29           		ADD	HL,HL		; now double giving 4 + dimensions * 2
14362+2C53
14363+2C53 19           		ADD	HL,DE		; add to space required for array contents
14364+2C54
14365+2C54 DA 15 1F     		JP	C,o1F15		; to REPORT-4 if > 65535
14366+2C57              					; 'Out of memory'
14367+2C57
14368+2C57 D5           		PUSH	DE		; save data space
14369+2C58 C5           		PUSH	BC		; save dimensions/type
14370+2C59 E5           		PUSH	HL		; save total space
14371+2C5A 44           		LD	B,H		; total space
14372+2C5B 4D           		LD	C,L		; to BC
14373+2C5C 2A 59 5C     		LD	HL,(	$5C59)	; address E_LINE - first location after
14374+2C5F              					; variables area
14375+2C5F 2B           		DEC	HL		; point to location before - the $80 end-marker
14376+2C60 CD 55 16     		CALL	o1655		; routine MAKE-ROOM creates the space if
14377+2C63              					; memory is available.
14378+2C63
14379+2C63 23           		INC	HL		; point to first new location and
14380+2C64 77           		LD	(HL),A		; store letter/type
14381+2C65
14382+2C65 C1           		POP	BC		; pop total space
14383+2C66 0B           		DEC	BC		; exclude name
14384+2C67 0B           		DEC	BC		; exclude the 16-bit
14385+2C68 0B           		DEC	BC		; counter itself
14386+2C69 23           		INC	HL		; point to next location the 16-bit counter
14387+2C6A 71           		LD	(HL),C		; insert low byte
14388+2C6B 23           		INC	HL		; address next
14389+2C6C 70           		LD	(HL),B		; insert high byte
14390+2C6D
14391+2C6D C1           		POP	BC		; pop the number of dimensions.
14392+2C6E 78           		LD	A,B		; dimensions to A
14393+2C6F 23           		INC	HL		; address next
14394+2C70 77           		LD	(HL),A		; and insert "No. of dims"
14395+2C71
14396+2C71 62           		LD	H,D		; transfer DE space + 1 from make-room
14397+2C72 6B           		LD	L,E		; to HL
14398+2C73 1B           		DEC	DE		; set DE to next location down.
14399+2C74 36 00        		LD	(HL),$00	; presume numeric and insert a zero
14400+2C76 CB 71        		BIT	6,C		; test bit 6 of C. numeric or string ?
14401+2C78 28 02        		JR	Z,o2C7C		; skip to DIM-CLEAR if numeric
14402+2C7A
14403+2C7A 36 20        		LD	(HL),$20	; place a space character in HL
14404+2C7C
14405+2C7C              ;; DIM-CLEAR
14406+2C7C C1           o2C7C:		POP	BC		; pop the data length
14407+2C7D
14408+2C7D ED B8        		LDDR			; LDDR sets to zeros or spaces
14409+2C7F
14410+2C7F              ; The number of dimensions is still in A.
14411+2C7F              ; A loop is now entered to insert the size of each dimension that was pushed
14412+2C7F              ; during the D-NO-LOOP working downwards from position before start of data.
14413+2C7F
14414+2C7F              ;; DIM-SIZES
14415+2C7F C1           o2C7F:		POP	BC		; pop a dimension size                    ***
14416+2C80 70           		LD	(HL),B		; insert high byte at position
14417+2C81 2B           		DEC	HL		; next location down
14418+2C82 71           		LD	(HL),C		; insert low byte
14419+2C83 2B           		DEC	HL		; next location down
14420+2C84 3D           		DEC	A		; decrement dimension counter
14421+2C85 20 F8        		JR	NZ,o2C7F	; back to DIM-SIZES until all done.
14422+2C87
14423+2C87 C9           		RET			; return.
14424+2C88
14425+2C88              ; -----------------------------
14426+2C88              ; Check whether digit or letter
14427+2C88              ; -----------------------------
14428+2C88              ; This routine checks that the character in A is alphanumeric
14429+2C88              ; returning with carry set if so.
14430+2C88
14431+2C88              ;; ALPHANUM
14432+2C88 CD 1B 2D     o2C88:		CALL	o2D1B		; routine NUMERIC will reset carry if so.
14433+2C8B 3F           		CCF			; Complement Carry Flag
14434+2C8C D8           		RET	C		; Return if numeric else continue into
14435+2C8D              					; next routine.
14436+2C8D
14437+2C8D              ; This routine checks that the character in A is alphabetic
14438+2C8D
14439+2C8D              ;; ALPHA
14440+2C8D FE 41        o2C8D:		CP	$41		; less than 'A' ?
14441+2C8F 3F           		CCF			; Complement Carry Flag
14442+2C90 D0           		RET	NC		; return if so
14443+2C91
14444+2C91 FE 5B        		CP	$5B		; less than 'Z'+1 ?
14445+2C93 D8           		RET	C		; is within first range
14446+2C94
14447+2C94 FE 61        		CP	$61		; less than 'a' ?
14448+2C96 3F           		CCF			; Complement Carry Flag
14449+2C97 D0           		RET	NC		; return if so.
14450+2C98
14451+2C98 FE 7B        		CP	$7B		; less than 'z'+1 ?
14452+2C9A C9           		RET			; carry set if within a-z.
14453+2C9B
14454+2C9B              ; -------------------------
14455+2C9B              ; Decimal to floating point
14456+2C9B              ; -------------------------
14457+2C9B              ; This routine finds the floating point number represented by an expression
14458+2C9B              ; beginning with BIN, '.' or a digit.
14459+2C9B              ; Note that BIN need not have any "0"s or "1"s after it.
14460+2C9B              ; BIN is really just a notational symbol and not a function.
14461+2C9B
14462+2C9B              ;; DEC-TO-FP
14463+2C9B FE C4        o2C9B:		CP	$C4		; 'BIN' token ?
14464+2C9D 20 19        		JR	NZ,o2CB8	; to NOT-BIN if not
14465+2C9F
14466+2C9F 11 00 00     		LD	DE,$0000	; initialize 16 bit buffer register.
14467+2CA2
14468+2CA2              ;; BIN-DIGIT
14469+2CA2 E7           o2CA2:		RST	20H		; NEXT-CHAR
14470+2CA3 D6 31        		SUB	$31		; "1"
14471+2CA5 CE 00        		ADC	A,$00		; will be zero if "1" or "0"
14472+2CA7              					; carry will be set if was "0"
14473+2CA7 20 0A        		JR	NZ,o2CB3	; forward to BIN-END if result not zero
14474+2CA9
14475+2CA9 EB           		EX	DE,HL		; buffer to HL
14476+2CAA 3F           		CCF			; Carry now set if originally "1"
14477+2CAB ED 6A        		ADC	HL,HL		; shift the carry into HL
14478+2CAD DA AD 31     		JP	C,o31AD		; to REPORT-6 if overflow - too many digits
14479+2CB0              					; after first "1". There can be an unlimited
14480+2CB0              					; number of leading zeros.
14481+2CB0              					; 'Number too big' - raise an error
14482+2CB0
14483+2CB0 EB           		EX	DE,HL		; save the buffer
14484+2CB1 18 EF        		JR	o2CA2		; back to BIN-DIGIT for more digits
14485+2CB3
14486+2CB3              ; ---
14487+2CB3
14488+2CB3              ;; BIN-END
14489+2CB3 42           o2CB3:		LD	B,D		; transfer 16 bit buffer
14490+2CB4 4B           		LD	C,E		; to BC register pair.
14491+2CB5 C3 2B 2D     		JP	o2D2B		; JUMP to STACK-BC to put on calculator stack
14492+2CB8
14493+2CB8              ; ---
14494+2CB8
14495+2CB8              ; continue here with .1,  42, 3.14, 5., 2.3 E -4
14496+2CB8
14497+2CB8              ;; NOT-BIN
14498+2CB8 FE 2E        o2CB8:		CP	$2E		; '.' - leading decimal point ?
14499+2CBA 28 0F        		JR	Z,o2CCB		; skip to DECIMAL if so.
14500+2CBC
14501+2CBC CD 3B 2D     		CALL	o2D3B		; routine INT-TO-FP to evaluate all digits
14502+2CBF              					; This number 'x' is poaced on stack.
14503+2CBF FE 2E        		CP	$2E		; '.' - mid decimal point ?
14504+2CC1
14505+2CC1 20 28        		JR	NZ,o2CEB	; to E-FORMAT if not to consider that format
14506+2CC3
14507+2CC3 E7           		RST	20H		; NEXT-CHAR
14508+2CC4 CD 1B 2D     		CALL	o2D1B		; routine NUMERIC returns carry reset if 0-9
14509+2CC7
14510+2CC7 38 22        		JR	C,o2CEB		; to E-FORMAT if not a digit e.g. '1.'
14511+2CC9
14512+2CC9 18 0A        		JR	o2CD5		; to DEC-STO-1 to add the decimal part to 'x'
14513+2CCB
14514+2CCB              ; ---
14515+2CCB
14516+2CCB              ; a leading decimal point has been found in a number.
14517+2CCB
14518+2CCB              ;; DECIMAL
14519+2CCB E7           o2CCB:		RST	20H		; NEXT-CHAR
14520+2CCC CD 1B 2D     		CALL	o2D1B		; routine NUMERIC will reset carry if digit
14521+2CCF
14522+2CCF              ;; DEC-RPT-C
14523+2CCF DA 8A 1C     o2CCF:		JP	C,o1C8A		; to REPORT-C if just a '.'
14524+2CD2              					; raise 'Nonsense in BASIC'
14525+2CD2
14526+2CD2              ; since there is no leading zero put one on the calculator stack.
14527+2CD2
14528+2CD2 EF           		RST	28H		; FP-CALC
14529+2CD3 A0           		DB	$A0		; stk-zero  ; 0.
14530+2CD4 38           		DB	$38		; end-calc
14531+2CD5
14532+2CD5              ; If rejoining from earlier there will be a value 'x' on stack.
14533+2CD5              ; If continuing from above the value zero.
14534+2CD5              ; Now store 1 in mem-0.
14535+2CD5              ; Note. At each pass of the digit loop this will be divided by ten.
14536+2CD5
14537+2CD5              ;; DEC-STO-1
14538+2CD5 EF           o2CD5:		RST	28H		; FP-CALC
14539+2CD6 A1           		DB	$A1		; stk-one   ;x or 0,1.
14540+2CD7 C0           		DB	$C0		; st-mem-0  ;x or 0,1.
14541+2CD8 02           		DB	$02		; delete    ;x or 0.
14542+2CD9 38           		DB	$38		; end-calc
14543+2CDA
14544+2CDA
14545+2CDA              ;; NXT-DGT-1
14546+2CDA DF           o2CDA:		RST	18H		; GET-CHAR
14547+2CDB CD 22 2D     		CALL	o2D22		; routine STK-DIGIT stacks single digit 'd'
14548+2CDE 38 0B        		JR	C,o2CEB		; exit to E-FORMAT when digits exhausted  >
14549+2CE0
14550+2CE0
14551+2CE0 EF           		RST	28H		; FP-CALC   ;x or 0,d.           first pass.
14552+2CE1 E0           		DB	$E0		; get-mem-0  ;x or 0,d,1.
14553+2CE2 A4           		DB	$A4		; stk-ten    ;x or 0,d,1,10.
14554+2CE3 05           		DB	$05		; division   ;x or 0,d,1/10.
14555+2CE4 C0           		DB	$C0		; st-mem-0   ;x or 0,d,1/10.
14556+2CE5 04           		DB	$04		; multiply   ;x or 0,d/10.
14557+2CE6 0F           		DB	$0F		; addition   ;x or 0 + d/10.
14558+2CE7 38           		DB	$38		; end-calc   last value.
14559+2CE8
14560+2CE8 E7           		RST	20H		; NEXT-CHAR  moves to next character
14561+2CE9 18 EF        		JR	o2CDA		; back to NXT-DGT-1
14562+2CEB
14563+2CEB              ; ---
14564+2CEB
14565+2CEB              ; although only the first pass is shown it can be seen that at each pass
14566+2CEB              ; the new less significant digit is multiplied by an increasingly smaller
14567+2CEB              ; factor (1/100, 1/1000, 1/10000 ... ) before being added to the previous
14568+2CEB              ; last value to form a new last value.
14569+2CEB
14570+2CEB              ; Finally see if an exponent has been input.
14571+2CEB
14572+2CEB              ;; E-FORMAT
14573+2CEB FE 45        o2CEB:		CP	$45		; is character 'E' ?
14574+2CED 28 03        		JR	Z,o2CF2		; to SIGN-FLAG if so
14575+2CEF
14576+2CEF FE 65        		CP	$65		; 'e' is acceptable as well.
14577+2CF1 C0           		RET	NZ		; return as no exponent.
14578+2CF2
14579+2CF2              ;; SIGN-FLAG
14580+2CF2 06 FF        o2CF2:		LD	B,$FF		; initialize temporary sign byte to $FF
14581+2CF4
14582+2CF4 E7           		RST	20H		; NEXT-CHAR
14583+2CF5 FE 2B        		CP	$2B		; is character '+' ?
14584+2CF7 28 05        		JR	Z,o2CFE		; to SIGN-DONE
14585+2CF9
14586+2CF9 FE 2D        		CP	$2D		; is character '-' ?
14587+2CFB 20 02        		JR	NZ,o2CFF	; to ST-E-PART as no sign
14588+2CFD
14589+2CFD 04           		INC	B		; set sign to zero
14590+2CFE
14591+2CFE              ; now consider digits of exponent.
14592+2CFE              ; Note. incidentally this is the only occasion in Spectrum BASIC when an
14593+2CFE              ; expression may not be used when a number is expected.
14594+2CFE
14595+2CFE              ;; SIGN-DONE
14596+2CFE E7           o2CFE:		RST	20H		; NEXT-CHAR
14597+2CFF
14598+2CFF              ;; ST-E-PART
14599+2CFF CD 1B 2D     o2CFF:		CALL	o2D1B		; routine NUMERIC
14600+2D02 38 CB        		JR	C,o2CCF		; to DEC-RPT-C if not
14601+2D04              					; raise 'Nonsense in BASIC'.
14602+2D04
14603+2D04 C5           		PUSH	BC		; save sign (in B)
14604+2D05 CD 3B 2D     		CALL	o2D3B		; routine INT-TO-FP places exponent on stack
14605+2D08 CD D5 2D     		CALL	o2DD5		; routine FP-TO-A  transfers it to A
14606+2D0B C1           		POP	BC		; restore sign
14607+2D0C DA AD 31     		JP	C,o31AD		; to REPORT-6 if overflow (over 255)
14608+2D0F              					; raise 'Number too big'.
14609+2D0F
14610+2D0F A7           		AND	A		; set flags
14611+2D10 FA AD 31     		JP	M,o31AD		; to REPORT-6 if over '127'.
14612+2D13              					; raise 'Number too big'.
14613+2D13              					; 127 is still way too high and it is
14614+2D13              					; impossible to enter an exponent greater
14615+2D13              					; than 39 from the keyboard. The error gets
14616+2D13              					; raised later in E-TO-FP so two different
14617+2D13              					; error messages depending how high A is.
14618+2D13
14619+2D13 04           		INC	B		; $FF to $00 or $00 to $01 - expendable now.
14620+2D14 28 02        		JR	Z,o2D18		; forward to E-FP-JUMP if exponent positive
14621+2D16
14622+2D16 ED 44        		NEG			; Negate the exponent.
14623+2D18
14624+2D18              ;; E-FP-JUMP
14625+2D18 C3 4F 2D     o2D18:		JP	o2D4F		; JUMP forward to E-TO-FP to assign to
14626+2D1B              					; last value x on stack x * 10 to power A
14627+2D1B              					; a relative jump would have done.
14628+2D1B
14629+2D1B              ; ---------------------
14630+2D1B              ; Check for valid digit
14631+2D1B              ; ---------------------
14632+2D1B              ; This routine checks that the ASCII character in A is numeric
14633+2D1B              ; returning with carry reset if so.
14634+2D1B
14635+2D1B              ;; NUMERIC
14636+2D1B FE 30        o2D1B:		CP	$30		; "0"
14637+2D1D D8           		RET	C		; return if less than zero character.
14638+2D1E
14639+2D1E FE 3A        		CP	$3A		; The upper test is "9"
14640+2D20 3F           		CCF			; Complement Carry Flag
14641+2D21 C9           		RET			; Return - carry clear if character "0" - "9"
14642+2D22
14643+2D22              ; -----------
14644+2D22              ; Stack Digit
14645+2D22              ; -----------
14646+2D22              ; This subroutine is called from INT-TO-FP and DEC-TO-FP to stack a digit
14647+2D22              ; on the calculator stack.
14648+2D22
14649+2D22              ;; STK-DIGIT
14650+2D22 CD 1B 2D     o2D22:		CALL	o2D1B		; routine NUMERIC
14651+2D25 D8           		RET	C		; return if not numeric character
14652+2D26
14653+2D26 D6 30        		SUB	$30		; convert from ASCII to digit
14654+2D28
14655+2D28              ; -----------------
14656+2D28              ; Stack accumulator
14657+2D28              ; -----------------
14658+2D28              ;
14659+2D28              ;
14660+2D28
14661+2D28              ;; STACK-A
14662+2D28 4F           o2D28:		LD	C,A		; transfer to C
14663+2D29 06 00        		LD	B,$00		; and make B zero
14664+2D2B
14665+2D2B              ; ----------------------
14666+2D2B              ; Stack BC register pair
14667+2D2B              ; ----------------------
14668+2D2B              ;
14669+2D2B
14670+2D2B              ;; STACK-BC
14671+2D2B FD 21 3A 5C  o2D2B:		LD	IY,	$5C3A	; re-initialize ERR_NR
14672+2D2F
14673+2D2F AF           		XOR	A		; clear to signal small integer
14674+2D30 5F           		LD	E,A		; place in E for sign
14675+2D31 51           		LD	D,C		; LSB to D
14676+2D32 48           		LD	C,B		; MSB to C
14677+2D33 47           		LD	B,A		; last byte not used
14678+2D34 CD B6 2A     		CALL	o2AB6		; routine STK-STORE
14679+2D37
14680+2D37 EF           		RST	28H		; FP-CALC
14681+2D38 38           		DB	$38		; end-calc  make HL = STKEND-5
14682+2D39
14683+2D39 A7           		AND	A		; clear carry
14684+2D3A C9           		RET			; before returning
14685+2D3B
14686+2D3B              ; -------------------------
14687+2D3B              ; Integer to floating point
14688+2D3B              ; -------------------------
14689+2D3B              ; This routine places one or more digits found in a BASIC line
14690+2D3B              ; on the calculator stack multiplying the previous value by ten each time
14691+2D3B              ; before adding in the new digit to form a last value on calculator stack.
14692+2D3B
14693+2D3B              ;; INT-TO-FP
14694+2D3B F5           o2D3B:		PUSH	AF		; save first character
14695+2D3C
14696+2D3C EF           		RST	28H		; FP-CALC
14697+2D3D A0           		DB	$A0		; stk-zero    ; v=0. initial value
14698+2D3E 38           		DB	$38		; end-calc
14699+2D3F
14700+2D3F F1           		POP	AF		; fetch first character back.
14701+2D40
14702+2D40              ;; NXT-DGT-2
14703+2D40 CD 22 2D     o2D40:		CALL	o2D22		; routine STK-DIGIT puts 0-9 on stack
14704+2D43 D8           		RET	C		; will return when character is not numeric >
14705+2D44
14706+2D44 EF           		RST	28H		; FP-CALC    ; v, d.
14707+2D45 01           		DB	$01		; exchange    ; d, v.
14708+2D46 A4           		DB	$A4		; stk-ten     ; d, v, 10.
14709+2D47 04           		DB	$04		; multiply    ; d, v*10.
14710+2D48 0F           		DB	$0F		; addition    ; d + v*10 = newvalue
14711+2D49 38           		DB	$38		; end-calc    ; v.
14712+2D4A
14713+2D4A CD 74 00     		CALL	o0074		; routine CH-ADD+1 get next character
14714+2D4D 18 F1        		JR	o2D40		; back to NXT-DGT-2 to process as a digit
14715+2D4F
14716+2D4F
14717+2D4F              ;*********************************
14718+2D4F              ;** Part 9. ARITHMETIC ROUTINES **
14719+2D4F              ;*********************************
14720+2D4F
14721+2D4F              ; --------------------------
14722+2D4F              ; E-format to floating point
14723+2D4F              ; --------------------------
14724+2D4F              ; This subroutine is used by the PRINT-FP routine and the decimal to FP
14725+2D4F              ; routines to stack a number expressed in exponent format.
14726+2D4F              ; Note. Though not used by the ROM as such, it has also been set up as
14727+2D4F              ; a unary calculator literal but this will not work as the accumulator
14728+2D4F              ; is not available from within the calculator.
14729+2D4F
14730+2D4F              ; on entry there is a value x on the calculator stack and an exponent of ten
14731+2D4F              ; in A.    The required value is x + 10 ^ A
14732+2D4F
14733+2D4F              ;; e-to-fp
14734+2D4F              ;; E-TO-FP
14735+2D4F 07           o2D4F:		RLCA
14736+2D50 0F           		RRCA			; carry if bit 7 is set
14737+2D51
14738+2D51 30 02        		JR	NC,o2D55	; to E-SAVE  if positive.
14739+2D53
14740+2D53 2F           		CPL			; make negative positive
14741+2D54 3C           		INC	A		; without altering carry.
14742+2D55
14743+2D55              ;; E-SAVE
14744+2D55 F5           o2D55:		PUSH	AF		; save positive exp and sign in carry
14745+2D56
14746+2D56 21 92 5C     		LD	HL,	$5C92	; address MEM-0
14747+2D59
14748+2D59 CD 0B 35     		CALL	o350B		; routine FP-0/1
14749+2D5C              					; places an integer zero, if no carry,
14750+2D5C              					; else a one in mem-0 as a sign flag
14751+2D5C
14752+2D5C EF           		RST	28H		; FP-CALC
14753+2D5D A4           		DB	$A4		; stk-ten                    x, 10.
14754+2D5E 38           		DB	$38		; end-calc
14755+2D5F
14756+2D5F F1           		POP	AF		; pop the exponent.
14757+2D60
14758+2D60              ; now enter a loop
14759+2D60
14760+2D60              ;; E-LOOP
14761+2D60 CB 3F        o2D60:		SRL	A		; 0>76543210>C
14762+2D62
14763+2D62 30 0D        		JR	NC,o2D71	; forward to E-TST-END if no bit
14764+2D64
14765+2D64 F5           		PUSH	AF		; save shifted exponent.
14766+2D65
14767+2D65 EF           		RST	28H		; FP-CALC
14768+2D66 C1           		DB	$C1		; st-mem-1                   x, 10.
14769+2D67 E0           		DB	$E0		; get-mem-0                  x, 10, (0/1).
14770+2D68 00           		DB	$00		; jump-true
14771+2D69
14772+2D69 04           		DB	$04		; to o2D6D, E-DIVSN
14773+2D6A
14774+2D6A 04           		DB	$04		; multiply                   x*10.
14775+2D6B 33           		DB	$33		; jump
14776+2D6C
14777+2D6C 02           		DB	$02		; to o2D6E, E-FETCH
14778+2D6D
14779+2D6D              ;; E-DIVSN
14780+2D6D 05           o2D6D:		DB	$05		; division                   x/10.
14781+2D6E
14782+2D6E              ;; E-FETCH
14783+2D6E E1           o2D6E:		DB	$E1		; get-mem-1                  x/10 or x*10, 10.
14784+2D6F 38           		DB	$38		; end-calc                   new x, 10.
14785+2D70
14786+2D70 F1           		POP	AF		; restore shifted exponent
14787+2D71
14788+2D71              ; the loop branched to here with no carry
14789+2D71
14790+2D71              ;; E-TST-END
14791+2D71 28 08        o2D71:		JR	Z,o2D7B		; forward to E-END  if A emptied of bits
14792+2D73
14793+2D73 F5           		PUSH	AF		; re-save shifted exponent
14794+2D74
14795+2D74 EF           		RST	28H		; FP-CALC
14796+2D75 31           		DB	$31		; duplicate                  new x, 10, 10.
14797+2D76 04           		DB	$04		; multiply                   new x, 100.
14798+2D77 38           		DB	$38		; end-calc
14799+2D78
14800+2D78 F1           		POP	AF		; restore shifted exponent
14801+2D79 18 E5        		JR	o2D60		; back to E-LOOP  until all bits done.
14802+2D7B
14803+2D7B              ; ---
14804+2D7B
14805+2D7B              ; although only the first pass is shown it can be seen that for each set bit
14806+2D7B              ; representing a power of two, x is multiplied or divided by the
14807+2D7B              ; corresponding power of ten.
14808+2D7B
14809+2D7B              ;; E-END
14810+2D7B EF           o2D7B:		RST	28H		; FP-CALC                   final x, factor.
14811+2D7C 02           		DB	$02		; delete                     final x.
14812+2D7D 38           		DB	$38		; end-calc                   x.
14813+2D7E
14814+2D7E C9           		RET			; return
14815+2D7F
14816+2D7F
14817+2D7F
14818+2D7F
14819+2D7F              ; -------------
14820+2D7F              ; Fetch integer
14821+2D7F              ; -------------
14822+2D7F              ; This routine is called by the mathematical routines - FP-TO-BC, PRINT-FP,
14823+2D7F              ; mult, re-stack and negate to fetch an integer from address HL.
14824+2D7F              ; HL points to the stack or a location in MEM and no deletion occurs.
14825+2D7F              ; If the number is negative then a similar process to that used in INT-STORE
14826+2D7F              ; is used to restore the twos complement number to normal in DE and a sign
14827+2D7F              ; in C.
14828+2D7F
14829+2D7F              ;; INT-FETCH
14830+2D7F 23           o2D7F:		INC	HL		; skip zero indicator.
14831+2D80 4E           		LD	C,(HL)		; fetch sign to C
14832+2D81 23           		INC	HL		; address low byte
14833+2D82 7E           		LD	A,(HL)		; fetch to A
14834+2D83 A9           		XOR	C		; two's complement
14835+2D84 91           		SUB	C		;
14836+2D85 5F           		LD	E,A		; place in E
14837+2D86 23           		INC	HL		; address high byte
14838+2D87 7E           		LD	A,(HL)		; fetch to A
14839+2D88 89           		ADC	A,C		; two's complement
14840+2D89 A9           		XOR	C		;
14841+2D8A 57           		LD	D,A		; place in D
14842+2D8B C9           		RET			; return
14843+2D8C
14844+2D8C              ; ------------------------
14845+2D8C              ; Store a positive integer
14846+2D8C              ; ------------------------
14847+2D8C              ; This entry point is not used in this ROM but would
14848+2D8C              ; store any integer as positive.
14849+2D8C
14850+2D8C              ;; p-int-sto
14851+2D8C 0E 00        o2D8C:		LD	C,$00		; make sign byte positive and continue
14852+2D8E
14853+2D8E              ; -------------
14854+2D8E              ; Store integer
14855+2D8E              ; -------------
14856+2D8E              ; this routine stores an integer in DE at address HL.
14857+2D8E              ; It is called from mult, truncate, negate and sgn.
14858+2D8E              ; The sign byte $00 +ve or $FF -ve is in C.
14859+2D8E              ; If negative, the number is stored in 2's complement form so that it is
14860+2D8E              ; ready to be added.
14861+2D8E
14862+2D8E              ;; INT-STORE
14863+2D8E E5           o2D8E:		PUSH	HL		; preserve HL
14864+2D8F
14865+2D8F 36 00        		LD	(HL),$00	; first byte zero shows integer not exponent
14866+2D91 23           		INC	HL		;
14867+2D92 71           		LD	(HL),C		; then store the sign byte
14868+2D93 23           		INC	HL		;
14869+2D94              					; e.g.             +1             -1
14870+2D94 7B           		LD	A,E		; fetch low byte   00000001       00000001
14871+2D95 A9           		XOR	C		; xor sign         00000000   or  11111111
14872+2D96              					; gives            00000001   or  11111110
14873+2D96 91           		SUB	C		; sub sign         00000000   or  11111111
14874+2D97              					; gives            00000001>0 or  11111111>C
14875+2D97 77           		LD	(HL),A		; store 2's complement.
14876+2D98 23           		INC	HL		;
14877+2D99 7A           		LD	A,D		; high byte        00000000       00000000
14878+2D9A 89           		ADC	A,C		; sign             00000000<0     11111111<C
14879+2D9B              					; gives            00000000   or  00000000
14880+2D9B A9           		XOR	C		; xor sign         00000000       11111111
14881+2D9C 77           		LD	(HL),A		; store 2's complement.
14882+2D9D 23           		INC	HL		;
14883+2D9E 36 00        		LD	(HL),$00	; last byte always zero for integers.
14884+2DA0              					; is not used and need not be looked at when
14885+2DA0              					; testing for zero but comes into play should
14886+2DA0              					; an integer be converted to fp.
14887+2DA0 E1           		POP	HL		; restore HL
14888+2DA1 C9           		RET			; return.
14889+2DA2
14890+2DA2
14891+2DA2              ; -----------------------------
14892+2DA2              ; Floating point to BC register
14893+2DA2              ; -----------------------------
14894+2DA2              ; This routine gets a floating point number e.g. 127.4 from the calculator
14895+2DA2              ; stack to the BC register.
14896+2DA2
14897+2DA2              ;; FP-TO-BC
14898+2DA2 EF           o2DA2:		RST	28H		; FP-CALC            set HL to
14899+2DA3 38           		DB	$38		; end-calc            point to last value.
14900+2DA4
14901+2DA4 7E           		LD	A,(HL)		; get first of 5 bytes
14902+2DA5 A7           		AND	A		; and test
14903+2DA6 28 05        		JR	Z,o2DAD		; forward to FP-DELETE if an integer
14904+2DA8
14905+2DA8              ; The value is first rounded up and then converted to integer.
14906+2DA8
14907+2DA8 EF           		RST	28H		; FP-CALC           x.
14908+2DA9 A2           		DB	$A2		; stk-half           x. 1/2.
14909+2DAA 0F           		DB	$0F		; addition           x + 1/2.
14910+2DAB 27           		DB	$27		; int                int(x + .5)
14911+2DAC 38           		DB	$38		; end-calc
14912+2DAD
14913+2DAD              ; now delete but leave HL pointing at integer
14914+2DAD
14915+2DAD              ;; FP-DELETE
14916+2DAD EF           o2DAD:		RST	28H		; FP-CALC
14917+2DAE 02           		DB	$02		; delete
14918+2DAF 38           		DB	$38		; end-calc
14919+2DB0
14920+2DB0 E5           		PUSH	HL		; save pointer.
14921+2DB1 D5           		PUSH	DE		; and STKEND.
14922+2DB2 EB           		EX	DE,HL		; make HL point to exponent/zero indicator
14923+2DB3 46           		LD	B,(HL)		; indicator to B
14924+2DB4 CD 7F 2D     		CALL	o2D7F		; routine INT-FETCH
14925+2DB7              					; gets int in DE sign byte to C
14926+2DB7              					; but meaningless values if a large integer
14927+2DB7
14928+2DB7 AF           		XOR	A		; clear A
14929+2DB8 90           		SUB	B		; subtract indicator byte setting carry
14930+2DB9              					; if not a small integer.
14931+2DB9
14932+2DB9 CB 79        		BIT	7,C		; test a bit of the sign byte setting zero
14933+2DBB              					; if positive.
14934+2DBB
14935+2DBB 42           		LD	B,D		; transfer int
14936+2DBC 4B           		LD	C,E		; to BC
14937+2DBD 7B           		LD	A,E		; low byte to A as a useful return value.
14938+2DBE
14939+2DBE D1           		POP	DE		; pop STKEND
14940+2DBF E1           		POP	HL		; and pointer to last value
14941+2DC0 C9           		RET			; return
14942+2DC1              					; if carry is set then the number was too big.
14943+2DC1
14944+2DC1              ; ------------
14945+2DC1              ; LOG(2^A)
14946+2DC1              ; ------------
14947+2DC1              ; This routine is used when printing floating point numbers to calculate
14948+2DC1              ; the number of digits before the decimal point.
14949+2DC1
14950+2DC1              ; first convert a one-byte signed integer to its five byte form.
14951+2DC1
14952+2DC1              ;; LOG(2^A)
14953+2DC1 57           o2DC1:		LD	D,A		; store a copy of A in D.
14954+2DC2 17           		RLA			; test sign bit of A.
14955+2DC3 9F           		SBC	A,A		; now $FF if negative or $00
14956+2DC4 5F           		LD	E,A		; sign byte to E.
14957+2DC5 4F           		LD	C,A		; and to C
14958+2DC6 AF           		XOR	A		; clear A
14959+2DC7 47           		LD	B,A		; and B.
14960+2DC8 CD B6 2A     		CALL	o2AB6		; routine STK-STORE stacks number AEDCB
14961+2DCB
14962+2DCB              ;  so 00 00 XX 00 00 (positive) or 00 FF XX FF 00 (negative).
14963+2DCB              ;  i.e. integer indicator, sign byte, low, high, unused.
14964+2DCB
14965+2DCB              ; now multiply exponent by log to the base 10 of two.
14966+2DCB
14967+2DCB EF           		RST	28H		; FP-CALC
14968+2DCC
14969+2DCC 34           		DB	$34		; stk-data                      .30103 (log 2)
14970+2DCD EF           		DB	$EF		; Exponent: $7F, Bytes: 4
14971+2DCE 1A 20 9A 85  		DB	$1A,$20,$9A,$85	;
14972+2DD2 04           		DB	$04		; multiply
14973+2DD3
14974+2DD3 27           		DB	$27		; int
14975+2DD4
14976+2DD4 38           		DB	$38		; end-calc
14977+2DD5
14978+2DD5              ; -------------------
14979+2DD5              ; Floating point to A
14980+2DD5              ; -------------------
14981+2DD5              ; this routine collects a floating point number from the stack into the
14982+2DD5              ; accumulator returning carry set if not in range 0 - 255.
14983+2DD5              ; Not all the calling routines raise an error with overflow so no attempt
14984+2DD5              ; is made to produce an error report here.
14985+2DD5
14986+2DD5              ;; FP-TO-A
14987+2DD5 CD A2 2D     o2DD5:		CALL	o2DA2		; routine FP-TO-BC returns with C in A also.
14988+2DD8 D8           		RET	C		; return with carry set if > 65535, overflow
14989+2DD9
14990+2DD9 F5           		PUSH	AF		; save the value and flags
14991+2DDA 05           		DEC	B		; and test that
14992+2DDB 04           		INC	B		; the high byte is zero.
14993+2DDC 28 03        		JR	Z,o2DE1		; forward  FP-A-END if zero
14994+2DDE
14995+2DDE              ; else there has been 8-bit overflow
14996+2DDE
14997+2DDE F1           		POP	AF		; retrieve the value
14998+2DDF 37           		SCF			; set carry flag to show overflow
14999+2DE0 C9           		RET			; and return.
15000+2DE1
15001+2DE1              ; ---
15002+2DE1
15003+2DE1              ;; FP-A-END
15004+2DE1 F1           o2DE1:		POP	AF		; restore value and success flag and
15005+2DE2 C9           		RET			; return.
15006+2DE3
15007+2DE3
15008+2DE3              ; -----------------------------
15009+2DE3              ; Print a floating point number
15010+2DE3              ; -----------------------------
15011+2DE3              ; Not a trivial task.
15012+2DE3              ; Begin by considering whether to print a leading sign for negative numbers.
15013+2DE3
15014+2DE3              ;; PRINT-FP
15015+2DE3 EF           o2DE3:		RST	28H		; FP-CALC
15016+2DE4 31           		DB	$31		; duplicate
15017+2DE5 36           		DB	$36		; less-0
15018+2DE6 00           		DB	$00		; jump-true
15019+2DE7
15020+2DE7 0B           		DB	$0B		; to o2DF2, PF-NEGTVE
15021+2DE8
15022+2DE8 31           		DB	$31		; duplicate
15023+2DE9 37           		DB	$37		; greater-0
15024+2DEA 00           		DB	$00		; jump-true
15025+2DEB
15026+2DEB 0D           		DB	$0D		; to o2DF8, PF-POSTVE
15027+2DEC
15028+2DEC              ; must be zero itself
15029+2DEC
15030+2DEC 02           		DB	$02		; delete
15031+2DED 38           		DB	$38		; end-calc
15032+2DEE
15033+2DEE 3E 30        		LD	A,$30		; prepare the character "0"
15034+2DF0
15035+2DF0 D7           		RST	10H		; PRINT-A
15036+2DF1 C9           		RET			; return.                 ->
15037+2DF2              					; ---
15038+2DF2
15039+2DF2              ;; PF-NEGTVE
15040+2DF2 2A           o2DF2:		DB	$2A		; abs
15041+2DF3 38           		DB	$38		; end-calc
15042+2DF4
15043+2DF4 3E 2D        		LD	A,$2D		; the character '-'
15044+2DF6
15045+2DF6 D7           		RST	10H		; PRINT-A
15046+2DF7
15047+2DF7              ; and continue to print the now positive number.
15048+2DF7
15049+2DF7 EF           		RST	28H		; FP-CALC
15050+2DF8
15051+2DF8              ;; PF-POSTVE
15052+2DF8 A0           o2DF8:		DB	$A0		; stk-zero     x,0.     begin by
15053+2DF9 C3           		DB	$C3		; st-mem-3     x,0.     clearing a temporary
15054+2DFA C4           		DB	$C4		; st-mem-4     x,0.     output buffer to
15055+2DFB C5           		DB	$C5		; st-mem-5     x,0.     fifteen zeros.
15056+2DFC 02           		DB	$02		; delete       x.
15057+2DFD 38           		DB	$38		; end-calc     x.
15058+2DFE
15059+2DFE D9           		EXX			; in case called from 'str$' then save the
15060+2DFF E5           		PUSH	HL		; pointer to whatever comes after
15061+2E00 D9           		EXX			; str$ as H'L' will be used.
15062+2E01
15063+2E01              ; now enter a loop?
15064+2E01
15065+2E01              ;; PF-LOOP
15066+2E01 EF           o2E01:		RST	28H		; FP-CALC
15067+2E02 31           		DB	$31		; duplicate    x,x.
15068+2E03 27           		DB	$27		; int          x,int x.
15069+2E04 C2           		DB	$C2		; st-mem-2     x,int x.
15070+2E05 03           		DB	$03		; subtract     x-int x.     fractional part.
15071+2E06 E2           		DB	$E2		; get-mem-2    x-int x, int x.
15072+2E07 01           		DB	$01		; exchange     int x, x-int x.
15073+2E08 C2           		DB	$C2		; st-mem-2     int x, x-int x.
15074+2E09 02           		DB	$02		; delete       int x.
15075+2E0A 38           		DB	$38		; end-calc     int x.
15076+2E0B              					;
15077+2E0B              					; mem-2 holds the fractional part.
15078+2E0B
15079+2E0B              ; HL points to last value int x
15080+2E0B
15081+2E0B 7E           		LD	A,(HL)		; fetch exponent of int x.
15082+2E0C A7           		AND	A		; test
15083+2E0D 20 47        		JR	NZ,o2E56	; forward to PF-LARGE if a large integer
15084+2E0F              					; > 65535
15085+2E0F
15086+2E0F              ; continue with small positive integer components in range 0 - 65535
15087+2E0F              ; if original number was say .999 then this integer component is zero.
15088+2E0F
15089+2E0F CD 7F 2D     		CALL	o2D7F		; routine INT-FETCH gets x in DE
15090+2E12              					; (but x is not deleted)
15091+2E12
15092+2E12 06 10        		LD	B,$10		; set B, bit counter, to 16d
15093+2E14
15094+2E14 7A           		LD	A,D		; test if
15095+2E15 A7           		AND	A		; high byte is zero
15096+2E16 20 06        		JR	NZ,o2E1E	; forward to PF-SAVE if 16-bit integer.
15097+2E18
15098+2E18              ; and continue with integer in range 0 - 255.
15099+2E18
15100+2E18 B3           		OR	E		; test the low byte for zero
15101+2E19              					; i.e. originally just point something or other.
15102+2E19 28 09        		JR	Z,o2E24		; forward if so to PF-SMALL
15103+2E1B
15104+2E1B              ;
15105+2E1B
15106+2E1B 53           		LD	D,E		; transfer E to D
15107+2E1C 06 08        		LD	B,$08		; and reduce the bit counter to 8.
15108+2E1E
15109+2E1E              ;; PF-SAVE
15110+2E1E D5           o2E1E:		PUSH	DE		; save the part before decimal point.
15111+2E1F D9           		EXX			;
15112+2E20 D1           		POP	DE		; and pop in into D'E'
15113+2E21 D9           		EXX			;
15114+2E22 18 57        		JR	o2E7B		; forward to PF-BITS
15115+2E24
15116+2E24              ; ---------------------
15117+2E24
15118+2E24              ; the branch was here when 'int x' was found to be zero as in say 0.5.
15119+2E24              ; The zero has been fetched from the calculator stack but not deleted and
15120+2E24              ; this should occur now. This omission leaves the stack unbalanced and while
15121+2E24              ; that causes no problems with a simple PRINT statement, it will if str$ is
15122+2E24              ; being used in an expression e.g. "2" + STR$ 0.5 gives the result "0.5"
15123+2E24              ; instead of the expected result "20.5".
15124+2E24              ; credit Tony Stratton, 1982.
15125+2E24              ; A DB     02 delete is required immediately on using the calculator.
15126+2E24
15127+2E24              ;; PF-SMALL
15128+2E24 EF           o2E24:		RST	28H		; FP-CALC       int x = 0.
15129+2E25 E2           o2E25:		DB	$E2		; get-mem-2      int x = 0, x-int x.
15130+2E26 38           		DB	$38		; end-calc
15131+2E27
15132+2E27 7E           		LD	A,(HL)		; fetch exponent of positive fractional number
15133+2E28 D6 7E        		SUB	$7E		; subtract
15134+2E2A
15135+2E2A CD C1 2D     		CALL	o2DC1		; routine LOG(2^A) calculates leading digits.
15136+2E2D
15137+2E2D 57           		LD	D,A		; transfer count to D
15138+2E2E 3A AC 5C     		LD	A,($5CAC)	; fetch total MEM-5-1
15139+2E31 92           		SUB	D		;
15140+2E32 32 AC 5C     		LD	($5CAC),A	; MEM-5-1
15141+2E35 7A           		LD	A,D		;
15142+2E36 CD 4F 2D     		CALL	o2D4F		; routine E-TO-FP
15143+2E39
15144+2E39 EF           		RST	28H		; FP-CALC
15145+2E3A 31           		DB	$31		; duplicate
15146+2E3B 27           		DB	$27		; int
15147+2E3C C1           		DB	$C1		; st-mem-1
15148+2E3D 03           		DB	$03		; subtract
15149+2E3E E1           		DB	$E1		; get-mem-1
15150+2E3F 38           		DB	$38		; end-calc
15151+2E40
15152+2E40 CD D5 2D     		CALL	o2DD5		; routine FP-TO-A
15153+2E43
15154+2E43 E5           		PUSH	HL		; save HL
15155+2E44 32 A1 5C     		LD	($5CA1),A	; MEM-3-1
15156+2E47 3D           		DEC	A		;
15157+2E48 17           		RLA			;
15158+2E49 9F           		SBC	A,A		;
15159+2E4A 3C           		INC	A		;
15160+2E4B
15161+2E4B 21 AB 5C     		LD	HL,$5CAB	; address MEM-5-1 leading digit counter
15162+2E4E 77           		LD	(HL),A		; store counter
15163+2E4F 23           		INC	HL		; address MEM-5-2 total digits
15164+2E50 86           		ADD	A,(HL)		; add counter to contents
15165+2E51 77           		LD	(HL),A		; and store updated value
15166+2E52 E1           		POP	HL		; restore HL
15167+2E53
15168+2E53 C3 CF 2E     		JP	o2ECF		; JUMP forward to PF-FRACTN
15169+2E56
15170+2E56              ; ---
15171+2E56
15172+2E56              ; Note. while it would be pedantic to comment on every occasion a JP
15173+2E56              ; instruction could be repoaced with a JR instruction, this applies to the
15174+2E56              ; above, which is useful if you wish to correct the unbalanced stack error
15175+2E56              ; by inserting a 'DB     02 delete' at o2E25, and maintain main addresses.
15176+2E56
15177+2E56              ; the branch was here with a large positive integer > 65535 e.g. 123456789
15178+2E56              ; the accumulator holds the exponent.
15179+2E56
15180+2E56              ;; PF-LARGE
15181+2E56 D6 80        o2E56:		SUB	$80		; make exponent positive
15182+2E58 FE 1C        		CP	$1C		; compare to 28
15183+2E5A 38 13        		JR	C,o2E6F		; to PF-MEDIUM if integer <= 2^27
15184+2E5C
15185+2E5C CD C1 2D     		CALL	o2DC1		; routine LOG(2^A)
15186+2E5F D6 07        		SUB	$07		;
15187+2E61 47           		LD	B,A		;
15188+2E62 21 AC 5C     		LD	HL,$5CAC	; address MEM-5-1 the leading digits counter.
15189+2E65 86           		ADD	A,(HL)		; add A to contents
15190+2E66 77           		LD	(HL),A		; store updated value.
15191+2E67 78           		LD	A,B		;
15192+2E68 ED 44        		NEG			; negate
15193+2E6A CD 4F 2D     		CALL	o2D4F		; routine E-TO-FP
15194+2E6D 18 92        		JR	o2E01		; back to PF-LOOP
15195+2E6F
15196+2E6F              ; ----------------------------
15197+2E6F
15198+2E6F              ;; PF-MEDIUM
15199+2E6F EB           o2E6F:		EX	DE,HL		;
15200+2E70 CD BA 2F     		CALL	o2FBA		; routine FETCH-TWO
15201+2E73 D9           		EXX			;
15202+2E74 CB FA        		SET	7,D		;
15203+2E76 7D           		LD	A,L		;
15204+2E77 D9           		EXX			;
15205+2E78 D6 80        		SUB	$80		;
15206+2E7A 47           		LD	B,A		;
15207+2E7B
15208+2E7B              ; the branch was here to handle bits in DE with 8 or 16 in B  if small int
15209+2E7B              ; and integer in D'E', 6 nibbles will accommodate 065535 but routine does
15210+2E7B              ; 32-bit numbers as well from above
15211+2E7B
15212+2E7B              ;; PF-BITS
15213+2E7B CB 23        o2E7B:		SLA	E		;  C<xxxxxxxx<0
15214+2E7D CB 12        		RL	D		;  C<xxxxxxxx<C
15215+2E7F D9           		EXX			;
15216+2E80 CB 13        		RL	E		;  C<xxxxxxxx<C
15217+2E82 CB 12        		RL	D		;  C<xxxxxxxx<C
15218+2E84 D9           		EXX			;
15219+2E85
15220+2E85 21 AA 5C     		LD	HL,$5CAA	; set HL to mem-4-5th last byte of buffer
15221+2E88 0E 05        		LD	C,$05		; set byte count to 5 -  10 nibbles
15222+2E8A
15223+2E8A              ;; PF-BYTES
15224+2E8A 7E           o2E8A:		LD	A,(HL)		; fetch 0 or prev value
15225+2E8B 8F           		ADC	A,A		; shift left add in carry    C<xxxxxxxx<C
15226+2E8C
15227+2E8C 27           		DAA			; Decimal Adjust Accumulator.
15228+2E8D              					; if greater than 9 then the left hand
15229+2E8D              					; nibble is incremented. If greater than
15230+2E8D              					; 99 then adjusted and carry set.
15231+2E8D              					; so if we'd built up 7 and a carry came in
15232+2E8D              					;      0000 0111 < C
15233+2E8D              					;      0000 1111
15234+2E8D              					; daa     1 0101  which is 15 in BCD
15235+2E8D
15236+2E8D 77           		LD	(HL),A		; put back
15237+2E8E 2B           		DEC	HL		; work down thru mem 4
15238+2E8F 0D           		DEC	C		; decrease the 5 counter.
15239+2E90 20 F8        		JR	NZ,o2E8A	; back to PF-BYTES until the ten nibbles rolled
15240+2E92
15241+2E92 10 E7        		DJNZ	o2E7B		; back to PF-BITS until 8 or 16 (or 32) done
15242+2E94
15243+2E94              ; at most 9 digits for 32-bit number will have been loaded with digits
15244+2E94              ; each of the 9 nibbles in mem 4 is poaced into ten bytes in mem-3 and mem 4
15245+2E94              ; unless the nibble is zero as the buffer is already zero.
15246+2E94              ; ( or in the case of mem-5 will become zero as a result of RLD instruction )
15247+2E94
15248+2E94 AF           		XOR	A		; clear to accept
15249+2E95 21 A6 5C     		LD	HL,$5CA6	; address MEM-4-0 byte destination.
15250+2E98 11 A1 5C     		LD	DE,$5CA1	; address MEM-3-0 nibble source.
15251+2E9B 06 09        		LD	B,$09		; the count is 9 (not ten) as the first
15252+2E9D              					; nibble is known to be blank.
15253+2E9D
15254+2E9D ED 6F        		RLD			; shift RH nibble to left in (HL)
15255+2E9F              					;    A           (HL)
15256+2E9F              					; 0000 0000 < 0000 3210
15257+2E9F              					; 0000 0000   3210 0000
15258+2E9F              					; A picks up the blank nibble
15259+2E9F
15260+2E9F
15261+2E9F 0E FF        		LD	C,$FF		; set a flag to indicate when a significant
15262+2EA1              					; digit has been encountered.
15263+2EA1
15264+2EA1              ;; PF-DIGITS
15265+2EA1 ED 6F        o2EA1:		RLD
15266+2EA3              					;    A           (HL)
15267+2EA3              					; 0000 0000 < 7654 3210
15268+2EA3              					; 0000 7654   3210 0000
15269+2EA3
15270+2EA3
15271+2EA3 20 04        		JR	NZ,o2EA9	; to PF-INSERT if non-zero value picked up.
15272+2EA5
15273+2EA5 0D           		DEC	C		; test
15274+2EA6 0C           		INC	C		; flag
15275+2EA7 20 0A        		JR	NZ,o2EB3	; skip forward to PF-TEST-2 if flag still $FF
15276+2EA9              					; indicating this is a leading zero.
15277+2EA9
15278+2EA9              ; but if the zero is a significant digit e.g. 10 then include in digit totals.
15279+2EA9              ; the path for non-zero digits rejoins here.
15280+2EA9
15281+2EA9              ;; PF-INSERT
15282+2EA9 12           o2EA9:		LD	(DE),A		; insert digit at destination
15283+2EAA 13           		INC	DE		; increase the destination pointer
15284+2EAB FD 34 71     		INC	(IY+$71)	; increment MEM-5-1st  digit counter
15285+2EAE FD 34 72     		INC	(IY+$72)	; increment MEM-5-2nd  leading digit counter
15286+2EB1 0E 00        		LD	C,$00		; set flag to zero indicating that any
15287+2EB3              					; subsequent zeros are significant and not
15288+2EB3              					; leading.
15289+2EB3
15290+2EB3              ;; PF-TEST-2
15291+2EB3 CB 40        o2EB3:		BIT	0,B		; test if the nibble count is even
15292+2EB5 28 01        		JR	Z,o2EB8		; skip to PF-ALL-9 if so to deal with the
15293+2EB7              					; other nibble in the same byte
15294+2EB7
15295+2EB7 23           		INC	HL		; point to next source byte if not
15296+2EB8
15297+2EB8              ;; PF-ALL-9
15298+2EB8 10 E7        o2EB8:		DJNZ	o2EA1		; decrement the nibble count, back to PF-DIGITS
15299+2EBA              					; if all nine not done.
15300+2EBA
15301+2EBA              ; For 8-bit integers there will be at most 3 digits.
15302+2EBA              ; For 16-bit integers there will be at most 5 digits.
15303+2EBA              ; but for larger integers there could be nine leading digits.
15304+2EBA              ; if nine digits complete then the last one is rounded up as the number will
15305+2EBA              ; be printed using E-format notation
15306+2EBA
15307+2EBA 3A AB 5C     		LD	A,($5CAB)	; fetch digit count from MEM-5-1st
15308+2EBD D6 09        		SUB	$09		; subtract 9 - max possible
15309+2EBF 38 0A        		JR	C,o2ECB		; forward if less to PF-MORE
15310+2EC1
15311+2EC1 FD 35 71     		DEC	(IY+$71)	; decrement digit counter MEM-5-1st to 8
15312+2EC4 3E 04        		LD	A,$04		; load A with the value 4.
15313+2EC6 FD BE 6F     		CP	(IY+$6F)	; compare with MEM-4-4th - the ninth digit
15314+2EC9 18 41        		JR	o2F0C		; forward to PF-ROUND
15315+2ECB              					; to consider rounding.
15316+2ECB
15317+2ECB              ; ---------------------------------------
15318+2ECB
15319+2ECB              ; now delete int x from calculator stack and fetch fractional part.
15320+2ECB
15321+2ECB              ;; PF-MORE
15322+2ECB EF           o2ECB:		RST	28H		; FP-CALC        int x.
15323+2ECC 02           		DB	$02		; delete          .
15324+2ECD E2           		DB	$E2		; get-mem-2       x - int x = f.
15325+2ECE 38           		DB	$38		; end-calc        f.
15326+2ECF
15327+2ECF              ;; PF-FRACTN
15328+2ECF EB           o2ECF:		EX	DE,HL		;
15329+2ED0 CD BA 2F     		CALL	o2FBA		; routine FETCH-TWO
15330+2ED3 D9           		EXX			;
15331+2ED4 3E 80        		LD	A,$80		;
15332+2ED6 95           		SUB	L		;
15333+2ED7 2E 00        		LD	L,$00		;
15334+2ED9 CB FA        		SET	7,D		;
15335+2EDB D9           		EXX			;
15336+2EDC CD DD 2F     		CALL	o2FDD		; routine SHIFT-FP
15337+2EDF
15338+2EDF              ;; PF-FRN-LP
15339+2EDF FD 7E 71     o2EDF:		LD	A,(IY+$71)	; MEM-5-1st
15340+2EE2 FE 08        		CP	$08		;
15341+2EE4 38 06        		JR	C,o2EEC		; to PF-FR-DGT
15342+2EE6
15343+2EE6 D9           		EXX			;
15344+2EE7 CB 12        		RL	D		;
15345+2EE9 D9           		EXX			;
15346+2EEA 18 20        		JR	o2F0C		; to PF-ROUND
15347+2EEC
15348+2EEC              ; ---
15349+2EEC
15350+2EEC              ;; PF-FR-DGT
15351+2EEC 01 00 02     o2EEC:		LD	BC,$0200	;
15352+2EEF
15353+2EEF              ;; PF-FR-EXX
15354+2EEF 7B           o2EEF:		LD	A,E		;
15355+2EF0 CD 8B 2F     		CALL	o2F8B		; routine CA-10*A+C
15356+2EF3 5F           		LD	E,A		;
15357+2EF4 7A           		LD	A,D		;
15358+2EF5 CD 8B 2F     		CALL	o2F8B		; routine CA-10*A+C
15359+2EF8 57           		LD	D,A		;
15360+2EF9 C5           		PUSH	BC		;
15361+2EFA D9           		EXX			;
15362+2EFB C1           		POP	BC		;
15363+2EFC 10 F1        		DJNZ	o2EEF		; to PF-FR-EXX
15364+2EFE
15365+2EFE 21 A1 5C     		LD	HL,$5CA1	; MEM-3
15366+2F01 79           		LD	A,C		;
15367+2F02 FD 4E 71     		LD	C,(IY+$71)	; MEM-5-1st
15368+2F05 09           		ADD	HL,BC		;
15369+2F06 77           		LD	(HL),A		;
15370+2F07 FD 34 71     		INC	(IY+$71)	; MEM-5-1st
15371+2F0A 18 D3        		JR	o2EDF		; to PF-FRN-LP
15372+2F0C
15373+2F0C              ; ----------------
15374+2F0C
15375+2F0C              ; 1) with 9 digits but 8 in mem-5-1 and A holding 4, carry set if rounding up.
15376+2F0C              ; e.g.
15377+2F0C              ;      999999999 is printed as 1E+9
15378+2F0C              ;      100000001 is printed as 1E+8
15379+2F0C              ;      100000009 is printed as 1.0000001E+8
15380+2F0C
15381+2F0C              ;; PF-ROUND
15382+2F0C F5           o2F0C:		PUSH	AF		; save A and flags
15383+2F0D 21 A1 5C     		LD	HL,$5CA1	; address MEM-3 start of digits
15384+2F10 FD 4E 71     		LD	C,(IY+$71)	; MEM-5-1st No. of digits to C
15385+2F13 06 00        		LD	B,$00		; prepare to add
15386+2F15 09           		ADD	HL,BC		; address last digit + 1
15387+2F16 41           		LD	B,C		; No. of digits to B counter
15388+2F17 F1           		POP	AF		; restore A and carry flag from comparison.
15389+2F18
15390+2F18              ;; PF-RND-LP
15391+2F18 2B           o2F18:		DEC	HL		; address digit at rounding position.
15392+2F19 7E           		LD	A,(HL)		; fetch it
15393+2F1A CE 00        		ADC	A,$00		; add carry from the comparison
15394+2F1C 77           		LD	(HL),A		; put back result even if $0A.
15395+2F1D A7           		AND	A		; test A
15396+2F1E 28 05        		JR	Z,o2F25		; skip to PF-R-BACK if ZERO?
15397+2F20
15398+2F20 FE 0A        		CP	$0A		; compare to 'ten' - overflow
15399+2F22 3F           		CCF			; complement carry flag so that set if ten.
15400+2F23 30 08        		JR	NC,o2F2D	; forward to PF-COUNT with 1 - 9.
15401+2F25
15402+2F25              ;; PF-R-BACK
15403+2F25 10 F1        o2F25:		DJNZ	o2F18		; loop back to PF-RND-LP
15404+2F27
15405+2F27              ; if B counts down to zero then we've rounded right back as in 999999995.
15406+2F27              ; and the first 8 locations all hold $0A.
15407+2F27
15408+2F27
15409+2F27 36 01        		LD	(HL),$01	; load first location with digit 1.
15410+2F29 04           		INC	B		; make B hold 1 also.
15411+2F2A              					; could save an instruction byte here.
15412+2F2A FD 34 72     		INC	(IY+$72)	; make MEM-5-2nd hold 1.
15413+2F2D              					; and proceed to initialize total digits to 1.
15414+2F2D
15415+2F2D              ;; PF-COUNT
15416+2F2D FD 70 71     o2F2D:		LD	(IY+$71),B	; MEM-5-1st
15417+2F30
15418+2F30              ; now balance the calculator stack by deleting  it
15419+2F30
15420+2F30 EF           		RST	28H		; FP-CALC
15421+2F31 02           		DB	$02		; delete
15422+2F32 38           		DB	$38		; end-calc
15423+2F33
15424+2F33              ; note if used from str$ then other values may be on the calculator stack.
15425+2F33              ; we can also restore the next literal pointer from its position on the
15426+2F33              ; machine stack.
15427+2F33
15428+2F33 D9           		EXX			;
15429+2F34 E1           		POP	HL		; restore next literal pointer.
15430+2F35 D9           		EXX			;
15431+2F36
15432+2F36 ED 4B AB 5C  		LD	BC,($5CAB)	; set C to MEM-5-1st digit counter.
15433+2F3A              					; set B to MEM-5-2nd leading digit counter.
15434+2F3A 21 A1 5C     		LD	HL,$5CA1	; set HL to start of digits at MEM-3-1
15435+2F3D 78           		LD	A,B		;
15436+2F3E FE 09        		CP	$09		;
15437+2F40 38 04        		JR	C,o2F46		; to PF-NOT-E
15438+2F42
15439+2F42 FE FC        		CP	$FC		;
15440+2F44 38 26        		JR	C,o2F6C		; to PF-E-FRMT
15441+2F46
15442+2F46              ;; PF-NOT-E
15443+2F46 A7           o2F46:		AND	A		; test for zero leading digits as in .123
15444+2F47
15445+2F47 CC EF 15     		CALL	Z,o15EF		; routine OUT-CODE prints a zero e.g. 0.123
15446+2F4A
15447+2F4A              ;; PF-E-SBRN
15448+2F4A AF           o2F4A:		XOR	A		;
15449+2F4B 90           		SUB	B		;
15450+2F4C FA 52 2F     		JP	M,o2F52		; skip forward to PF-OUT-LP if originally +ve
15451+2F4F
15452+2F4F 47           		LD	B,A		; else negative count now +ve
15453+2F50 18 0C        		JR	o2F5E		; forward to PF-DC-OUT       ->
15454+2F52
15455+2F52              ; ---
15456+2F52
15457+2F52              ;; PF-OUT-LP
15458+2F52 79           o2F52:		LD	A,C		; fetch total digit count
15459+2F53 A7           		AND	A		; test for zero
15460+2F54 28 03        		JR	Z,o2F59		; forward to PF-OUT-DT if so
15461+2F56
15462+2F56 7E           		LD	A,(HL)		; fetch digit
15463+2F57 23           		INC	HL		; address next digit
15464+2F58 0D           		DEC	C		; decrease total digit counter
15465+2F59
15466+2F59              ;; PF-OUT-DT
15467+2F59 CD EF 15     o2F59:		CALL	o15EF		; routine OUT-CODE outputs it.
15468+2F5C 10 F4        		DJNZ	o2F52		; loop back to PF-OUT-LP until B leading
15469+2F5E              					; digits output.
15470+2F5E
15471+2F5E              ;; PF-DC-OUT
15472+2F5E 79           o2F5E:		LD	A,C		; fetch total digits and
15473+2F5F A7           		AND	A		; test if also zero
15474+2F60 C8           		RET	Z		; return if so              -->
15475+2F61
15476+2F61              ;
15477+2F61
15478+2F61 04           		INC	B		; increment B
15479+2F62 3E 2E        		LD	A,$2E		; prepare the character '.'
15480+2F64
15481+2F64              ;; PF-DEC-0S
15482+2F64 D7           o2F64:		RST	10H		; PRINT-A outputs the character '.' or "0"
15483+2F65
15484+2F65 3E 30        		LD	A,$30		; prepare the character "0"
15485+2F67              					; (for cases like .000012345678)
15486+2F67 10 FB        		DJNZ	o2F64		; loop back to PF-DEC-0S for B times.
15487+2F69
15488+2F69 41           		LD	B,C		; load B with now trailing digit counter.
15489+2F6A 18 E6        		JR	o2F52		; back to PF-OUT-LP
15490+2F6C
15491+2F6C              ; ---------------------------------
15492+2F6C
15493+2F6C              ; the branch was here for E-format printing e.g. 123456789 => 1.2345679e+8
15494+2F6C
15495+2F6C              ;; PF-E-FRMT
15496+2F6C 50           o2F6C:		LD	D,B		; counter to D
15497+2F6D 15           		DEC	D		; decrement
15498+2F6E 06 01        		LD	B,$01		; load B with 1.
15499+2F70
15500+2F70 CD 4A 2F     		CALL	o2F4A		; routine PF-E-SBRN above
15501+2F73
15502+2F73 3E 45        		LD	A,$45		; prepare character 'e'
15503+2F75 D7           		RST	10H		; PRINT-A
15504+2F76
15505+2F76 4A           		LD	C,D		; exponent to C
15506+2F77 79           		LD	A,C		; and to A
15507+2F78 A7           		AND	A		; test exponent
15508+2F79 F2 83 2F     		JP	P,o2F83		; to PF-E-POS if positive
15509+2F7C
15510+2F7C ED 44        		NEG			; negate
15511+2F7E 4F           		LD	C,A		; positive exponent to C
15512+2F7F 3E 2D        		LD	A,$2D		; prepare character '-'
15513+2F81 18 02        		JR	o2F85		; skip to PF-E-SIGN
15514+2F83
15515+2F83              ; ---
15516+2F83
15517+2F83              ;; PF-E-POS
15518+2F83 3E 2B        o2F83:		LD	A,$2B		; prepare character '+'
15519+2F85
15520+2F85              ;; PF-E-SIGN
15521+2F85 D7           o2F85:		RST	10H		; PRINT-A outputs the sign
15522+2F86
15523+2F86 06 00        		LD	B,$00		; make the high byte zero.
15524+2F88 C3 1B 1A     		JP	o1A1B		; exit via OUT-NUM-1 to print exponent in BC
15525+2F8B
15526+2F8B              ; ------------------------------
15527+2F8B              ; Handle printing floating point
15528+2F8B              ; ------------------------------
15529+2F8B              ; This subroutine is called twice from above when printing floating-point
15530+2F8B              ; numbers. It returns 10*A +C in registers C and A
15531+2F8B
15532+2F8B              ;; CA-10*A+C
15533+2F8B D5           o2F8B:		PUSH	DE		; preserve DE.
15534+2F8C 6F           		LD	L,A		; transfer A to L
15535+2F8D 26 00        		LD	H,$00		; zero high byte.
15536+2F8F 5D           		LD	E,L		; copy HL
15537+2F90 54           		LD	D,H		; to DE.
15538+2F91 29           		ADD	HL,HL		; double (*2)
15539+2F92 29           		ADD	HL,HL		; double (*4)
15540+2F93 19           		ADD	HL,DE		; add DE (*5)
15541+2F94 29           		ADD	HL,HL		; double (*10)
15542+2F95 59           		LD	E,C		; copy C to E    (D is 0)
15543+2F96 19           		ADD	HL,DE		; and add to give required result.
15544+2F97 4C           		LD	C,H		; transfer to
15545+2F98 7D           		LD	A,L		; destination registers.
15546+2F99 D1           		POP	DE		; restore DE
15547+2F9A C9           		RET			; return with result.
15548+2F9B
15549+2F9B              ; --------------
15550+2F9B              ; Prepare to add
15551+2F9B              ; --------------
15552+2F9B              ; This routine is called twice by addition to prepare the two numbers. The
15553+2F9B              ; exponent is picked up in A and the location made zero. Then the sign bit
15554+2F9B              ; is tested before being set to the implied state. Negative numbers are twos
15555+2F9B              ; complemented.
15556+2F9B
15557+2F9B              ;; PREP-ADD
15558+2F9B 7E           o2F9B:		LD	A,(HL)		; pick up exponent
15559+2F9C 36 00        		LD	(HL),$00	; make location zero
15560+2F9E A7           		AND	A		; test if number is zero
15561+2F9F C8           		RET	Z		; return if so
15562+2FA0
15563+2FA0 23           		INC	HL		; address mantissa
15564+2FA1 CB 7E        		BIT	7,(HL)		; test the sign bit
15565+2FA3 CB FE        		SET	7,(HL)		; set it to implied state
15566+2FA5 2B           		DEC	HL		; point to exponent
15567+2FA6 C8           		RET	Z		; return if positive number.
15568+2FA7
15569+2FA7 C5           		PUSH	BC		; preserve BC
15570+2FA8 01 05 00     		LD	BC,$0005	; length of number
15571+2FAB 09           		ADD	HL,BC		; point HL past end
15572+2FAC 41           		LD	B,C		; set B to 5 counter
15573+2FAD 4F           		LD	C,A		; store exponent in C
15574+2FAE 37           		SCF			; set carry flag
15575+2FAF
15576+2FAF              ;; NEG-BYTE
15577+2FAF 2B           o2FAF:		DEC	HL		; work from LSB to MSB
15578+2FB0 7E           		LD	A,(HL)		; fetch byte
15579+2FB1 2F           		CPL			; complement
15580+2FB2 CE 00        		ADC	A,$00		; add in initial carry or from prev operation
15581+2FB4 77           		LD	(HL),A		; put back
15582+2FB5 10 F8        		DJNZ	o2FAF		; loop to NEG-BYTE till all 5 done
15583+2FB7
15584+2FB7 79           		LD	A,C		; stored exponent to A
15585+2FB8 C1           		POP	BC		; restore original BC
15586+2FB9 C9           		RET			; return
15587+2FBA
15588+2FBA              ; -----------------
15589+2FBA              ; Fetch two numbers
15590+2FBA              ; -----------------
15591+2FBA              ; This routine is called twice when printing floating point numbers and also
15592+2FBA              ; to fetch two numbers by the addition, multiply and division routines.
15593+2FBA              ; HL addresses the first number, DE addresses the second number.
15594+2FBA              ; For arithmetic only, A holds the sign of the result which is stored in
15595+2FBA              ; the second location.
15596+2FBA
15597+2FBA              ;; FETCH-TWO
15598+2FBA E5           o2FBA:		PUSH	HL		; save pointer to first number, result if math.
15599+2FBB F5           		PUSH	AF		; save result sign.
15600+2FBC
15601+2FBC 4E           		LD	C,(HL)		;
15602+2FBD 23           		INC	HL		;
15603+2FBE
15604+2FBE 46           		LD	B,(HL)		;
15605+2FBF 77           		LD	(HL),A		; store the sign at correct location in
15606+2FC0              					; destination 5 bytes for arithmetic only.
15607+2FC0 23           		INC	HL		;
15608+2FC1
15609+2FC1 79           		LD	A,C		;
15610+2FC2 4E           		LD	C,(HL)		;
15611+2FC3 C5           		PUSH	BC		;
15612+2FC4 23           		INC	HL		;
15613+2FC5 4E           		LD	C,(HL)		;
15614+2FC6 23           		INC	HL		;
15615+2FC7 46           		LD	B,(HL)		;
15616+2FC8 EB           		EX	DE,HL		;
15617+2FC9 57           		LD	D,A		;
15618+2FCA 5E           		LD	E,(HL)		;
15619+2FCB D5           		PUSH	DE		;
15620+2FCC 23           		INC	HL		;
15621+2FCD 56           		LD	D,(HL)		;
15622+2FCE 23           		INC	HL		;
15623+2FCF 5E           		LD	E,(HL)		;
15624+2FD0 D5           		PUSH	DE		;
15625+2FD1 D9           		EXX			;
15626+2FD2 D1           		POP	DE		;
15627+2FD3 E1           		POP	HL		;
15628+2FD4 C1           		POP	BC		;
15629+2FD5 D9           		EXX			;
15630+2FD6 23           		INC	HL		;
15631+2FD7 56           		LD	D,(HL)		;
15632+2FD8 23           		INC	HL		;
15633+2FD9 5E           		LD	E,(HL)		;
15634+2FDA
15635+2FDA F1           		POP	AF		; restore possible result sign.
15636+2FDB E1           		POP	HL		; and pointer to possible result.
15637+2FDC C9           		RET			; return.
15638+2FDD
15639+2FDD              ; ---------------------------------
15640+2FDD              ; Shift floating point number right
15641+2FDD              ; ---------------------------------
15642+2FDD              ;
15643+2FDD              ;
15644+2FDD
15645+2FDD              ;; SHIFT-FP
15646+2FDD A7           o2FDD:		AND	A		;
15647+2FDE C8           		RET	Z		;
15648+2FDF
15649+2FDF FE 21        		CP	$21		;
15650+2FE1 30 16        		JR	NC,o2FF9	; to ADDEND-0
15651+2FE3
15652+2FE3 C5           		PUSH	BC		;
15653+2FE4 47           		LD	B,A		;
15654+2FE5
15655+2FE5              ;; ONE-SHIFT
15656+2FE5 D9           o2FE5:		EXX
15657+2FE6 CB 2D        		SRA	L		;
15658+2FE8 CB 1A        		RR	D		;
15659+2FEA CB 1B        		RR	E		;
15660+2FEC D9           		EXX			;
15661+2FED CB 1A        		RR	D		;
15662+2FEF CB 1B        		RR	E		;
15663+2FF1 10 F2        		DJNZ	o2FE5		; to ONE-SHIFT
15664+2FF3
15665+2FF3 C1           		POP	BC		;
15666+2FF4 D0           		RET	NC		;
15667+2FF5
15668+2FF5 CD 04 30     		CALL	o3004		; routine ADD-BACK
15669+2FF8 C0           		RET	NZ		;
15670+2FF9
15671+2FF9              ;; ADDEND-0
15672+2FF9 D9           o2FF9:		EXX
15673+2FFA AF           		XOR	A		;
15674+2FFB
15675+2FFB              ;; ZEROS-4/5
15676+2FFB 2E 00        o2FFB:		LD	L,$00		;
15677+2FFD 57           		LD	D,A		;
15678+2FFE 5D           		LD	E,L		;
15679+2FFF D9           		EXX			;
15680+3000 11 00 00     		LD	DE,$0000	;
15681+3003 C9           		RET			;
15682+3004
15683+3004              ; ------------------
15684+3004              ; Add back any carry
15685+3004              ; ------------------
15686+3004              ;
15687+3004              ;
15688+3004
15689+3004              ;; ADD-BACK
15690+3004 1C           o3004:		INC	E		;
15691+3005 C0           		RET	NZ		;
15692+3006
15693+3006 14           		INC	D		;
15694+3007 C0           		RET	NZ		;
15695+3008
15696+3008 D9           		EXX			;
15697+3009 1C           		INC	E		;
15698+300A 20 01        		JR	NZ,o300D	; to ALL-ADDED
15699+300C
15700+300C 14           		INC	D		;
15701+300D
15702+300D              ;; ALL-ADDED
15703+300D D9           o300D:		EXX
15704+300E C9           		RET			;
15705+300F
15706+300F              ; -----------------------
15707+300F              ; Handle subtraction (03)
15708+300F              ; -----------------------
15709+300F              ; Subtraction is done by switching the sign byte/bit of the second number
15710+300F              ; which may be integer of floating point and continuing into addition.
15711+300F
15712+300F              ;; subtract
15713+300F EB           o300F:		EX	DE,HL		; address second number with HL
15714+3010
15715+3010 CD 6E 34     		CALL	o346E		; routine NEGATE switches sign
15716+3013
15717+3013 EB           		EX	DE,HL		; address first number again
15718+3014              					; and continue.
15719+3014
15720+3014              ; --------------------
15721+3014              ; Handle addition (0F)
15722+3014              ; --------------------
15723+3014              ; HL points to first number, DE to second.
15724+3014              ; If they are both integers, then go for the easy route.
15725+3014
15726+3014              ;; addition
15727+3014 1A           o3014:		LD	A,(DE)		; fetch first byte of second
15728+3015 B6           		OR	(HL)		; combine with first byte of first
15729+3016 20 26        		JR	NZ,o303E	; forward to FULL-ADDN if at least one was
15730+3018              					; in floating point form.
15731+3018
15732+3018              ; continue if both were small integers.
15733+3018
15734+3018 D5           		PUSH	DE		; save pointer to lowest number for result.
15735+3019
15736+3019 23           		INC	HL		; address sign byte and
15737+301A E5           		PUSH	HL		; push the pointer.
15738+301B
15739+301B 23           		INC	HL		; address low byte
15740+301C 5E           		LD	E,(HL)		; to E
15741+301D 23           		INC	HL		; address high byte
15742+301E 56           		LD	D,(HL)		; to D
15743+301F 23           		INC	HL		; address unused byte
15744+3020
15745+3020 23           		INC	HL		; address known zero indicator of 1st number
15746+3021 23           		INC	HL		; address sign byte
15747+3022
15748+3022 7E           		LD	A,(HL)		; sign to A, $00 or $FF
15749+3023
15750+3023 23           		INC	HL		; address low byte
15751+3024 4E           		LD	C,(HL)		; to C
15752+3025 23           		INC	HL		; address high byte
15753+3026 46           		LD	B,(HL)		; to B
15754+3027
15755+3027 E1           		POP	HL		; pop result sign pointer
15756+3028 EB           		EX	DE,HL		; integer to HL
15757+3029
15758+3029 09           		ADD	HL,BC		; add to the other one in BC
15759+302A              					; setting carry if overflow.
15760+302A
15761+302A EB           		EX	DE,HL		; save result in DE bringing back sign pointer
15762+302B
15763+302B 8E           		ADC	A,(HL)		; if pos/pos A=01 with overflow else 00
15764+302C              					; if neg/neg A=FF with overflow else FE
15765+302C              					; if mixture A=00 with overflow else FF
15766+302C
15767+302C 0F           		RRCA			; bit 0 to (C)
15768+302D
15769+302D CE 00        		ADC	A,$00		; both acceptable signs now zero
15770+302F
15771+302F 20 0B        		JR	NZ,o303C	; forward to ADDN-OFLW if not
15772+3031
15773+3031 9F           		SBC	A,A		; restore a negative result sign
15774+3032
15775+3032 77           		LD	(HL),A		;
15776+3033 23           		INC	HL		;
15777+3034 73           		LD	(HL),E		;
15778+3035 23           		INC	HL		;
15779+3036 72           		LD	(HL),D		;
15780+3037 2B           		DEC	HL		;
15781+3038 2B           		DEC	HL		;
15782+3039 2B           		DEC	HL		;
15783+303A
15784+303A D1           		POP	DE		; STKEND
15785+303B C9           		RET			;
15786+303C
15787+303C              ; ---
15788+303C
15789+303C              ;; ADDN-OFLW
15790+303C 2B           o303C:		DEC	HL		;
15791+303D D1           		POP	DE		;
15792+303E
15793+303E              ;; FULL-ADDN
15794+303E CD 93 32     o303E:		CALL	o3293		; routine RE-ST-TWO
15795+3041 D9           		EXX			;
15796+3042 E5           		PUSH	HL		;
15797+3043 D9           		EXX			;
15798+3044 D5           		PUSH	DE		;
15799+3045 E5           		PUSH	HL		;
15800+3046 CD 9B 2F     		CALL	o2F9B		; routine PREP-ADD
15801+3049 47           		LD	B,A		;
15802+304A EB           		EX	DE,HL		;
15803+304B CD 9B 2F     		CALL	o2F9B		; routine PREP-ADD
15804+304E 4F           		LD	C,A		;
15805+304F B8           		CP	B		;
15806+3050 30 03        		JR	NC,o3055	; to SHIFT-LEN
15807+3052
15808+3052 78           		LD	A,B		;
15809+3053 41           		LD	B,C		;
15810+3054 EB           		EX	DE,HL		;
15811+3055
15812+3055              ;; SHIFT-LEN
15813+3055 F5           o3055:		PUSH	AF		;
15814+3056 90           		SUB	B		;
15815+3057 CD BA 2F     		CALL	o2FBA		; routine FETCH-TWO
15816+305A CD DD 2F     		CALL	o2FDD		; routine SHIFT-FP
15817+305D F1           		POP	AF		;
15818+305E E1           		POP	HL		;
15819+305F 77           		LD	(HL),A		;
15820+3060 E5           		PUSH	HL		;
15821+3061 68           		LD	L,B		;
15822+3062 61           		LD	H,C		;
15823+3063 19           		ADD	HL,DE		;
15824+3064 D9           		EXX			;
15825+3065 EB           		EX	DE,HL		;
15826+3066 ED 4A        		ADC	HL,BC		;
15827+3068 EB           		EX	DE,HL		;
15828+3069 7C           		LD	A,H		;
15829+306A 8D           		ADC	A,L		;
15830+306B 6F           		LD	L,A		;
15831+306C 1F           		RRA			;
15832+306D AD           		XOR	L		;
15833+306E D9           		EXX			;
15834+306F EB           		EX	DE,HL		;
15835+3070 E1           		POP	HL		;
15836+3071 1F           		RRA			;
15837+3072 30 08        		JR	NC,o307C	; to TEST-NEG
15838+3074
15839+3074 3E 01        		LD	A,$01		;
15840+3076 CD DD 2F     		CALL	o2FDD		; routine SHIFT-FP
15841+3079 34           		INC	(HL)		;
15842+307A 28 23        		JR	Z,o309F		; to ADD-REP-6
15843+307C
15844+307C              ;; TEST-NEG
15845+307C D9           o307C:		EXX
15846+307D 7D           		LD	A,L		;
15847+307E E6 80        		AND	$80		;
15848+3080 D9           		EXX			;
15849+3081 23           		INC	HL		;
15850+3082 77           		LD	(HL),A		;
15851+3083 2B           		DEC	HL		;
15852+3084 28 1F        		JR	Z,o30A5		; to GO-NC-MLT
15853+3086
15854+3086 7B           		LD	A,E		;
15855+3087 ED 44        		NEG			; Negate
15856+3089 3F           		CCF			; Complement Carry Flag
15857+308A 5F           		LD	E,A		;
15858+308B 7A           		LD	A,D		;
15859+308C 2F           		CPL			;
15860+308D CE 00        		ADC	A,$00		;
15861+308F 57           		LD	D,A		;
15862+3090 D9           		EXX			;
15863+3091 7B           		LD	A,E		;
15864+3092 2F           		CPL			;
15865+3093 CE 00        		ADC	A,$00		;
15866+3095 5F           		LD	E,A		;
15867+3096 7A           		LD	A,D		;
15868+3097 2F           		CPL			;
15869+3098 CE 00        		ADC	A,$00		;
15870+309A 30 07        		JR	NC,o30A3	; to END-COMPL
15871+309C
15872+309C 1F           		RRA			;
15873+309D D9           		EXX			;
15874+309E 34           		INC	(HL)		;
15875+309F
15876+309F              ;; ADD-REP-6
15877+309F CA AD 31     o309F:		JP	Z,o31AD		; to REPORT-6
15878+30A2
15879+30A2 D9           		EXX			;
15880+30A3
15881+30A3              ;; END-COMPL
15882+30A3 57           o30A3:		LD	D,A		;
15883+30A4 D9           		EXX			;
15884+30A5
15885+30A5              ;; GO-NC-MLT
15886+30A5 AF           o30A5:		XOR	A		;
15887+30A6 C3 55 31     		JP	o3155		; to TEST-NORM
15888+30A9
15889+30A9              ; -----------------------------
15890+30A9              ; Used in 16 bit multiplication
15891+30A9              ; -----------------------------
15892+30A9              ; This routine is used, in the first instance, by the multiply calculator
15893+30A9              ; literal to perform an integer multiplication in preference to
15894+30A9              ; 32-bit multiplication to which it will resort if this overflows.
15895+30A9              ;
15896+30A9              ; It is also used by STK-VAR to calculate array subscripts and by DIM to
15897+30A9              ; calculate the space required for multi-dimensional arrays.
15898+30A9
15899+30A9              ;; HL-HL*DE
15900+30A9 C5           o30A9:		PUSH	BC		; preserve BC throughout
15901+30AA 06 10        		LD	B,$10		; set B to 16
15902+30AC 7C           		LD	A,H		; save H in A high byte
15903+30AD 4D           		LD	C,L		; save L in C low byte
15904+30AE 21 00 00     		LD	HL,$0000	; initialize result to zero
15905+30B1
15906+30B1              ; now enter a loop.
15907+30B1
15908+30B1              ;; HL-LOOP
15909+30B1 29           o30B1:		ADD	HL,HL		; double result
15910+30B2 38 0A        		JR	C,o30BE		; to HL-END if overflow
15911+30B4
15912+30B4 CB 11        		RL	C		; shift AC left into carry
15913+30B6 17           		RLA			;
15914+30B7 30 03        		JR	NC,o30BC	; to HL-AGAIN to skip addition if no carry
15915+30B9
15916+30B9 19           		ADD	HL,DE		; add in DE
15917+30BA 38 02        		JR	C,o30BE		; to HL-END if overflow
15918+30BC
15919+30BC              ;; HL-AGAIN
15920+30BC 10 F3        o30BC:		DJNZ	o30B1		; back to HL-LOOP for all 16 bits
15921+30BE
15922+30BE              ;; HL-END
15923+30BE C1           o30BE:		POP	BC		; restore preserved BC
15924+30BF C9           		RET			; return with carry reset if successful
15925+30C0              					; and result in HL.
15926+30C0
15927+30C0              ; ----------------------------------------------
15928+30C0              ; THE 'PREPARE TO MULTIPLY OR DIVIDE' SUBROUTINE
15929+30C0              ; ----------------------------------------------
15930+30C0              ;   This routine is called in succession from multiply and divide to prepare
15931+30C0              ;   two mantissas by setting the leftmost bit that is used for the sign.
15932+30C0              ;   On the first call A holds zero and picks up the sign bit. On the second
15933+30C0              ;   call the two bits are XORed to form the result sign - minus * minus giving
15934+30C0              ;   plus etc. If either number is zero then this is flagged.
15935+30C0              ;   HL addresses the exponent.
15936+30C0
15937+30C0              ;; PREP-M/D
15938+30C0 CD E9 34     o30C0:		CALL	o34E9		; routine TEST-ZERO  preserves accumulator.
15939+30C3 D8           		RET	C		; return carry set if zero
15940+30C4
15941+30C4 23           		INC	HL		; address first byte of mantissa
15942+30C5 AE           		XOR	(HL)		; pick up the first or xor with first.
15943+30C6 CB FE        		SET	7,(HL)		; now set to give true 32-bit mantissa
15944+30C8 2B           		DEC	HL		; point to exponent
15945+30C9 C9           		RET			; return with carry reset
15946+30CA
15947+30CA              ; ----------------------
15948+30CA              ; THE 'MULTIPLY' ROUTINE
15949+30CA              ; ----------------------
15950+30CA              ; (offset: $04 'multiply')
15951+30CA              ;
15952+30CA              ;
15953+30CA              ;   "He said go forth and something about mathematics, I wasn't really
15954+30CA              ;    listening" - overheard conversation between two unicorns.
15955+30CA              ;    [ The Odd Streak ].
15956+30CA
15957+30CA              ;; multiply
15958+30CA 1A           o30CA:		LD	A,(DE)		;
15959+30CB B6           		OR	(HL)		;
15960+30CC 20 22        		JR	NZ,o30F0	; to MULT-LONG
15961+30CE
15962+30CE D5           		PUSH	DE		;
15963+30CF E5           		PUSH	HL		;
15964+30D0 D5           		PUSH	DE		;
15965+30D1 CD 7F 2D     		CALL	o2D7F		; routine INT-FETCH
15966+30D4 EB           		EX	DE,HL		;
15967+30D5 E3           		EX	(SP),HL		;
15968+30D6 41           		LD	B,C		;
15969+30D7 CD 7F 2D     		CALL	o2D7F		; routine INT-FETCH
15970+30DA 78           		LD	A,B		;
15971+30DB A9           		XOR	C		;
15972+30DC 4F           		LD	C,A		;
15973+30DD E1           		POP	HL		;
15974+30DE CD A9 30     		CALL	o30A9		; routine HL-HL*DE
15975+30E1 EB           		EX	DE,HL		;
15976+30E2 E1           		POP	HL		;
15977+30E3 38 0A        		JR	C,o30EF		; to MULT-OFLW
15978+30E5
15979+30E5 7A           		LD	A,D		;
15980+30E6 B3           		OR	E		;
15981+30E7 20 01        		JR	NZ,o30EA	; to MULT-RSLT
15982+30E9
15983+30E9 4F           		LD	C,A		;
15984+30EA
15985+30EA              ;; MULT-RSLT
15986+30EA CD 8E 2D     o30EA:		CALL	o2D8E		; routine INT-STORE
15987+30ED D1           		POP	DE		;
15988+30EE C9           		RET			;
15989+30EF
15990+30EF              ; ---
15991+30EF
15992+30EF              ;; MULT-OFLW
15993+30EF D1           o30EF:		POP	DE		;
15994+30F0
15995+30F0              ;; MULT-LONG
15996+30F0 CD 93 32     o30F0:		CALL	o3293		; routine RE-ST-TWO
15997+30F3 AF           		XOR	A		;
15998+30F4 CD C0 30     		CALL	o30C0		; routine PREP-M/D
15999+30F7 D8           		RET	C		;
16000+30F8
16001+30F8 D9           		EXX			;
16002+30F9 E5           		PUSH	HL		;
16003+30FA D9           		EXX			;
16004+30FB D5           		PUSH	DE		;
16005+30FC EB           		EX	DE,HL		;
16006+30FD CD C0 30     		CALL	o30C0		; routine PREP-M/D
16007+3100 EB           		EX	DE,HL		;
16008+3101 38 5A        		JR	C,o315D		; to ZERO-RSLT
16009+3103
16010+3103 E5           		PUSH	HL		;
16011+3104 CD BA 2F     		CALL	o2FBA		; routine FETCH-TWO
16012+3107 78           		LD	A,B		;
16013+3108 A7           		AND	A		;
16014+3109 ED 62        		SBC	HL,HL		;
16015+310B D9           		EXX			;
16016+310C E5           		PUSH	HL		;
16017+310D ED 62        		SBC	HL,HL		;
16018+310F D9           		EXX			;
16019+3110 06 21        		LD	B,$21		;
16020+3112 18 11        		JR	o3125		; to STRT-MLT
16021+3114
16022+3114              ; ---
16023+3114
16024+3114              ;; MLT-LOOP
16025+3114 30 05        o3114:		JR	NC,o311B	; to NO-ADD
16026+3116
16027+3116 19           		ADD	HL,DE		;
16028+3117 D9           		EXX			;
16029+3118 ED 5A        		ADC	HL,DE		;
16030+311A D9           		EXX			;
16031+311B
16032+311B              ;; NO-ADD
16033+311B D9           o311B:		EXX
16034+311C CB 1C        		RR	H		;
16035+311E CB 1D        		RR	L		;
16036+3120 D9           		EXX			;
16037+3121 CB 1C        		RR	H		;
16038+3123 CB 1D        		RR	L		;
16039+3125
16040+3125              ;; STRT-MLT
16041+3125 D9           o3125:		EXX
16042+3126 CB 18        		RR	B		;
16043+3128 CB 19        		RR	C		;
16044+312A D9           		EXX			;
16045+312B CB 19        		RR	C		;
16046+312D 1F           		RRA			;
16047+312E 10 E4        		DJNZ	o3114		; to MLT-LOOP
16048+3130
16049+3130 EB           		EX	DE,HL		;
16050+3131 D9           		EXX			;
16051+3132 EB           		EX	DE,HL		;
16052+3133 D9           		EXX			;
16053+3134 C1           		POP	BC		;
16054+3135 E1           		POP	HL		;
16055+3136 78           		LD	A,B		;
16056+3137 81           		ADD	A,C		;
16057+3138 20 01        		JR	NZ,o313B	; to MAKE-EXPT
16058+313A
16059+313A A7           		AND	A		;
16060+313B
16061+313B              ;; MAKE-EXPT
16062+313B 3D           o313B:		DEC	A		;
16063+313C 3F           		CCF			; Complement Carry Flag
16064+313D
16065+313D              ;; DIVN-EXPT
16066+313D 17           o313D:		RLA
16067+313E 3F           		CCF			; Complement Carry Flag
16068+313F 1F           		RRA			;
16069+3140 F2 46 31     		JP	P,o3146		; to OFLW1-CLR
16070+3143
16071+3143 30 68        		JR	NC,o31AD	; to REPORT-6
16072+3145
16073+3145 A7           		AND	A		;
16074+3146
16075+3146              ;; OFLW1-CLR
16076+3146 3C           o3146:		INC	A		;
16077+3147 20 08        		JR	NZ,o3151	; to OFLW2-CLR
16078+3149
16079+3149 38 06        		JR	C,o3151		; to OFLW2-CLR
16080+314B
16081+314B D9           		EXX			;
16082+314C CB 7A        		BIT	7,D		;
16083+314E D9           		EXX			;
16084+314F 20 5C        		JR	NZ,o31AD	; to REPORT-6
16085+3151
16086+3151              ;; OFLW2-CLR
16087+3151 77           o3151:		LD	(HL),A		;
16088+3152 D9           		EXX			;
16089+3153 78           		LD	A,B		;
16090+3154 D9           		EXX			;
16091+3155
16092+3155              ;; TEST-NORM
16093+3155 30 15        o3155:		JR	NC,o316C	; to NORMALISE
16094+3157
16095+3157 7E           		LD	A,(HL)		;
16096+3158 A7           		AND	A		;
16097+3159
16098+3159              ;; NEAR-ZERO
16099+3159 3E 80        o3159:		LD	A,$80		;
16100+315B 28 01        		JR	Z,o315E		; to SKIP-ZERO
16101+315D
16102+315D              ;; ZERO-RSLT
16103+315D AF           o315D:		XOR	A		;
16104+315E
16105+315E              ;; SKIP-ZERO
16106+315E D9           o315E:		EXX
16107+315F A2           		AND	D		;
16108+3160 CD FB 2F     		CALL	o2FFB		; routine ZEROS-4/5
16109+3163 07           		RLCA			;
16110+3164 77           		LD	(HL),A		;
16111+3165 38 2E        		JR	C,o3195		; to OFLOW-CLR
16112+3167
16113+3167 23           		INC	HL		;
16114+3168 77           		LD	(HL),A		;
16115+3169 2B           		DEC	HL		;
16116+316A 18 29        		JR	o3195		; to OFLOW-CLR
16117+316C
16118+316C              ; ---
16119+316C
16120+316C              ;; NORMALISE
16121+316C 06 20        o316C:		LD	B,$20		;
16122+316E
16123+316E              ;; SHIFT-ONE
16124+316E D9           o316E:		EXX
16125+316F CB 7A        		BIT	7,D		;
16126+3171 D9           		EXX			;
16127+3172 20 12        		JR	NZ,o3186	; to NORML-NOW
16128+3174
16129+3174 07           		RLCA			;
16130+3175 CB 13        		RL	E		;
16131+3177 CB 12        		RL	D		;
16132+3179 D9           		EXX			;
16133+317A CB 13        		RL	E		;
16134+317C CB 12        		RL	D		;
16135+317E D9           		EXX			;
16136+317F 35           		DEC	(HL)		;
16137+3180 28 D7        		JR	Z,o3159		; to NEAR-ZERO
16138+3182
16139+3182 10 EA        		DJNZ	o316E		; to SHIFT-ONE
16140+3184
16141+3184 18 D7        		JR	o315D		; to ZERO-RSLT
16142+3186
16143+3186              ; ---
16144+3186
16145+3186              ;; NORML-NOW
16146+3186 17           o3186:		RLA
16147+3187 30 0C        		JR	NC,o3195	; to OFLOW-CLR
16148+3189
16149+3189 CD 04 30     		CALL	o3004		; routine ADD-BACK
16150+318C 20 07        		JR	NZ,o3195	; to OFLOW-CLR
16151+318E
16152+318E D9           		EXX			;
16153+318F 16 80        		LD	D,$80		;
16154+3191 D9           		EXX			;
16155+3192 34           		INC	(HL)		;
16156+3193 28 18        		JR	Z,o31AD		; to REPORT-6
16157+3195
16158+3195              ;; OFLOW-CLR
16159+3195 E5           o3195:		PUSH	HL		;
16160+3196 23           		INC	HL		;
16161+3197 D9           		EXX			;
16162+3198 D5           		PUSH	DE		;
16163+3199 D9           		EXX			;
16164+319A C1           		POP	BC		;
16165+319B 78           		LD	A,B		;
16166+319C 17           		RLA			;
16167+319D CB 16        		RL	(HL)		;
16168+319F 1F           		RRA			;
16169+31A0 77           		LD	(HL),A		;
16170+31A1 23           		INC	HL		;
16171+31A2 71           		LD	(HL),C		;
16172+31A3 23           		INC	HL		;
16173+31A4 72           		LD	(HL),D		;
16174+31A5 23           		INC	HL		;
16175+31A6 73           		LD	(HL),E		;
16176+31A7 E1           		POP	HL		;
16177+31A8 D1           		POP	DE		;
16178+31A9 D9           		EXX			;
16179+31AA E1           		POP	HL		;
16180+31AB D9           		EXX			;
16181+31AC C9           		RET			;
16182+31AD
16183+31AD              ; ---
16184+31AD
16185+31AD              ;; REPORT-6
16186+31AD CF           o31AD:		RST	08H		; ERROR-1
16187+31AE 05           		DB	$05		; Error Report: Number too big
16188+31AF
16189+31AF              ; ----------------------
16190+31AF              ; THE 'DIVISION' ROUTINE
16191+31AF              ; ----------------------
16192+31AF              ; (offset: $05 'division')
16193+31AF              ;
16194+31AF              ;   "He who can properly define and divide is to be considered a god"
16195+31AF              ;   - Plato,  429 - 347 B.C.
16196+31AF
16197+31AF              ;; division
16198+31AF CD 93 32     o31AF:		CALL	o3293		; routine RE-ST-TWO
16199+31B2 EB           		EX	DE,HL		;
16200+31B3 AF           		XOR	A		;
16201+31B4 CD C0 30     		CALL	o30C0		; routine PREP-M/D
16202+31B7 38 F4        		JR	C,o31AD		; to REPORT-6
16203+31B9
16204+31B9 EB           		EX	DE,HL		;
16205+31BA CD C0 30     		CALL	o30C0		; routine PREP-M/D
16206+31BD D8           		RET	C		;
16207+31BE
16208+31BE D9           		EXX			;
16209+31BF E5           		PUSH	HL		;
16210+31C0 D9           		EXX			;
16211+31C1 D5           		PUSH	DE		;
16212+31C2 E5           		PUSH	HL		;
16213+31C3 CD BA 2F     		CALL	o2FBA		; routine FETCH-TWO
16214+31C6 D9           		EXX			;
16215+31C7 E5           		PUSH	HL		;
16216+31C8 60           		LD	H,B		;
16217+31C9 69           		LD	L,C		;
16218+31CA D9           		EXX			;
16219+31CB 61           		LD	H,C		;
16220+31CC 68           		LD	L,B		;
16221+31CD AF           		XOR	A		;
16222+31CE 06 DF        		LD	B,$DF		;
16223+31D0 18 10        		JR	o31E2		; to DIV-START
16224+31D2
16225+31D2              ; ---
16226+31D2
16227+31D2              ;; DIV-LOOP
16228+31D2 17           o31D2:		RLA
16229+31D3 CB 11        		RL	C		;
16230+31D5 D9           		EXX			;
16231+31D6 CB 11        		RL	C		;
16232+31D8 CB 10        		RL	B		;
16233+31DA D9           		EXX			;
16234+31DB
16235+31DB              ;; div-34th
16236+31DB 29           o31DB:		ADD	HL,HL		;
16237+31DC D9           		EXX			;
16238+31DD ED 6A        		ADC	HL,HL		;
16239+31DF D9           		EXX			;
16240+31E0 38 10        		JR	C,o31F2		; to SUBN-ONLY
16241+31E2
16242+31E2              ;; DIV-START
16243+31E2 ED 52        o31E2:		SBC	HL,DE		;
16244+31E4 D9           		EXX			;
16245+31E5 ED 52        		SBC	HL,DE		;
16246+31E7 D9           		EXX			;
16247+31E8 30 0F        		JR	NC,o31F9	; to NO-RSTORE
16248+31EA
16249+31EA 19           		ADD	HL,DE		;
16250+31EB D9           		EXX			;
16251+31EC ED 5A        		ADC	HL,DE		;
16252+31EE D9           		EXX			;
16253+31EF A7           		AND	A		;
16254+31F0 18 08        		JR	o31FA		; to COUNT-ONE
16255+31F2
16256+31F2              ; ---
16257+31F2
16258+31F2              ;; SUBN-ONLY
16259+31F2 A7           o31F2:		AND	A		;
16260+31F3 ED 52        		SBC	HL,DE		;
16261+31F5 D9           		EXX			;
16262+31F6 ED 52        		SBC	HL,DE		;
16263+31F8 D9           		EXX			;
16264+31F9
16265+31F9              ;; NO-RSTORE
16266+31F9 37           o31F9:		SCF
16267+31FA
16268+31FA              ;; COUNT-ONE
16269+31FA 04           o31FA:		INC	B		;
16270+31FB FA D2 31     		JP	M,o31D2		; to DIV-LOOP
16271+31FE
16272+31FE F5           		PUSH	AF		;
16273+31FF 28 E1        		JR	Z,o31E2		; to DIV-START
16274+3201
16275+3201              ;
16276+3201              ;
16277+3201              ;
16278+3201              ;
16279+3201
16280+3201 5F           		LD	E,A		;
16281+3202 51           		LD	D,C		;
16282+3203 D9           		EXX			;
16283+3204 59           		LD	E,C		;
16284+3205 50           		LD	D,B		;
16285+3206 F1           		POP	AF		;
16286+3207 CB 18        		RR	B		;
16287+3209 F1           		POP	AF		;
16288+320A CB 18        		RR	B		;
16289+320C D9           		EXX			;
16290+320D C1           		POP	BC		;
16291+320E E1           		POP	HL		;
16292+320F 78           		LD	A,B		;
16293+3210 91           		SUB	C		;
16294+3211 C3 3D 31     		JP	o313D		; jump back to DIVN-EXPT
16295+3214
16296+3214              ; ------------------------------------
16297+3214              ; Integer truncation towards zero ($3A)
16298+3214              ; ------------------------------------
16299+3214              ;
16300+3214              ;
16301+3214
16302+3214              ;; truncate
16303+3214 7E           o3214:		LD	A,(HL)		;
16304+3215 A7           		AND	A		;
16305+3216 C8           		RET	Z		;
16306+3217
16307+3217 FE 81        		CP	$81		;
16308+3219 30 06        		JR	NC,o3221	; to T-GR-ZERO
16309+321B
16310+321B 36 00        		LD	(HL),$00	;
16311+321D 3E 20        		LD	A,$20		;
16312+321F 18 51        		JR	o3272		; to NIL-BYTES
16313+3221
16314+3221              ; ---
16315+3221
16316+3221              ;; T-GR-ZERO
16317+3221 FE 91        o3221:		CP	$91		;
16318+3223 20 1A        		JR	NZ,o323F	; to T-SMALL
16319+3225
16320+3225 23           		INC	HL		;
16321+3226 23           		INC	HL		;
16322+3227 23           		INC	HL		;
16323+3228 3E 80        		LD	A,$80		;
16324+322A A6           		AND	(HL)		;
16325+322B 2B           		DEC	HL		;
16326+322C B6           		OR	(HL)		;
16327+322D 2B           		DEC	HL		;
16328+322E 20 03        		JR	NZ,o3233	; to T-FIRST
16329+3230
16330+3230 3E 80        		LD	A,$80		;
16331+3232 AE           		XOR	(HL)		;
16332+3233
16333+3233              ;; T-FIRST
16334+3233 2B           o3233:		DEC	HL		;
16335+3234 20 36        		JR	NZ,o326C	; to T-EXPNENT
16336+3236
16337+3236 77           		LD	(HL),A		;
16338+3237 23           		INC	HL		;
16339+3238 36 FF        		LD	(HL),$FF	;
16340+323A 2B           		DEC	HL		;
16341+323B 3E 18        		LD	A,$18		;
16342+323D 18 33        		JR	o3272		; to NIL-BYTES
16343+323F
16344+323F              ; ---
16345+323F
16346+323F              ;; T-SMALL
16347+323F 30 2C        o323F:		JR	NC,o326D	; to X-LARGE
16348+3241
16349+3241 D5           		PUSH	DE		;
16350+3242 2F           		CPL			;
16351+3243 C6 91        		ADD	A,$91		;
16352+3245 23           		INC	HL		;
16353+3246 56           		LD	D,(HL)		;
16354+3247 23           		INC	HL		;
16355+3248 5E           		LD	E,(HL)		;
16356+3249 2B           		DEC	HL		;
16357+324A 2B           		DEC	HL		;
16358+324B 0E 00        		LD	C,$00		;
16359+324D CB 7A        		BIT	7,D		;
16360+324F 28 01        		JR	Z,o3252		; to T-NUMERIC
16361+3251
16362+3251 0D           		DEC	C		;
16363+3252
16364+3252              ;; T-NUMERIC
16365+3252 CB FA        o3252:		SET	7,D		;
16366+3254 06 08        		LD	B,$08		;
16367+3256 90           		SUB	B		;
16368+3257 80           		ADD	A,B		;
16369+3258 38 04        		JR	C,o325E		; to T-TEST
16370+325A
16371+325A 5A           		LD	E,D		;
16372+325B 16 00        		LD	D,$00		;
16373+325D 90           		SUB	B		;
16374+325E
16375+325E              ;; T-TEST
16376+325E 28 07        o325E:		JR	Z,o3267		; to T-STORE
16377+3260
16378+3260 47           		LD	B,A		;
16379+3261
16380+3261              ;; T-SHIFT
16381+3261 CB 3A        o3261:		SRL	D		;
16382+3263 CB 1B        		RR	E		;
16383+3265 10 FA        		DJNZ	o3261		; to T-SHIFT
16384+3267
16385+3267              ;; T-STORE
16386+3267 CD 8E 2D     o3267:		CALL	o2D8E		; routine INT-STORE
16387+326A D1           		POP	DE		;
16388+326B C9           		RET			;
16389+326C
16390+326C              ; ---
16391+326C
16392+326C              ;; T-EXPNENT
16393+326C 7E           o326C:		LD	A,(HL)		;
16394+326D
16395+326D              ;; X-LARGE
16396+326D D6 A0        o326D:		SUB	$A0		;
16397+326F F0           		RET	P		;
16398+3270
16399+3270 ED 44        		NEG			; Negate
16400+3272
16401+3272              ;; NIL-BYTES
16402+3272 D5           o3272:		PUSH	DE		;
16403+3273 EB           		EX	DE,HL		;
16404+3274 2B           		DEC	HL		;
16405+3275 47           		LD	B,A		;
16406+3276 CB 38        		SRL	B		;
16407+3278 CB 38        		SRL	B		;
16408+327A CB 38        		SRL	B		;
16409+327C 28 05        		JR	Z,o3283		; to BITS-ZERO
16410+327E
16411+327E              ;; BYTE-ZERO
16412+327E 36 00        o327E:		LD	(HL),$00	;
16413+3280 2B           		DEC	HL		;
16414+3281 10 FB        		DJNZ	o327E		; to BYTE-ZERO
16415+3283
16416+3283              ;; BITS-ZERO
16417+3283 E6 07        o3283:		AND	$07		;
16418+3285 28 09        		JR	Z,o3290		; to IX-END
16419+3287
16420+3287 47           		LD	B,A		;
16421+3288 3E FF        		LD	A,$FF		;
16422+328A
16423+328A              ;; LESS-MASK
16424+328A CB 27        o328A:		SLA	A		;
16425+328C 10 FC        		DJNZ	o328A		; to LESS-MASK
16426+328E
16427+328E A6           		AND	(HL)		;
16428+328F 77           		LD	(HL),A		;
16429+3290
16430+3290              ;; IX-END
16431+3290 EB           o3290:		EX	DE,HL		;
16432+3291 D1           		POP	DE		;
16433+3292 C9           		RET			;
16434+3293
16435+3293              ; ----------------------------------
16436+3293              ; Storage of numbers in 5 byte form.
16437+3293              ; ==================================
16438+3293              ; Both integers and floating-point numbers can be stored in five bytes.
16439+3293              ; Zero is a special case stored as 5 zeros.
16440+3293              ; For integers the form is
16441+3293              ; Byte 1 - zero,
16442+3293              ; Byte 2 - sign byte, $00 +ve, $FF -ve.
16443+3293              ; Byte 3 - Low byte of integer.
16444+3293              ; Byte 4 - High byte
16445+3293              ; Byte 5 - unused but always zero.
16446+3293              ;
16447+3293              ; it seems unusual to store the low byte first but it is just as easy either
16448+3293              ; way. Statistically it just increases the chances of trailing zeros which
16449+3293              ; is an advantage elsewhere in saving ROM code.
16450+3293              ;
16451+3293              ;             zero     sign     low      high    unused
16452+3293              ; So +1 is  00000000 00000000 00000001 00000000 00000000
16453+3293              ;
16454+3293              ; and -1 is 00000000 11111111 11111111 11111111 00000000
16455+3293              ;
16456+3293              ; much of the arithmetic found in BASIC lines can be done using numbers
16457+3293              ; in this form using the Z80's 16 bit register operation ADD.
16458+3293              ; (multiplication is done by a sequence of additions).
16459+3293              ;
16460+3293              ; Storing -ve integers in two's complement form, means that they are ready for
16461+3293              ; addition and you might like to add the numbers above to prove that the
16462+3293              ; answer is zero. If, as in this case, the carry is set then that denotes that
16463+3293              ; the result is positive. This only applies when the signs don't match.
16464+3293              ; With positive numbers a carry denotes the result is out of integer range.
16465+3293              ; With negative numbers a carry denotes the result is within range.
16466+3293              ; The exception to the last rule is when the result is -65536
16467+3293              ;
16468+3293              ; Floating point form is an alternativo method of storing numbers which can
16469+3293              ; be used for integers and larger (or fractional) numbers.
16470+3293              ;
16471+3293              ; In this form 1 is stored as
16472+3293              ;           10000001 00000000 00000000 00000000 00000000
16473+3293              ;
16474+3293              ; When a small integer is converted to a floating point number the last two
16475+3293              ; bytes are always blank so they are omitted in the following steps
16476+3293              ;
16477+3293              ; first make exponent +1 +16d  (bit 7 of the exponent is set if positive)
16478+3293
16479+3293              ; 10010001 00000000 00000001
16480+3293              ; 10010000 00000000 00000010 <-  now shift left and decrement exponent
16481+3293              ; ...
16482+3293              ; 10000010 01000000 00000000 <-  until a 1 abuts the imaginary point
16483+3293              ; 10000001 10000000 00000000     to the left of the mantissa.
16484+3293              ;
16485+3293              ; however since the leftmost bit of the mantissa is always set then it can
16486+3293              ; be used to denote the sign of the mantissa and put back when needed by the
16487+3293              ; PREP routines which gives
16488+3293              ;
16489+3293              ; 10000001 00000000 00000000
16490+3293
16491+3293              ; ----------------------------------------------
16492+3293              ; THE 'RE-STACK TWO "SMALL" INTEGERS' SUBROUTINE
16493+3293              ; ----------------------------------------------
16494+3293              ;   This routine is called to re-stack two numbers in full floating point form
16495+3293              ;   e.g. from mult when integer multiplication has overflowed.
16496+3293
16497+3293              ;; RE-ST-TWO
16498+3293 CD 96 32     o3293:		CALL	o3296		; routine RESTK-SUB  below and continue
16499+3296              					; into the routine to do the other one.
16500+3296
16501+3296              ;; RESTK-SUB
16502+3296 EB           o3296:		EX	DE,HL		; swap pointers
16503+3297
16504+3297              ; ---------------------------------------------
16505+3297              ; THE 'RE-STACK ONE "SMALL" INTEGER' SUBROUTINE
16506+3297              ; ---------------------------------------------
16507+3297              ; (offset: $3D 're-stack')
16508+3297              ;   This routine re-stacks an integer, usually on the calculator stack, in full
16509+3297              ;   floating point form.  HL points to first byte.
16510+3297
16511+3297              ;; re-stack
16512+3297 7E           o3297:		LD	A,(HL)		; Fetch Exponent byte to A
16513+3298 A7           		AND	A		; test it
16514+3299 C0           		RET	NZ		; return if not zero as already in full
16515+329A              					; floating-point form.
16516+329A
16517+329A D5           		PUSH	DE		; preserve DE.
16518+329B CD 7F 2D     		CALL	o2D7F		; routine INT-FETCH
16519+329E              					; integer to DE, sign to C.
16520+329E
16521+329E              ; HL points to 4th byte.
16522+329E
16523+329E AF           		XOR	A		; clear accumulator.
16524+329F 23           		INC	HL		; point to 5th.
16525+32A0 77           		LD	(HL),A		; and blank.
16526+32A1 2B           		DEC	HL		; point to 4th.
16527+32A2 77           		LD	(HL),A		; and blank.
16528+32A3
16529+32A3 06 91        		LD	B,$91		; set exponent byte +ve $81
16530+32A5              					; and imaginary dec point 16 bits to right
16531+32A5              					; of first bit.
16532+32A5
16533+32A5              ;   we could skip to normalize now but it's quicker to avoid normalizing
16534+32A5              ;   through an empty D.
16535+32A5
16536+32A5 7A           		LD	A,D		; fetch the high byte D
16537+32A6 A7           		AND	A		; is it zero ?
16538+32A7 20 08        		JR	NZ,o32B1	; skip to RS-NRMLSE if not.
16539+32A9
16540+32A9 B3           		OR	E		; low byte E to A and test for zero
16541+32AA 42           		LD	B,D		; set B exponent to 0
16542+32AB 28 10        		JR	Z,o32BD		; forward to RS-STORE if value is zero.
16543+32AD
16544+32AD 53           		LD	D,E		; transfer E to D
16545+32AE 58           		LD	E,B		; set E to 0
16546+32AF 06 89        		LD	B,$89		; reduce the initial exponent by eight.
16547+32B1
16548+32B1
16549+32B1              ;; RS-NRMLSE
16550+32B1 EB           o32B1:		EX	DE,HL		; integer to HL, addr of 4th byte to DE.
16551+32B2
16552+32B2              ;; RSTK-LOOP
16553+32B2 05           o32B2:		DEC	B		; decrease exponent
16554+32B3 29           		ADD	HL,HL		; shift DE left
16555+32B4 30 FC        		JR	NC,o32B2	; loop back to RSTK-LOOP
16556+32B6              					; until a set bit pops into carry
16557+32B6
16558+32B6 CB 09        		RRC	C		; now rotate the sign byte $00 or $FF
16559+32B8              					; into carry to give a sign bit
16560+32B8
16561+32B8 CB 1C        		RR	H		; rotate the sign bit to left of H
16562+32BA CB 1D        		RR	L		; rotate any carry into L
16563+32BC
16564+32BC EB           		EX	DE,HL		; address 4th byte, normalized int to DE
16565+32BD
16566+32BD              ;; RS-STORE
16567+32BD 2B           o32BD:		DEC	HL		; address 3rd byte
16568+32BE 73           		LD	(HL),E		; place E
16569+32BF 2B           		DEC	HL		; address 2nd byte
16570+32C0 72           		LD	(HL),D		; place D
16571+32C1 2B           		DEC	HL		; address 1st byte
16572+32C2 70           		LD	(HL),B		; store the exponent
16573+32C3
16574+32C3 D1           		POP	DE		; restore initial DE.
16575+32C4 C9           		RET			; return.
16576+32C5
16577+32C5              ;****************************************
16578+32C5              ;** Part 10. FLOATING-POINT CALCULATOR **
16579+32C5              ;****************************************
16580+32C5
16581+32C5              ; As a general rule the calculator avoids using the IY register.
16582+32C5              ; exceptions are val, val$ and str$.
16583+32C5              ; So an assembly language programmer who has disabled interrupts to use
16584+32C5              ; IY for other purposes can still use the calculator for mathematical
16585+32C5              ; purposes.
16586+32C5
16587+32C5
16588+32C5              ; ------------------------
16589+32C5              ; THE 'TABLE OF CONSTANTS'
16590+32C5              ; ------------------------
16591+32C5              ;
16592+32C5              ;
16593+32C5
16594+32C5              ; used 11 times
16595+32C5              ;; stk-zero                                                 00 00 00 00 00
16596+32C5 00           o32C5:		DB	$00		; Bytes: 1
16597+32C6 B0           		DB	$B0		; Exponent $00
16598+32C7 00           		DB	$00		; (+00,+00,+00)
16599+32C8
16600+32C8              ; used 19 times
16601+32C8              ;; stk-one                                                  00 00 01 00 00
16602+32C8 40           o32C8:		DB	$40		; Bytes: 2
16603+32C9 B0           		DB	$B0		; Exponent $00
16604+32CA 00 01        		DB	$00,$01		; (+00,+00)
16605+32CC
16606+32CC              ; used 9 times
16607+32CC              ;; stk-half                                                 80 00 00 00 00
16608+32CC 30           o32CC:		DB	$30		; Exponent: $80, Bytes: 1
16609+32CD 00           		DB	$00		; (+00,+00,+00)
16610+32CE
16611+32CE              ; used 4 times.
16612+32CE              ;; stk-pi/2                                                 81 49 0F DA A2
16613+32CE F1           o32CE:		DB	$F1		; Exponent: $81, Bytes: 4
16614+32CF 49 0F DA A2  		DB	$49,$0F,$DA,$A2	;
16615+32D3
16616+32D3              ; used 3 times.
16617+32D3              ;; stk-ten                                                  00 00 0A 00 00
16618+32D3 40           o32D3:		DB	$40		; Bytes: 2
16619+32D4 B0           		DB	$B0		; Exponent $00
16620+32D5 00 0A        		DB	$00,$0A		; (+00,+00)
16621+32D7
16622+32D7
16623+32D7              ; ------------------------
16624+32D7              ; THE 'TABLE OF ADDRESSES'
16625+32D7              ; ------------------------
16626+32D7              ;  "Each problem that I solved became a rule which served afterwards to solve
16627+32D7              ;   other problems" - Rene Descartes 1596 - 1650.
16628+32D7              ;
16629+32D7              ;   Starts with binary operations which have two operands and one result.
16630+32D7              ;   Three pseudo binary operations first.
16631+32D7
16632+32D7              ;; tbl-addrs
16633+32D7 8F 36        o32D7:		DW	o368F		; $00 Address: $368F - jump-true
16634+32D9 3C 34        		DW	o343C		; $01 Address: $343C - exchange
16635+32DB A1 33        		DW	o33A1		; $02 Address: $33A1 - delete
16636+32DD
16637+32DD              ;   True binary operations.
16638+32DD
16639+32DD 0F 30        		DW	o300F		; $03 Address: $300F - subtract
16640+32DF CA 30        		DW	o30CA		; $04 Address: $30CA - multiply
16641+32E1 AF 31        		DW	o31AF		; $05 Address: $31AF - division
16642+32E3 51 38        		DW	o3851		; $06 Address: $3851 - to-power
16643+32E5 1B 35        		DW	o351B		; $07 Address: $351B - or
16644+32E7
16645+32E7 24 35        		DW	o3524		; $08 Address: $3524 - no-&-no
16646+32E9 3B 35        		DW	o353B		; $09 Address: $353B - no-l-eql
16647+32EB 3B 35        		DW	o353B		; $0A Address: $353B - no-gr-eql
16648+32ED 3B 35        		DW	o353B		; $0B Address: $353B - nos-neql
16649+32EF 3B 35        		DW	o353B		; $0C Address: $353B - no-grtr
16650+32F1 3B 35        		DW	o353B		; $0D Address: $353B - no-less
16651+32F3 3B 35        		DW	o353B		; $0E Address: $353B - nos-eql
16652+32F5 14 30        		DW	o3014		; $0F Address: $3014 - addition
16653+32F7
16654+32F7 2D 35        		DW	o352D		; $10 Address: $352D - str-&-no
16655+32F9 3B 35        		DW	o353B		; $11 Address: $353B - str-l-eql
16656+32FB 3B 35        		DW	o353B		; $12 Address: $353B - str-gr-eql
16657+32FD 3B 35        		DW	o353B		; $13 Address: $353B - strs-neql
16658+32FF 3B 35        		DW	o353B		; $14 Address: $353B - str-grtr
16659+3301 3B 35        		DW	o353B		; $15 Address: $353B - str-less
16660+3303 3B 35        		DW	o353B		; $16 Address: $353B - strs-eql
16661+3305 9C 35        		DW	o359C		; $17 Address: $359C - strs-add
16662+3307
16663+3307              ;   Unary follow.
16664+3307
16665+3307 DE 35        		DW	o35DE		; $18 Address: $35DE - val$
16666+3309 BC 34        		DW	o34BC		; $19 Address: $34BC - usr-$
16667+330B 45 36        		DW	o3645		; $1A Address: $3645 - read-in
16668+330D 6E 34        		DW	o346E		; $1B Address: $346E - negate
16669+330F
16670+330F 69 36        		DW	o3669		; $1C Address: $3669 - code
16671+3311 DE 35        		DW	o35DE		; $1D Address: $35DE - val
16672+3313 74 36        		DW	o3674		; $1E Address: $3674 - len
16673+3315 B5 37        		DW	o37B5		; $1F Address: $37B5 - sin
16674+3317 AA 37        		DW	o37AA		; $20 Address: $37AA - cos
16675+3319 DA 37        		DW	o37DA		; $21 Address: $37DA - tan
16676+331B 33 38        		DW	o3833		; $22 Address: $3833 - asn
16677+331D 43 38        		DW	o3843		; $23 Address: $3843 - acs
16678+331F E2 37        		DW	o37E2		; $24 Address: $37E2 - atn
16679+3321 13 37        		DW	o3713		; $25 Address: $3713 - ln
16680+3323 C4 36        		DW	o36C4		; $26 Address: $36C4 - exp
16681+3325 AF 36        		DW	o36AF		; $27 Address: $36AF - int
16682+3327 4A 38        		DW	o384A		; $28 Address: $384A - sqr
16683+3329 92 34        		DW	o3492		; $29 Address: $3492 - sgn
16684+332B 6A 34        		DW	o346A		; $2A Address: $346A - abs
16685+332D AC 34        		DW	o34AC		; $2B Address: $34AC - peek
16686+332F A5 34        		DW	o34A5		; $2C Address: $34A5 - in
16687+3331 B3 34        		DW	o34B3		; $2D Address: $34B3 - usr-no
16688+3333 1F 36        		DW	o361F		; $2E Address: $361F - str$
16689+3335 C9 35        		DW	o35C9		; $2F Address: $35C9 - chrs
16690+3337 01 35        		DW	o3501		; $30 Address: $3501 - not
16691+3339
16692+3339              ;   End of true unary.
16693+3339
16694+3339 C0 33        		DW	o33C0		; $31 Address: $33C0 - duplicate
16695+333B A0 36        		DW	o36A0		; $32 Address: $36A0 - n-mod-m
16696+333D 86 36        		DW	o3686		; $33 Address: $3686 - jump
16697+333F C6 33        		DW	o33C6		; $34 Address: $33C6 - stk-data
16698+3341 7A 36        		DW	o367A		; $35 Address: $367A - dec-jr-nz
16699+3343 06 35        		DW	o3506		; $36 Address: $3506 - less-0
16700+3345 F9 34        		DW	o34F9		; $37 Address: $34F9 - greater-0
16701+3347 9B 36        		DW	o369B		; $38 Address: $369B - end-calc
16702+3349 83 37        		DW	o3783		; $39 Address: $3783 - get-argt
16703+334B 14 32        		DW	o3214		; $3A Address: $3214 - truncate
16704+334D A2 33        		DW	o33A2		; $3B Address: $33A2 - fp-calc-2
16705+334F 4F 2D        		DW	o2D4F		; $3C Address: $2D4F - e-to-fp
16706+3351 97 32        		DW	o3297		; $3D Address: $3297 - re-stack
16707+3353
16708+3353              ;   The following are just the next available slots for the 128 compound
16709+3353              ;   literals which are in range $80 - $FF.
16710+3353
16711+3353 49 34        		DW	o3449		;     Address: $3449 - series-xx    $80 - $9F.
16712+3355 1B 34        		DW	o341B		;     Address: $341B - stk-const-xx $A0 - $BF.
16713+3357 2D 34        		DW	o342D		;     Address: $342D - st-mem-xx    $C0 - $DF.
16714+3359 0F 34        		DW	o340F		;     Address: $340F - get-mem-xx   $E0 - $FF.
16715+335B
16716+335B              ;   Aside: 3E - 3F are therefore unused calculator literals.
16717+335B              ;   If the literal has to be also usable as a function then bits 6 and 7 are
16718+335B              ;   used to show type of arguments and result.
16719+335B
16720+335B              ; --------------
16721+335B              ; The Calculator
16722+335B              ; --------------
16723+335B              ;  "A good calculator does not need artificial aids"
16724+335B              ;  Lao Tze 604 - 531 B.C.
16725+335B
16726+335B              ;; CALCULATE
16727+335B CD BF 35     o335B:		CALL	o35BF		; routine STK-PNTRS is called to set up the
16728+335E              					; calculator stack pointers for a default
16729+335E              					; unary operation. HL = last value on stack.
16730+335E              					; DE = STKEND first location after stack.
16731+335E
16732+335E              ; the calculate routine is called at this point by the series generator...
16733+335E
16734+335E              ;; GEN-ENT-1
16735+335E 78           o335E:		LD	A,B		; fetch the Z80 B register to A
16736+335F 32 67 5C     		LD	(	$5C67),A	; and store value in system variable BREG.
16737+3362              					; this will be the counter for dec-jr-nz
16738+3362              					; or if used from fp-calc2 the calculator
16739+3362              					; instruction.
16740+3362
16741+3362              ; ... and again later at this point
16742+3362
16743+3362              ;; GEN-ENT-2
16744+3362 D9           o3362:		EXX
16745+3363 E3           		EX	(SP),HL		; and store the address of next instruction,
16746+3364              					; the return address, in H'L'.
16747+3364              					; If this is a recursive call the H'L'
16748+3364              					; of the previous invocation goes on stack.
16749+3364              					; c.f. end-calc.
16750+3364 D9           		EXX			; switch back to main set
16751+3365
16752+3365              ; this is the re-entry looping point when handling a string of literals.
16753+3365
16754+3365              ;; RE-ENTRY
16755+3365 ED 53 65 5C  o3365:		LD	(	$5C65),DE	; save end of stack in system variable STKEND
16756+3369 D9           		EXX			; switch to alt
16757+336A 7E           		LD	A,(HL)		; get next literal
16758+336B 23           		INC	HL		; increase pointer'
16759+336C
16760+336C              ; single operation jumps back to here
16761+336C
16762+336C              ;; SCAN-ENT
16763+336C E5           o336C:		PUSH	HL		; save pointer on stack
16764+336D A7           		AND	A		; now test the literal
16765+336E F2 80 33     		JP	P,o3380		; forward to FIRST-3D if in range $00 - $3D
16766+3371              					; anything with bit 7 set will be one of
16767+3371              					; 128 compound literals.
16768+3371
16769+3371              ; compound literals have the following format.
16770+3371              ; bit 7 set indicates compound.
16771+3371              ; bits 6-5 the subgroup 0-3.
16772+3371              ; bits 4-0 the embedded parameter $00 - $1F.
16773+3371              ; The subgroup 0-3 needs to be manipulated to form the next available four
16774+3371              ; address places after the simple literals in the address table.
16775+3371
16776+3371 57           		LD	D,A		; save literal in D
16777+3372 E6 60        		AND	$60		; and with 01100000 to isolate subgroup
16778+3374 0F           		RRCA			; rotate bits
16779+3375 0F           		RRCA			; 4 places to right
16780+3376 0F           		RRCA			; not five as we need offset * 2
16781+3377 0F           		RRCA			; 00000xx0
16782+3378 C6 7C        		ADD	A,$7C		; add ($3E * 2) to give correct offset.
16783+337A              					; alter above if you add more literals.
16784+337A 6F           		LD	L,A		; store in L for later indexing.
16785+337B 7A           		LD	A,D		; bring back compound literal
16786+337C E6 1F        		AND	$1F		; use mask to isolate parameter bits
16787+337E 18 0E        		JR	o338E		; forward to ENT-TABLE
16788+3380
16789+3380              ; ---
16790+3380
16791+3380              ; the branch was here with simple literals.
16792+3380
16793+3380              ;; FIRST-3D
16794+3380 FE 18        o3380:		CP	$18		; compare with first unary operations.
16795+3382 30 08        		JR	NC,o338C	; to DOUBLE-A with unary operations
16796+3384
16797+3384              ; it is binary so adjust pointers.
16798+3384
16799+3384 D9           		EXX			;
16800+3385 01 FB FF     		LD	BC,$FFFB	; the value -5
16801+3388 54           		LD	D,H		; transfer HL, the last value, to DE.
16802+3389 5D           		LD	E,L		;
16803+338A 09           		ADD	HL,BC		; subtract 5 making HL point to second
16804+338B              					; value.
16805+338B D9           		EXX			;
16806+338C
16807+338C              ;; DOUBLE-A
16808+338C 07           o338C:		RLCA
16809+338D 6F           		LD	L,A		; and store in L for indexing
16810+338E
16811+338E              ;; ENT-TABLE
16812+338E 11 D7 32     o338E:		LD	DE,o32D7	; Address: tbl-addrs
16813+3391 26 00        		LD	H,$00		; prepare to index
16814+3393 19           		ADD	HL,DE		; add to get address of routine
16815+3394 5E           		LD	E,(HL)		; low byte to E
16816+3395 23           		INC	HL		;
16817+3396 56           		LD	D,(HL)		; high byte to D
16818+3397 21 65 33     		LD	HL,o3365	; Address: RE-ENTRY
16819+339A E3           		EX	(SP),HL		; goes to stack
16820+339B D5           		PUSH	DE		; now address of routine
16821+339C D9           		EXX			; main set
16822+339D              					; avoid using IY register.
16823+339D ED 4B 66 5C  		LD	BC,($5C66)	; STKEND_hi
16824+33A1              					; nothing much goes to C but BREG to B
16825+33A1              					; and continue into next ret instruction
16826+33A1              					; which has a dual identity
16827+33A1
16828+33A1
16829+33A1              ; ------------------
16830+33A1              ; Handle delete (02)
16831+33A1              ; ------------------
16832+33A1              ; A simple return but when used as a calculator literal this
16833+33A1              ; deletes the last value from the calculator stack.
16834+33A1              ; On entry, as always with binary operations,
16835+33A1              ; HL=first number, DE=second number
16836+33A1              ; On exit, HL=result, DE=stkend.
16837+33A1              ; So nothing to do
16838+33A1
16839+33A1              ;; delete
16840+33A1 C9           o33A1:		RET
16841+33A2
16842+33A2              ; ---------------------
16843+33A2              ; Single operation (3B)
16844+33A2              ; ---------------------
16845+33A2              ;   This single operation is used, in the first instance, to evaluate most
16846+33A2              ;   of the mathematical and string functions found in BASIC expressions.
16847+33A2
16848+33A2              ;; fp-calc-2
16849+33A2 F1           o33A2:		POP	AF		; drop return address.
16850+33A3 3A 67 5C     		LD	A,(	$5C67)	; load accumulator from system variable BREG
16851+33A6              					; value will be literal e.g. 'tan'
16852+33A6 D9           		EXX			; switch to alt
16853+33A7 18 C3        		JR	o336C		; back to SCAN-ENT
16854+33A9              					; next literal will be end-calc at o2758
16855+33A9
16856+33A9              ; ---------------------------------
16857+33A9              ; THE 'TEST FIVE SPACES' SUBROUTINE
16858+33A9              ; ---------------------------------
16859+33A9              ;   This routine is called from MOVE-FP, STK-CONST and STK-STORE to test that
16860+33A9              ;   there is enough space between the calculator stack and the machine stack
16861+33A9              ;   for another five-byte value.  It returns with BC holding the value 5 ready
16862+33A9              ;   for any subsequent LDIR.
16863+33A9
16864+33A9              ;; TEST-5-SP
16865+33A9 D5           o33A9:		PUSH	DE		; save
16866+33AA E5           		PUSH	HL		; registers
16867+33AB 01 05 00     		LD	BC,$0005	; an overhead of five bytes
16868+33AE CD 05 1F     		CALL	o1F05		; routine TEST-ROOM tests free RAM raising
16869+33B1              					; an error if not.
16870+33B1 E1           		POP	HL		; else restore
16871+33B2 D1           		POP	DE		; registers.
16872+33B3 C9           		RET			; return with BC set at 5.
16873+33B4
16874+33B4              ; -----------------------------
16875+33B4              ; THE 'STACK NUMBER' SUBROUTINE
16876+33B4              ; -----------------------------
16877+33B4              ;   This routine is called to stack a hidden floating point number found in
16878+33B4              ;   a BASIC line.  It is also called to stack a numeric variable value, and
16879+33B4              ;   from BEEP, to stack an entry in the semi-tone table.  It is not part of the
16880+33B4              ;   calculator suite of routines.  On entry, HL points to the number to be
16881+33B4              ;   stacked.
16882+33B4
16883+33B4              ;; STACK-NUM
16884+33B4 ED 5B 65 5C  o33B4:		LD	DE,(	$5C65)	; Load destination from STKEND system variable.
16885+33B8
16886+33B8 CD C0 33     		CALL	o33C0		; Routine MOVE-FP puts on calculator stack
16887+33BB              					; with a memory check.
16888+33BB ED 53 65 5C  		LD	(	$5C65),DE	; Set STKEND to next free location.
16889+33BF
16890+33BF C9           		RET			; Return.
16891+33C0
16892+33C0              ; ---------------------------------
16893+33C0              ; Move a floating point number (31)
16894+33C0              ; ---------------------------------
16895+33C0
16896+33C0              ; This simple routine is a 5-byte LDIR instruction
16897+33C0              ; that incorporates a memory check.
16898+33C0              ; When used as a calculator literal it duplicates the last value on the
16899+33C0              ; calculator stack.
16900+33C0              ; Unary so on entry HL points to last value, DE to stkend
16901+33C0
16902+33C0              ;; duplicate
16903+33C0              ;; MOVE-FP
16904+33C0 CD A9 33     o33C0:		CALL	o33A9		; routine TEST-5-SP test free memory
16905+33C3              					; and sets BC to 5.
16906+33C3 ED B0        		LDIR			; copy the five bytes.
16907+33C5 C9           		RET			; return with DE addressing new STKEND
16908+33C6              					; and HL addressing new last value.
16909+33C6
16910+33C6              ; -------------------
16911+33C6              ; Stack literals ($34)
16912+33C6              ; -------------------
16913+33C6              ; When a calculator subroutine needs to put a value on the calculator
16914+33C6              ; stack that is not a regular constant this routine is called with a
16915+33C6              ; variable number of following data bytes that convey to the routine
16916+33C6              ; the integer or floating point form as succinctly as is possible.
16917+33C6
16918+33C6              ;; stk-data
16919+33C6 62           o33C6:		LD	H,D		; transfer STKEND
16920+33C7 6B           		LD	L,E		; to HL for result.
16921+33C8
16922+33C8              ;; STK-CONST
16923+33C8 CD A9 33     o33C8:		CALL	o33A9		; routine TEST-5-SP tests that room exists
16924+33CB              					; and sets BC to $05.
16925+33CB
16926+33CB D9           		EXX			; switch to alternate set
16927+33CC E5           		PUSH	HL		; save the pointer to next literal on stack
16928+33CD D9           		EXX			; switch back to main set
16929+33CE
16930+33CE E3           		EX	(SP),HL		; pointer to HL, destination to stack.
16931+33CF
16932+33CF C5           		PUSH	BC		; save BC - value 5 from test room ??.
16933+33D0
16934+33D0 7E           		LD	A,(HL)		; fetch the byte following 'stk-data'
16935+33D1 E6 C0        		AND	$C0		; isolate bits 7 and 6
16936+33D3 07           		RLCA			; rotate
16937+33D4 07           		RLCA			; to bits 1 and 0  range $00 - $03.
16938+33D5 4F           		LD	C,A		; transfer to C
16939+33D6 0C           		INC	C		; and increment to give number of bytes
16940+33D7              					; to read. $01 - $04
16941+33D7 7E           		LD	A,(HL)		; reload the first byte
16942+33D8 E6 3F        		AND	$3F		; mask off to give possible exponent.
16943+33DA 20 02        		JR	NZ,o33DE	; forward to FORM-EXP if it was possible to
16944+33DC              					; include the exponent.
16945+33DC
16946+33DC              ; else byte is just a byte count and exponent comes next.
16947+33DC
16948+33DC 23           		INC	HL		; address next byte and
16949+33DD 7E           		LD	A,(HL)		; pick up the exponent ( - $50).
16950+33DE
16951+33DE              ;; FORM-EXP
16952+33DE C6 50        o33DE:		ADD	A,$50		; now add $50 to form actual exponent
16953+33E0 12           		LD	(DE),A		; and load into first destination byte.
16954+33E1 3E 05        		LD	A,$05		; load accumulator with $05 and
16955+33E3 91           		SUB	C		; subtract C to give count of trailing
16956+33E4              					; zeros plus one.
16957+33E4 23           		INC	HL		; increment source
16958+33E5 13           		INC	DE		; increment destination
16959+33E6 06 00        		LD	B,$00		; prepare to copy
16960+33E8 ED B0        		LDIR			; copy C bytes
16961+33EA
16962+33EA C1           		POP	BC		; restore 5 counter to BC ??.
16963+33EB
16964+33EB E3           		EX	(SP),HL		; put HL on stack as next literal pointer
16965+33EC              					; and the stack value - result pointer -
16966+33EC              					; to HL.
16967+33EC
16968+33EC D9           		EXX			; switch to alternate set.
16969+33ED E1           		POP	HL		; restore next literal pointer from stack
16970+33EE              					; to H'L'.
16971+33EE D9           		EXX			; switch back to main set.
16972+33EF
16973+33EF 47           		LD	B,A		; zero count to B
16974+33F0 AF           		XOR	A		; clear accumulator
16975+33F1
16976+33F1              ;; STK-ZEROS
16977+33F1 05           o33F1:		DEC	B		; decrement B counter
16978+33F2 C8           		RET	Z		; return if zero.          >>
16979+33F3              					; DE points to new STKEND
16980+33F3              					; HL to new number.
16981+33F3
16982+33F3 12           		LD	(DE),A		; else load zero to destination
16983+33F4 13           		INC	DE		; increase destination
16984+33F5 18 FA        		JR	o33F1		; loop back to STK-ZEROS until done.
16985+33F7
16986+33F7              ; -------------------------------
16987+33F7              ; THE 'SKIP CONSTANTS' SUBROUTINE
16988+33F7              ; -------------------------------
16989+33F7              ;   This routine traverses variable-length entries in the table of constants,
16990+33F7              ;   stacking intermediate, unwanted constants onto a dummy calculator stack,
16991+33F7              ;   in the first five bytes of ROM.  The destination DE normally points to the
16992+33F7              ;   end of the calculator stack which might be in the normal place or in the
16993+33F7              ;   system variables area during E-LINE-NO; INT-TO-FP; stk-ten.  In any case,
16994+33F7              ;   it would be simpler all round if the routine just shoved unwanted values
16995+33F7              ;   where it is going to stick the wanted value.  The instruction LD DE, $0000
16996+33F7              ;   can be removed.
16997+33F7
16998+33F7              ;; SKIP-CONS
16999+33F7 A7           o33F7:		AND	A		; test if initially zero.
17000+33F8
17001+33F8              ;; SKIP-NEXT
17002+33F8 C8           o33F8:		RET	Z		; return if zero.          >>
17003+33F9
17004+33F9 F5           		PUSH	AF		; save count.
17005+33FA D5           		PUSH	DE		; and normal STKEND
17006+33FB
17007+33FB 11 00 00     		LD	DE,$0000	; dummy value for STKEND at start of ROM
17008+33FE              					; Note. not a fault but this has to be
17009+33FE              					; moved elsewhere when running in RAM.
17010+33FE              					; e.g. with Expandor Systems 'Soft ROM'.
17011+33FE              					; Better still, write to the normal place.
17012+33FE CD C8 33     		CALL	o33C8		; routine STK-CONST works through variable
17013+3401              					; length records.
17014+3401
17015+3401 D1           		POP	DE		; restore real STKEND
17016+3402 F1           		POP	AF		; restore count
17017+3403 3D           		DEC	A		; decrease
17018+3404 18 F2        		JR	o33F8		; loop back to SKIP-NEXT
17019+3406
17020+3406              ; ------------------------------
17021+3406              ; THE 'LOCATE MEMORY' SUBROUTINE
17022+3406              ; ------------------------------
17023+3406              ;   This routine, when supplied with a base address in HL and an index in A,
17024+3406              ;   will calculate the address of the A'th entry, where each entry occupies
17025+3406              ;   five bytes.  It is used for reading the semi-tone table and addressing
17026+3406              ;   floating-point numbers in the calculator's memory area.
17027+3406              ;   It is not possible to use this routine for the table of constants as these
17028+3406              ;   six values are held in compressed format.
17029+3406
17030+3406              ;; LOC-MEM
17031+3406 4F           o3406:		LD	C,A		; store the original number $00-$1F.
17032+3407 07           		RLCA			; X2 - double.
17033+3408 07           		RLCA			; X4 - quadruple.
17034+3409 81           		ADD	A,C		; X5 - now add original to multiply by five.
17035+340A
17036+340A 4F           		LD	C,A		; place the result in the low byte.
17037+340B 06 00        		LD	B,$00		; set high byte to zero.
17038+340D 09           		ADD	HL,BC		; add to form address of start of number in HL.
17039+340E
17040+340E C9           		RET			; return.
17041+340F
17042+340F              ; ------------------------------
17043+340F              ; Get from memory area ($E0 etc.)
17044+340F              ; ------------------------------
17045+340F              ; Literals $E0 to $FF
17046+340F              ; A holds $00-$1F offset.
17047+340F              ; The calculator stack increases by 5 bytes.
17048+340F
17049+340F              ;; get-mem-xx
17050+340F D5           o340F:		PUSH	DE		; save STKEND
17051+3410 2A 68 5C     		LD	HL,(	$5C68)	; MEM is base address of the memory cells.
17052+3413 CD 06 34     		CALL	o3406		; routine LOC-MEM so that HL = first byte
17053+3416 CD C0 33     		CALL	o33C0		; routine MOVE-FP moves 5 bytes with memory
17054+3419              					; check.
17055+3419              					; DE now points to new STKEND.
17056+3419 E1           		POP	HL		; original STKEND is now RESULT pointer.
17057+341A C9           		RET			; return.
17058+341B
17059+341B              ; --------------------------
17060+341B              ; Stack a constant (A0 etc.)
17061+341B              ; --------------------------
17062+341B              ; This routine allows a one-byte instruction to stack up to 32 constants
17063+341B              ; held in short form in a table of constants. In fact only 5 constants are
17064+341B              ; required. On entry the A register holds the literal ANDed with 1F.
17065+341B              ; It isn't very efficient and it would have been better to hold the
17066+341B              ; numbers in full, five byte form and stack them in a similar manner
17067+341B              ; to that used for semi-tone table values.
17068+341B
17069+341B              ;; stk-const-xx
17070+341B 62           o341B:		LD	H,D		; save STKEND - required for result
17071+341C 6B           		LD	L,E		;
17072+341D D9           		EXX			; swap
17073+341E E5           		PUSH	HL		; save pointer to next literal
17074+341F 21 C5 32     		LD	HL,o32C5	; Address: stk-zero - start of table of
17075+3422              					; constants
17076+3422 D9           		EXX			;
17077+3423 CD F7 33     		CALL	o33F7		; routine SKIP-CONS
17078+3426 CD C8 33     		CALL	o33C8		; routine STK-CONST
17079+3429 D9           		EXX			;
17080+342A E1           		POP	HL		; restore pointer to next literal.
17081+342B D9           		EXX			;
17082+342C C9           		RET			; return.
17083+342D
17084+342D              ; --------------------------------
17085+342D              ; Store in a memory area ($C0 etc.)
17086+342D              ; --------------------------------
17087+342D              ; Offsets $C0 to $DF
17088+342D              ; Although 32 memory storage locations can be addressed, only six
17089+342D              ; $C0 to $C5 are required by the ROM and only the thirty bytes (6*5)
17090+342D              ; required for these are allocated. Spectrum programmers who wish to
17091+342D              ; use the floating point routines from assembly language may wish to
17092+342D              ; alter the system variable MEM to point to 160 bytes of RAM to have
17093+342D              ; use the full range available.
17094+342D              ; A holds the derived offset $00-$1F.
17095+342D              ; This is a unary operation, so on entry HL points to the last value and DE
17096+342D              ; points to STKEND.
17097+342D
17098+342D              ;; st-mem-xx
17099+342D E5           o342D:		PUSH	HL		; save the result pointer.
17100+342E EB           		EX	DE,HL		; transfer to DE.
17101+342F 2A 68 5C     		LD	HL,(	$5C68)	; fetch MEM the base of memory area.
17102+3432 CD 06 34     		CALL	o3406		; routine LOC-MEM sets HL to the destination.
17103+3435 EB           		EX	DE,HL		; swap - HL is start, DE is destination.
17104+3436 CD C0 33     		CALL	o33C0		; routine MOVE-FP.
17105+3439              					; note. a short ld bc,5; ldir
17106+3439              					; the embedded memory check is not required
17107+3439              					; so these instructions would be faster.
17108+3439 EB           		EX	DE,HL		; DE = STKEND
17109+343A E1           		POP	HL		; restore original result pointer
17110+343B C9           		RET			; return.
17111+343C
17112+343C              ; -------------------------
17113+343C              ; THE 'EXCHANGE' SUBROUTINE
17114+343C              ; -------------------------
17115+343C              ; (offset: $01 'exchange')
17116+343C              ;   This routine swaps the last two values on the calculator stack.
17117+343C              ;   On entry, as always with binary operations,
17118+343C              ;   HL=first number, DE=second number
17119+343C              ;   On exit, HL=result, DE=stkend.
17120+343C
17121+343C              ;; exchange
17122+343C 06 05        o343C:		LD	B,$05		; there are five bytes to be swapped
17123+343E
17124+343E              ; start of loop.
17125+343E
17126+343E              ;; SWAP-BYTE
17127+343E 1A           o343E:		LD	A,(DE)		; each byte of second
17128+343F 4E           		LD	C,(HL)		; each byte of first
17129+3440 EB           		EX	DE,HL		; swap pointers
17130+3441 12           		LD	(DE),A		; store each byte of first
17131+3442 71           		LD	(HL),C		; store each byte of second
17132+3443 23           		INC	HL		; advance both
17133+3444 13           		INC	DE		; pointers.
17134+3445 10 F7        		DJNZ	o343E		; loop back to SWAP-BYTE until all 5 done.
17135+3447
17136+3447 EB           		EX	DE,HL		; even up the exchanges so that DE addresses
17137+3448              					; STKEND.
17138+3448
17139+3448 C9           		RET			; return.
17140+3449
17141+3449              ; ------------------------------
17142+3449              ; THE 'SERIES GENERATOR' ROUTINE
17143+3449              ; ------------------------------
17144+3449              ; (offset: $86 'series-06')
17145+3449              ; (offset: $88 'series-08')
17146+3449              ; (offset: $8C 'series-0C')
17147+3449              ;   The Spectrum uses Chebyshev polynomials to generate approximations for
17148+3449              ;   SIN, ATN, LN and EXP.  These are named after the Russian mathematician
17149+3449              ;   Pafnuty Chebyshev, born in 1821, who did much pioneering work on numerical
17150+3449              ;   series.  As far as calculators are concerned, Chebyshev polynomials have an
17151+3449              ;   advantage over other series, for example the Taylor series, as they can
17152+3449              ;   reach an approximation in just six iterations for SIN, eight for EXP and
17153+3449              ;   twelve for LN and ATN.  The mechanics of the routine are interesting but
17154+3449              ;   for full treatment of how these are generated with demonstrations in
17155+3449              ;   Sinclair BASIC see "The Complete Spectrum ROM Disassembly" by Dr Ian Logan
17156+3449              ;   and Dr Frank O'Hara, published 1983 by Melbourne House.
17157+3449
17158+3449              ;; series-xx
17159+3449 47           o3449:		LD	B,A		; parameter $00 - $1F to B counter
17160+344A CD 5E 33     		CALL	o335E		; routine GEN-ENT-1 is called.
17161+344D              					; A recursive call to a special entry point
17162+344D              					; in the calculator that puts the B register
17163+344D              					; in the system variable BREG. The return
17164+344D              					; address is the next location and where
17165+344D              					; the calculator will expect its first
17166+344D              					; instruction - now pointed to by HL'.
17167+344D              					; The previous pointer to the series of
17168+344D              					; five-byte numbers goes on the machine stack.
17169+344D
17170+344D              ; The initialization phase.
17171+344D
17172+344D 31           		DB	$31		; duplicate       x,x
17173+344E 0F           		DB	$0F		; addition        x+x
17174+344F C0           		DB	$C0		; st-mem-0        x+x
17175+3450 02           		DB	$02		; delete          .
17176+3451 A0           		DB	$A0		; stk-zero        0
17177+3452 C2           		DB	$C2		; st-mem-2        0
17178+3453
17179+3453              ; a loop is now entered to perform the algebraic calculation for each of
17180+3453              ; the numbers in the series
17181+3453
17182+3453              ;; G-LOOP
17183+3453 31           o3453:		DB	$31		; duplicate       v,v.
17184+3454 E0           		DB	$E0		; get-mem-0       v,v,x+2
17185+3455 04           		DB	$04		; multiply        v,v*x+2
17186+3456 E2           		DB	$E2		; get-mem-2       v,v*x+2,v
17187+3457 C1           		DB	$C1		; st-mem-1
17188+3458 03           		DB	$03		; subtract
17189+3459 38           		DB	$38		; end-calc
17190+345A
17191+345A              ; the previous pointer is fetched from the machine stack to H'L' where it
17192+345A              ; addresses one of the numbers of the series following the series literal.
17193+345A
17194+345A CD C6 33     		CALL	o33C6		; routine STK-DATA is called directly to
17195+345D              					; push a value and advance H'L'.
17196+345D CD 62 33     		CALL	o3362		; routine GEN-ENT-2 recursively re-enters
17197+3460              					; the calculator without disturbing
17198+3460              					; system variable BREG
17199+3460              					; H'L' value goes on the machine stack and is
17200+3460              					; then loaded as usual with the next address.
17201+3460
17202+3460 0F           		DB	$0F		; addition
17203+3461 01           		DB	$01		; exchange
17204+3462 C2           		DB	$C2		; st-mem-2
17205+3463 02           		DB	$02		; delete
17206+3464
17207+3464 35           		DB	$35		; dec-jr-nz
17208+3465 EE           		DB	$EE		; back to o3453, G-LOOP
17209+3466
17210+3466              ; when the counted loop is complete the final subtraction yields the result
17211+3466              ; for example SIN X.
17212+3466
17213+3466 E1           		DB	$E1		; get-mem-1
17214+3467 03           		DB	$03		; subtract
17215+3468 38           		DB	$38		; end-calc
17216+3469
17217+3469 C9           		RET			; return with H'L' pointing to location
17218+346A              					; after last number in series.
17219+346A
17220+346A              ; ---------------------------------
17221+346A              ; THE 'ABSOLUTE MAGNITUDE' FUNCTION
17222+346A              ; ---------------------------------
17223+346A              ; (offset: $2A 'abs')
17224+346A              ;   This calculator literal finds the absolute value of the last value,
17225+346A              ;   integer or floating point, on calculator stack.
17226+346A
17227+346A              ;; abs
17228+346A 06 FF        o346A:		LD	B,$FF		; signal abs
17229+346C 18 06        		JR	o3474		; forward to NEG-TEST
17230+346E
17231+346E              ; ---------------------------
17232+346E              ; THE 'UNARY MINUS' OPERATION
17233+346E              ; ---------------------------
17234+346E              ; (offset: $1B 'negate')
17235+346E              ;   Unary so on entry HL points to last value, DE to STKEND.
17236+346E
17237+346E              ;; NEGATE
17238+346E              ;; negate
17239+346E CD E9 34     o346E:		CALL	o34E9		; call routine TEST-ZERO and
17240+3471 D8           		RET	C		; return if so leaving zero unchanged.
17241+3472
17242+3472 06 00        		LD	B,$00		; signal negate required before joining
17243+3474              					; common code.
17244+3474
17245+3474              ;; NEG-TEST
17246+3474 7E           o3474:		LD	A,(HL)		; load first byte and
17247+3475 A7           		AND	A		; test for zero
17248+3476 28 0B        		JR	Z,o3483		; forward to INT-CASE if a small integer
17249+3478
17250+3478              ; for floating point numbers a single bit denotes the sign.
17251+3478
17252+3478 23           		INC	HL		; address the first byte of mantissa.
17253+3479 78           		LD	A,B		; action flag $FF=abs, $00=neg.
17254+347A E6 80        		AND	$80		; now         $80      $00
17255+347C B6           		OR	(HL)		; sets bit 7 for abs
17256+347D 17           		RLA			; sets carry for abs and if number negative
17257+347E 3F           		CCF			; complement carry flag
17258+347F 1F           		RRA			; and rotate back in altering sign
17259+3480 77           		LD	(HL),A		; put the altered adjusted number back
17260+3481 2B           		DEC	HL		; HL points to result
17261+3482 C9           		RET			; return with DE unchanged
17262+3483
17263+3483              ; ---
17264+3483
17265+3483              ; for integer numbers an entire byte denotes the sign.
17266+3483
17267+3483              ;; INT-CASE
17268+3483 D5           o3483:		PUSH	DE		; save STKEND.
17269+3484
17270+3484 E5           		PUSH	HL		; save pointer to the last value/result.
17271+3485
17272+3485 CD 7F 2D     		CALL	o2D7F		; routine INT-FETCH puts integer in DE
17273+3488              					; and the sign in C.
17274+3488
17275+3488 E1           		POP	HL		; restore the result pointer.
17276+3489
17277+3489 78           		LD	A,B		; $FF=abs, $00=neg
17278+348A B1           		OR	C		; $FF for abs, no change neg
17279+348B 2F           		CPL			; $00 for abs, switched for neg
17280+348C 4F           		LD	C,A		; transfer result to sign byte.
17281+348D
17282+348D CD 8E 2D     		CALL	o2D8E		; routine INT-STORE to re-write the integer.
17283+3490
17284+3490 D1           		POP	DE		; restore STKEND.
17285+3491 C9           		RET			; return.
17286+3492
17287+3492              ; ---------------------
17288+3492              ; THE 'SIGNUM' FUNCTION
17289+3492              ; ---------------------
17290+3492              ; (offset: $29 'sgn')
17291+3492              ;   This routine replaces the last value on the calculator stack,
17292+3492              ;   which may be in floating point or integer form, with the integer values
17293+3492              ;   zero if zero, with one if positive and  with -minus one if negative.
17294+3492
17295+3492              ;; sgn
17296+3492 CD E9 34     o3492:		CALL	o34E9		; call routine TEST-ZERO and
17297+3495 D8           		RET	C		; exit if so as no change is required.
17298+3496
17299+3496 D5           		PUSH	DE		; save pointer to STKEND.
17300+3497
17301+3497 11 01 00     		LD	DE,$0001	; the result will be 1.
17302+349A 23           		INC	HL		; skip over the exponent.
17303+349B CB 16        		RL	(HL)		; rotate the sign bit into the carry flag.
17304+349D 2B           		DEC	HL		; step back to point to the result.
17305+349E 9F           		SBC	A,A		; byte will be $FF if negative, $00 if positive.
17306+349F 4F           		LD	C,A		; store the sign byte in the C register.
17307+34A0 CD 8E 2D     		CALL	o2D8E		; routine INT-STORE to overwrite the last
17308+34A3              					; value with 0001 and sign.
17309+34A3
17310+34A3 D1           		POP	DE		; restore STKEND.
17311+34A4 C9           		RET			; return.
17312+34A5
17313+34A5              ; -----------------
17314+34A5              ; THE 'IN' FUNCTION
17315+34A5              ; -----------------
17316+34A5              ; (offset: $2C 'in')
17317+34A5              ;   This function reads a byte from an input port.
17318+34A5
17319+34A5              ;; in
17320+34A5 CD 99 1E     o34A5:		CALL	o1E99		; Routine FIND-INT2 puts port address in BC.
17321+34A8              					; All 16 bits are put on the address line.
17322+34A8
17323+34A8 ED 78        		IN	A,(C)		; Read the port.
17324+34AA
17325+34AA 18 04        		JR	o34B0		; exit to STACK-A (via IN-PK-STK to save a byte
17326+34AC              					; of instruction code).
17327+34AC
17328+34AC              ; -------------------
17329+34AC              ; THE 'PEEK' FUNCTION
17330+34AC              ; -------------------
17331+34AC              ; (offset: $2B 'peek')
17332+34AC              ;   This function returns the contents of a memory address.
17333+34AC              ;   The entire address space can be peeked including the ROM.
17334+34AC
17335+34AC              ;; peek
17336+34AC CD 99 1E     o34AC:		CALL	o1E99		; routine FIND-INT2 puts address in BC.
17337+34AF 0A           		LD	A,(BC)		; load contents into A register.
17338+34B0
17339+34B0              ;; IN-PK-STK
17340+34B0 C3 28 2D     o34B0:		JP	o2D28		; exit via STACK-A to put the value on the
17341+34B3              					; calculator stack.
17342+34B3
17343+34B3              ; ------------------
17344+34B3              ; THE 'USR' FUNCTION
17345+34B3              ; ------------------
17346+34B3              ; (offset: $2D 'usr-no')
17347+34B3              ;   The USR function followed by a number 0-65535 is the method by which
17348+34B3              ;   the Spectrum invokes machine code programs. This function returns the
17349+34B3              ;   contents of the BC register pair.
17350+34B3              ;   Note. that STACK-BC re-initializes the IY register if a user-written
17351+34B3              ;   program has altered it.
17352+34B3
17353+34B3              ;; usr-no
17354+34B3 CD 99 1E     o34B3:		CALL	o1E99		; routine FIND-INT2 to fetch the
17355+34B6              					; supplied address into BC.
17356+34B6
17357+34B6 21 2B 2D     		LD	HL,o2D2B	; address: STACK-BC is
17358+34B9 E5           		PUSH	HL		; pushed onto the machine stack.
17359+34BA C5           		PUSH	BC		; then the address of the machine code
17360+34BB              					; routine.
17361+34BB
17362+34BB C9           		RET			; make an indirect jump to the routine
17363+34BC              					; and, hopefully, to STACK-BC also.
17364+34BC
17365+34BC              ; -------------------------
17366+34BC              ; THE 'USR STRING' FUNCTION
17367+34BC              ; -------------------------
17368+34BC              ; (offset: $19 'usr-$')
17369+34BC              ;   The user function with a one-character string argument, calculates the
17370+34BC              ;   address of the User Defined Graphic character that is in the string.
17371+34BC              ;   As an alternativo, the ASCII equivalent, upper or lower case,
17372+34BC              ;   may be supplied. This provides a user-friendly method of redefining
17373+34BC              ;   the 21 User Definable Graphics e.g.
17374+34BC              ;   POKE USR "a", BIN 10000000 will put a dot in the top left corner of the
17375+34BC              ;   character 144.
17376+34BC              ;   Note. the curious double check on the range. With 26 UDGs the first check
17377+34BC              ;   only is necessary. With anything less the second check only is required.
17378+34BC              ;   It is highly likely that the first check was written by Steven Vickers.
17379+34BC
17380+34BC              ;; usr-$
17381+34BC CD F1 2B     o34BC:		CALL	o2BF1		; routine STK-FETCH fetches the string
17382+34BF              					; parameters.
17383+34BF 0B           		DEC	BC		; decrease BC by
17384+34C0 78           		LD	A,B		; one to test
17385+34C1 B1           		OR	C		; the length.
17386+34C2 20 23        		JR	NZ,o34E7	; to REPORT-A if not a single character.
17387+34C4
17388+34C4 1A           		LD	A,(DE)		; fetch the character
17389+34C5 CD 8D 2C     		CALL	o2C8D		; routine ALPHA sets carry if 'A-Z' or 'a-z'.
17390+34C8 38 09        		JR	C,o34D3		; forward to USR-RANGE if ASCII.
17391+34CA
17392+34CA D6 90        		SUB	$90		; make UDGs range 0-20d
17393+34CC 38 19        		JR	C,o34E7		; to REPORT-A if too low. e.g. usr " ".
17394+34CE
17395+34CE FE 15        		CP	$15		; Note. this test is not necessary.
17396+34D0 30 15        		JR	NC,o34E7	; to REPORT-A if higher than 20.
17397+34D2
17398+34D2 3C           		INC	A		; make range 1-21d to match LSBs of ASCII
17399+34D3
17400+34D3              ;; USR-RANGE
17401+34D3 3D           o34D3:		DEC	A		; make range of bits 0-4 start at zero
17402+34D4 87           		ADD	A,A		; multiply by eight
17403+34D5 87           		ADD	A,A		; and lose any set bits
17404+34D6 87           		ADD	A,A		; range now 0 - 25*8
17405+34D7 FE A8        		CP	$A8		; compare to 21*8
17406+34D9 30 0C        		JR	NC,o34E7	; to REPORT-A if originally higher
17407+34DB              					; than 'U','u' or graphics U.
17408+34DB
17409+34DB ED 4B 7B 5C  		LD	BC,(	$5C7B)	; fetch the UDG system variable value.
17410+34DF 81           		ADD	A,C		; add the offset to character
17411+34E0 4F           		LD	C,A		; and store back in register C.
17412+34E1 30 01        		JR	NC,o34E4	; forward to USR-STACK if no overflow.
17413+34E3
17414+34E3 04           		INC	B		; increment high byte.
17415+34E4
17416+34E4              ;; USR-STACK
17417+34E4 C3 2B 2D     o34E4:		JP	o2D2B		; jump back and exit via STACK-BC to store
17418+34E7
17419+34E7              ; ---
17420+34E7
17421+34E7              ;; REPORT-A
17422+34E7 CF           o34E7:		RST	08H		; ERROR-1
17423+34E8 09           		DB	$09		; Error Report: Invalid argument
17424+34E9
17425+34E9              ; ------------------------------
17426+34E9              ; THE 'TEST FOR ZERO' SUBROUTINE
17427+34E9              ; ------------------------------
17428+34E9              ;   Test if top value on calculator stack is zero.  The carry flag is set if
17429+34E9              ;   the last value is zero but no registers are altered.
17430+34E9              ;   All five bytes will be zero but first four only need be tested.
17431+34E9              ;   On entry, HL points to the exponent the first byte of the value.
17432+34E9
17433+34E9              ;; TEST-ZERO
17434+34E9 E5           o34E9:		PUSH	HL		; preserve HL which is used to address.
17435+34EA C5           		PUSH	BC		; preserve BC which is used as a store.
17436+34EB 47           		LD	B,A		; preserve A in B.
17437+34EC
17438+34EC 7E           		LD	A,(HL)		; load first byte to accumulator
17439+34ED 23           		INC	HL		; advance.
17440+34EE B6           		OR	(HL)		; OR with second byte and clear carry.
17441+34EF 23           		INC	HL		; advance.
17442+34F0 B6           		OR	(HL)		; OR with third byte.
17443+34F1 23           		INC	HL		; advance.
17444+34F2 B6           		OR	(HL)		; OR with fourth byte.
17445+34F3
17446+34F3 78           		LD	A,B		; restore A without affecting flags.
17447+34F4 C1           		POP	BC		; restore the saved
17448+34F5 E1           		POP	HL		; registers.
17449+34F6
17450+34F6 C0           		RET	NZ		; return if not zero and with carry reset.
17451+34F7
17452+34F7 37           		SCF			; set the carry flag.
17453+34F8 C9           		RET			; return with carry set if zero.
17454+34F9
17455+34F9              ; --------------------------------
17456+34F9              ; THE 'GREATER THAN ZERO' OPERATOR
17457+34F9              ; --------------------------------
17458+34F9              ; (offset: $37 'greater-0' )
17459+34F9              ;   Test if the last value on the calculator stack is greater than zero.
17460+34F9              ;   This routine is also called directly from the end-tests of the comparison
17461+34F9              ;   routine.
17462+34F9
17463+34F9              ;; GREATER-0
17464+34F9              ;; greater-0
17465+34F9 CD E9 34     o34F9:		CALL	o34E9		; routine TEST-ZERO
17466+34FC D8           		RET	C		; return if was zero as this
17467+34FD              					; is also the Boolean 'false' value.
17468+34FD
17469+34FD 3E FF        		LD	A,$FF		; prepare XOR mask for sign bit
17470+34FF 18 06        		JR	o3507		; forward to SIGN-TO-C
17471+3501              					; to put sign in carry
17472+3501              					; (carry will become set if sign is positive)
17473+3501              					; and then overwrite location with 1 or 0
17474+3501              					; as appropriate.
17475+3501
17476+3501              ; ------------------
17477+3501              ; THE 'NOT' FUNCTION
17478+3501              ; ------------------
17479+3501              ; (offset: $30 'not')
17480+3501              ;   This overwrites the last value with 1 if it was zero else with zero
17481+3501              ;   if it was any other value.
17482+3501              ;
17483+3501              ;   e.g. NOT 0 returns 1, NOT 1 returns 0, NOT -3 returns 0.
17484+3501              ;
17485+3501              ;   The subroutine is also called directly from the end-tests of the comparison
17486+3501              ;   operator.
17487+3501
17488+3501              ;; NOT
17489+3501              ;; not
17490+3501 CD E9 34     o3501:		CALL	o34E9		; routine TEST-ZERO sets carry if zero
17491+3504
17492+3504 18 05        		JR	o350B		; to FP-0/1 to overwrite operand with
17493+3506              					; 1 if carry is set else to overwrite with zero.
17494+3506
17495+3506              ; ------------------------------
17496+3506              ; THE 'LESS THAN ZERO' OPERATION
17497+3506              ; ------------------------------
17498+3506              ; (offset: $36 'less-0' )
17499+3506              ;   Destructively test if last value on calculator stack is less than zero.
17500+3506              ;   Bit 7 of second byte will be set if so.
17501+3506
17502+3506              ;; less-0
17503+3506 AF           o3506:		XOR	A		; set XOR mask to zero
17504+3507              					; (carry will become set if sign is negative).
17505+3507
17506+3507              ;   transfer sign of mantissa to Carry Flag.
17507+3507
17508+3507              ;; SIGN-TO-C
17509+3507 23           o3507:		INC	HL		; address 2nd byte.
17510+3508 AE           		XOR	(HL)		; bit 7 of HL will be set if number is negative.
17511+3509 2B           		DEC	HL		; address 1st byte again.
17512+350A 07           		RLCA			; rotate bit 7 of A to carry.
17513+350B
17514+350B              ; ----------------------------
17515+350B              ; THE 'ZERO OR ONE' SUBROUTINE
17516+350B              ; ----------------------------
17517+350B              ;   This routine places an integer value of zero or one at the addressed
17518+350B              ;   location of the calculator stack or MEM area.  The value one is written if
17519+350B              ;   carry is set on entry else zero.
17520+350B
17521+350B              ;; FP-0/1
17522+350B E5           o350B:		PUSH	HL		; save pointer to the first byte
17523+350C 3E 00        		LD	A,$00		; load accumulator with zero - without
17524+350E              					; disturbing flags.
17525+350E 77           		LD	(HL),A		; zero to first byte
17526+350F 23           		INC	HL		; address next
17527+3510 77           		LD	(HL),A		; zero to 2nd byte
17528+3511 23           		INC	HL		; address low byte of integer
17529+3512 17           		RLA			; carry to bit 0 of A
17530+3513 77           		LD	(HL),A		; load one or zero to low byte.
17531+3514 1F           		RRA			; restore zero to accumulator.
17532+3515 23           		INC	HL		; address high byte of integer.
17533+3516 77           		LD	(HL),A		; put a zero there.
17534+3517 23           		INC	HL		; address fifth byte.
17535+3518 77           		LD	(HL),A		; put a zero there.
17536+3519 E1           		POP	HL		; restore pointer to the first byte.
17537+351A C9           		RET			; return.
17538+351B
17539+351B              ; -----------------
17540+351B              ; THE 'OR' OPERATOR
17541+351B              ; -----------------
17542+351B              ; (offset: $07 'or' )
17543+351B              ; The Boolean OR operator. e.g. X OR Y
17544+351B              ; The result is zero if both values are zero else a non-zero value.
17545+351B              ;
17546+351B              ; e.g.    0 OR 0  returns 0.
17547+351B              ;        -3 OR 0  returns -3.
17548+351B              ;         0 OR -3 returns 1.
17549+351B              ;        -3 OR 2  returns 1.
17550+351B              ;
17551+351B              ; A binary operation.
17552+351B              ; On entry HL points to first operand (X) and DE to second operand (Y).
17553+351B
17554+351B              ;; or
17555+351B EB           o351B:		EX	DE,HL		; make HL point to second number
17556+351C CD E9 34     		CALL	o34E9		; routine TEST-ZERO
17557+351F EB           		EX	DE,HL		; restore pointers
17558+3520 D8           		RET	C		; return if result was zero - first operand,
17559+3521              					; now the last value, is the result.
17560+3521
17561+3521 37           		SCF			; set carry flag
17562+3522 18 E7        		JR	o350B		; back to FP-0/1 to overwrite the first operand
17563+3524              					; with the value 1.
17564+3524
17565+3524
17566+3524              ; ---------------------------------
17567+3524              ; THE 'NUMBER AND NUMBER' OPERATION
17568+3524              ; ---------------------------------
17569+3524              ; (offset: $08 'no-&-no')
17570+3524              ;   The Boolean AND operator.
17571+3524              ;
17572+3524              ;   e.g.    -3 AND 2  returns -3.
17573+3524              ;           -3 AND 0  returns 0.
17574+3524              ;            0 and -2 returns 0.
17575+3524              ;            0 and 0  returns 0.
17576+3524              ;
17577+3524              ;   Compare with OR routine above.
17578+3524
17579+3524              ;; no-&-no
17580+3524 EB           o3524:		EX	DE,HL		; make HL address second operand.
17581+3525
17582+3525 CD E9 34     		CALL	o34E9		; routine TEST-ZERO sets carry if zero.
17583+3528
17584+3528 EB           		EX	DE,HL		; restore pointers.
17585+3529 D0           		RET	NC		; return if second non-zero, first is result.
17586+352A
17587+352A              ;
17588+352A
17589+352A A7           		AND	A		; else clear carry.
17590+352B 18 DE        		JR	o350B		; back to FP-0/1 to overwrite first operand
17591+352D              					; with zero for return value.
17592+352D
17593+352D              ; ---------------------------------
17594+352D              ; THE 'STRING AND NUMBER' OPERATION
17595+352D              ; ---------------------------------
17596+352D              ; (offset: $10 'str-&-no')
17597+352D              ;   e.g. "You Win" AND score>99 will return the string if condition is true
17598+352D              ;   or the null string if false.
17599+352D
17600+352D              ;; str-&-no
17601+352D EB           o352D:		EX	DE,HL		; make HL point to the number.
17602+352E CD E9 34     		CALL	o34E9		; routine TEST-ZERO.
17603+3531 EB           		EX	DE,HL		; restore pointers.
17604+3532 D0           		RET	NC		; return if number was not zero - the string
17605+3533              					; is the result.
17606+3533
17607+3533              ;   if the number was zero (false) then the null string must be returned by
17608+3533              ;   altering the length of the string on the calculator stack to zero.
17609+3533
17610+3533 D5           		PUSH	DE		; save pointer to the now obsolete number
17611+3534              					; (which will become the new STKEND)
17612+3534
17613+3534 1B           		DEC	DE		; point to the 5th byte of string descriptor.
17614+3535 AF           		XOR	A		; clear the accumulator.
17615+3536 12           		LD	(DE),A		; place zero in high byte of length.
17616+3537 1B           		DEC	DE		; address low byte of length.
17617+3538 12           		LD	(DE),A		; place zero there - now the null string.
17618+3539
17619+3539 D1           		POP	DE		; restore pointer - new STKEND.
17620+353A C9           		RET			; return.
17621+353B
17622+353B              ; ---------------------------
17623+353B              ; THE 'COMPARISON' OPERATIONS
17624+353B              ; ---------------------------
17625+353B              ; (offset: $0A 'no-gr-eql')
17626+353B              ; (offset: $0B 'nos-neql')
17627+353B              ; (offset: $0C 'no-grtr')
17628+353B              ; (offset: $0D 'no-less')
17629+353B              ; (offset: $0E 'nos-eql')
17630+353B              ; (offset: $11 'str-l-eql')
17631+353B              ; (offset: $12 'str-gr-eql')
17632+353B              ; (offset: $13 'strs-neql')
17633+353B              ; (offset: $14 'str-grtr')
17634+353B              ; (offset: $15 'str-less')
17635+353B              ; (offset: $16 'strs-eql')
17636+353B
17637+353B              ;   True binary operations.
17638+353B              ;   A single entry point is used to evaluate six numeric and six string
17639+353B              ;   comparisons. On entry, the calculator literal is in the B register and
17640+353B              ;   the two numeric values, or the two string parameters, are on the
17641+353B              ;   calculator stack.
17642+353B              ;   The individual bits of the literal are manipulated to group similar
17643+353B              ;   operations although the SUB 8 instruction does nothing useful and merely
17644+353B              ;   alters the string test bit.
17645+353B              ;   Numbers are compared by subtracting one from the other, strings are
17646+353B              ;   compared by comparing every character until a mismatch, or the end of one
17647+353B              ;   or both, is reached.
17648+353B              ;
17649+353B              ;   Numeric Comparisons.
17650+353B              ;   --------------------
17651+353B              ;   The 'x>y' example is the easiest as it employs straight-thru logic.
17652+353B              ;   Number y is subtracted from x and the result tested for greater-0 yielding
17653+353B              ;   a final value 1 (true) or 0 (false).
17654+353B              ;   For 'x<y' the same logic is used but the two values are first swapped on the
17655+353B              ;   calculator stack.
17656+353B              ;   For 'x=y' NOT is applied to the subtraction result yielding true if the
17657+353B              ;   difference was zero and false with anything else.
17658+353B              ;   The first three numeric comparisons are just the opposite of the last three
17659+353B              ;   so the same processing steps are used and then a final NOT is applied.
17660+353B              ;
17661+353B              ; literal    Test   No  sub 8       ExOrNot  1st RRCA  exch sub  ?   End-Tests
17662+353B              ; =========  ====   == ======== === ======== ========  ==== ===  =  === === ===
17663+353B              ; no-l-eql   x<=y   09 00000001 dec 00000000 00000000  ---- x-y  ?  --- >0? NOT
17664+353B              ; no-gr-eql  x>=y   0A 00000010 dec 00000001 10000000c swap y-x  ?  --- >0? NOT
17665+353B              ; nos-neql   x<>y   0B 00000011 dec 00000010 00000001  ---- x-y  ?  NOT --- NOT
17666+353B              ; no-grtr    x>y    0C 00000100  -  00000100 00000010  ---- x-y  ?  --- >0? ---
17667+353B              ; no-less    x<y    0D 00000101  -  00000101 10000010c swap y-x  ?  --- >0? ---
17668+353B              ; nos-eql    x=y    0E 00000110  -  00000110 00000011  ---- x-y  ?  NOT --- ---
17669+353B              ;
17670+353B              ;                                                           comp -> C/F
17671+353B              ;                                                           ====    ===
17672+353B              ; str-l-eql  x$<=y$ 11 00001001 dec 00001000 00000100  ---- x$y$ 0  !or >0? NOT
17673+353B              ; str-gr-eql x$>=y$ 12 00001010 dec 00001001 10000100c swap y$x$ 0  !or >0? NOT
17674+353B              ; strs-neql  x$<>y$ 13 00001011 dec 00001010 00000101  ---- x$y$ 0  !or >0? NOT
17675+353B              ; str-grtr   x$>y$  14 00001100  -  00001100 00000110  ---- x$y$ 0  !or >0? ---
17676+353B              ; str-less   x$<y$  15 00001101  -  00001101 10000110c swap y$x$ 0  !or >0? ---
17677+353B              ; strs-eql   x$=y$  16 00001110  -  00001110 00000111  ---- x$y$ 0  !or >0? ---
17678+353B              ;
17679+353B              ;   String comparisons are a little different in that the eql/neql carry flag
17680+353B              ;   from the 2nd RRCA is, as before, fed into the first of the end tests but
17681+353B              ;   along the way it gets modified by the comparison process. The result on the
17682+353B              ;   stack always starts off as zero and the carry fed in determines if NOT is
17683+353B              ;   applied to it. So the only time the greater-0 test is applied is if the
17684+353B              ;   stack holds zero which is not very efficient as the test will always yield
17685+353B              ;   zero. The most likely explanation is that there were once separate end tests
17686+353B              ;   for numbers and strings.
17687+353B
17688+353B              ;; no-l-eql,etc.
17689+353B 78           o353B:		LD	A,B		; transfer literal to accumulator.
17690+353C D6 08        		SUB	$08		; subtract eight - which is not useful.
17691+353E
17692+353E CB 57        		BIT	2,A		; isolate ">", "<", "=".
17693+3540
17694+3540 20 01        		JR	NZ,o3543	; skip to EX-OR-NOT with these.
17695+3542
17696+3542 3D           		DEC	A		; else make $00-$02, $08-$0A to match bits 0-2.
17697+3543
17698+3543              ;; EX-OR-NOT
17699+3543 0F           o3543:		RRCA
17700+3544 30 08        		JR	NC,o354E	; forward to NU-OR-STR with other 8 cases
17701+3546
17702+3546              ; for the other 4 cases the two values on the calculator stack are exchanged.
17703+3546
17704+3546 F5           		PUSH	AF		; save A and carry.
17705+3547 E5           		PUSH	HL		; save HL - pointer to first operand.
17706+3548              					; (DE points to second operand).
17707+3548
17708+3548 CD 3C 34     		CALL	o343C		; routine exchange swaps the two values.
17709+354B              					; (HL = second operand, DE = STKEND)
17710+354B
17711+354B D1           		POP	DE		; DE = first operand
17712+354C EB           		EX	DE,HL		; as we were.
17713+354D F1           		POP	AF		; restore A and carry.
17714+354E
17715+354E              ; Note. it would be better if the 2nd RRCA preceded the string test.
17716+354E              ; It would save two duplicate bytes and if we also got rid of that sub 8
17717+354E              ; at the beginning we wouldn't have to alter which bit we test.
17718+354E
17719+354E              ;; NU-OR-STR
17720+354E CB 57        o354E:		BIT	2,A		; test if a string comparison.
17721+3550 20 07        		JR	NZ,o3559	; forward to STRINGS if so.
17722+3552
17723+3552              ; continue with numeric comparisons.
17724+3552
17725+3552 0F           		RRCA			; 2nd RRCA causes eql/neql to set carry.
17726+3553 F5           		PUSH	AF		; save A and carry
17727+3554
17728+3554 CD 0F 30     		CALL	o300F		; routine subtract leaves result on stack.
17729+3557 18 33        		JR	o358C		; forward to END-TESTS
17730+3559
17731+3559              ; ---
17732+3559
17733+3559              ;; STRINGS
17734+3559 0F           o3559:		RRCA
17735+355A F5           		PUSH	AF		; save A and carry.
17736+355B
17737+355B CD F1 2B     		CALL	o2BF1		; routine STK-FETCH gets 2nd string params
17738+355E D5           		PUSH	DE		; save start2 *.
17739+355F C5           		PUSH	BC		; and the length.
17740+3560
17741+3560 CD F1 2B     		CALL	o2BF1		; routine STK-FETCH gets 1st string
17742+3563              					; parameters - start in DE, length in BC.
17743+3563 E1           		POP	HL		; restore length of second to HL.
17744+3564
17745+3564              ; A loop is now entered to compare, by subtraction, each corresponding character
17746+3564              ; of the strings. For each successful match, the pointers are incremented and
17747+3564              ; the lengths decreased and the branch taken back to here. If both string
17748+3564              ; remainders become null at the same time, then an exact match exists.
17749+3564
17750+3564              ;; BYTE-COMP
17751+3564 7C           o3564:		LD	A,H		; test if the second string
17752+3565 B5           		OR	L		; is the null string and hold flags.
17753+3566
17754+3566 E3           		EX	(SP),HL		; put length2 on stack, bring start2 to HL *.
17755+3567 78           		LD	A,B		; hi byte of length1 to A
17756+3568
17757+3568 20 0B        		JR	NZ,o3575	; forward to SEC-PLUS if second not null.
17758+356A
17759+356A B1           		OR	C		; test length of first string.
17760+356B
17761+356B              ;; SECND-LOW
17762+356B C1           o356B:		POP	BC		; pop the second length off stack.
17763+356C 28 04        		JR	Z,o3572		; forward to BOTH-NULL if first string is also
17764+356E              					; of zero length.
17765+356E
17766+356E              ; the true condition - first is longer than second (SECND-LESS)
17767+356E
17768+356E F1           		POP	AF		; restore carry (set if eql/neql)
17769+356F 3F           		CCF			; complement carry flag.
17770+3570              					; Note. equality becomes false.
17771+3570              					; Inequality is true. By swapping or applying
17772+3570              					; a terminal 'not', all comparisons have been
17773+3570              					; manipulated so that this is success path.
17774+3570 18 16        		JR	o3588		; forward to leave via STR-TEST
17775+3572
17776+3572              ; ---
17777+3572              ; the branch was here with a match
17778+3572
17779+3572              ;; BOTH-NULL
17780+3572 F1           o3572:		POP	AF		; restore carry - set for eql/neql
17781+3573 18 13        		JR	o3588		; forward to STR-TEST
17782+3575
17783+3575              ; ---
17784+3575              ; the branch was here when 2nd string not null and low byte of first is yet
17785+3575              ; to be tested.
17786+3575
17787+3575
17788+3575              ;; SEC-PLUS
17789+3575 B1           o3575:		OR	C		; test the length of first string.
17790+3576 28 0D        		JR	Z,o3585		; forward to FRST-LESS if length is zero.
17791+3578
17792+3578              ; both strings have at least one character left.
17793+3578
17794+3578 1A           		LD	A,(DE)		; fetch character of first string.
17795+3579 96           		SUB	(HL)		; subtract with that of 2nd string.
17796+357A 38 09        		JR	C,o3585		; forward to FRST-LESS if carry set
17797+357C
17798+357C 20 ED        		JR	NZ,o356B	; back to SECND-LOW and then STR-TEST
17799+357E              					; if not exact match.
17800+357E
17801+357E 0B           		DEC	BC		; decrease length of 1st string.
17802+357F 13           		INC	DE		; increment 1st string pointer.
17803+3580
17804+3580 23           		INC	HL		; increment 2nd string pointer.
17805+3581 E3           		EX	(SP),HL		; swap with length on stack
17806+3582 2B           		DEC	HL		; decrement 2nd string length
17807+3583 18 DF        		JR	o3564		; back to BYTE-COMP
17808+3585
17809+3585              ; ---
17810+3585              ; the false condition.
17811+3585
17812+3585              ;; FRST-LESS
17813+3585 C1           o3585:		POP	BC		; discard length
17814+3586 F1           		POP	AF		; pop A
17815+3587 A7           		AND	A		; clear the carry for false result.
17816+3588
17817+3588              ; ---
17818+3588              ; exact match and x$>y$ rejoin here
17819+3588
17820+3588              ;; STR-TEST
17821+3588 F5           o3588:		PUSH	AF		; save A and carry
17822+3589
17823+3589 EF           		RST	28H		; FP-CALC
17824+358A A0           		DB	$A0		; stk-zero      an initial false value.
17825+358B 38           		DB	$38		; end-calc
17826+358C
17827+358C              ; both numeric and string paths converge here.
17828+358C
17829+358C              ;; END-TESTS
17830+358C F1           o358C:		POP	AF		; pop carry  - will be set if eql/neql
17831+358D F5           		PUSH	AF		; save it again.
17832+358E
17833+358E DC 01 35     		CALL	C,o3501		; routine NOT sets true(1) if equal(0)
17834+3591              					; or, for strings, applies true result.
17835+3591
17836+3591 F1           		POP	AF		; pop carry and
17837+3592 F5           		PUSH	AF		; save A
17838+3593
17839+3593 D4 F9 34     		CALL	NC,o34F9	; routine GREATER-0 tests numeric subtraction
17840+3596              					; result but also needlessly tests the string
17841+3596              					; value for zero - it must be.
17842+3596
17843+3596 F1           		POP	AF		; pop A
17844+3597 0F           		RRCA			; the third RRCA - test for '<=', '>=' or '<>'.
17845+3598 D4 01 35     		CALL	NC,o3501	; apply a terminal NOT if so.
17846+359B C9           		RET			; return.
17847+359C
17848+359C              ; ------------------------------------
17849+359C              ; THE 'STRING CONCATENATION' OPERATION
17850+359C              ; ------------------------------------
17851+359C              ; (offset: $17 'strs-add')
17852+359C              ;   This literal combines two strings into one e.g. LET a$ = b$ + c$
17853+359C              ;   The two parameters of the two strings to be combined are on the stack.
17854+359C
17855+359C              ;; strs-add
17856+359C CD F1 2B     o359C:		CALL	o2BF1		; routine STK-FETCH fetches string parameters
17857+359F              					; and deletes calculator stack entry.
17858+359F D5           		PUSH	DE		; save start address.
17859+35A0 C5           		PUSH	BC		; and length.
17860+35A1
17861+35A1 CD F1 2B     		CALL	o2BF1		; routine STK-FETCH for first string
17862+35A4 E1           		POP	HL		; re-fetch first length
17863+35A5 E5           		PUSH	HL		; and save again
17864+35A6 D5           		PUSH	DE		; save start of second string
17865+35A7 C5           		PUSH	BC		; and its length.
17866+35A8
17867+35A8 09           		ADD	HL,BC		; add the two lengths.
17868+35A9 44           		LD	B,H		; transfer to BC
17869+35AA 4D           		LD	C,L		; and create
17870+35AB F7           		RST	30H		; BC-SPACES in workspace.
17871+35AC              					; DE points to start of space.
17872+35AC
17873+35AC CD B2 2A     		CALL	o2AB2		; routine STK-STO-$ stores parameters
17874+35AF              					; of new string updating STKEND.
17875+35AF
17876+35AF C1           		POP	BC		; length of first
17877+35B0 E1           		POP	HL		; address of start
17878+35B1 78           		LD	A,B		; test for
17879+35B2 B1           		OR	C		; zero length.
17880+35B3 28 02        		JR	Z,o35B7		; to OTHER-STR if null string
17881+35B5
17882+35B5 ED B0        		LDIR			; copy string to workspace.
17883+35B7
17884+35B7              ;; OTHER-STR
17885+35B7 C1           o35B7:		POP	BC		; now second length
17886+35B8 E1           		POP	HL		; and start of string
17887+35B9 78           		LD	A,B		; test this one
17888+35BA B1           		OR	C		; for zero length
17889+35BB 28 02        		JR	Z,o35BF		; skip forward to STK-PNTRS if so as complete.
17890+35BD
17891+35BD ED B0        		LDIR			; else copy the bytes.
17892+35BF              					; and continue into next routine which
17893+35BF              					; sets the calculator stack pointers.
17894+35BF
17895+35BF              ; -----------------------------------
17896+35BF              ; THE 'SET STACK POINTERS' SUBROUTINE
17897+35BF              ; -----------------------------------
17898+35BF              ;   Register DE is set to STKEND and HL, the result pointer, is set to five
17899+35BF              ;   locations below this.
17900+35BF              ;   This routine is used when it is inconvenient to save these values at the
17901+35BF              ;   time the calculator stack is manipulated due to other activity on the
17902+35BF              ;   machine stack.
17903+35BF              ;   This routine is also used to terminate the VAL and READ-IN  routines for
17904+35BF              ;   the same reason and to initialize the calculator stack at the start of
17905+35BF              ;   the CALCULATE routine.
17906+35BF
17907+35BF              ;; STK-PNTRS
17908+35BF 2A 65 5C     o35BF:		LD	HL,(	$5C65)	; fetch STKEND value from system variable.
17909+35C2 11 FB FF     		LD	DE,$FFFB	; the value -5
17910+35C5 E5           		PUSH	HL		; push STKEND value.
17911+35C6
17912+35C6 19           		ADD	HL,DE		; subtract 5 from HL.
17913+35C7
17914+35C7 D1           		POP	DE		; pop STKEND to DE.
17915+35C8 C9           		RET			; return.
17916+35C9
17917+35C9              ; -------------------
17918+35C9              ; THE 'CHR$' FUNCTION
17919+35C9              ; -------------------
17920+35C9              ; (offset: $2F 'chr$')
17921+35C9              ;   This function returns a single character string that is a result of
17922+35C9              ;   converting a number in the range 0-255 to a string e.g. CHR$ 65 = "A".
17923+35C9
17924+35C9              ;; chrs
17925+35C9 CD D5 2D     o35C9:		CALL	o2DD5		; routine FP-TO-A puts the number in A.
17926+35CC
17927+35CC 38 0E        		JR	C,o35DC		; forward to REPORT-Bd if overflow
17928+35CE 20 0C        		JR	NZ,o35DC	; forward to REPORT-Bd if negative
17929+35D0
17930+35D0 F5           		PUSH	AF		; save the argument.
17931+35D1
17932+35D1 01 01 00     		LD	BC,$0001	; one space required.
17933+35D4 F7           		RST	30H		; BC-SPACES makes DE point to start
17934+35D5
17935+35D5 F1           		POP	AF		; restore the number.
17936+35D6
17937+35D6 12           		LD	(DE),A		; and store in workspace
17938+35D7
17939+35D7 CD B2 2A     		CALL	o2AB2		; routine STK-STO-$ stacks descriptor.
17940+35DA
17941+35DA EB           		EX	DE,HL		; make HL point to result and DE to STKEND.
17942+35DB C9           		RET			; return.
17943+35DC
17944+35DC              ; ---
17945+35DC
17946+35DC              ;; REPORT-Bd
17947+35DC CF           o35DC:		RST	08H		; ERROR-1
17948+35DD 0A           		DB	$0A		; Error Report: Integer out of range
17949+35DE
17950+35DE              ; ----------------------------
17951+35DE              ; THE 'VAL and VAL$' FUNCTIONS
17952+35DE              ; ----------------------------
17953+35DE              ; (offset: $1D 'val')
17954+35DE              ; (offset: $18 'val$')
17955+35DE              ;   VAL treats the characters in a string as a numeric expression.
17956+35DE              ;   e.g. VAL "2.3" = 2.3, VAL "2+4" = 6, VAL ("2" + "4") = 24.
17957+35DE              ;   VAL$ treats the characters in a string as a string expression.
17958+35DE              ;   e.g. VAL$ (z$+"(2)") = a$(2) if z$ happens to be "a$".
17959+35DE
17960+35DE              ;; val
17961+35DE              ;; val$
17962+35DE 2A 5D 5C     o35DE:		LD	HL,(	$5C5D)	; fetch value of system variable CH_ADD
17963+35E1 E5           		PUSH	HL		; and save on the machine stack.
17964+35E2 78           		LD	A,B		; fetch the literal (either $1D or $18).
17965+35E3 C6 E3        		ADD	A,$E3		; add $E3 to form $00 (setting carry) or $FB.
17966+35E5 9F           		SBC	A,A		; now form $FF bit 6 = numeric result
17967+35E6              					; or $00 bit 6 = string result.
17968+35E6 F5           		PUSH	AF		; save this mask on the stack
17969+35E7
17970+35E7 CD F1 2B     		CALL	o2BF1		; routine STK-FETCH fetches the string operand
17971+35EA              					; from calculator stack.
17972+35EA
17973+35EA D5           		PUSH	DE		; save the address of the start of the string.
17974+35EB 03           		INC	BC		; increment the length for a carriage return.
17975+35EC
17976+35EC F7           		RST	30H		; BC-SPACES creates the space in workspace.
17977+35ED E1           		POP	HL		; restore start of string to HL.
17978+35EE ED 53 5D 5C  		LD	(	$5C5D),DE	; load CH_ADD with start DE in workspace.
17979+35F2
17980+35F2 D5           		PUSH	DE		; save the start in workspace
17981+35F3 ED B0        		LDIR			; copy string from program or variables or
17982+35F5              					; workspace to the workspace area.
17983+35F5 EB           		EX	DE,HL		; end of string + 1 to HL
17984+35F6 2B           		DEC	HL		; decrement HL to point to end of new area.
17985+35F7 36 0D        		LD	(HL),$0D	; insert a carriage return at end.
17986+35F9 FD CB 01 BE  		RES	7,(IY+$01)	; update FLAGS  - signal checking syntax.
17987+35FD CD FB 24     		CALL	o24FB		; routine SCANNING evaluates string
17988+3600              					; expression and result.
17989+3600
17990+3600 DF           		RST	18H		; GET-CHAR fetches next character.
17991+3601 FE 0D        		CP	$0D		; is it the expected carriage return ?
17992+3603 20 07        		JR	NZ,o360C	; forward to V-RPORT-C if not
17993+3605              					; 'Nonsense in BASIC'.
17994+3605
17995+3605 E1           		POP	HL		; restore start of string in workspace.
17996+3606 F1           		POP	AF		; restore expected result flag (bit 6).
17997+3607 FD AE 01     		XOR	(IY+$01)	; xor with FLAGS now updated by SCANNING.
17998+360A E6 40        		AND	$40		; test bit 6 - should be zero if result types
17999+360C              					; match.
18000+360C
18001+360C              ;; V-RPORT-C
18002+360C C2 8A 1C     o360C:		JP	NZ,o1C8A	; jump back to REPORT-C with a result mismatch.
18003+360F
18004+360F 22 5D 5C     		LD	(	$5C5D),HL	; set CH_ADD to the start of the string again.
18005+3612 FD CB 01 FE  		SET	7,(IY+$01)	; update FLAGS  - signal running program.
18006+3616 CD FB 24     		CALL	o24FB		; routine SCANNING evaluates the string
18007+3619              					; in full leaving result on calculator stack.
18008+3619
18009+3619 E1           		POP	HL		; restore saved character address in program.
18010+361A 22 5D 5C     		LD	(	$5C5D),HL	; and reset the system variable CH_ADD.
18011+361D
18012+361D 18 A0        		JR	o35BF		; back to exit via STK-PNTRS.
18013+361F              					; resetting the calculator stack pointers
18014+361F              					; HL and DE from STKEND as it wasn't possible
18015+361F              					; to preserve them during this routine.
18016+361F
18017+361F              ; -------------------
18018+361F              ; THE 'STR$' FUNCTION
18019+361F              ; -------------------
18020+361F              ; (offset: $2E 'str$')
18021+361F              ;   This function produces a string comprising the characters that would appear
18022+361F              ;   if the numeric argument were printed.
18023+361F              ;   e.g. STR$ (1/10) produces "0.1".
18024+361F
18025+361F              ;; str$
18026+361F 01 01 00     o361F:		LD	BC,$0001	; create an initial byte in workspace
18027+3622 F7           		RST	30H		; using BC-SPACES restart.
18028+3623
18029+3623 22 5B 5C     		LD	(	$5C5B),HL	; set system variable K_CUR to new location.
18030+3626 E5           		PUSH	HL		; and save start on machine stack also.
18031+3627
18032+3627 2A 51 5C     		LD	HL,(	$5C51)	; fetch value of system variable CURCHL
18033+362A E5           		PUSH	HL		; and save that too.
18034+362B
18035+362B 3E FF        		LD	A,$FF		; select system channel 'R'.
18036+362D CD 01 16     		CALL	o1601		; routine CHAN-OPEN opens it.
18037+3630 CD E3 2D     		CALL	o2DE3		; routine PRINT-FP outputs the number to
18038+3633              					; workspace updating K-CUR.
18039+3633
18040+3633 E1           		POP	HL		; restore current channel.
18041+3634 CD 15 16     		CALL	o1615		; routine CHAN-FLAG resets flags.
18042+3637
18043+3637 D1           		POP	DE		; fetch saved start of string to DE.
18044+3638 2A 5B 5C     		LD	HL,(	$5C5B)	; load HL with end of string from K_CUR.
18045+363B
18046+363B A7           		AND	A		; prepare for true subtraction.
18047+363C ED 52        		SBC	HL,DE		; subtract start from end to give length.
18048+363E 44           		LD	B,H		; transfer the length to
18049+363F 4D           		LD	C,L		; the BC register pair.
18050+3640
18051+3640 CD B2 2A     		CALL	o2AB2		; routine STK-STO-$ stores string parameters
18052+3643              					; on the calculator stack.
18053+3643
18054+3643 EB           		EX	DE,HL		; HL = last value, DE = STKEND.
18055+3644 C9           		RET			; return.
18056+3645
18057+3645              ; ------------------------
18058+3645              ; THE 'READ-IN' SUBROUTINE
18059+3645              ; ------------------------
18060+3645              ; (offset: $1A 'read-in')
18061+3645              ;   This is the calculator literal used by the INKEY$ function when a "#"
18062+3645              ;   is encountered after the keyword.
18063+3645              ;   INKEY$ # does not interact correctly with the keyboard, #0 or #1, and
18064+3645              ;   its uses are for other channels.
18065+3645
18066+3645              ;; read-in
18067+3645 CD 94 1E     o3645:		CALL	o1E94		; routine FIND-INT1 fetches stream to A
18068+3648 FE 10        		CP	$10		; compare with 16 decimal.
18069+364A D2 9F 1E     		JP	NC,o1E9F	; JUMP to REPORT-Bb if not in range 0 - 15.
18070+364D              					; 'Integer out of range'
18071+364D              					; (REPORT-Bd is within range)
18072+364D
18073+364D 2A 51 5C     		LD	HL,(	$5C51)	; fetch current channel CURCHL
18074+3650 E5           		PUSH	HL		; save it
18075+3651
18076+3651 CD 01 16     		CALL	o1601		; routine CHAN-OPEN opens channel
18077+3654
18078+3654 CD E6 15     		CALL	o15E6		; routine INPUT-AD - the channel must have an
18079+3657              					; input stream or else error here from stream
18080+3657              					; stub.
18081+3657 01 00 00     		LD	BC,$0000	; initialize length of string to zero
18082+365A 30 03        		JR	NC,o365F	; forward to R-I-STORE if no key detected.
18083+365C
18084+365C 0C           		INC	C		; increase length to one.
18085+365D
18086+365D F7           		RST	30H		; BC-SPACES creates space for one character
18087+365E              					; in workspace.
18088+365E 12           		LD	(DE),A		; the character is inserted.
18089+365F
18090+365F              ;; R-I-STORE
18091+365F CD B2 2A     o365F:		CALL	o2AB2		; routine STK-STO-$ stacks the string
18092+3662              					; parameters.
18093+3662 E1           		POP	HL		; restore current channel address
18094+3663
18095+3663 CD 15 16     		CALL	o1615		; routine CHAN-FLAG resets current channel
18096+3666              					; system variable and flags.
18097+3666
18098+3666 C3 BF 35     		JP	o35BF		; jump back to STK-PNTRS
18099+3669
18100+3669              ; -------------------
18101+3669              ; THE 'CODE' FUNCTION
18102+3669              ; -------------------
18103+3669              ; (offset: $1C 'code')
18104+3669              ;   Returns the ASCII code of a character or first character of a string
18105+3669              ;   e.g. CODE "Aardvark" = 65, CODE "" = 0.
18106+3669
18107+3669              ;; code
18108+3669 CD F1 2B     o3669:		CALL	o2BF1		; routine STK-FETCH to fetch and delete the
18109+366C              					; string parameters.
18110+366C              					; DE points to the start, BC holds the length.
18111+366C
18112+366C 78           		LD	A,B		; test length
18113+366D B1           		OR	C		; of the string.
18114+366E 28 01        		JR	Z,o3671		; skip to STK-CODE with zero if the null string.
18115+3670
18116+3670 1A           		LD	A,(DE)		; else fetch the first character.
18117+3671
18118+3671              ;; STK-CODE
18119+3671 C3 28 2D     o3671:		JP	o2D28		; jump back to STACK-A (with memory check)
18120+3674
18121+3674              ; ------------------
18122+3674              ; THE 'LEN' FUNCTION
18123+3674              ; ------------------
18124+3674              ; (offset: $1E 'len')
18125+3674              ;   Returns the length of a string.
18126+3674              ;   In Sinclair BASIC strings can be more than twenty thousand characters long
18127+3674              ;   so a sixteen-bit register is required to store the length
18128+3674
18129+3674              ;; len
18130+3674 CD F1 2B     o3674:		CALL	o2BF1		; Routine STK-FETCH to fetch and delete the
18131+3677              					; string parameters from the calculator stack.
18132+3677              					; Register BC now holds the length of string.
18133+3677
18134+3677 C3 2B 2D     		JP	o2D2B		; Jump back to STACK-BC to save result on the
18135+367A              					; calculator stack (with memory check).
18136+367A
18137+367A              ; -------------------------------------
18138+367A              ; THE 'DECREASE THE COUNTER' SUBROUTINE
18139+367A              ; -------------------------------------
18140+367A              ; (offset: $35 'dec-jr-nz')
18141+367A              ;   The calculator has an instruction that decrements a single-byte
18142+367A              ;   pseudo-register and makes consequential relative jumps just like
18143+367A              ;   the Z80's DJNZ instruction.
18144+367A
18145+367A              ;; dec-jr-nz
18146+367A D9           o367A:		EXX
18147+367B
18148+367B E5           		PUSH	HL		; save pointer to offset byte
18149+367C 21 67 5C     		LD	HL,	$5C67		; address BREG in system variables
18150+367F 35           		DEC	(HL)		; decrement it
18151+3680 E1           		POP	HL		; restore pointer
18152+3681
18153+3681 20 04        		JR	NZ,o3687	; to JUMP-2 if not zero
18154+3683
18155+3683 23           		INC	HL		; step past the jump length.
18156+3684 D9           		EXX			; switch in the main set.
18157+3685 C9           		RET			; return.
18158+3686
18159+3686              ; Note. as a general rule the calculator avoids using the IY register
18160+3686              ; otherwise the cumbersome 4 instructions in the middle could be repoaced by
18161+3686              ; dec (iy+$2D) - three bytes instead of six.
18162+3686
18163+3686
18164+3686              ; ---------------------
18165+3686              ; THE 'JUMP' SUBROUTINE
18166+3686              ; ---------------------
18167+3686              ; (offset: $33 'jump')
18168+3686              ;   This enables the calculator to perform relative jumps just like the Z80
18169+3686              ;   chip's JR instruction.
18170+3686
18171+3686              ;; jump
18172+3686              ;; JUMP
18173+3686 D9           o3686:		EXX
18174+3687
18175+3687              ;; JUMP-2
18176+3687 5E           o3687:		LD	E,(HL)		; the jump byte 0-127 forward, 128-255 back.
18177+3688 7B           		LD	A,E		; transfer to accumulator.
18178+3689 17           		RLA			; if backward jump, carry is set.
18179+368A 9F           		SBC	A,A		; will be $FF if backward or $00 if forward.
18180+368B 57           		LD	D,A		; transfer to high byte.
18181+368C 19           		ADD	HL,DE		; advance calculator pointer forward or back.
18182+368D
18183+368D D9           		EXX			; switch back.
18184+368E C9           		RET			; return.
18185+368F
18186+368F              ; --------------------------
18187+368F              ; THE 'JUMP-TRUE' SUBROUTINE
18188+368F              ; --------------------------
18189+368F              ; (offset: $00 'jump-true')
18190+368F              ;   This enables the calculator to perform conditional relative jumps dependent
18191+368F              ;   on whether the last test gave a true result.
18192+368F
18193+368F              ;; jump-true
18194+368F 13           o368F:		INC	DE		; Collect the
18195+3690 13           		INC	DE		; third byte
18196+3691 1A           		LD	A,(DE)		; of the test
18197+3692 1B           		DEC	DE		; result and
18198+3693 1B           		DEC	DE		; backtrack.
18199+3694
18200+3694 A7           		AND	A		; Is result 0 or 1 ?
18201+3695 20 EF        		JR	NZ,o3686	; Back to JUMP if true (1).
18202+3697
18203+3697 D9           		EXX			; Else switch in the pointer set.
18204+3698 23           		INC	HL		; Step past the jump length.
18205+3699 D9           		EXX			; Switch in the main set.
18206+369A C9           		RET			; Return.
18207+369B
18208+369B              ; -------------------------
18209+369B              ; THE 'END-CALC' SUBROUTINE
18210+369B              ; -------------------------
18211+369B              ; (offset: $38 'end-calc')
18212+369B              ;   The end-calc literal terminates a mini-program written in the Spectrum's
18213+369B              ;   internal language.
18214+369B
18215+369B              ;; end-calc
18216+369B F1           o369B:		POP	AF		; Drop the calculator return address RE-ENTRY
18217+369C D9           		EXX			; Switch to the other set.
18218+369D
18219+369D E3           		EX	(SP),HL		; Transfer H'L' to machine stack for the
18220+369E              					; return address.
18221+369E              					; When exiting recursion, then the previous
18222+369E              					; pointer is transferred to H'L'.
18223+369E
18224+369E D9           		EXX			; Switch back to main set.
18225+369F C9           		RET			; Return.
18226+36A0
18227+36A0
18228+36A0              ; ------------------------
18229+36A0              ; THE 'MODULUS' SUBROUTINE
18230+36A0              ; ------------------------
18231+36A0              ; (offset: $32 'n-mod-m')
18232+36A0              ; (n1,n2 -- r,q)
18233+36A0              ;   Similar to FORTH's 'divide mod' /MOD
18234+36A0              ;   On the Spectrum, this is only used internally by the RND function and could
18235+36A0              ;   have been implemented inline.  On the ZX81, this calculator routine was also
18236+36A0              ;   used by PRINT-FP.
18237+36A0
18238+36A0              ;; n-mod-m
18239+36A0 EF           o36A0:		RST	28H		; FP-CALC          17, 3.
18240+36A1 C0           		DB	$C0		; st-mem-0          17, 3.
18241+36A2 02           		DB	$02		; delete            17.
18242+36A3 31           		DB	$31		; duplicate         17, 17.
18243+36A4 E0           		DB	$E0		; get-mem-0         17, 17, 3.
18244+36A5 05           		DB	$05		; division          17, 17/3.
18245+36A6 27           		DB	$27		; int               17, 5.
18246+36A7 E0           		DB	$E0		; get-mem-0         17, 5, 3.
18247+36A8 01           		DB	$01		; exchange          17, 3, 5.
18248+36A9 C0           		DB	$C0		; st-mem-0          17, 3, 5.
18249+36AA 04           		DB	$04		; multiply          17, 15.
18250+36AB 03           		DB	$03		; subtract          2.
18251+36AC E0           		DB	$E0		; get-mem-0         2, 5.
18252+36AD 38           		DB	$38		; end-calc          2, 5.
18253+36AE
18254+36AE C9           		RET			; return.
18255+36AF
18256+36AF
18257+36AF              ; ------------------
18258+36AF              ; THE 'INT' FUNCTION
18259+36AF              ; ------------------
18260+36AF              ; (offset $27: 'int' )
18261+36AF              ; This function returns the integer of x, which is just the same as truncate
18262+36AF              ; for positive numbers. The truncate literal truncates negative numbers
18263+36AF              ; upwards so that -3.4 gives -3 whereas the BASIC INT function has to
18264+36AF              ; truncate negative numbers down so that INT -3.4 is -4.
18265+36AF              ; It is best to work through using, say, +-3.4 as examples.
18266+36AF
18267+36AF              ;; int
18268+36AF EF           o36AF:		RST	28H		; FP-CALC              x.    (= 3.4 or -3.4).
18269+36B0 31           		DB	$31		; duplicate             x, x.
18270+36B1 36           		DB	$36		; less-0                x, (1/0)
18271+36B2 00           		DB	$00		; jump-true             x, (1/0)
18272+36B3 04           		DB	$04		; to o36B7, X-NEG
18273+36B4
18274+36B4 3A           		DB	$3A		; truncate              trunc 3.4 = 3.
18275+36B5 38           		DB	$38		; end-calc              3.
18276+36B6
18277+36B6 C9           		RET			; return with + int x on stack.
18278+36B7
18279+36B7              ; ---
18280+36B7
18281+36B7
18282+36B7              ;; X-NEG
18283+36B7 31           o36B7:		DB	$31		; duplicate             -3.4, -3.4.
18284+36B8 3A           		DB	$3A		; truncate              -3.4, -3.
18285+36B9 C0           		DB	$C0		; st-mem-0              -3.4, -3.
18286+36BA 03           		DB	$03		; subtract              -.4
18287+36BB E0           		DB	$E0		; get-mem-0             -.4, -3.
18288+36BC 01           		DB	$01		; exchange              -3, -.4.
18289+36BD 30           		DB	$30		; not                   -3, (0).
18290+36BE 00           		DB	$00		; jump-true             -3.
18291+36BF 03           		DB	$03		; to o36C2, EXIT        -3.
18292+36C0
18293+36C0 A1           		DB	$A1		; stk-one               -3, 1.
18294+36C1 03           		DB	$03		; subtract              -4.
18295+36C2
18296+36C2              ;; EXIT
18297+36C2 38           o36C2:		DB	$38		; end-calc              -4.
18298+36C3
18299+36C3 C9           		RET			; return.
18300+36C4
18301+36C4
18302+36C4              ; ------------------
18303+36C4              ; THE 'EXP' FUNCTION
18304+36C4              ; ------------------
18305+36C4              ; (offset $26: 'exp')
18306+36C4              ;   The exponential function EXP x is equal to e^x, where e is the mathematical
18307+36C4              ;   name for a number approximated to 2.718281828.
18308+36C4              ;   ERROR 6 if argument is more than about 88.
18309+36C4
18310+36C4              ;; EXP
18311+36C4              ;; exp
18312+36C4 EF           o36C4:		RST	28H		; FP-CALC
18313+36C5 3D           		DB	$3D		; re-stack      (not required - mult will do)
18314+36C6 34           		DB	$34		; stk-data
18315+36C7 F1           		DB	$F1		; Exponent: $81, Bytes: 4
18316+36C8 38 AA 3B 29  		DB	$38,$AA,$3B,$29	;
18317+36CC 04           		DB	$04		; multiply
18318+36CD 31           		DB	$31		; duplicate
18319+36CE 27           		DB	$27		; int
18320+36CF C3           		DB	$C3		; st-mem-3
18321+36D0 03           		DB	$03		; subtract
18322+36D1 31           		DB	$31		; duplicate
18323+36D2 0F           		DB	$0F		; addition
18324+36D3 A1           		DB	$A1		; stk-one
18325+36D4 03           		DB	$03		; subtract
18326+36D5 88           		DB	$88		; series-08
18327+36D6 13           		DB	$13		; Exponent: $63, Bytes: 1
18328+36D7 36           		DB	$36		; (+00,+00,+00)
18329+36D8 58           		DB	$58		; Exponent: $68, Bytes: 2
18330+36D9 65 66        		DB	$65,$66		; (+00,+00)
18331+36DB 9D           		DB	$9D		; Exponent: $6D, Bytes: 3
18332+36DC 78 65 40     		DB	$78,$65,$40	; (+00)
18333+36DF A2           		DB	$A2		; Exponent: $72, Bytes: 3
18334+36E0 60 32 C9     		DB	$60,$32,$C9	; (+00)
18335+36E3 E7           		DB	$E7		; Exponent: $77, Bytes: 4
18336+36E4 21 F7 AF 24  		DB	$21,$F7,$AF,$24	;
18337+36E8 EB           		DB	$EB		; Exponent: $7B, Bytes: 4
18338+36E9 2F B0 B0 14  		DB	$2F,$B0,$B0,$14	;
18339+36ED EE           		DB	$EE		; Exponent: $7E, Bytes: 4
18340+36EE 7E BB 94 58  		DB	$7E,$BB,$94,$58	;
18341+36F2 F1           		DB	$F1		; Exponent: $81, Bytes: 4
18342+36F3 3A 7E F8 CF  		DB	$3A,$7E,$F8,$CF	;
18343+36F7 E3           		DB	$E3		; get-mem-3
18344+36F8 38           		DB	$38		; end-calc
18345+36F9
18346+36F9 CD D5 2D     		CALL	o2DD5		; routine FP-TO-A
18347+36FC 20 07        		JR	NZ,o3705	; to N-NEGTV
18348+36FE
18349+36FE 38 03        		JR	C,o3703		; to REPORT-6b
18350+3700              					; 'Number too big'
18351+3700
18352+3700 86           		ADD	A,(HL)		;
18353+3701 30 09        		JR	NC,o370C	; to RESULT-OK
18354+3703
18355+3703
18356+3703              ;; REPORT-6b
18357+3703 CF           o3703:		RST	08H		; ERROR-1
18358+3704 05           		DB	$05		; Error Report: Number too big
18359+3705
18360+3705              ; ---
18361+3705
18362+3705              ;; N-NEGTV
18363+3705 38 07        o3705:		JR	C,o370E		; to RSLT-ZERO
18364+3707
18365+3707 96           		SUB	(HL)		;
18366+3708 30 04        		JR	NC,o370E	; to RSLT-ZERO
18367+370A
18368+370A ED 44        		NEG			; Negate
18369+370C
18370+370C              ;; RESULT-OK
18371+370C 77           o370C:		LD	(HL),A		;
18372+370D C9           		RET			; return.
18373+370E
18374+370E              ; ---
18375+370E
18376+370E
18377+370E              ;; RSLT-ZERO
18378+370E EF           o370E:		RST	28H		; FP-CALC
18379+370F 02           		DB	$02		; delete
18380+3710 A0           		DB	$A0		; stk-zero
18381+3711 38           		DB	$38		; end-calc
18382+3712
18383+3712 C9           		RET			; return.
18384+3713
18385+3713
18386+3713              ; --------------------------------
18387+3713              ; THE 'NATURAL LOGARITHM' FUNCTION
18388+3713              ; --------------------------------
18389+3713              ; (offset $25: 'ln')
18390+3713              ;   Function to calculate the natural logarithm (to the base e ).
18391+3713              ;   Natural logarithms were devised in 1614 by well-traveled Scotsman John
18392+3713              ;   Napier who noted
18393+3713              ;   "Nothing doth more molest and hinder calculators than the multiplications,
18394+3713              ;    divisions, square and cubical extractions of great numbers".
18395+3713              ;
18396+3713              ;   Napier's logarithms enabled the above operations to be accomplished by
18397+3713              ;   simple addition and subtraction simplifying the navigational and
18398+3713              ;   astronomical calculations which beset his age.
18399+3713              ;   Napier's logarithms were quickly overtaken by logarithms to the base 10
18400+3713              ;   devised, in conjunction with Napier, by Henry Briggs a Cambridge-educated
18401+3713              ;   professor of Geometry at Oxford University. These simplified the layout
18402+3713              ;   of the tables enabling humans to easily scale calculations.
18403+3713              ;
18404+3713              ;   It is only recently with the introduction of pocket calculators and machines
18405+3713              ;   like the ZX Spectrum that natural logarithms are once more at the fore,
18406+3713              ;   although some computers retain logarithms to the base ten.
18407+3713              ;
18408+3713              ;   'Natural' logarithms are powers to the base 'e', which like 'pi' is a
18409+3713              ;   naturally occurring number in branches of mathematics.
18410+3713              ;   Like 'pi' also, 'e' is an irrational number and starts 2.718281828...
18411+3713              ;
18412+3713              ;   The tabular use of logarithms was that to multiply two numbers one looked
18413+3713              ;   up their two logarithms in the tables, added them together and then looked
18414+3713              ;   for the result in a table of antilogarithms to give the desired product.
18415+3713              ;
18416+3713              ;   The EXP function is the BASIC equivalent of a calculator's 'antiln' function
18417+3713              ;   and by picking any two numbers, 1.72 and 6.89 say,
18418+3713              ;     10 PRINT EXP ( LN 1.72 + LN 6.89 )
18419+3713              ;   will give just the same result as
18420+3713              ;     20 PRINT 1.72 * 6.89.
18421+3713              ;   Division is accomplished by subtracting the two logs.
18422+3713              ;
18423+3713              ;   Napier also mentioned "square and cubicle extractions".
18424+3713              ;   To raise a number to the power 3, find its 'ln', multiply by 3 and find the
18425+3713              ;   'antiln'.  e.g. PRINT EXP( LN 4 * 3 )  gives 64.
18426+3713              ;   Similarly to find the n'th root divide the logarithm by 'n'.
18427+3713              ;   The ZX81 ROM used PRINT EXP ( LN 9 / 2 ) to find the square root of the
18428+3713              ;   number 9. The Napieran square root function is just a special case of
18429+3713              ;   the 'to_power' function. A cube root or indeed any root/power would be just
18430+3713              ;   as simple.
18431+3713
18432+3713              ;   First test that the argument to LN is a positive, non-zero number.
18433+3713              ;   Error A if the argument is 0 or negative.
18434+3713
18435+3713              ;; ln
18436+3713 EF           o3713:		RST	28H		; FP-CALC
18437+3714 3D           		DB	$3D		; re-stack
18438+3715 31           		DB	$31		; duplicate
18439+3716 37           		DB	$37		; greater-0
18440+3717 00           		DB	$00		; jump-true
18441+3718 04           		DB	$04		; to o371C, VALID
18442+3719
18443+3719 38           		DB	$38		; end-calc
18444+371A
18445+371A
18446+371A              ;; REPORT-Ab
18447+371A CF           o371A:		RST	08H		; ERROR-1
18448+371B 09           		DB	$09		; Error Report: Invalid argument
18449+371C
18450+371C              ;; VALID
18451+371C A0           o371C:		DB	$A0		; stk-zero              Note. not
18452+371D 02           		DB	$02		; delete                necessary.
18453+371E 38           		DB	$38		; end-calc
18454+371F 7E           		LD	A,(HL)		;
18455+3720
18456+3720 36 80        		LD	(HL),$80	;
18457+3722 CD 28 2D     		CALL	o2D28		; routine STACK-A
18458+3725
18459+3725 EF           		RST	28H		; FP-CALC
18460+3726 34           		DB	$34		; stk-data
18461+3727 38           		DB	$38		; Exponent: $88, Bytes: 1
18462+3728 00           		DB	$00		; (+00,+00,+00)
18463+3729 03           		DB	$03		; subtract
18464+372A 01           		DB	$01		; exchange
18465+372B 31           		DB	$31		; duplicate
18466+372C 34           		DB	$34		; stk-data
18467+372D F0           		DB	$F0		; Exponent: $80, Bytes: 4
18468+372E 4C CC CC CD  		DB	$4C,$CC,$CC,$CD	;
18469+3732 03           		DB	$03		; subtract
18470+3733 37           		DB	$37		; greater-0
18471+3734 00           		DB	$00		; jump-true
18472+3735 08           		DB	$08		; to o373D, GRE.8
18473+3736
18474+3736 01           		DB	$01		; exchange
18475+3737 A1           		DB	$A1		; stk-one
18476+3738 03           		DB	$03		; subtract
18477+3739 01           		DB	$01		; exchange
18478+373A 38           		DB	$38		; end-calc
18479+373B
18480+373B 34           		INC	(HL)		;
18481+373C
18482+373C EF           		RST	28H		; FP-CALC
18483+373D
18484+373D              ;; GRE.8
18485+373D 01           o373D:		DB	$01		; exchange
18486+373E 34           		DB	$34		; stk-data
18487+373F F0           		DB	$F0		; Exponent: $80, Bytes: 4
18488+3740 31 72 17 F8  		DB	$31,$72,$17,$F8	;
18489+3744 04           		DB	$04		; multiply
18490+3745 01           		DB	$01		; exchange
18491+3746 A2           		DB	$A2		; stk-half
18492+3747 03           		DB	$03		; subtract
18493+3748 A2           		DB	$A2		; stk-half
18494+3749 03           		DB	$03		; subtract
18495+374A 31           		DB	$31		; duplicate
18496+374B 34           		DB	$34		; stk-data
18497+374C 32           		DB	$32		; Exponent: $82, Bytes: 1
18498+374D 20           		DB	$20		; (+00,+00,+00)
18499+374E 04           		DB	$04		; multiply
18500+374F A2           		DB	$A2		; stk-half
18501+3750 03           		DB	$03		; subtract
18502+3751 8C           		DB	$8C		; series-0C
18503+3752 11           		DB	$11		; Exponent: $61, Bytes: 1
18504+3753 AC           		DB	$AC		; (+00,+00,+00)
18505+3754 14           		DB	$14		; Exponent: $64, Bytes: 1
18506+3755 09           		DB	$09		; (+00,+00,+00)
18507+3756 56           		DB	$56		; Exponent: $66, Bytes: 2
18508+3757 DA A5        		DB	$DA,$A5		; (+00,+00)
18509+3759 59           		DB	$59		; Exponent: $69, Bytes: 2
18510+375A 30 C5        		DB	$30,$C5		; (+00,+00)
18511+375C 5C           		DB	$5C		; Exponent: $6C, Bytes: 2
18512+375D 90 AA        		DB	$90,$AA		; (+00,+00)
18513+375F 9E           		DB	$9E		; Exponent: $6E, Bytes: 3
18514+3760 70 6F 61     		DB	$70,$6F,$61	; (+00)
18515+3763 A1           		DB	$A1		; Exponent: $71, Bytes: 3
18516+3764 CB DA 96     		DB	$CB,$DA,$96	; (+00)
18517+3767 A4           		DB	$A4		; Exponent: $74, Bytes: 3
18518+3768 31 9F B4     		DB	$31,$9F,$B4	; (+00)
18519+376B E7           		DB	$E7		; Exponent: $77, Bytes: 4
18520+376C A0 FE 5C FC  		DB	$A0,$FE,$5C,$FC	;
18521+3770 EA           		DB	$EA		; Exponent: $7A, Bytes: 4
18522+3771 1B 43 CA 36  		DB	$1B,$43,$CA,$36	;
18523+3775 ED           		DB	$ED		; Exponent: $7D, Bytes: 4
18524+3776 A7 9C 7E 5E  		DB	$A7,$9C,$7E,$5E	;
18525+377A F0           		DB	$F0		; Exponent: $80, Bytes: 4
18526+377B 6E 23 80 93  		DB	$6E,$23,$80,$93	;
18527+377F 04           		DB	$04		; multiply
18528+3780 0F           		DB	$0F		; addition
18529+3781 38           		DB	$38		; end-calc
18530+3782
18531+3782 C9           		RET			; return.
18532+3783
18533+3783
18534+3783              ; -----------------------------
18535+3783              ; THE 'TRIGONOMETRIC' FUNCTIONS
18536+3783              ; -----------------------------
18537+3783              ; Trigonometry is rocket science. It is also used by carpenters and pyramid
18538+3783              ; builders.
18539+3783              ; Some uses can be quite abstract but the principles can be seen in simple
18540+3783              ; right-angled triangles. Triangles have some special properties -
18541+3783              ;
18542+3783              ; 1) The sum of the three angles is always PI radians (180 degrees).
18543+3783              ;    Very helpful if you know two angles and wish to find the third.
18544+3783              ; 2) In any right-angled triangle the sum of the squares of the two shorter
18545+3783              ;    sides is equal to the square of the longest side opposite the right-angle.
18546+3783              ;    Very useful if you know the length of two sides and wish to know the
18547+3783              ;    length of the third side.
18548+3783              ; 3) Functions sine, cosine and tangent enable one to calculate the length
18549+3783              ;    of an unknown side when the length of one other side and an angle is
18550+3783              ;    known.
18551+3783              ; 4) Functions arcsin, arccosine and arctan enable one to calculate an unknown
18552+3783              ;    angle when the length of two of the sides is known.
18553+3783
18554+3783              ; --------------------------------
18555+3783              ; THE 'REDUCE ARGUMENT' SUBROUTINE
18556+3783              ; --------------------------------
18557+3783              ; (offset $39: 'get-argt')
18558+3783              ;
18559+3783              ; This routine performs two functions on the angle, in radians, that forms
18560+3783              ; the argument to the sine and cosine functions.
18561+3783              ; First it ensures that the angle 'wraps round'. That if a ship turns through
18562+3783              ; an angle of, say, 3*PI radians (540 degrees) then the net effect is to turn
18563+3783              ; through an angle of PI radians (180 degrees).
18564+3783              ; Secondly it converts the angle in radians to a fraction of a right angle,
18565+3783              ; depending within which quadrant the angle lies, with the periodicity
18566+3783              ; resembling that of the desired sine value.
18567+3783              ; The result lies in the range -1 to +1.
18568+3783              ;
18569+3783              ;                     90 deg.
18570+3783              ;
18571+3783              ;                     (pi/2)
18572+3783              ;              II       +1        I
18573+3783              ;                       |
18574+3783              ;        sin+      |\   |   /|    sin+
18575+3783              ;        cos-      | \  |  / |    cos+
18576+3783              ;        tan-      |  \ | /  |    tan+
18577+3783              ;                  |   \|/)  |
18578+3783              ; 180 deg. (pi) 0 -|----+----|-- 0  (0)   0 degrees
18579+3783              ;                  |   /|\   |
18580+3783              ;        sin-      |  / | \  |    sin-
18581+3783              ;        cos-      | /  |  \ |    cos+
18582+3783              ;        tan+      |/   |   \|    tan-
18583+3783              ;                       |
18584+3783              ;              III      -1       IV
18585+3783              ;                     (3pi/2)
18586+3783              ;
18587+3783              ;                     270 deg.
18588+3783              ;
18589+3783
18590+3783              ;; get-argt
18591+3783 EF           o3783:		RST	28H		; FP-CALC      X.
18592+3784 3D           		DB	$3D		; re-stack      (not rquired done by mult)
18593+3785 34           		DB	$34		; stk-data
18594+3786 EE           		DB	$EE		; Exponent: $7E,
18595+3787              					;;Bytes: 4
18596+3787 22 F9 83 6E  		DB	$22,$F9,$83,$6E	;              X, 1/(2*PI)
18597+378B 04           		DB	$04		; multiply      X/(2*PI) = fraction
18598+378C 31           		DB	$31		; duplicate
18599+378D A2           		DB	$A2		; stk-half
18600+378E 0F           		DB	$0F		; addition
18601+378F 27           		DB	$27		; int
18602+3790
18603+3790 03           		DB	$03		; subtract      now range -.5 to .5
18604+3791
18605+3791 31           		DB	$31		; duplicate
18606+3792 0F           		DB	$0F		; addition      now range -1 to 1.
18607+3793 31           		DB	$31		; duplicate
18608+3794 0F           		DB	$0F		; addition      now range -2 to +2.
18609+3795
18610+3795              ; quadrant I (0 to +1) and quadrant IV (-1 to 0) are now correct.
18611+3795              ; quadrant II ranges +1 to +2.
18612+3795              ; quadrant III ranges -2 to -1.
18613+3795
18614+3795 31           		DB	$31		; duplicate     Y, Y.
18615+3796 2A           		DB	$2A		; abs           Y, abs(Y).    range 1 to 2
18616+3797 A1           		DB	$A1		; stk-one       Y, abs(Y), 1.
18617+3798 03           		DB	$03		; subtract      Y, abs(Y)-1.  range 0 to 1
18618+3799 31           		DB	$31		; duplicate     Y, Z, Z.
18619+379A 37           		DB	$37		; greater-0     Y, Z, (1/0).
18620+379B
18621+379B C0           		DB	$C0		; st-mem-0         store as possible sign
18622+379C              					;;                 for cosine function.
18623+379C
18624+379C 00           		DB	$00		; jump-true
18625+379D 04           		DB	$04		; to o37A1, ZPLUS  with quadrants II and III.
18626+379E
18627+379E              ; else the angle lies in quadrant I or IV and value Y is already correct.
18628+379E
18629+379E 02           		DB	$02		; delete        Y.   delete the test value.
18630+379F 38           		DB	$38		; end-calc      Y.
18631+37A0
18632+37A0 C9           		RET			; return.       with Q1 and Q4           >>>
18633+37A1
18634+37A1              ; ---
18635+37A1
18636+37A1              ; the branch was here with quadrants II (0 to 1) and III (1 to 0).
18637+37A1              ; Y will hold -2 to -1 if this is quadrant III.
18638+37A1
18639+37A1              ;; ZPLUS
18640+37A1 A1           o37A1:		DB	$A1		; stk-one         Y, Z, 1.
18641+37A2 03           		DB	$03		; subtract        Y, Z-1.       Q3 = 0 to -1
18642+37A3 01           		DB	$01		; exchange        Z-1, Y.
18643+37A4 36           		DB	$36		; less-0          Z-1, (1/0).
18644+37A5 00           		DB	$00		; jump-true       Z-1.
18645+37A6 02           		DB	$02		; to o37A8, YNEG
18646+37A7              					;;if angle in quadrant III
18647+37A7
18648+37A7              ; else angle is within quadrant II (-1 to 0)
18649+37A7
18650+37A7 1B           		DB	$1B		; negate          range +1 to 0.
18651+37A8
18652+37A8              ;; YNEG
18653+37A8 38           o37A8:		DB	$38		; end-calc        quadrants II and III correct.
18654+37A9
18655+37A9 C9           		RET			; return.
18656+37AA
18657+37AA
18658+37AA              ; ---------------------
18659+37AA              ; THE 'COSINE' FUNCTION
18660+37AA              ; ---------------------
18661+37AA              ; (offset $20: 'cos')
18662+37AA              ; Cosines are calculated as the sine of the opposite angle rectifying the
18663+37AA              ; sign depending on the quadrant rules.
18664+37AA              ;
18665+37AA              ;
18666+37AA              ;           /|
18667+37AA              ;        h /y|
18668+37AA              ;         /  |o
18669+37AA              ;        /x  |
18670+37AA              ;       /----|
18671+37AA              ;         a
18672+37AA              ;
18673+37AA              ; The cosine of angle x is the adjacent side (a) divided by the hypotenuse 1.
18674+37AA              ; However if we examine angle y then a/h is the sine of that angle.
18675+37AA              ; Since angle x plus angle y equals a right-angle, we can find angle y by
18676+37AA              ; subtracting angle x from pi/2.
18677+37AA              ; However it's just as easy to reduce the argument first and subtract the
18678+37AA              ; reduced argument from the value 1 (a reduced right-angle).
18679+37AA              ; It's even easier to subtract 1 from the angle and rectify the sign.
18680+37AA              ; In fact, after reducing the argument, the absolute value of the argument
18681+37AA              ; is used and rectified using the test result stored in mem-0 by 'get-argt'
18682+37AA              ; for that purpose.
18683+37AA              ;
18684+37AA
18685+37AA              ;; cos
18686+37AA EF           o37AA:		RST	28H		; FP-CALC              angle in radians.
18687+37AB 39           		DB	$39		; get-argt              X     reduce -1 to +1
18688+37AC
18689+37AC 2A           		DB	$2A		; abs                   ABS X.   0 to 1
18690+37AD A1           		DB	$A1		; stk-one               ABS X, 1.
18691+37AE 03           		DB	$03		; subtract              now opposite angle
18692+37AF              					;;                      although sign is -ve.
18693+37AF
18694+37AF E0           		DB	$E0		; get-mem-0             fetch the sign indicator
18695+37B0 00           		DB	$00		; jump-true
18696+37B1 06           		DB	$06		; fwd to o37B7, C-ENT
18697+37B2              					;;forward to common code if in QII or QIII.
18698+37B2
18699+37B2 1B           		DB	$1B		; negate                else make sign +ve.
18700+37B3 33           		DB	$33		; jump
18701+37B4 03           		DB	$03		; fwd to o37B7, C-ENT
18702+37B5              					;; with quadrants I and IV.
18703+37B5
18704+37B5              ; -------------------
18705+37B5              ; THE 'SINE' FUNCTION
18706+37B5              ; -------------------
18707+37B5              ; (offset $1F: 'sin')
18708+37B5              ; This is a fundamental transcendental function from which others such as cos
18709+37B5              ; and tan are directly, or indirectly, derived.
18710+37B5              ; It uses the series generator to produce Chebyshev polynomials.
18711+37B5              ;
18712+37B5              ;
18713+37B5              ;           /|
18714+37B5              ;        1 / |
18715+37B5              ;         /  |x
18716+37B5              ;        /a  |
18717+37B5              ;       /----|
18718+37B5              ;         y
18719+37B5              ;
18720+37B5              ; The 'get-argt' function is designed to modify the angle and its sign
18721+37B5              ; in line with the desired sine value and afterwards it can launch straight
18722+37B5              ; into common code.
18723+37B5
18724+37B5              ;; sin
18725+37B5 EF           o37B5:		RST	28H		; FP-CALC      angle in radians
18726+37B6 39           		DB	$39		; get-argt      reduce - sign now correct.
18727+37B7
18728+37B7              ;; C-ENT
18729+37B7 31           o37B7:		DB	$31		; duplicate
18730+37B8 31           		DB	$31		; duplicate
18731+37B9 04           		DB	$04		; multiply
18732+37BA 31           		DB	$31		; duplicate
18733+37BB 0F           		DB	$0F		; addition
18734+37BC A1           		DB	$A1		; stk-one
18735+37BD 03           		DB	$03		; subtract
18736+37BE
18737+37BE 86           		DB	$86		; series-06
18738+37BF 14           		DB	$14		; Exponent: $64, Bytes: 1
18739+37C0 E6           		DB	$E6		; (+00,+00,+00)
18740+37C1 5C           		DB	$5C		; Exponent: $6C, Bytes: 2
18741+37C2 1F 0B        		DB	$1F,$0B		; (+00,+00)
18742+37C4 A3           		DB	$A3		; Exponent: $73, Bytes: 3
18743+37C5 8F 38 EE     		DB	$8F,$38,$EE	; (+00)
18744+37C8 E9           		DB	$E9		; Exponent: $79, Bytes: 4
18745+37C9 15 63 BB 23  		DB	$15,$63,$BB,$23	;
18746+37CD EE           		DB	$EE		; Exponent: $7E, Bytes: 4
18747+37CE 92 0D CD ED  		DB	$92,$0D,$CD,$ED	;
18748+37D2 F1           		DB	$F1		; Exponent: $81, Bytes: 4
18749+37D3 23 5D 1B EA  		DB	$23,$5D,$1B,$EA	;
18750+37D7 04           		DB	$04		; multiply
18751+37D8 38           		DB	$38		; end-calc
18752+37D9
18753+37D9 C9           		RET			; return.
18754+37DA
18755+37DA              ; ----------------------
18756+37DA              ; THE 'TANGENT' FUNCTION
18757+37DA              ; ----------------------
18758+37DA              ; (offset $21: 'tan')
18759+37DA              ;
18760+37DA              ; Evaluates tangent x as    sin(x) / cos(x).
18761+37DA              ;
18762+37DA              ;
18763+37DA              ;           /|
18764+37DA              ;        h / |
18765+37DA              ;         /  |o
18766+37DA              ;        /x  |
18767+37DA              ;       /----|
18768+37DA              ;         a
18769+37DA              ;
18770+37DA              ; the tangent of angle x is the ratio of the length of the opposite side
18771+37DA              ; divided by the length of the adjacent side. As the opposite length can
18772+37DA              ; be calculates using sin(x) and the adjacent length using cos(x) then
18773+37DA              ; the tangent can be defined in terms of the previous two functions.
18774+37DA
18775+37DA              ; Error 6 if the argument, in radians, is too close to one like pi/2
18776+37DA              ; which has an infinite tangent. e.g. PRINT TAN (PI/2)  evaluates as 1/0.
18777+37DA              ; Similarly PRINT TAN (3*PI/2), TAN (5*PI/2) etc.
18778+37DA
18779+37DA              ;; tan
18780+37DA EF           o37DA:		RST	28H		; FP-CALC          x.
18781+37DB 31           		DB	$31		; duplicate         x, x.
18782+37DC 1F           		DB	$1F		; sin               x, sin x.
18783+37DD 01           		DB	$01		; exchange          sin x, x.
18784+37DE 20           		DB	$20		; cos               sin x, cos x.
18785+37DF 05           		DB	$05		; division          sin x/cos x (= tan x).
18786+37E0 38           		DB	$38		; end-calc          tan x.
18787+37E1
18788+37E1 C9           		RET			; return.
18789+37E2
18790+37E2              ; ---------------------
18791+37E2              ; THE 'ARCTAN' FUNCTION
18792+37E2              ; ---------------------
18793+37E2              ; (Offset $24: 'atn')
18794+37E2              ; the inverse tangent function with the result in radians.
18795+37E2              ; This is a fundamental transcendental function from which others such as asn
18796+37E2              ; and acs are directly, or indirectly, derived.
18797+37E2              ; It uses the series generator to produce Chebyshev polynomials.
18798+37E2
18799+37E2              ;; atn
18800+37E2 CD 97 32     o37E2:		CALL	o3297		; routine re-stack
18801+37E5 7E           		LD	A,(HL)		; fetch exponent byte.
18802+37E6 FE 81        		CP	$81		; compare to that for 'one'
18803+37E8 38 0E        		JR	C,o37F8		; forward, if less, to SMALL
18804+37EA
18805+37EA EF           		RST	28H		; FP-CALC
18806+37EB A1           		DB	$A1		; stk-one
18807+37EC 1B           		DB	$1B		; negate
18808+37ED 01           		DB	$01		; exchange
18809+37EE 05           		DB	$05		; division
18810+37EF 31           		DB	$31		; duplicate
18811+37F0 36           		DB	$36		; less-0
18812+37F1 A3           		DB	$A3		; stk-pi/2
18813+37F2 01           		DB	$01		; exchange
18814+37F3 00           		DB	$00		; jump-true
18815+37F4 06           		DB	$06		; to o37FA, CASES
18816+37F5
18817+37F5 1B           		DB	$1B		; negate
18818+37F6 33           		DB	$33		; jump
18819+37F7 03           		DB	$03		; to o37FA, CASES
18820+37F8
18821+37F8              ;; SMALL
18822+37F8 EF           o37F8:		RST	28H		; FP-CALC
18823+37F9 A0           		DB	$A0		; stk-zero
18824+37FA
18825+37FA              ;; CASES
18826+37FA 01           o37FA:		DB	$01		; exchange
18827+37FB 31           		DB	$31		; duplicate
18828+37FC 31           		DB	$31		; duplicate
18829+37FD 04           		DB	$04		; multiply
18830+37FE 31           		DB	$31		; duplicate
18831+37FF 0F           		DB	$0F		; addition
18832+3800 A1           		DB	$A1		; stk-one
18833+3801 03           		DB	$03		; subtract
18834+3802 8C           		DB	$8C		; series-0C
18835+3803 10           		DB	$10		; Exponent: $60, Bytes: 1
18836+3804 B2           		DB	$B2		; (+00,+00,+00)
18837+3805 13           		DB	$13		; Exponent: $63, Bytes: 1
18838+3806 0E           		DB	$0E		; (+00,+00,+00)
18839+3807 55           		DB	$55		; Exponent: $65, Bytes: 2
18840+3808 E4 8D        		DB	$E4,$8D		; (+00,+00)
18841+380A 58           		DB	$58		; Exponent: $68, Bytes: 2
18842+380B 39 BC        		DB	$39,$BC		; (+00,+00)
18843+380D 5B           		DB	$5B		; Exponent: $6B, Bytes: 2
18844+380E 98 FD        		DB	$98,$FD		; (+00,+00)
18845+3810 9E           		DB	$9E		; Exponent: $6E, Bytes: 3
18846+3811 00 36 75     		DB	$00,$36,$75	; (+00)
18847+3814 A0           		DB	$A0		; Exponent: $70, Bytes: 3
18848+3815 DB E8 B4     		DB	$DB,$E8,$B4	; (+00)
18849+3818 63           		DB	$63		; Exponent: $73, Bytes: 2
18850+3819 42 C4        		DB	$42,$C4		; (+00,+00)
18851+381B E6           		DB	$E6		; Exponent: $76, Bytes: 4
18852+381C B5 09 36 BE  		DB	$B5,$09,$36,$BE	;
18853+3820 E9           		DB	$E9		; Exponent: $79, Bytes: 4
18854+3821 36 73 1B 5D  		DB	$36,$73,$1B,$5D	;
18855+3825 EC           		DB	$EC		; Exponent: $7C, Bytes: 4
18856+3826 D8 DE 63 BE  		DB	$D8,$DE,$63,$BE	;
18857+382A F0           		DB	$F0		; Exponent: $80, Bytes: 4
18858+382B 61 A1 B3 0C  		DB	$61,$A1,$B3,$0C	;
18859+382F 04           		DB	$04		; multiply
18860+3830 0F           		DB	$0F		; addition
18861+3831 38           		DB	$38		; end-calc
18862+3832
18863+3832 C9           		RET			; return.
18864+3833
18865+3833
18866+3833              ; ---------------------
18867+3833              ; THE 'ARCSIN' FUNCTION
18868+3833              ; ---------------------
18869+3833              ; (Offset $22: 'asn')
18870+3833              ;   The inverse sine function with result in radians.
18871+3833              ;   Derived from arctan function above.
18872+3833              ;   Error A unless the argument is between -1 and +1 inclusive.
18873+3833              ;   Uses an adaptation of the formula asn(x) = atn(x/sqr(1-x*x))
18874+3833              ;
18875+3833              ;
18876+3833              ;                 /|
18877+3833              ;                / |
18878+3833              ;              1/  |x
18879+3833              ;              /a  |
18880+3833              ;             /----|
18881+3833              ;               y
18882+3833              ;
18883+3833              ;   e.g. We know the opposite side (x) and hypotenuse (1)
18884+3833              ;   and we wish to find angle a in radians.
18885+3833              ;   We can derive length y by Pythagoras and then use ATN instead.
18886+3833              ;   Since y*y + x*x = 1*1 (Pythagoras Theorem) then
18887+3833              ;   y=sqr(1-x*x)                         - no need to multiply 1 by itself.
18888+3833              ;   So, asn(a) = atn(x/y)
18889+3833              ;   or more fully,
18890+3833              ;   asn(a) = atn(x/sqr(1-x*x))
18891+3833
18892+3833              ;   Close but no cigar.
18893+3833
18894+3833              ;   While PRINT ATN (x/SQR (1-x*x)) gives the same results as PRINT ASN x,
18895+3833              ;   it leads to division by zero when x is 1 or -1.
18896+3833              ;   To overcome this, 1 is added to y giving half the required angle and the
18897+3833              ;   result is then doubled.
18898+3833              ;   That is, PRINT ATN (x/(SQR (1-x*x) +1)) *2
18899+3833              ;
18900+3833              ;   GEOMETRIC PROOF.
18901+3833              ;
18902+3833              ;
18903+3833              ;               . /|
18904+3833              ;            .  c/ |
18905+3833              ;         .     /1 |x
18906+3833              ;      . c   b /a  |
18907+3833              ;    ---------/----|
18908+3833              ;      1      y
18909+3833              ;
18910+3833              ;   By creating an isosceles triangle with two equal sides of 1, angles c and
18911+3833              ;   c are also equal. If b+c+c = 180 degrees and b+a = 180 degrees then c=a/2.
18912+3833              ;
18913+3833              ;   A value higher than 1 gives the required error as attempting to find  the
18914+3833              ;   square root of a negative number generates an error in Sinclair BASIC.
18915+3833
18916+3833              ;; asn
18917+3833 EF           o3833:		RST	28H		; FP-CALC      x.
18918+3834 31           		DB	$31		; duplicate     x, x.
18919+3835 31           		DB	$31		; duplicate     x, x, x.
18920+3836 04           		DB	$04		; multiply      x, x*x.
18921+3837 A1           		DB	$A1		; stk-one       x, x*x, 1.
18922+3838 03           		DB	$03		; subtract      x, x*x-1.
18923+3839 1B           		DB	$1B		; negate        x, 1-x*x.
18924+383A 28           		DB	$28		; sqr           x, sqr(1-x*x) = y
18925+383B A1           		DB	$A1		; stk-one       x, y, 1.
18926+383C 0F           		DB	$0F		; addition      x, y+1.
18927+383D 05           		DB	$05		; division      x/y+1.
18928+383E 24           		DB	$24		; atn           a/2       (half the angle)
18929+383F 31           		DB	$31		; duplicate     a/2, a/2.
18930+3840 0F           		DB	$0F		; addition      a.
18931+3841 38           		DB	$38		; end-calc      a.
18932+3842
18933+3842 C9           		RET			; return.
18934+3843
18935+3843
18936+3843              ; ---------------------
18937+3843              ; THE 'ARCCOS' FUNCTION
18938+3843              ; ---------------------
18939+3843              ; (Offset $23: 'acs')
18940+3843              ; the inverse cosine function with the result in radians.
18941+3843              ; Error A unless the argument is between -1 and +1.
18942+3843              ; Result in range 0 to pi.
18943+3843              ; Derived from asn above which is in turn derived from the preceding atn.
18944+3843              ; It could have been derived directly from atn using acs(x) = atn(sqr(1-x*x)/x).
18945+3843              ; However, as sine and cosine are horizontal translations of each other,
18946+3843              ; uses acs(x) = pi/2 - asn(x)
18947+3843
18948+3843              ; e.g. the arccosine of a known x value will give the required angle b in
18949+3843              ; radians.
18950+3843              ; We know, from above, how to calculate the angle a using asn(x).
18951+3843              ; Since the three angles of any triangle add up to 180 degrees, or pi radians,
18952+3843              ; and the largest angle in this case is a right-angle (pi/2 radians), then
18953+3843              ; we can calculate angle b as pi/2 (both angles) minus asn(x) (angle a).
18954+3843              ;
18955+3843              ;
18956+3843              ;           /|
18957+3843              ;        1 /b|
18958+3843              ;         /  |x
18959+3843              ;        /a  |
18960+3843              ;       /----|
18961+3843              ;         y
18962+3843              ;
18963+3843
18964+3843              ;; acs
18965+3843 EF           o3843:		RST	28H		; FP-CALC      x.
18966+3844 22           		DB	$22		; asn           asn(x).
18967+3845 A3           		DB	$A3		; stk-pi/2      asn(x), pi/2.
18968+3846 03           		DB	$03		; subtract      asn(x) - pi/2.
18969+3847 1B           		DB	$1B		; negate        pi/2 -asn(x)  =  acs(x).
18970+3848 38           		DB	$38		; end-calc      acs(x).
18971+3849
18972+3849 C9           		RET			; return.
18973+384A
18974+384A
18975+384A              ; --------------------------
18976+384A              ; THE 'SQUARE ROOT' FUNCTION
18977+384A              ; --------------------------
18978+384A              ; (Offset $28: 'sqr')
18979+384A              ; This routine is remarkable for its brevity - 7 bytes.
18980+384A              ; It wasn't written here but in the ZX81 where the programmers had to squeeze
18981+384A              ; a bulky operating system into an 8K ROM. It simply calculates
18982+384A              ; the square root by stacking the value .5 and continuing into the 'to-power'
18983+384A              ; routine. With more space available the much faster Newton-Raphson method
18984+384A              ; could have been used as on the Jupiter Ace.
18985+384A
18986+384A              ;; sqr
18987+384A EF           o384A:		RST	28H		; FP-CALC
18988+384B 31           		DB	$31		; duplicate
18989+384C 30           		DB	$30		; not
18990+384D 00           		DB	$00		; jump-true
18991+384E 1E           		DB	$1E		; to o386C, LAST
18992+384F
18993+384F A2           		DB	$A2		; stk-half
18994+3850 38           		DB	$38		; end-calc
18995+3851
18996+3851
18997+3851              ; ------------------------------
18998+3851              ; THE 'EXPONENTIATION' OPERATION
18999+3851              ; ------------------------------
19000+3851              ; (Offset $06: 'to-power')
19001+3851              ; This raises the first number X to the power of the second number Y.
19002+3851              ; As with the ZX80,
19003+3851              ; 0 ^ 0 = 1.
19004+3851              ; 0 ^ +n = 0.
19005+3851              ; 0 ^ -n = arithmetic overflow.
19006+3851              ;
19007+3851
19008+3851              ;; to-power
19009+3851 EF           o3851:		RST	28H		; FP-CALC              X, Y.
19010+3852 01           		DB	$01		; exchange              Y, X.
19011+3853 31           		DB	$31		; duplicate             Y, X, X.
19012+3854 30           		DB	$30		; not                   Y, X, (1/0).
19013+3855 00           		DB	$00		; jump-true
19014+3856 07           		DB	$07		; to o385D, XIS0   if X is zero.
19015+3857
19016+3857              ;   else X is non-zero. Function 'ln' will catch a negative value of X.
19017+3857
19018+3857 25           		DB	$25		; ln                    Y, LN X.
19019+3858 04           		DB	$04		; multiply              Y * LN X.
19020+3859 38           		DB	$38		; end-calc
19021+385A
19022+385A C3 C4 36     		JP	o36C4		; jump back to EXP routine   ->
19023+385D
19024+385D              ; ---
19025+385D
19026+385D              ;   these routines form the three simple results when the number is zero.
19027+385D              ;   begin by deleting the known zero to leave Y the power factor.
19028+385D
19029+385D              ;; XIS0
19030+385D 02           o385D:		DB	$02		; delete                Y.
19031+385E 31           		DB	$31		; duplicate             Y, Y.
19032+385F 30           		DB	$30		; not                   Y, (1/0).
19033+3860 00           		DB	$00		; jump-true
19034+3861 09           		DB	$09		; to o386A, ONE         if Y is zero.
19035+3862
19036+3862 A0           		DB	$A0		; stk-zero              Y, 0.
19037+3863 01           		DB	$01		; exchange              0, Y.
19038+3864 37           		DB	$37		; greater-0             0, (1/0).
19039+3865 00           		DB	$00		; jump-true             0.
19040+3866 06           		DB	$06		; to o386C, LAST        if Y was any positive
19041+3867              					;;                      number.
19042+3867
19043+3867              ;   else force division by zero thereby raising an Arithmetic overflow error.
19044+3867              ;   There are some one and two-byte alternativos but perhaps the most formal
19045+3867              ;   might have been to use end-calc; rst 08; DB     05.
19046+3867
19047+3867 A1           		DB	$A1		; stk-one               0, 1.
19048+3868 01           		DB	$01		; exchange              1, 0.
19049+3869 05           		DB	$05		; division              1/0        ouch!
19050+386A
19051+386A              ; ---
19052+386A
19053+386A              ;; ONE
19054+386A 02           o386A:		DB	$02		; delete                .
19055+386B A1           		DB	$A1		; stk-one               1.
19056+386C
19057+386C              ;; LAST
19058+386C 38           o386C:		DB	$38		; end-calc              last value is 1 or 0.
19059+386D
19060+386D C9           		RET			; return.
19061+386E
19062+386E              ;   "Everything should be made as simple as possible, but not simpler"
19063+386E              ;   - Albert Einstein, 1879-1955.
19064+386E
19065+386E              ; ---------------------
19066+386E              ; THE 'SPARE' LOCATIONS
19067+386E              ; ---------------------
19068+386E
19069+386E              ;; spare
19070+386E DD E5        o386E:		PUSH	IX		; save IX (why?)
19071+3870 CD BF 02     		CALL	o02BF		; scan keyboard as with 48K ROM
19072+3873 FD CB 01 66  		BIT	4,(IY+$01)
19073+3877 28 03        		JR	Z,o387C		; check bit 4 of FLAGS
19074+3879 CD 7F 38     		CALL	o387F		; check disk motor if true
19075+387C DD E1        o387C:		POP	IX
19076+387E C9           		RET
19077+387F
19078+387F              ; Subroutine to check disk motor timeout
19079+387F
19080+387F 01 FD 7F     o387F:		LD	BC,PBANKM
19081+3882 3A 5C 5B     		LD	A,(	$5B5C)
19082+3885 F6 07        		OR	$07
19083+3887 ED 79        		OUT	(C),A		; page in page 7
19084+3889 3A 00 E6     		LD	A,($E600)
19085+388C B7           		OR	A
19086+388D 28 1D        		JR	Z,o38AC		; move on if motor already off
19087+388F 3A 78 5C     		LD	A,(	$5C78)
19088+3892 CB 47        		BIT	0,A
19089+3894 20 16        		JR	NZ,o38AC	; only decrement timeout every other time
19090+3896 3A 00 E6     		LD	A,($E600)
19091+3899 3D           		DEC	A		; decrement timeout
19092+389A 32 00 E6     		LD	($E600),A
19093+389D 20 0D        		JR	NZ,o38AC	; move on if not yet zero
19094+389F 01 FD 1F     		LD	BC,PBANK678
19095+38A2 3A 67 5B     		LD	A,(	$5B67)
19096+38A5 E6 F7        		AND	$F7
19097+38A7 32 67 5B     		LD	(	$5B67),A
19098+38AA ED 79        		OUT	(C),A		; switch motor off
19099+38AC 01 FD 7F     o38AC:		LD	BC,PBANKM
19100+38AF 3A 5C 5B     		LD	A,(	$5B5C)
19101+38B2 ED 79        		OUT	(C),A		; page back page 0
19102+38B4 C9           		RET
19103+38B5
19104+38B5
19105+38B5              ;**** disponible ****
19106+38B5 ~            		/*
19107+38B5 ~            		1)	averiguar cual pagina esta arriba
19108+38B5 ~            		2)	averiguar si estoy en modo 128 o 48
19109+38B5 ~            		3)	si estoy en 48 retornar
19110+38B5 ~            		4)	si estoy en 128 preguntar si
19111+38B5 ~            		(tapl_stat1)=1
19112+38B5 ~            		si	es asi cargar desde disco
19113+38B5 ~            		y	si no retornar
19114+38B5 ~
19115+38B5 ~            		5)	si cargo desde disco los registros
19116+38B5 ~            		deben	tener los mismos valores
19117+38B5 ~            		que	tendrian si hubiese cargado desde
19118+38B5 ~            		cinta,	especialmente IX
19119+38B5 ~            		*/
19120+38B5
19121+38B5              FREE_ROM3_0:	EQU	$
19122+38B5
19123+38B5 08           NEW_LOAD:	EX	AF,AF'
19124+38B6 F5           		PUSH	AF		; GUARDA AF ALTERNATIVO
19125+38B7 08           		EX	AF,AF'
19126+38B8 F5           		PUSH	AF		; GUARDA AF NORMAL (ESTO TIENE EL FLAG CARGAR/VERIFICAR)
19127+38B9 D5           		PUSH	DE
19128+38BA E5           		PUSH	HL
19129+38BB DD E5        		PUSH	IX
19130+38BD
19131+38BD              ;ESTOY SEGURO QUE LAS INT. ESTAN deshabilitadas
19132+38BD              ;de lo contario el usuario tampoco podría cargar
19133+38BD              ;desde cinta
19134+38BD
19135+38BD              ;puedo usar HL y BC con tranquilidad
19136+38BD
19137+38BD 2A 00 C0     		LD	HL,($C000)	; GUARDO LOS CONTENIDOS DE C000-C003
19138+38C0 E5           		PUSH	HL
19139+38C1 2A 02 C0     		LD	HL,($C002)
19140+38C4 E5           		PUSH	HL
19141+38C5 21 46 54     		LD	HL,$5446	; *INSERTO* A PARTIR DE $C000 LA CADENA "FTAP" (POR FIND TAP)
19142+38C8 22 00 C0     		LD	($C000),HL
19143+38CB 21 41 50     		LD	HL,$5041
19144+38CE 22 02 C0     		LD	($C002),HL
19145+38D1
19146+38D1
19147+38D1 3E 10        		LD	A,$10		; A PARTIR DE AQUI AVERIGUO QUE PAGINA TENGO ARRIBA
19148+38D3 01 FD 7F     		LD	BC,PBANKM	; BUSCANDO EN CADA UNA DE ELLAS LA CADENA "FTAP" EN C000-C003
19149+38D6 ED 79        LFIND_UPPERMEM:	OUT	(C),A		; Y ME DETENGO CUANDO LA ENCUENTRE
19150+38D8 2A 00 C0     		LD	HL,($C000)
19151+38DB A7           		AND	A
19152+38DC 11 46 54     		LD	DE,$5446
19153+38DF ED 52        		SBC	HL,DE
19154+38E1 20 0B        		JR	NZ,NOMEMORY
19155+38E3 2A 02 C0     		LD	HL,($C002)
19156+38E6 A7           		AND	A
19157+38E7 11 41 50     		LD	DE,$5041
19158+38EA ED 52        		SBC	HL,DE
19159+38EC 28 05        		JR	Z,ENCONTRADA
19160+38EE 3C           NOMEMORY:		INC	A
19161+38EF FE 18        		CP	$18
19162+38F1 20 E3        		JR	NZ,LFIND_UPPERMEM
19163+38F3
19164+38F3 08           ENCONTRADA:	EX	AF,AF'		; EN A ME QUEDA LA PAGINA QUE TENGO ARRIBA
19165+38F4              					; USO AF' PARA NO PERDER AF DE MOMENTO
19166+38F4
19167+38F4 E1           		POP	HL		; RECUPERO LOS BYTES DE C000-C003
19168+38F5 22 02 C0     		LD	($C002),HL
19169+38F8 E1           		POP	HL
19170+38F9 22 00 C0     		LD	($C000),HL
19171+38FC
19172+38FC
19173+38FC 21 00 C0     		LD	HL,$C000
19174+38FF 3E 10        		LD	A,$10		; AVERIGUO SI ESTAN ACCESIBLES LOS 128K
19175+3901 ED 79        		OUT	(C),A
19176+3903 56           		LD	D,(HL)
19177+3904 77           		LD	(HL),A
19178+3905
19179+3905 3C           		INC	A		; LD     A,$11
19180+3906 ED 79        		OUT	(C),A
19181+3908 5E           		LD	E,(HL)
19182+3909 77           		LD	(HL),A
19183+390A
19184+390A 3D           		DEC	A		; LD     A,$10
19185+390B ED 79        		OUT	(C),A
19186+390D BE           		CP	(HL)
19187+390E 72           		LD	(HL),D
19188+390F 28 0D        		JR	Z,ES128K
19189+3911
19190+3911 73           		LD	(HL),E		; RECUPERO EL BYTE NO ESTOY EN MODO 128 ASI QUE NO PUEDE HABER
19191+3912 DD E1        RETLOAD2:	POP	IX		; CARGA DE TAPs DESDE +3DOS
19192+3914 E1           		POP	HL
19193+3915 D1           		POP	DE
19194+3916 F1           		POP	AF
19195+3917 08           		EX	AF,AF'
19196+3918 F1           		POP	AF
19197+3919 08           		EX	AF,AF'
19198+391A DB FE        RET_NEW_LOAD:		IN	A,($FE)
19199+391C 1F           		RRA
19200+391D C9           		RET
19201+391E
19202+391E
19203+391E 3E 11        ES128K:		LD	A,$11		; RECUPERO LOS BYTES (SOLO EL QUE CORRESPONDIA A PAG.1 EL DE PAG 0 YA FUE RECUPERADO)
19204+3920 ED 79        		OUT	(C),A
19205+3922 73           		LD	(HL),E
19206+3923
19207+3923 3E 17        		LD	A,$17		; AVERIGUO SI TENGO QUE CARGAR DESDE DISCO
19208+3925 ED 79        		OUT	(C),A		; SI tapl_stat1==1 SIGNIFICA QUE HUBO
19209+3927 3A 05 E8     		LD	A,(	$E805	)	; UN COMANDO PREVIO SPECTRUM "xxxxxxxx.TAP"
19210+392A 57           		LD	D,A		; QUE YA PREPARO LAS COSAS
19211+392B
19212+392B 08           		EX	AF,AF'		; PONER LA PAGINA DE RAM AVERIGUADA MAS ARRIBA
19213+392C 32 00 E8     		LD	(		$E800	),A	; LA GUARDO EN ESTA VAR DE PAGINA 7
19214+392F ED 79        		OUT	(C),A
19215+3931 7A           		LD	A,D
19216+3932 FE 01        		CP	$01
19217+3934 20 DC        		JR	NZ,RETLOAD2
19218+3936
19219+3936 3E 17        SIMULAR_TAPE:	LD	A,$17		;puesto que voy a poner IM2 cuando use rutinas de +3DOS asi el propio +3DOS
19220+3938 ED 79        		OUT	(C),A		;no me despedaza la zona de variables - 5C78
19221+393A 21 00 5B     		LD	HL,	$5B00
19222+393D 11 00 C1     		LD	DE,	$c100
19223+3940 01 00 04     		LD	BC,1024
19224+3943 ED B0        		LDIR
19225+3945 CD CF 3C     		CALL	STANDAR_RAM	; pongo los valores "estandar" en BANKM y BANK678
19226+3948 ED 57        		LD	A,I		; porque a lo mejor la INT llamada en el HALT siguiente
19227+394A 32 07 E8     		LD	(	$E807	),A	; se le arma lio
19228+394D 3E FF        		LD	A,$FF
19229+394F 32 00 5B     		LD	(	$5B00),A
19230+3952 3E 5B        		LD	A,$5B
19231+3954 ED 47        		LD	I,A
19232+3956 21 5E 3C     		LD	HL,DUMMY_IM2
19233+3959 22 FF 5B     		LD	(	$5BFF),HL
19234+395C AF           		XOR	A
19235+395D 32 0E E8     		LD	(	$E80E	),A
19236+3960 3A 00 E8     		LD	A,(		$E800	)
19237+3963 01 FD 7F     		LD	BC,PBANKM
19238+3966 ED 79        		OUT	(C),A
19239+3968 FB           		EI
19240+3969 76           		HALT			; despues de que se ejecute la interrupcion puede pasar 2 cosas
19241+396A F3           		DI			; 1) que (SWAP)==0 lo que significaria que estaba IM2
19242+396B              					; 2) que (SWAP)==FF lo que significaria que estaba IM1
19243+396B
19244+396B
19245+396B 3E 17        		LD	A,$17		; por las dudas si alguna interrupcion cabrona me quito pag 7
19246+396D 01 FD 7F     		LD	BC,PBANKM
19247+3970 ED 79        		OUT	(C),A
19248+3972 AF           		XOR	A
19249+3973 32 0D E8     		LD	(	$E80D	),A
19250+3976
19251+3976 3A 07 E8     		LD	A,(	$E807	)
19252+3979 ED 47        		LD	I,A
19253+397B 3A 00 5B     		LD	A,(	$5B00)
19254+397E 32 08 E8     		LD	(	$E808	),A	; ENTONCES esta VAR me indica si es $FF = IM1 y si es $00 = IM2
19255+3981
19256+3981 21 00 C1     		LD	HL,	$c100
19257+3984 11 00 5B     		LD	DE,	$5B00
19258+3987 01 00 04     		LD	BC,1024
19259+398A ED B0        		LDIR
19260+398C
19261+398C 3A 00 E8     		LD	A,(		$E800	)
19262+398F 01 FD 7F     		LD	BC,PBANKM
19263+3992 ED 79        		OUT	(C),A
19264+3994
19265+3994 CD 96 3C     		CALL	SWP_RTALERT
19266+3997
19267+3997 DD E1        		POP	IX		; CARGA DE TAPs DESDE +3DOS
19268+3999 E1           		POP	HL
19269+399A D1           		POP	DE
19270+399B F1           		POP	AF
19271+399C 08           		EX	AF,AF'
19272+399D F1           		POP	AF
19273+399E 08           		EX	AF,AF'
19274+399F
19275+399F CD F4 39     		CALL	GET_BYTE_TAPE
19276+39A2 F5           		PUSH	AF
19277+39A3 CD F4 39     		CALL	GET_BYTE_TAPE
19278+39A6 67           		LD	H,A
19279+39A7 F1           		POP	AF
19280+39A8 6F           		LD	L,A		; en HL tengo la cantidad de bytes a leer del bloque actual
19281+39A9              					; ej: una cabecera son 19 bytes, (17+2)4
19282+39A9
19283+39A9 CD 64 3C     		CALL	SET_POS_SIG
19284+39AC
19285+39AC CD F4 39     		CALL	GET_BYTE_TAPE	; CARGO EL FLAG
19286+39AF 4F           		LD	C,A
19287+39B0 08           		EX	AF,AF'
19288+39B1 47           		LD	B,A
19289+39B2 08           		EX	AF,AF'
19290+39B3
19291+39B3 78           		LD	A,B
19292+39B4 B9           		CP	C
19293+39B5 20 32        		JR	NZ,ERROR_LFLAG	; SIMULO ERROR DE CARGA
19294+39B7
19295+39B7              ; (!! AVERIGUAR EL PUNTERO ACTUAL Y SUMARLE HL PARA SABER EN DONDE
19296+39B7              ; COMIENZE EL SIGUIENTE BLOQUE DEL TAP PARA CUANDO NECESITES PASAR
19297+39B7              ; AL SIGUIENTE BLOQUE)
19298+39B7
19299+39B7
19300+39B7 2B           		DEC	HL		; ya cargué el flag
19301+39B8 2B           		DEC	HL
19302+39B9 A7           		AND	A
19303+39BA ED 52        		SBC	HL,DE
19304+39BC 20 31        		JR	NZ,BAD_SIZE
19305+39BE
19306+39BE 61           		LD	H,C		; EL control de parity
19307+39BF              					; "comienza" con el mismo
19308+39BF              					; valor del flag
19309+39BF
19310+39BF CD F4 39     LOOP_LOAD_TAP:	CALL	GET_BYTE_TAPE
19311+39C2 D2 09 3C     		JP	NC,END_LDTAPE
19312+39C5
19313+39C5 4F           		LD	C,A
19314+39C6 3C           		INC	A
19315+39C7 E6 07        		AND	$07
19316+39C9 D3 FE        		OUT	($FE),A
19317+39CB 79           		LD	A,C
19318+39CC
19319+39CC 08           		EX	AF,AF'
19320+39CD 38 08        		JR	C,SET_LOAD
19321+39CF
19322+39CF 08           VERIF:		EX	AF,AF'
19323+39D0 DD BE 00     		CP	(IX+0)
19324+39D3 20 18        		JR	NZ,ERROR_VERIF
19325+39D5 18 04        		JR	CONT_NEXT_BYTE
19326+39D7
19327+39D7 08           SET_LOAD:	EX	AF,AF'
19328+39D8 DD 77 00     		LD	(IX+0),A
19329+39DB
19330+39DB DD 23        CONT_NEXT_BYTE:		INC	IX
19331+39DD 1B           		DEC	DE
19332+39DE
19333+39DE 6F           		LD	L,A		; calc parity
19334+39DF 7C           		LD	A,H
19335+39E0 AD           		XOR	L
19336+39E1 67           		LD	H,A
19337+39E2
19338+39E2 7A           		LD	A,D
19339+39E3 B3           		OR	E
19340+39E4 20 D9        		JR	NZ,LOOP_LOAD_TAP
19341+39E6
19342+39E6 C3 C0 3A     		JP	CONTINUARA
19343+39E9
19344+39E9
19345+39E9 18 06        ERROR_LFLAG:	JR	TAPE_ERROR	; cuando implementes retornar NZ y quedate posicionado al comienzo
19346+39EB              					; del siguiente bloque del TAP
19347+39EB
19348+39EB 18 04        ERROR_PARITY:	JR	TAPE_ERROR
19349+39ED
19350+39ED 18 02        ERROR_VERIF:	JR	TAPE_ERROR
19351+39EF
19352+39EF 18 00        BAD_SIZE:	JR	TAPE_ERROR	; significa que no me coincide lo que mandaron en DE y lo que puedo
19353+39F1              					; yo ofrecer desde el TAP, asi que lo considero de "antemano" error
19354+39F1              					; de carga y muevo el puntero del TAP al siguiente bloque
19355+39F1
19356+39F1 C3 89 3C     TAPE_ERROR:	JP	MOVE_NEXT_BLQ
19357+39F4
19358+39F4 CD CB 3A     GET_BYTE_TAPE:	CALL	READ_BYTE
19359+39F7 D0           		RET	NC
19360+39F8 CD B0 3C     		CALL	CHECK_TERMINAR
19361+39FB C9           		RET
19362+39FC
19363+39FC              		;...
19364+39FC              		;...
19365+39FC
19366+39FC              R3_FREE_0:	EQU	331-($-FREE_ROM3_0)
19367+39FC 00 00 00 00  ROM3_SPARE0:	DS	R3_FREE_0
19368+3A00
19369+3A00              ; The printer input (o3a00) and output (o3a05) routines
19370+3A00              ; Channel information for "P" channel points here
19371+3A00
19372+3A00 21 03 3D     o3A00:		LD	HL,$3D03	; input routine in ROM 1
19373+3A03 18 03        		JR	o3A08
19374+3A05 21 06 3D     o3A05:		LD	HL,$3D06	; output routine in ROM 1
19375+3A08 08           o3A08:		EX	AF,AF'
19376+3A09 01 FD 1F     		LD	BC,PBANK678
19377+3A0C 3A 67 5B     		LD	A,(	$5B67)
19378+3A0F F5           		PUSH	AF
19379+3A10 E6 FB        		AND	$FB		; select ROM 1
19380+3A12 F3           		DI
19381+3A13 32 67 5B     		LD	(	$5B67),A
19382+3A16 ED 79        		OUT	(C),A		; at this point, routine continues in ROM 1
19383+3A18 C3 00 3D     		JP	FONT
19384+3A1B 08           o3A1B:		EX	AF,AF'
19385+3A1C F1           		POP	AF
19386+3A1D 01 FD 1F     		LD	BC,PBANK678
19387+3A20 F3           		DI
19388+3A21 32 67 5B     		LD	(	$5B67),A
19389+3A24 ED 79        		OUT	(C),A
19390+3A26 FB           		EI			; control returns to this ROM here
19391+3A27 08           		EX	AF,AF'
19392+3A28 C9           		RET
19393+3A29
19394+3A29              ; Patch to print error message routine
19395+3A29
19396+3A29 FD CB 01 66  o3A29:		BIT	4,(IY+$01)	; check bit 4 of FLAGS
19397+3A2D 20 05        		JR	NZ,o3A34	; move on if in +3 BASIC
19398+3A2F AF           		XOR	A
19399+3A30 11 36 15     		LD	DE,$1536	; else exit to do standard "comma" message
19400+3A33 C9           		RET
19401+3A34 21 0F 01     o3A34:		LD	HL,$010F
19402+3A37 E3           o3A37:		EX	(SP),HL
19403+3A38 C3 00 5B     		JP		$5B00		; call routine in ROM 0
19404+3A3B              					; note that all these routines seem to enter
19405+3A3B              					; during the reset routine! Or am I missing
19406+3A3B              					; something...
19407+3A3B
19408+3A3B              ; Patch to "STMT-RET" routine
19409+3A3B
19410+3A3B FD CB 01 66  o3A3B:		BIT	4,(IY+$01)	; check bit 4 of FLAGS
19411+3A3F 20 05        		JR	NZ,o3A46	; move on if in +3 BASIC
19412+3A41 FD CB 0A 7E  		BIT	7,(IY+$0A)	; else exit with normal 48K ROM check done
19413+3A45 C9           		RET
19414+3A46 21 12 01     o3A46:		LD	HL,$0112
19415+3A49 18 EC        		JR	o3A37		; go to call routine in ROM 0
19416+3A4B
19417+3A4B
19418+3A4B              ; Patch to "STMT-NEXT" routine
19419+3A4B
19420+3A4B FD CB 01 66  o3A4B:		BIT	4,(IY+$01)	; check bit 4 of FLAGS
19421+3A4F 20 04        		JR	NZ,o3A55	; move on if in +3 BASIC
19422+3A51 DF           		RST	18H
19423+3A52 FE 0D        		CP	$0D		; else exit with normal 48K ROM check done
19424+3A54 C9           		RET
19425+3A55 21 15 01     o3A55:		LD	HL,$0115
19426+3A58 18 DD        		JR	o3A37		; go to call routine in ROM 0
19427+3A5A
19428+3A5A
19429+3A5A              ; Patch to INKEY$ function routine
19430+3A5A              ; Presumably, in earlier 128K spectrums this was used to read the
19431+3A5A              ; external keypad, but it effectively does nothing different to the
19432+3A5A              ; usual routine on the +3.
19433+3A5A
19434+3A5A CD 8E 02     o3A5A:		CALL	o028E		; do normal call to get key-value in DE
19435+3A5D 0E 00        		LD	C,$00
19436+3A5F 20 0D        		JR	NZ,o3A6E	; move on if too many keys pressed
19437+3A61 CD 1E 03     		CALL	o031E		; test key value
19438+3A64 30 08        		JR	NC,o3A6E	; move on if unsatisfactory
19439+3A66 15           		DEC	D		; D=$FF (L-mode)
19440+3A67 5F           		LD	E,A		; E=key value
19441+3A68 CD 33 03     		CALL	o0333		; decode
19442+3A6B C3 57 26     		JP	o2657		; jump back into INKEY$ routine with keycode
19443+3A6E FD CB 01 66  o3A6E:		BIT	4,(IY+$01)	; check bit 4 of FLAGS
19444+3A72 CA 60 26     		JP	Z,o2660		; jump back into INKEY$ if in 48K BASIC
19445+3A75 F3           		DI
19446+3A76 FB           		EI
19447+3A77 18 00        		JR	o3A79
19448+3A79 0E 00        o3A79:		LD	C,$00
19449+3A7B C3 60 26     		JP	o2660		; jump back into INKEY$ routine
19450+3A7E
19451+3A7E
19452+3A7E              ; Patch to "print a character" routine
19453+3A7E
19454+3A7E FE A3        o3A7E:		CP	$A3
19455+3A80 28 0C        		JR	Z,o3A8E		; move on for "SPECTRUM"
19456+3A82 FE A4        		CP	$A4
19457+3A84 28 08        		JR	Z,o3A8E		; move on for "PLAY"
19458+3A86 D6 A5        o3A86:		SUB	$A5
19459+3A88 D2 5F 0B     		JP	NC,o0B5F	; else rejoin print character routine
19460+3A8B C3 56 0B     		JP	o0B56		; with normal test done
19461+3A8E FD CB 01 66  o3A8E:		BIT	4,(IY+$01)	; check bit 4 of FLAGS
19462+3A92 28 F2        		JR	Z,o3A86		; move back if in 48K mode
19463+3A94 11 A8 3A     		LD	DE,o3AA8
19464+3A97 D5           		PUSH	DE		; stack address to return to in this routine
19465+3A98 D6 A3        		SUB	$A3
19466+3A9A 11 B1 3A     		LD	DE,o3AB1	; address of "SPECTRUM"
19467+3A9D 28 03        		JR	Z,o3AA2		; move on if SPECTRUM
19468+3A9F 11 B9 3A     		LD	DE,o3AB9	; address of "PLAY"
19469+3AA2 3E 04        o3AA2:		LD	A,$04
19470+3AA4 F5           		PUSH	AF		; stack $04 to get a trailing space
19471+3AA5 C3 17 0C     		JP	o0C17		; output the token & return to next instruction
19472+3AA8 37           o3AA8:		SCF
19473+3AA9 FD CB 01 4E  		BIT	1,(IY+$01)
19474+3AAD C0           		RET	NZ		; exit if handling the printer
19475+3AAE C3 03 0B     		JP	o0B03		; else jump back into print routine
19476+3AB1
19477+3AB1 53 50 45 43  o3AB1:		DM	"SPECTRU","M"  + $80
19477+3AB5 54 52 55 CD
19478+3AB9 50 4C 41 D9  o3AB9:		DM	"PLA","Y" + $80
19479+3ABD
19480+3ABD C3 01 3C     		JP	o3C01		; what's this for???
19481+3AC0              					; (yo me hago la misma pregunta amigo)
19482+3AC0
19483+3AC0              ; **** disponible ****
19484+3AC0
19485+3AC0              FREE_ROM3_1:	EQU	$
19486+3AC0
19487+3AC0 CD F4 39     CONTINUARA:	CALL	GET_BYTE_TAPE	; cargo parity
19488+3AC3 BC           		CP	H
19489+3AC4 C2 EB 39     		JP	NZ,ERROR_PARITY
19490+3AC7 33           RET_BASIC:	INC	SP
19491+3AC8 33           		INC	SP
19492+3AC9 08           		EX	AF,AF'
19493+3ACA C9           		RET
19494+3ACB
19495+3ACB E5           READ_BYTE:	PUSH	HL
19496+3ACC D5           		PUSH	DE
19497+3ACD C5           		PUSH	BC
19498+3ACE DD E5        		PUSH	IX
19499+3AD0 08           		EX	AF,AF'
19500+3AD1 F5           		PUSH	AF
19501+3AD2 08           		EX	AF,AF'
19502+3AD3
19503+3AD3 3E 7F        RETRY_RBYTE:	LD	A,$7F		; retorno si encontre SPACE presionada
19504+3AD5 DB FE        		IN	A,($FE)
19505+3AD7 1F           		RRA
19506+3AD8 30 32        		JR	NC,RET_READ_BYTE
19507+3ADA
19508+3ADA 3E 17        		LD	A,$17		; PONGO PAGINA 7
19509+3ADC 01 FD 7F     		LD	BC,PBANKM
19510+3ADF ED 79        		OUT	(C),A
19511+3AE1 AF           		XOR	A
19512+3AE2 32 0E E8     		LD	(	$E80E	),A
19513+3AE5 2A 0B E8     		LD	HL,(	$E80B	)
19514+3AE8 7C           		LD	A,H
19515+3AE9 B5           		OR	L
19516+3AEA 20 0A        		JR	NZ,OK_HAY_UN_BYTE
19517+3AEC
19518+3AEC 3A 00 E8     		LD	A,(		$E800	)	; REESTABLEZCO ROM/RAM
19519+3AEF ED 79        		OUT	(C),A
19520+3AF1 CD 15 3B     		CALL	DO_FILL_BUFFER
19521+3AF4 18 DD        		JR	RETRY_RBYTE
19522+3AF6
19523+3AF6 2B           OK_HAY_UN_BYTE:	DEC	HL
19524+3AF7 22 0B E8     		LD	(	$E80B	),HL
19525+3AFA 2A 09 E8     		LD	HL,(	$E809	)
19526+3AFD 56           		LD	D,(HL)
19527+3AFE 23           		INC	HL
19528+3AFF 22 09 E8     		LD	(	$E809	),HL
19529+3B02
19530+3B02 3A 00 E8     		LD	A,(		$E800	)	; REESTABLEZCO ROM/RAM
19531+3B05 01 FD 7F     		LD	BC,PBANKM
19532+3B08 ED 79        		OUT	(C),A
19533+3B0A
19534+3B0A 7A           		LD	A,D
19535+3B0B 37           		SCF			; retorno CY si se leyeron bytes
19536+3B0C
19537+3B0C 08           RET_READ_BYTE:	EX	AF,AF'
19538+3B0D F1           		POP	AF
19539+3B0E 08           		EX	AF,AF'
19540+3B0F DD E1        		POP	IX
19541+3B11 C1           		POP	BC
19542+3B12 D1           		POP	DE
19543+3B13 E1           		POP	HL
19544+3B14
19545+3B14 C9           		RET
19546+3B15
19547+3B15 3E 07        DO_FILL_BUFFER:	LD	A,$07
19548+3B17 D3 FE        		OUT	($FE),A
19549+3B19 3E 17        		LD	A,$17		; PONGO PAGINA 7
19550+3B1B 01 FD 7F     		LD	BC,PBANKM
19551+3B1E ED 79        		OUT	(C),A
19552+3B20
19553+3B20 21 00 80     ALT_ENTRY:	LD	HL,	$8000		; GUARDO LO QUE ESTA EN $8000 + 1K
19554+3B23 11 00 C1     		LD	DE,	$c100
19555+3B26 01 00 04     		LD	BC,1024
19556+3B29 ED B0        		LDIR
19557+3B2B
19558+3B2B 3A 5C 5B     		LD	A,(	$5B5C)	; GUARDO ESTAS VARS. XQ TENGO QUE ALTERARLAS
19559+3B2E 32 01 E8     		LD	(	$E801	),A	; PA' QUE +3DOS NO SE PONGA TRISTE LA PUTA QUE LO PARIO
19560+3B31 3A 67 5B     		LD	A,(	$5B67)
19561+3B34 32 02 E8     		LD	(	$E802	),A
19562+3B37 ED 73 03 E8  		LD	(	$E803	),SP	; TAMBIEN GUARDO STACK EN PAGINA 7
19563+3B3B
19564+3B3B 21 49 3B     		LD	HL,SWITCH_ROM2	; copio a $8000 la rutina de lectura del buffer
19565+3B3E 11 C8 80     		LD	DE,	$8000	+200
19566+3B41 01 00 02     		LD	BC,512
19567+3B44 ED B0        		LDIR
19568+3B46
19569+3B46 C3 C8 80     		JP		$8000	+200
19570+3B49
19571+3B49 31 C7 80     SWITCH_ROM2:	LD	SP,	$8000	+199	; NUEVO STACK
19572+3B4C
19573+3B4C 3E 04        		LD	A,$04
19574+3B4E 32 67 5B     		LD	(	$5B67),A
19575+3B51 01 FD 1F     		LD	BC,PBANK678
19576+3B54 ED 79        		OUT	(C),A
19577+3B56
19578+3B56 3E 07        		LD	A,$07
19579+3B58 32 5C 5B     		LD	(	$5B5C),A
19580+3B5B 01 FD 7F     		LD	BC,PBANKM
19581+3B5E ED 79        		OUT	(C),A		; AHORA ESTOY ARRIBA CON ROM2 PAGINADA
19582+3B60
19583+3B60 3E 82        		LD	A,$82		; establezco mis int. en MODO 2, que solo tiene un RETI
19584+3B62 ED 47        		LD	I,A		; así me evito que +3DOS me pisotee la zona de variables
19585+3B64 21 01 83     		LD	HL,$8301	; cosa que no pasar?a si la carga fuera desde cinta real
19586+3B67 22 FF 82     		LD	($82FF),HL
19587+3B6A 36 ED        		LD	(HL),$ED	; ---> RETI - o sea que no hago nada
19588+3B6C 23           		INC	HL
19589+3B6D 36 4D        		LD	(HL),$4D
19590+3B6F ED 5E        		IM	2
19591+3B71
19592+3B71 3A 0E E8     		LD	A,(	$E80E	)
19593+3B74 FE 01        		CP	$01
19594+3B76 28 3B        		JR	Z,RESET_FILE
19595+3B78 FE 02        		CP	$02
19596+3B7A 28 28        		JR	Z,SET_POS_FILE
19597+3B7C
19598+3B7C 01 07 06     		LD	BC,$0607	; ARCHIVO #6 ABIERTO EN ROM1 POR RUTINA MODIFICADA
19599+3B7F              					; QUE INTERPRETA EL COMANDO SPECTRUM "filename.tap"
19600+3B7F
19601+3B7F 11 00 14     		LD	DE,	5*1024
19602+3B82 21 00 C6     		LD	HL,	$c600
19603+3B85
19604+3B85 CD 12 01     		CALL	$0112	; LEO UN "sector"
19605+3B88 F3           		DI			; +3DOS *SIEMPRE* HABILITA LAS INT CUANDO TERMINA SU
19606+3B89              					; SERVICIO
19607+3B89
19608+3B89 21 00 14     		LD	HL,	5*1024		; hago de cuenta que lei todos los bytes
19609+3B8C 38 40        		JR	C,SIN_ERROR
19610+3B8E
19611+3B8E FE 19        		CP	25		; 25 = End of file
19612+3B90 28 24        		JR	Z,EOF
19613+3B92
19614+3B92 06 06        		LD	B,$06		; OTRO error que no sea EOF abandono el archivo y desactivo la carga
19615+3B94 CD 0C 01     		CALL	$010C
19616+3B97 AF           		XOR	A
19617+3B98 32 05 E8     		LD	(	$E805	),A
19618+3B9B 3C           		INC	A
19619+3B9C 32 0D E8     		LD	(	$E80D	),A
19620+3B9F 21 01 00     		LD	HL,$0001	; le hago creer que entro por lo menos un byte para que retorne bien
19621+3BA2 18 2A        		JR	SIN_ERROR	; y como desactive la carga desde "cinta" no volvermos aqui
19622+3BA4
19623+3BA4 06 06        SET_POS_FILE:	LD	B,$06
19624+3BA6 11 00 14     		LD	DE,	5*1024
19625+3BA9 D5           		PUSH	DE
19626+3BAA ED 5B 0F E8  		LD	DE,(		$E80F	+0)
19627+3BAE 2A 11 E8     		LD	HL,(		$E80F	+2)
19628+3BB1 18 0F        		JR	CONT_SET_POS
19629+3BB3
19630+3BB3 11 00 14     RESET_FILE:	LD	DE,	5*1024
19631+3BB6
19632+3BB6 D5           EOF:		PUSH	DE		; reestablezco el puntero de archivo a 0. es como si hubiese rebobinado
19633+3BB7 26 00        		LD	H,$00		; la cinta y comienza de nuevo
19634+3BB9 6C           		LD	L,H
19635+3BBA 54           		LD	D,H
19636+3BBB 5C           		LD	E,H
19637+3BBC 22 0F E8     		LD	(		$E80F	+0),HL
19638+3BBF 22 11 E8     		LD	(		$E80F	+2),HL
19639+3BC2 06 06        CONT_SET_POS:	LD	B,$06
19640+3BC4
19641+3BC4 CD 36 01     		CALL	$0136
19642+3BC7 D1           		POP	DE
19643+3BC8 A7           		AND	A		; segun el manual si hay un error en DE me queda la cantidad remante
19644+3BC9 21 00 14     		LD	HL,	5*1024		; por leer, entonces calculo cuantos bytes se leyeron
19645+3BCC ED 52        		SBC	HL,DE
19646+3BCE
19647+3BCE 01 FD 7F     SIN_ERROR:	LD	BC,PBANKM
19648+3BD1 3E 17        		LD	A,$17
19649+3BD3 ED 79        		OUT	(C),A
19650+3BD5 01 FD 1F     		LD	BC,PBANK678
19651+3BD8 3E 04        		LD	A,$04
19652+3BDA ED 79        		OUT	(C),A		; PARO EL MOTOR
19653+3BDC C3 DF 3B     		JP	RETPAG7
19654+3BDF
19655+3BDF ED 7B 03 E8  RETPAG7:	LD	SP,(	$E803	)
19656+3BE3
19657+3BE3 11 00 C6     		LD	DE,	$c600
19658+3BE6 ED 53 09 E8  		LD	(	$E809	),DE
19659+3BEA 22 0B E8     		LD	(	$E80B	),HL
19660+3BED
19661+3BED 21 00 C1     RETPAG7_3:	LD	HL,	$c100		; RECUPERO LO QUE ESTABA EN $8000 + 1K
19662+3BF0 11 00 80     		LD	DE,	$8000
19663+3BF3 01 00 04     		LD	BC,1024
19664+3BF6 ED B0        		LDIR
19665+3BF8
19666+3BF8 CD 37 3C     		CALL	REST_RAM_ROM	; SE RETORNA EN HL LA CANTIDAD DE BYTES
19667+3BFB C9           		RET			; LEIDOS
19668+3BFC
19669+3BFC              		;...
19670+3BFC              		;...
19671+3BFC
19672+3BFC              R3_FREE_1:	EQU	319-($-FREE_ROM3_1)
19673+3BFC 00 00 00     ROM3_SPARE1:	DS	R3_FREE_1
19674+3BFF
19675+3BFF FF FF        		DW	$FFFF		; para los juegos que usen IM2 con I=3F
19676+3C01
19677+3C01 13 00 31 39  o3C01:		DB	$13,$00,"19"	; testcard message
19678+3C05 13 01 38 37  		DB	$13,$01,"87"	; why is it here???
19679+3C09              					; (yo me pregunto lo mismo... pero
19680+3C09              					; supongo que estos 8 bytes pueden
19681+3C09              					; ser usados aunque no sirvan para
19682+3C09              					; nada en la práctica)
19683+3C09
19684+3C09              FREE_ROM3_2:	EQU	$
19685+3C09
19686+3C09 3E 01        END_LDTAPE:	LD	A,$01		; EN EL CASO DE APRETAR SPACE MIENTRAS
19687+3C0B CD 13 3C     		CALL	CALL_OTRAS	; SE CARGA no importa conservar
19688+3C0E 33           		INC	SP		; el valor de 'A'
19689+3C0F 33           		INC	SP
19690+3C10 08           		EX	AF,AF'
19691+3C11 A7           		AND	A
19692+3C12 C9           		RET
19693+3C13
19694+3C13 E5           CALL_OTRAS:	PUSH	HL
19695+3C14 D5           		PUSH	DE
19696+3C15 C5           		PUSH	BC
19697+3C16 DD E5        		PUSH	IX
19698+3C18 08           		EX	AF,AF'
19699+3C19 F5           		PUSH	AF
19700+3C1A 08           		EX	AF,AF'
19701+3C1B 21 2E 3C     		LD	HL,RET_CALL2
19702+3C1E E5           		PUSH	HL
19703+3C1F 6F           		LD	L,A
19704+3C20
19705+3C20 3E 17        		LD	A,$17
19706+3C22 01 FD 7F     		LD	BC,PBANKM
19707+3C25 ED 79        		OUT	(C),A
19708+3C27 7D           		LD	A,L
19709+3C28 32 0E E8     		LD	(	$E80E	),A
19710+3C2B
19711+3C2B C3 20 3B     		JP	ALT_ENTRY
19712+3C2E
19713+3C2E 08           RET_CALL2:	EX	AF,AF'
19714+3C2F F1           		POP	AF
19715+3C30 08           		EX	AF,AF'
19716+3C31 DD E1        		POP	IX
19717+3C33 C1           		POP	BC
19718+3C34 D1           		POP	DE
19719+3C35 E1           		POP	HL
19720+3C36
19721+3C36 C9           		RET
19722+3C37
19723+3C37 E3           REST_RAM_ROM:	EX	(SP),HL
19724+3C38 ED 56        		IM	1
19725+3C3A 3A 08 E8     		LD	A,(	$E808	)
19726+3C3D FE FF        		CP	$FF
19727+3C3F 28 02        		JR	Z,OK_IM1
19728+3C41 ED 5E        		IM	2
19729+3C43 3A 07 E8     OK_IM1:		LD	A,(	$E807	)
19730+3C46 ED 47        		LD	I,A
19731+3C48 3A 01 E8     		LD	A,(	$E801	)
19732+3C4B 32 5C 5B     		LD	(	$5B5C),A
19733+3C4E 3A 02 E8     		LD	A,(	$E802	)
19734+3C51 32 67 5B     		LD	(	$5B67),A
19735+3C54 3A 00 E8     		LD	A,(		$E800	)	; REESTABLEZCO ROM/RAM
19736+3C57 01 FD 7F     		LD	BC,PBANKM
19737+3C5A ED 79        		OUT	(C),A
19738+3C5C E3           		EX	(SP),HL
19739+3C5D C9           		RET
19740+3C5E
19741+3C5E AF           DUMMY_IM2:	XOR	A
19742+3C5F 32 00 5B     		LD	(	$5B00),A
19743+3C62 ED 4D        		RETI
19744+3C64
19745+3C64
19746+3C64 D5           SET_POS_SIG:	PUSH	DE
19747+3C65 C5           		PUSH	BC
19748+3C66 E5           		PUSH	HL		; ESTA RUTINA SE LLAMA CADA vez
19749+3C67 3E 17        		LD	A,$17		; que se empieza a cargar un bloque
19750+3C69 01 FD 7F     		LD	BC,PBANKM	; va guardando en (S_PFILE) la
19751+3C6C ED 79        		OUT	(C),A		; posicion de archivo en donde comienza
19752+3C6E E5           		PUSH	HL		; el siguiente bloque. para ser
19753+3C6F D1           		POP	DE		; usado en el manejo de errores
19754+3C70 13           		INC	DE
19755+3C71 13           		INC	DE
19756+3C72 2A 11 E8     		LD	HL,(		$E80F	+2)
19757+3C75 A7           		AND	A
19758+3C76 19           		ADD	HL,DE
19759+3C77 22 11 E8     		LD	(		$E80F	+2),HL
19760+3C7A 21 0F E8     		LD	HL,		$E80F	+0
19761+3C7D 30 01        		JR	NC,NODESB
19762+3C7F 34           		INC	(HL)
19763+3C80 3A 00 E8     NODESB:		LD	A,(		$E800	)	; REESTABLEZCO ROM/RAM
19764+3C83 ED 79        		OUT	(C),A
19765+3C85 E1           		POP	HL
19766+3C86 C1           		POP	BC
19767+3C87 D1           		POP	DE
19768+3C88 C9           		RET
19769+3C89
19770+3C89 3E 02        MOVE_NEXT_BLQ:	LD	A,$02		; mover al bloque siguiente en caso
19771+3C8B CD 13 3C     		CALL	CALL_OTRAS	; de "error"
19772+3C8E
19773+3C8E CD 96 3C     ERROR_EN_CARGA:	CALL	SWP_RTALERT	; fuerzo retorno por posible error +3DOS
19774+3C91 33           		INC	SP
19775+3C92 33           		INC	SP
19776+3C93 08           		EX	AF,AF'
19777+3C94 A7           		AND	A
19778+3C95 C9           		RET
19779+3C96
19780+3C96 D5           SWP_RTALERT:	PUSH	DE
19781+3C97 C5           		PUSH	BC
19782+3C98 E5           		PUSH	HL
19783+3C99 3E 17        		LD	A,$17
19784+3C9B 01 FD 7F     		LD	BC,PBANKM
19785+3C9E ED 79        		OUT	(C),A
19786+3CA0 2A 20 DB     		LD	HL,($DB20		)
19787+3CA3 ED 5B 13 E8  		LD	DE,(	$E813	)
19788+3CA7 ED 53 20 DB  		LD	($DB20		),DE
19789+3CAB 22 13 E8     		LD	(	$E813	),HL
19790+3CAE 18 D0        		JR	NODESB
19791+3CB0
19792+3CB0 F5           CHECK_TERMINAR:	PUSH	AF
19793+3CB1 C5           		PUSH	BC
19794+3CB2 3E 17        		LD	A,$17
19795+3CB4 01 FD 7F     		LD	BC,PBANKM
19796+3CB7 ED 79        		OUT	(C),A
19797+3CB9 3A 0D E8     		LD	A,(	$E80D	)
19798+3CBC FE 01        		CP	$01
19799+3CBE 3A 00 E8     		LD	A,(		$E800	)
19800+3CC1 ED 79        		OUT	(C),A
19801+3CC3 C1           		POP	BC
19802+3CC4 20 07        		JR	NZ,NO_ERROR_P3DOS
19803+3CC6 F1           		POP	AF
19804+3CC7 33           		INC	SP
19805+3CC8 33           		INC	SP
19806+3CC9 33           		INC	SP
19807+3CCA 33           		INC	SP
19808+3CCB
19809+3CCB 18 C1        		JR	ERROR_EN_CARGA
19810+3CCD
19811+3CCD F1           NO_ERROR_P3DOS:	POP	AF
19812+3CCE C9           		RET
19813+3CCF
19814+3CCF 3E 10        STANDAR_RAM:	LD	A,$10
19815+3CD1 32 5C 5B     		LD	(	$5B5C),A
19816+3CD4 3E 04        		LD	A,$04
19817+3CD6 32 67 5B     		LD	(	$5B67),A
19818+3CD9 C9           		RET
19819+3CDA
19820+3CDA              		;...
19821+3CDA              		;...
19822+3CDA
19823+3CDA              R3_FREE_2:	EQU	247-($-FREE_ROM3_2)
19824+3CDA 00 00 00...  ROM3_SPARE2:	DS	R3_FREE_2
19825+3D00
19826+3D00              ;===============================================================================
19827+3D00
19828+3D00              		INCLUDE	"plus3FONT.asm"
# file opened: plus3FONT.asm
    1+3D00              ; ---------------------------------------------
    2+3D00              ; THE ORIGINAL 100% "ZX SPECTRUM CHARACTER SET"
    3+3D00              ; ---------------------------------------------
    4+3D00
    5+3D00              ; ESTE ES UN TEXTO UTF8, ¡¡NO ES ANSI!!
    6+3D00              ; MANTENLO EN UTF8 SI QUIERES VER LA MASCARA
    7+3D00              ; DE LOS CARACTERES
    8+3D00
    9+3D00              		;01234567	  01234567
   10+3D00 00           FONT:	DB	%00000000	;1░░░░░░░░ CHR$ (32)
   11+3D01 00           	DB	%00000000	;2░░░░░░░░
   12+3D02 00           	DB	%00000000	;3░░░░░░░░
   13+3D03 00           	DB	%00000000	;4░░░░░░░░
   14+3D04 00           	DB	%00000000	;5░░░░░░░░
   15+3D05 00           	DB	%00000000	;6░░░░░░░░
   16+3D06 00           	DB	%00000000	;7░░░░░░░░
   17+3D07 00           	DB	%00000000	;8░░░░░░░░
   18+3D08
   19+3D08 00           	DB	%00000000	; ░░░░░░░░ CHR$ (33)
   20+3D09 10           	DB	%00010000	; ░░░█░░░░
   21+3D0A 10           	DB	%00010000	; ░░░█░░░░
   22+3D0B 10           	DB	%00010000	; ░░░█░░░░
   23+3D0C 10           	DB	%00010000	; ░░░█░░░░
   24+3D0D 00           	DB	%00000000	; ░░░░░░░░
   25+3D0E 10           	DB	%00010000	; ░░░█░░░░
   26+3D0F 00           	DB	%00000000	; ░░░░░░░░
   27+3D10
   28+3D10 00           	DB	%00000000	; ░░░░░░░░ CHR$ (34)
   29+3D11 24           	DB	%00100100	; ░░█░░█░░
   30+3D12 24           	DB	%00100100	; ░░█░░█░░
   31+3D13 00           	DB	%00000000	; ░░░░░░░░
   32+3D14 00           	DB	%00000000	; ░░░░░░░░
   33+3D15 00           	DB	%00000000	; ░░░░░░░░
   34+3D16 00           	DB	%00000000	; ░░░░░░░░
   35+3D17 00           	DB	%00000000	; ░░░░░░░░
   36+3D18
   37+3D18 00           	DB	%00000000	; ░░░░░░░░ CHR$ (35)
   38+3D19 24           	DB	%00100100	; ░░█░░█░░
   39+3D1A 7E           	DB	%01111110	; ░██████░
   40+3D1B 24           	DB	%00100100	; ░░█░░█░░
   41+3D1C 24           	DB	%00100100	; ░░█░░█░░
   42+3D1D 7E           	DB	%01111110	; ░██████░
   43+3D1E 24           	DB	%00100100	; ░░█░░█░░
   44+3D1F 00           	DB	%00000000	; ░░░░░░░░
   45+3D20
   46+3D20 00           	DB	%00000000	; ░░░░░░░░ CHR$ (36)
   47+3D21 08           	DB	%00001000	; ░░░░█░░░
   48+3D22 3E           	DB	%00111110	; ░░█████░
   49+3D23 28           	DB	%00101000	; ░░█░█░░░
   50+3D24 3E           	DB	%00111110	; ░░█████░
   51+3D25 0A           	DB	%00001010	; ░░░░█░█░
   52+3D26 3E           	DB	%00111110	; ░░█████░
   53+3D27 08           	DB	%00001000	; ░░░░█░░░
   54+3D28
   55+3D28 00           	DB	%00000000	; ░░░░░░░░ CHR$ (37)
   56+3D29 62           	DB	%01100010	; ░██░░░█░
   57+3D2A 64           	DB	%01100100	; ░██░░█░░
   58+3D2B 08           	DB	%00001000	; ░░░░█░░░
   59+3D2C 10           	DB	%00010000	; ░░░█░░░░
   60+3D2D 26           	DB	%00100110	; ░░█░░██░
   61+3D2E 46           	DB	%01000110	; ░█░░░██░
   62+3D2F 00           	DB	%00000000	; ░░░░░░░░
   63+3D30
   64+3D30 00           	DB	%00000000	; ░░░░░░░░ CHR$ (38)
   65+3D31 10           	DB	%00010000	; ░░░█░░░░
   66+3D32 28           	DB	%00101000	; ░░█░█░░░
   67+3D33 10           	DB	%00010000	; ░░░█░░░░
   68+3D34 2A           	DB	%00101010	; ░░█░█░█░
   69+3D35 44           	DB	%01000100	; ░█░░░█░░
   70+3D36 3A           	DB	%00111010	; ░░███░█░
   71+3D37 00           	DB	%00000000	; ░░░░░░░░
   72+3D38
   73+3D38 00           	DB	%00000000	; ░░░░░░░░ CHR$ (39)
   74+3D39 08           	DB	%00001000	; ░░░░█░░░
   75+3D3A 10           	DB	%00010000	; ░░░█░░░░
   76+3D3B 00           	DB	%00000000	; ░░░░░░░░
   77+3D3C 00           	DB	%00000000	; ░░░░░░░░
   78+3D3D 00           	DB	%00000000	; ░░░░░░░░
   79+3D3E 00           	DB	%00000000	; ░░░░░░░░
   80+3D3F 00           	DB	%00000000	; ░░░░░░░░
   81+3D40
   82+3D40 00           	DB	%00000000	; ░░░░░░░░ CHR$ (40)
   83+3D41 04           	DB	%00000100	; ░░░░░█░░
   84+3D42 08           	DB	%00001000	; ░░░░█░░░
   85+3D43 08           	DB	%00001000	; ░░░░█░░░
   86+3D44 08           	DB	%00001000	; ░░░░█░░░
   87+3D45 08           	DB	%00001000	; ░░░░█░░░
   88+3D46 04           	DB	%00000100	; ░░░░░█░░
   89+3D47 00           	DB	%00000000	; ░░░░░░░░
   90+3D48
   91+3D48 00           	DB	%00000000	; ░░░░░░░░ CHR$ (41)
   92+3D49 20           	DB	%00100000	; ░░█░░░░░
   93+3D4A 10           	DB	%00010000	; ░░░█░░░░
   94+3D4B 10           	DB	%00010000	; ░░░█░░░░
   95+3D4C 10           	DB	%00010000	; ░░░█░░░░
   96+3D4D 10           	DB	%00010000	; ░░░█░░░░
   97+3D4E 20           	DB	%00100000	; ░░█░░░░░
   98+3D4F 00           	DB	%00000000	; ░░░░░░░░
   99+3D50
  100+3D50 00           	DB	%00000000	; ░░░░░░░░ CHR$ (42)
  101+3D51 00           	DB	%00000000	; ░░░░░░░░
  102+3D52 14           	DB	%00010100	; ░░░█░█░░
  103+3D53 08           	DB	%00001000	; ░░░░█░░░
  104+3D54 3E           	DB	%00111110	; ░░█████░
  105+3D55 08           	DB	%00001000	; ░░░░█░░░
  106+3D56 14           	DB	%00010100	; ░░░█░█░░
  107+3D57 00           	DB	%00000000	; ░░░░░░░░
  108+3D58
  109+3D58 00           	DB	%00000000	; ░░░░░░░░ CHR$ (43)
  110+3D59 00           	DB	%00000000	; ░░░░░░░░
  111+3D5A 08           	DB	%00001000	; ░░░░█░░░
  112+3D5B 08           	DB	%00001000	; ░░░░█░░░
  113+3D5C 3E           	DB	%00111110	; ░░█████░
  114+3D5D 08           	DB	%00001000	; ░░░░█░░░
  115+3D5E 08           	DB	%00001000	; ░░░░█░░░
  116+3D5F 00           	DB	%00000000	; ░░░░░░░░
  117+3D60
  118+3D60 00           	DB	%00000000	; ░░░░░░░░ CHR$ (44)
  119+3D61 00           	DB	%00000000	; ░░░░░░░░
  120+3D62 00           	DB	%00000000	; ░░░░░░░░
  121+3D63 00           	DB	%00000000	; ░░░░░░░░
  122+3D64 00           	DB	%00000000	; ░░░░░░░░
  123+3D65 08           	DB	%00001000	; ░░░░█░░░
  124+3D66 08           	DB	%00001000	; ░░░░█░░░
  125+3D67 10           	DB	%00010000	; ░░░█░░░░
  126+3D68
  127+3D68 00           	DB	%00000000	; ░░░░░░░░ CHR$ (45)
  128+3D69 00           	DB	%00000000	; ░░░░░░░░
  129+3D6A 00           	DB	%00000000	; ░░░░░░░░
  130+3D6B 00           	DB	%00000000	; ░░░░░░░░
  131+3D6C 3E           	DB	%00111110	; ░░█████░
  132+3D6D 00           	DB	%00000000	; ░░░░░░░░
  133+3D6E 00           	DB	%00000000	; ░░░░░░░░
  134+3D6F 00           	DB	%00000000	; ░░░░░░░░
  135+3D70
  136+3D70 00           	DB	%00000000	; ░░░░░░░░ CHR$ (46)
  137+3D71 00           	DB	%00000000	; ░░░░░░░░
  138+3D72 00           	DB	%00000000	; ░░░░░░░░
  139+3D73 00           	DB	%00000000	; ░░░░░░░░
  140+3D74 00           	DB	%00000000	; ░░░░░░░░
  141+3D75 18           	DB	%00011000	; ░░░██░░░
  142+3D76 18           	DB	%00011000	; ░░░██░░░
  143+3D77 00           	DB	%00000000	; ░░░░░░░░
  144+3D78
  145+3D78 00           	DB	%00000000	; ░░░░░░░░ CHR$ (47)
  146+3D79 00           	DB	%00000000	; ░░░░░░░░
  147+3D7A 02           	DB	%00000010	; ░░░░░░█░
  148+3D7B 04           	DB	%00000100	; ░░░░░█░░
  149+3D7C 08           	DB	%00001000	; ░░░░█░░░
  150+3D7D 10           	DB	%00010000	; ░░░█░░░░
  151+3D7E 20           	DB	%00100000	; ░░█░░░░░
  152+3D7F 00           	DB	%00000000	; ░░░░░░░░
  153+3D80
  154+3D80 00           	DB	%00000000	; ░░░░░░░░ CHR$ (48)
  155+3D81 3C           	DB	%00111100	; ░░████░░
  156+3D82 46           	DB	%01000110	; ░█░░░██░
  157+3D83 4A           	DB	%01001010	; ░█░░█░█░
  158+3D84 52           	DB	%01010010	; ░█░█░░█░
  159+3D85 62           	DB	%01100010	; ░██░░░█░
  160+3D86 3C           	DB	%00111100	; ░░████░░
  161+3D87 00           	DB	%00000000	; ░░░░░░░░
  162+3D88
  163+3D88 00           	DB	%00000000	; ░░░░░░░░ CHR$ (49)
  164+3D89 18           	DB	%00011000	; ░░░██░░░
  165+3D8A 28           	DB	%00101000	; ░░█░█░░░
  166+3D8B 08           	DB	%00001000	; ░░░░█░░░
  167+3D8C 08           	DB	%00001000	; ░░░░█░░░
  168+3D8D 08           	DB	%00001000	; ░░░░█░░░
  169+3D8E 3E           	DB	%00111110	; ░░█████░
  170+3D8F 00           	DB	%00000000	; ░░░░░░░░
  171+3D90
  172+3D90 00           	DB	%00000000	; ░░░░░░░░ CHR$ (50)
  173+3D91 3C           	DB	%00111100	; ░░████░░
  174+3D92 42           	DB	%01000010	; ░█░░░░█░
  175+3D93 02           	DB	%00000010	; ░░░░░░█░
  176+3D94 3C           	DB	%00111100	; ░░████░░
  177+3D95 40           	DB	%01000000	; ░█░░░░░░
  178+3D96 7E           	DB	%01111110	; ░██████░
  179+3D97 00           	DB	%00000000	; ░░░░░░░░
  180+3D98
  181+3D98 00           	DB	%00000000	; ░░░░░░░░ CHR$ (51)
  182+3D99 3C           	DB	%00111100	; ░░████░░
  183+3D9A 42           	DB	%01000010	; ░█░░░░█░
  184+3D9B 0C           	DB	%00001100	; ░░░░██░░
  185+3D9C 02           	DB	%00000010	; ░░░░░░█░
  186+3D9D 42           	DB	%01000010	; ░█░░░░█░
  187+3D9E 3C           	DB	%00111100	; ░░████░░
  188+3D9F 00           	DB	%00000000	; ░░░░░░░░
  189+3DA0
  190+3DA0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (52)
  191+3DA1 08           	DB	%00001000	; ░░░░█░░░
  192+3DA2 18           	DB	%00011000	; ░░░██░░░
  193+3DA3 28           	DB	%00101000	; ░░█░█░░░
  194+3DA4 48           	DB	%01001000	; ░█░░█░░░
  195+3DA5 7E           	DB	%01111110	; ░██████░
  196+3DA6 08           	DB	%00001000	; ░░░░█░░░
  197+3DA7 00           	DB	%00000000	; ░░░░░░░░
  198+3DA8
  199+3DA8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (53)
  200+3DA9 7E           	DB	%01111110	; ░██████░
  201+3DAA 40           	DB	%01000000	; ░█░░░░░░
  202+3DAB 7C           	DB	%01111100	; ░█████░░
  203+3DAC 02           	DB	%00000010	; ░░░░░░█░
  204+3DAD 42           	DB	%01000010	; ░█░░░░█░
  205+3DAE 3C           	DB	%00111100	; ░░████░░
  206+3DAF 00           	DB	%00000000	; ░░░░░░░░
  207+3DB0
  208+3DB0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (54)
  209+3DB1 3C           	DB	%00111100	; ░░████░░
  210+3DB2 40           	DB	%01000000	; ░█░░░░░░
  211+3DB3 7C           	DB	%01111100	; ░█████░░
  212+3DB4 42           	DB	%01000010	; ░█░░░░█░
  213+3DB5 42           	DB	%01000010	; ░█░░░░█░
  214+3DB6 3C           	DB	%00111100	; ░░████░░
  215+3DB7 00           	DB	%00000000	; ░░░░░░░░
  216+3DB8
  217+3DB8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (55)
  218+3DB9 7E           	DB	%01111110	; ░██████░
  219+3DBA 02           	DB	%00000010	; ░░░░░░█░
  220+3DBB 04           	DB	%00000100	; ░░░░░█░░
  221+3DBC 08           	DB	%00001000	; ░░░░█░░░
  222+3DBD 10           	DB	%00010000	; ░░░█░░░░
  223+3DBE 10           	DB	%00010000	; ░░░█░░░░
  224+3DBF 00           	DB	%00000000	; ░░░░░░░░
  225+3DC0
  226+3DC0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (56)
  227+3DC1 3C           	DB	%00111100	; ░░████░░
  228+3DC2 42           	DB	%01000010	; ░█░░░░█░
  229+3DC3 3C           	DB	%00111100	; ░░████░░
  230+3DC4 42           	DB	%01000010	; ░█░░░░█░
  231+3DC5 42           	DB	%01000010	; ░█░░░░█░
  232+3DC6 3C           	DB	%00111100	; ░░████░░
  233+3DC7 00           	DB	%00000000	; ░░░░░░░░
  234+3DC8
  235+3DC8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (57)
  236+3DC9 3C           	DB	%00111100	; ░░████░░
  237+3DCA 42           	DB	%01000010	; ░█░░░░█░
  238+3DCB 42           	DB	%01000010	; ░█░░░░█░
  239+3DCC 3E           	DB	%00111110	; ░░█████░
  240+3DCD 02           	DB	%00000010	; ░░░░░░█░
  241+3DCE 3C           	DB	%00111100	; ░░████░░
  242+3DCF 00           	DB	%00000000	; ░░░░░░░░
  243+3DD0
  244+3DD0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (58)
  245+3DD1 00           	DB	%00000000	; ░░░░░░░░
  246+3DD2 00           	DB	%00000000	; ░░░░░░░░
  247+3DD3 10           	DB	%00010000	; ░░░█░░░░
  248+3DD4 00           	DB	%00000000	; ░░░░░░░░
  249+3DD5 00           	DB	%00000000	; ░░░░░░░░
  250+3DD6 10           	DB	%00010000	; ░░░█░░░░
  251+3DD7 00           	DB	%00000000	; ░░░░░░░░
  252+3DD8
  253+3DD8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (59)
  254+3DD9 00           	DB	%00000000	; ░░░░░░░░
  255+3DDA 10           	DB	%00010000	; ░░░█░░░░
  256+3DDB 00           	DB	%00000000	; ░░░░░░░░
  257+3DDC 00           	DB	%00000000	; ░░░░░░░░
  258+3DDD 10           	DB	%00010000	; ░░░█░░░░
  259+3DDE 10           	DB	%00010000	; ░░░█░░░░
  260+3DDF 20           	DB	%00100000	; ░░█░░░░░
  261+3DE0
  262+3DE0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (60)
  263+3DE1 00           	DB	%00000000	; ░░░░░░░░
  264+3DE2 04           	DB	%00000100	; ░░░░░█░░
  265+3DE3 08           	DB	%00001000	; ░░░░█░░░
  266+3DE4 10           	DB	%00010000	; ░░░█░░░░
  267+3DE5 08           	DB	%00001000	; ░░░░█░░░
  268+3DE6 04           	DB	%00000100	; ░░░░░█░░
  269+3DE7 00           	DB	%00000000	; ░░░░░░░░
  270+3DE8
  271+3DE8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (61)
  272+3DE9 00           	DB	%00000000	; ░░░░░░░░
  273+3DEA 00           	DB	%00000000	; ░░░░░░░░
  274+3DEB 3E           	DB	%00111110	; ░░█████░
  275+3DEC 00           	DB	%00000000	; ░░░░░░░░
  276+3DED 3E           	DB	%00111110	; ░░█████░
  277+3DEE 00           	DB	%00000000	; ░░░░░░░░
  278+3DEF 00           	DB	%00000000	; ░░░░░░░░
  279+3DF0
  280+3DF0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (62)
  281+3DF1 00           	DB	%00000000	; ░░░░░░░░
  282+3DF2 10           	DB	%00010000	; ░░░█░░░░
  283+3DF3 08           	DB	%00001000	; ░░░░█░░░
  284+3DF4 04           	DB	%00000100	; ░░░░░█░░
  285+3DF5 08           	DB	%00001000	; ░░░░█░░░
  286+3DF6 10           	DB	%00010000	; ░░░█░░░░
  287+3DF7 00           	DB	%00000000	; ░░░░░░░░
  288+3DF8
  289+3DF8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (63)
  290+3DF9 3C           	DB	%00111100	; ░░████░░
  291+3DFA 42           	DB	%01000010	; ░█░░░░█░
  292+3DFB 04           	DB	%00000100	; ░░░░░█░░
  293+3DFC 08           	DB	%00001000	; ░░░░█░░░
  294+3DFD 00           	DB	%00000000	; ░░░░░░░░
  295+3DFE 08           	DB	%00001000	; ░░░░█░░░
  296+3DFF 00           	DB	%00000000	; ░░░░░░░░
  297+3E00
  298+3E00 00           	DB	%00000000	; ░░░░░░░░ CHR$ (64)
  299+3E01 3C           	DB	%00111100	; ░░████░░
  300+3E02 4A           	DB	%01001010	; ░█░░█░█░
  301+3E03 56           	DB	%01010110	; ░█░█░██░
  302+3E04 5E           	DB	%01011110	; ░█░████░
  303+3E05 40           	DB	%01000000	; ░█░░░░░░
  304+3E06 3C           	DB	%00111100	; ░░████░░
  305+3E07 00           	DB	%00000000	; ░░░░░░░░
  306+3E08
  307+3E08 00           	DB	%00000000	; ░░░░░░░░ CHR$ (65)
  308+3E09 3C           	DB	%00111100	; ░░████░░
  309+3E0A 42           	DB	%01000010	; ░█░░░░█░
  310+3E0B 42           	DB	%01000010	; ░█░░░░█░
  311+3E0C 7E           	DB	%01111110	; ░██████░
  312+3E0D 42           	DB	%01000010	; ░█░░░░█░
  313+3E0E 42           	DB	%01000010	; ░█░░░░█░
  314+3E0F 00           	DB	%00000000	; ░░░░░░░░
  315+3E10
  316+3E10 00           	DB	%00000000	; ░░░░░░░░ CHR$ (66)
  317+3E11 7C           	DB	%01111100	; ░█████░░
  318+3E12 42           	DB	%01000010	; ░█░░░░█░
  319+3E13 7C           	DB	%01111100	; ░█████░░
  320+3E14 42           	DB	%01000010	; ░█░░░░█░
  321+3E15 42           	DB	%01000010	; ░█░░░░█░
  322+3E16 7C           	DB	%01111100	; ░█████░░
  323+3E17 00           	DB	%00000000	; ░░░░░░░░
  324+3E18
  325+3E18 00           	DB	%00000000	; ░░░░░░░░ CHR$ (67)
  326+3E19 3C           	DB	%00111100	; ░░████░░
  327+3E1A 42           	DB	%01000010	; ░█░░░░█░
  328+3E1B 40           	DB	%01000000	; ░█░░░░░░
  329+3E1C 40           	DB	%01000000	; ░█░░░░░░
  330+3E1D 42           	DB	%01000010	; ░█░░░░█░
  331+3E1E 3C           	DB	%00111100	; ░░████░░
  332+3E1F 00           	DB	%00000000	; ░░░░░░░░
  333+3E20
  334+3E20 00           	DB	%00000000	; ░░░░░░░░ CHR$ (68)
  335+3E21 78           	DB	%01111000	; ░████░░░
  336+3E22 44           	DB	%01000100	; ░█░░░█░░
  337+3E23 42           	DB	%01000010	; ░█░░░░█░
  338+3E24 42           	DB	%01000010	; ░█░░░░█░
  339+3E25 44           	DB	%01000100	; ░█░░░█░░
  340+3E26 78           	DB	%01111000	; ░████░░░
  341+3E27 00           	DB	%00000000	; ░░░░░░░░
  342+3E28
  343+3E28 00           	DB	%00000000	; ░░░░░░░░ CHR$ (69)
  344+3E29 7E           	DB	%01111110	; ░██████░
  345+3E2A 40           	DB	%01000000	; ░█░░░░░░
  346+3E2B 7C           	DB	%01111100	; ░█████░░
  347+3E2C 40           	DB	%01000000	; ░█░░░░░░
  348+3E2D 40           	DB	%01000000	; ░█░░░░░░
  349+3E2E 7E           	DB	%01111110	; ░██████░
  350+3E2F 00           	DB	%00000000	; ░░░░░░░░
  351+3E30
  352+3E30 00           	DB	%00000000	; ░░░░░░░░ CHR$ (70)
  353+3E31 7E           	DB	%01111110	; ░██████░
  354+3E32 40           	DB	%01000000	; ░█░░░░░░
  355+3E33 7C           	DB	%01111100	; ░█████░░
  356+3E34 40           	DB	%01000000	; ░█░░░░░░
  357+3E35 40           	DB	%01000000	; ░█░░░░░░
  358+3E36 40           	DB	%01000000	; ░█░░░░░░
  359+3E37 00           	DB	%00000000	; ░░░░░░░░
  360+3E38
  361+3E38 00           	DB	%00000000	; ░░░░░░░░ CHR$ (71)
  362+3E39 3C           	DB	%00111100	; ░░████░░
  363+3E3A 42           	DB	%01000010	; ░█░░░░█░
  364+3E3B 40           	DB	%01000000	; ░█░░░░░░
  365+3E3C 4E           	DB	%01001110	; ░█░░███░
  366+3E3D 42           	DB	%01000010	; ░█░░░░█░
  367+3E3E 3C           	DB	%00111100	; ░░████░░
  368+3E3F 00           	DB	%00000000	; ░░░░░░░░
  369+3E40
  370+3E40 00           	DB	%00000000	; ░░░░░░░░ CHR$ (72)
  371+3E41 42           	DB	%01000010	; ░█░░░░█░
  372+3E42 42           	DB	%01000010	; ░█░░░░█░
  373+3E43 7E           	DB	%01111110	; ░██████░
  374+3E44 42           	DB	%01000010	; ░█░░░░█░
  375+3E45 42           	DB	%01000010	; ░█░░░░█░
  376+3E46 42           	DB	%01000010	; ░█░░░░█░
  377+3E47 00           	DB	%00000000	; ░░░░░░░░
  378+3E48
  379+3E48 00           	DB	%00000000	; ░░░░░░░░ CHR$ (73)
  380+3E49 3E           	DB	%00111110	; ░░█████░
  381+3E4A 08           	DB	%00001000	; ░░░░█░░░
  382+3E4B 08           	DB	%00001000	; ░░░░█░░░
  383+3E4C 08           	DB	%00001000	; ░░░░█░░░
  384+3E4D 08           	DB	%00001000	; ░░░░█░░░
  385+3E4E 3E           	DB	%00111110	; ░░█████░
  386+3E4F 00           	DB	%00000000	; ░░░░░░░░
  387+3E50
  388+3E50 00           	DB	%00000000	; ░░░░░░░░ CHR$ (74)
  389+3E51 02           	DB	%00000010	; ░░░░░░█░
  390+3E52 02           	DB	%00000010	; ░░░░░░█░
  391+3E53 02           	DB	%00000010	; ░░░░░░█░
  392+3E54 42           	DB	%01000010	; ░█░░░░█░
  393+3E55 42           	DB	%01000010	; ░█░░░░█░
  394+3E56 3C           	DB	%00111100	; ░░████░░
  395+3E57 00           	DB	%00000000	; ░░░░░░░░
  396+3E58
  397+3E58 00           	DB	%00000000	; ░░░░░░░░ CHR$ (75)
  398+3E59 44           	DB	%01000100	; ░█░░░█░░
  399+3E5A 48           	DB	%01001000	; ░█░░█░░░
  400+3E5B 70           	DB	%01110000	; ░███░░░░
  401+3E5C 48           	DB	%01001000	; ░█░░█░░░
  402+3E5D 44           	DB	%01000100	; ░█░░░█░░
  403+3E5E 42           	DB	%01000010	; ░█░░░░█░
  404+3E5F 00           	DB	%00000000	; ░░░░░░░░
  405+3E60
  406+3E60 00           	DB	%00000000	; ░░░░░░░░ CHR$ (76)
  407+3E61 40           	DB	%01000000	; ░█░░░░░░
  408+3E62 40           	DB	%01000000	; ░█░░░░░░
  409+3E63 40           	DB	%01000000	; ░█░░░░░░
  410+3E64 40           	DB	%01000000	; ░█░░░░░░
  411+3E65 40           	DB	%01000000	; ░█░░░░░░
  412+3E66 7E           	DB	%01111110	; ░██████░
  413+3E67 00           	DB	%00000000	; ░░░░░░░░
  414+3E68
  415+3E68 00           	DB	%00000000	; ░░░░░░░░ CHR$ (77)
  416+3E69 42           	DB	%01000010	; ░█░░░░█░
  417+3E6A 66           	DB	%01100110	; ░██░░██░
  418+3E6B 5A           	DB	%01011010	; ░█░██░█░
  419+3E6C 42           	DB	%01000010	; ░█░░░░█░
  420+3E6D 42           	DB	%01000010	; ░█░░░░█░
  421+3E6E 42           	DB	%01000010	; ░█░░░░█░
  422+3E6F 00           	DB	%00000000	; ░░░░░░░░
  423+3E70
  424+3E70 00           	DB	%00000000	; ░░░░░░░░ CHR$ (78)
  425+3E71 42           	DB	%01000010	; ░█░░░░█░
  426+3E72 62           	DB	%01100010	; ░██░░░█░
  427+3E73 52           	DB	%01010010	; ░█░█░░█░
  428+3E74 4A           	DB	%01001010	; ░█░░█░█░
  429+3E75 46           	DB	%01000110	; ░█░░░██░
  430+3E76 42           	DB	%01000010	; ░█░░░░█░
  431+3E77 00           	DB	%00000000	; ░░░░░░░░
  432+3E78
  433+3E78 00           	DB	%00000000	; ░░░░░░░░ CHR$ (79)
  434+3E79 3C           	DB	%00111100	; ░░████░░
  435+3E7A 42           	DB	%01000010	; ░█░░░░█░
  436+3E7B 42           	DB	%01000010	; ░█░░░░█░
  437+3E7C 42           	DB	%01000010	; ░█░░░░█░
  438+3E7D 42           	DB	%01000010	; ░█░░░░█░
  439+3E7E 3C           	DB	%00111100	; ░░████░░
  440+3E7F 00           	DB	%00000000	; ░░░░░░░░
  441+3E80
  442+3E80 00           	DB	%00000000	; ░░░░░░░░ CHR$ (80)
  443+3E81 7C           	DB	%01111100	; ░█████░░
  444+3E82 42           	DB	%01000010	; ░█░░░░█░
  445+3E83 42           	DB	%01000010	; ░█░░░░█░
  446+3E84 7C           	DB	%01111100	; ░█████░░
  447+3E85 40           	DB	%01000000	; ░█░░░░░░
  448+3E86 40           	DB	%01000000	; ░█░░░░░░
  449+3E87 00           	DB	%00000000	; ░░░░░░░░
  450+3E88
  451+3E88 00           	DB	%00000000	; ░░░░░░░░ CHR$ (81)
  452+3E89 3C           	DB	%00111100	; ░░████░░
  453+3E8A 42           	DB	%01000010	; ░█░░░░█░
  454+3E8B 42           	DB	%01000010	; ░█░░░░█░
  455+3E8C 52           	DB	%01010010	; ░█░█░░█░
  456+3E8D 4A           	DB	%01001010	; ░█░░█░█░
  457+3E8E 3C           	DB	%00111100	; ░░████░░
  458+3E8F 00           	DB	%00000000	; ░░░░░░░░
  459+3E90
  460+3E90 00           	DB	%00000000	; ░░░░░░░░ CHR$ (82)
  461+3E91 7C           	DB	%01111100	; ░█████░░
  462+3E92 42           	DB	%01000010	; ░█░░░░█░
  463+3E93 42           	DB	%01000010	; ░█░░░░█░
  464+3E94 7C           	DB	%01111100	; ░█████░░
  465+3E95 44           	DB	%01000100	; ░█░░░█░░
  466+3E96 42           	DB	%01000010	; ░█░░░░█░
  467+3E97 00           	DB	%00000000	; ░░░░░░░░
  468+3E98
  469+3E98 00           	DB	%00000000	; ░░░░░░░░ CHR$ (83)
  470+3E99 3C           	DB	%00111100	; ░░████░░
  471+3E9A 40           	DB	%01000000	; ░█░░░░░░
  472+3E9B 3C           	DB	%00111100	; ░░████░░
  473+3E9C 02           	DB	%00000010	; ░░░░░░█░
  474+3E9D 42           	DB	%01000010	; ░█░░░░█░
  475+3E9E 3C           	DB	%00111100	; ░░████░░
  476+3E9F 00           	DB	%00000000	; ░░░░░░░░
  477+3EA0
  478+3EA0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (84)
  479+3EA1 FE           	DB	%11111110	; ███████░
  480+3EA2 10           	DB	%00010000	; ░░░█░░░░
  481+3EA3 10           	DB	%00010000	; ░░░█░░░░
  482+3EA4 10           	DB	%00010000	; ░░░█░░░░
  483+3EA5 10           	DB	%00010000	; ░░░█░░░░
  484+3EA6 10           	DB	%00010000	; ░░░█░░░░
  485+3EA7 00           	DB	%00000000	; ░░░░░░░░
  486+3EA8
  487+3EA8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (85)
  488+3EA9 42           	DB	%01000010	; ░█░░░░█░
  489+3EAA 42           	DB	%01000010	; ░█░░░░█░
  490+3EAB 42           	DB	%01000010	; ░█░░░░█░
  491+3EAC 42           	DB	%01000010	; ░█░░░░█░
  492+3EAD 42           	DB	%01000010	; ░█░░░░█░
  493+3EAE 3C           	DB	%00111100	; ░░████░░
  494+3EAF 00           	DB	%00000000	; ░░░░░░░░
  495+3EB0
  496+3EB0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (86)
  497+3EB1 42           	DB	%01000010	; ░█░░░░█░
  498+3EB2 42           	DB	%01000010	; ░█░░░░█░
  499+3EB3 42           	DB	%01000010	; ░█░░░░█░
  500+3EB4 42           	DB	%01000010	; ░█░░░░█░
  501+3EB5 24           	DB	%00100100	; ░░█░░█░░
  502+3EB6 18           	DB	%00011000	; ░░░██░░░
  503+3EB7 00           	DB	%00000000	; ░░░░░░░░
  504+3EB8
  505+3EB8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (87)
  506+3EB9 42           	DB	%01000010	; ░█░░░░█░
  507+3EBA 42           	DB	%01000010	; ░█░░░░█░
  508+3EBB 42           	DB	%01000010	; ░█░░░░█░
  509+3EBC 42           	DB	%01000010	; ░█░░░░█░
  510+3EBD 5A           	DB	%01011010	; ░█░██░█░
  511+3EBE 24           	DB	%00100100	; ░░█░░█░░
  512+3EBF 00           	DB	%00000000	; ░░░░░░░░
  513+3EC0
  514+3EC0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (88)
  515+3EC1 42           	DB	%01000010	; ░█░░░░█░
  516+3EC2 24           	DB	%00100100	; ░░█░░█░░
  517+3EC3 18           	DB	%00011000	; ░░░██░░░
  518+3EC4 18           	DB	%00011000	; ░░░██░░░
  519+3EC5 24           	DB	%00100100	; ░░█░░█░░
  520+3EC6 42           	DB	%01000010	; ░█░░░░█░
  521+3EC7 00           	DB	%00000000	; ░░░░░░░░
  522+3EC8
  523+3EC8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (89)
  524+3EC9 82           	DB	%10000010	; █░░░░░█░
  525+3ECA 44           	DB	%01000100	; ░█░░░█░░
  526+3ECB 28           	DB	%00101000	; ░░█░█░░░
  527+3ECC 10           	DB	%00010000	; ░░░█░░░░
  528+3ECD 10           	DB	%00010000	; ░░░█░░░░
  529+3ECE 10           	DB	%00010000	; ░░░█░░░░
  530+3ECF 00           	DB	%00000000	; ░░░░░░░░
  531+3ED0
  532+3ED0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (90)
  533+3ED1 7E           	DB	%01111110	; ░██████░
  534+3ED2 04           	DB	%00000100	; ░░░░░█░░
  535+3ED3 08           	DB	%00001000	; ░░░░█░░░
  536+3ED4 10           	DB	%00010000	; ░░░█░░░░
  537+3ED5 20           	DB	%00100000	; ░░█░░░░░
  538+3ED6 7E           	DB	%01111110	; ░██████░
  539+3ED7 00           	DB	%00000000	; ░░░░░░░░
  540+3ED8
  541+3ED8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (91)
  542+3ED9 0E           	DB	%00001110	; ░░░░███░
  543+3EDA 08           	DB	%00001000	; ░░░░█░░░
  544+3EDB 08           	DB	%00001000	; ░░░░█░░░
  545+3EDC 08           	DB	%00001000	; ░░░░█░░░
  546+3EDD 08           	DB	%00001000	; ░░░░█░░░
  547+3EDE 0E           	DB	%00001110	; ░░░░███░
  548+3EDF 00           	DB	%00000000	; ░░░░░░░░
  549+3EE0
  550+3EE0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (92)
  551+3EE1 00           	DB	%00000000	; ░░░░░░░░
  552+3EE2 40           	DB	%01000000	; ░█░░░░░░
  553+3EE3 20           	DB	%00100000	; ░░█░░░░░
  554+3EE4 10           	DB	%00010000	; ░░░█░░░░
  555+3EE5 08           	DB	%00001000	; ░░░░█░░░
  556+3EE6 04           	DB	%00000100	; ░░░░░█░░
  557+3EE7 00           	DB	%00000000	; ░░░░░░░░
  558+3EE8
  559+3EE8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (93)
  560+3EE9 70           	DB	%01110000	; ░███░░░░
  561+3EEA 10           	DB	%00010000	; ░░░█░░░░
  562+3EEB 10           	DB	%00010000	; ░░░█░░░░
  563+3EEC 10           	DB	%00010000	; ░░░█░░░░
  564+3EED 10           	DB	%00010000	; ░░░█░░░░
  565+3EEE 70           	DB	%01110000	; ░███░░░░
  566+3EEF 00           	DB	%00000000	; ░░░░░░░░
  567+3EF0
  568+3EF0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (94)
  569+3EF1 10           	DB	%00010000	; ░░░█░░░░
  570+3EF2 38           	DB	%00111000	; ░░███░░░
  571+3EF3 54           	DB	%01010100	; ░█░█░█░░
  572+3EF4 10           	DB	%00010000	; ░░░█░░░░
  573+3EF5 10           	DB	%00010000	; ░░░█░░░░
  574+3EF6 10           	DB	%00010000	; ░░░█░░░░
  575+3EF7 00           	DB	%00000000	; ░░░░░░░░
  576+3EF8
  577+3EF8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (95)
  578+3EF9 00           	DB	%00000000	; ░░░░░░░░
  579+3EFA 00           	DB	%00000000	; ░░░░░░░░
  580+3EFB 00           	DB	%00000000	; ░░░░░░░░
  581+3EFC 00           	DB	%00000000	; ░░░░░░░░
  582+3EFD 00           	DB	%00000000	; ░░░░░░░░
  583+3EFE 00           	DB	%00000000	; ░░░░░░░░
  584+3EFF FF           	DB	%11111111	; ████████
  585+3F00
  586+3F00 00           	DB	%00000000	; ░░░░░░░░ CHR$ (96)
  587+3F01 1C           	DB	%00011100	; ░░░███░░
  588+3F02 22           	DB	%00100010	; ░░█░░░█░
  589+3F03 78           	DB	%01111000	; ░████░░░
  590+3F04 20           	DB	%00100000	; ░░█░░░░░
  591+3F05 20           	DB	%00100000	; ░░█░░░░░
  592+3F06 7E           	DB	%01111110	; ░██████░
  593+3F07 00           	DB	%00000000	; ░░░░░░░░
  594+3F08
  595+3F08 00           	DB	%00000000	; ░░░░░░░░ CHR$ (97)
  596+3F09 00           	DB	%00000000	; ░░░░░░░░
  597+3F0A 38           	DB	%00111000	; ░░███░░░
  598+3F0B 04           	DB	%00000100	; ░░░░░█░░
  599+3F0C 3C           	DB	%00111100	; ░░████░░
  600+3F0D 44           	DB	%01000100	; ░█░░░█░░
  601+3F0E 3C           	DB	%00111100	; ░░████░░
  602+3F0F 00           	DB	%00000000	; ░░░░░░░░
  603+3F10
  604+3F10 00           	DB	%00000000	; ░░░░░░░░ CHR$ (98)
  605+3F11 20           	DB	%00100000	; ░░█░░░░░
  606+3F12 20           	DB	%00100000	; ░░█░░░░░
  607+3F13 3C           	DB	%00111100	; ░░████░░
  608+3F14 22           	DB	%00100010	; ░░█░░░█░
  609+3F15 22           	DB	%00100010	; ░░█░░░█░
  610+3F16 3C           	DB	%00111100	; ░░████░░
  611+3F17 00           	DB	%00000000	; ░░░░░░░░
  612+3F18
  613+3F18 00           	DB	%00000000	; ░░░░░░░░ CHR$ (99)
  614+3F19 00           	DB	%00000000	; ░░░░░░░░
  615+3F1A 1C           	DB	%00011100	; ░░░███░░
  616+3F1B 20           	DB	%00100000	; ░░█░░░░░
  617+3F1C 20           	DB	%00100000	; ░░█░░░░░
  618+3F1D 20           	DB	%00100000	; ░░█░░░░░
  619+3F1E 1C           	DB	%00011100	; ░░░███░░
  620+3F1F 00           	DB	%00000000	; ░░░░░░░░
  621+3F20
  622+3F20 00           	DB	%00000000	; ░░░░░░░░ CHR$ (100)
  623+3F21 04           	DB	%00000100	; ░░░░░█░░
  624+3F22 04           	DB	%00000100	; ░░░░░█░░
  625+3F23 3C           	DB	%00111100	; ░░████░░
  626+3F24 44           	DB	%01000100	; ░█░░░█░░
  627+3F25 44           	DB	%01000100	; ░█░░░█░░
  628+3F26 3C           	DB	%00111100	; ░░████░░
  629+3F27 00           	DB	%00000000	; ░░░░░░░░
  630+3F28
  631+3F28 00           	DB	%00000000	; ░░░░░░░░ CHR$ (101)
  632+3F29 00           	DB	%00000000	; ░░░░░░░░
  633+3F2A 38           	DB	%00111000	; ░░███░░░
  634+3F2B 44           	DB	%01000100	; ░█░░░█░░
  635+3F2C 78           	DB	%01111000	; ░████░░░
  636+3F2D 40           	DB	%01000000	; ░█░░░░░░
  637+3F2E 3C           	DB	%00111100	; ░░████░░
  638+3F2F 00           	DB	%00000000	; ░░░░░░░░
  639+3F30
  640+3F30 00           	DB	%00000000	; ░░░░░░░░ CHR$ (102)
  641+3F31 0C           	DB	%00001100	; ░░░░██░░
  642+3F32 10           	DB	%00010000	; ░░░█░░░░
  643+3F33 18           	DB	%00011000	; ░░░██░░░
  644+3F34 10           	DB	%00010000	; ░░░█░░░░
  645+3F35 10           	DB	%00010000	; ░░░█░░░░
  646+3F36 10           	DB	%00010000	; ░░░█░░░░
  647+3F37 00           	DB	%00000000	; ░░░░░░░░
  648+3F38
  649+3F38 00           	DB	%00000000	; ░░░░░░░░ CHR$ (103)
  650+3F39 00           	DB	%00000000	; ░░░░░░░░
  651+3F3A 3C           	DB	%00111100	; ░░████░░
  652+3F3B 44           	DB	%01000100	; ░█░░░█░░
  653+3F3C 44           	DB	%01000100	; ░█░░░█░░
  654+3F3D 3C           	DB	%00111100	; ░░████░░
  655+3F3E 04           	DB	%00000100	; ░░░░░█░░
  656+3F3F 38           	DB	%00111000	; ░░███░░░
  657+3F40
  658+3F40 00           	DB	%00000000	; ░░░░░░░░ CHR$ (104)
  659+3F41 40           	DB	%01000000	; ░█░░░░░░
  660+3F42 40           	DB	%01000000	; ░█░░░░░░
  661+3F43 78           	DB	%01111000	; ░████░░░
  662+3F44 44           	DB	%01000100	; ░█░░░█░░
  663+3F45 44           	DB	%01000100	; ░█░░░█░░
  664+3F46 44           	DB	%01000100	; ░█░░░█░░
  665+3F47 00           	DB	%00000000	; ░░░░░░░░
  666+3F48
  667+3F48 00           	DB	%00000000	; ░░░░░░░░ CHR$ (105)
  668+3F49 10           	DB	%00010000	; ░░░█░░░░
  669+3F4A 00           	DB	%00000000	; ░░░░░░░░
  670+3F4B 30           	DB	%00110000	; ░░██░░░░
  671+3F4C 10           	DB	%00010000	; ░░░█░░░░
  672+3F4D 10           	DB	%00010000	; ░░░█░░░░
  673+3F4E 38           	DB	%00111000	; ░░███░░░
  674+3F4F 00           	DB	%00000000	; ░░░░░░░░
  675+3F50
  676+3F50 00           	DB	%00000000	; ░░░░░░░░ CHR$ (106)
  677+3F51 04           	DB	%00000100	; ░░░░░█░░
  678+3F52 00           	DB	%00000000	; ░░░░░░░░
  679+3F53 04           	DB	%00000100	; ░░░░░█░░
  680+3F54 04           	DB	%00000100	; ░░░░░█░░
  681+3F55 04           	DB	%00000100	; ░░░░░█░░
  682+3F56 24           	DB	%00100100	; ░░█░░█░░
  683+3F57 18           	DB	%00011000	; ░░░██░░░
  684+3F58
  685+3F58 00           	DB	%00000000	; ░░░░░░░░ CHR$ (107)
  686+3F59 20           	DB	%00100000	; ░░█░░░░░
  687+3F5A 28           	DB	%00101000	; ░░█░█░░░
  688+3F5B 30           	DB	%00110000	; ░░██░░░░
  689+3F5C 30           	DB	%00110000	; ░░██░░░░
  690+3F5D 28           	DB	%00101000	; ░░█░█░░░
  691+3F5E 24           	DB	%00100100	; ░░█░░█░░
  692+3F5F 00           	DB	%00000000	; ░░░░░░░░
  693+3F60
  694+3F60 00           	DB	%00000000	; ░░░░░░░░ CHR$ (108)
  695+3F61 10           	DB	%00010000	; ░░░█░░░░
  696+3F62 10           	DB	%00010000	; ░░░█░░░░
  697+3F63 10           	DB	%00010000	; ░░░█░░░░
  698+3F64 10           	DB	%00010000	; ░░░█░░░░
  699+3F65 10           	DB	%00010000	; ░░░█░░░░
  700+3F66 0C           	DB	%00001100	; ░░░░██░░
  701+3F67 00           	DB	%00000000	; ░░░░░░░░
  702+3F68
  703+3F68 00           	DB	%00000000	; ░░░░░░░░ CHR$ (109)
  704+3F69 00           	DB	%00000000	; ░░░░░░░░
  705+3F6A 68           	DB	%01101000	; ░██░█░░░
  706+3F6B 54           	DB	%01010100	; ░█░█░█░░
  707+3F6C 54           	DB	%01010100	; ░█░█░█░░
  708+3F6D 54           	DB	%01010100	; ░█░█░█░░
  709+3F6E 54           	DB	%01010100	; ░█░█░█░░
  710+3F6F 00           	DB	%00000000	; ░░░░░░░░
  711+3F70
  712+3F70 00           	DB	%00000000	; ░░░░░░░░ CHR$ (110)
  713+3F71 00           	DB	%00000000	; ░░░░░░░░
  714+3F72 78           	DB	%01111000	; ░████░░░
  715+3F73 44           	DB	%01000100	; ░█░░░█░░
  716+3F74 44           	DB	%01000100	; ░█░░░█░░
  717+3F75 44           	DB	%01000100	; ░█░░░█░░
  718+3F76 44           	DB	%01000100	; ░█░░░█░░
  719+3F77 00           	DB	%00000000	; ░░░░░░░░
  720+3F78
  721+3F78 00           	DB	%00000000	; ░░░░░░░░ CHR$ (111)
  722+3F79 00           	DB	%00000000	; ░░░░░░░░
  723+3F7A 38           	DB	%00111000	; ░░███░░░
  724+3F7B 44           	DB	%01000100	; ░█░░░█░░
  725+3F7C 44           	DB	%01000100	; ░█░░░█░░
  726+3F7D 44           	DB	%01000100	; ░█░░░█░░
  727+3F7E 38           	DB	%00111000	; ░░███░░░
  728+3F7F 00           	DB	%00000000	; ░░░░░░░░
  729+3F80
  730+3F80 00           	DB	%00000000	; ░░░░░░░░ CHR$ (112)
  731+3F81 00           	DB	%00000000	; ░░░░░░░░
  732+3F82 78           	DB	%01111000	; ░████░░░
  733+3F83 44           	DB	%01000100	; ░█░░░█░░
  734+3F84 44           	DB	%01000100	; ░█░░░█░░
  735+3F85 78           	DB	%01111000	; ░████░░░
  736+3F86 40           	DB	%01000000	; ░█░░░░░░
  737+3F87 40           	DB	%01000000	; ░█░░░░░░
  738+3F88
  739+3F88 00           	DB	%00000000	; ░░░░░░░░ CHR$ (113)
  740+3F89 00           	DB	%00000000	; ░░░░░░░░
  741+3F8A 3C           	DB	%00111100	; ░░████░░
  742+3F8B 44           	DB	%01000100	; ░█░░░█░░
  743+3F8C 44           	DB	%01000100	; ░█░░░█░░
  744+3F8D 3C           	DB	%00111100	; ░░████░░
  745+3F8E 04           	DB	%00000100	; ░░░░░█░░
  746+3F8F 06           	DB	%00000110	; ░░░░░██░
  747+3F90
  748+3F90 00           	DB	%00000000	; ░░░░░░░░ CHR$ (114)
  749+3F91 00           	DB	%00000000	; ░░░░░░░░
  750+3F92 1C           	DB	%00011100	; ░░░███░░
  751+3F93 20           	DB	%00100000	; ░░█░░░░░
  752+3F94 20           	DB	%00100000	; ░░█░░░░░
  753+3F95 20           	DB	%00100000	; ░░█░░░░░
  754+3F96 20           	DB	%00100000	; ░░█░░░░░
  755+3F97 00           	DB	%00000000	; ░░░░░░░░
  756+3F98
  757+3F98 00           	DB	%00000000	; ░░░░░░░░ CHR$ (115)
  758+3F99 00           	DB	%00000000	; ░░░░░░░░
  759+3F9A 38           	DB	%00111000	; ░░███░░░
  760+3F9B 40           	DB	%01000000	; ░█░░░░░░
  761+3F9C 38           	DB	%00111000	; ░░███░░░
  762+3F9D 04           	DB	%00000100	; ░░░░░█░░
  763+3F9E 78           	DB	%01111000	; ░████░░░
  764+3F9F 00           	DB	%00000000	; ░░░░░░░░
  765+3FA0
  766+3FA0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (116)
  767+3FA1 10           	DB	%00010000	; ░░░█░░░░
  768+3FA2 38           	DB	%00111000	; ░░███░░░
  769+3FA3 10           	DB	%00010000	; ░░░█░░░░
  770+3FA4 10           	DB	%00010000	; ░░░█░░░░
  771+3FA5 10           	DB	%00010000	; ░░░█░░░░
  772+3FA6 0C           	DB	%00001100	; ░░░░██░░
  773+3FA7 00           	DB	%00000000	; ░░░░░░░░
  774+3FA8
  775+3FA8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (117)
  776+3FA9 00           	DB	%00000000	; ░░░░░░░░
  777+3FAA 44           	DB	%01000100	; ░█░░░█░░
  778+3FAB 44           	DB	%01000100	; ░█░░░█░░
  779+3FAC 44           	DB	%01000100	; ░█░░░█░░
  780+3FAD 44           	DB	%01000100	; ░█░░░█░░
  781+3FAE 38           	DB	%00111000	; ░░███░░░
  782+3FAF 00           	DB	%00000000	; ░░░░░░░░
  783+3FB0
  784+3FB0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (118)
  785+3FB1 00           	DB	%00000000	; ░░░░░░░░
  786+3FB2 44           	DB	%01000100	; ░█░░░█░░
  787+3FB3 44           	DB	%01000100	; ░█░░░█░░
  788+3FB4 28           	DB	%00101000	; ░░█░█░░░
  789+3FB5 28           	DB	%00101000	; ░░█░█░░░
  790+3FB6 10           	DB	%00010000	; ░░░█░░░░
  791+3FB7 00           	DB	%00000000	; ░░░░░░░░
  792+3FB8
  793+3FB8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (119)
  794+3FB9 00           	DB	%00000000	; ░░░░░░░░
  795+3FBA 44           	DB	%01000100	; ░█░░░█░░
  796+3FBB 54           	DB	%01010100	; ░█░█░█░░
  797+3FBC 54           	DB	%01010100	; ░█░█░█░░
  798+3FBD 54           	DB	%01010100	; ░█░█░█░░
  799+3FBE 28           	DB	%00101000	; ░░█░█░░░
  800+3FBF 00           	DB	%00000000	; ░░░░░░░░
  801+3FC0
  802+3FC0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (120)
  803+3FC1 00           	DB	%00000000	; ░░░░░░░░
  804+3FC2 44           	DB	%01000100	; ░█░░░█░░
  805+3FC3 28           	DB	%00101000	; ░░█░█░░░
  806+3FC4 10           	DB	%00010000	; ░░░█░░░░
  807+3FC5 28           	DB	%00101000	; ░░█░█░░░
  808+3FC6 44           	DB	%01000100	; ░█░░░█░░
  809+3FC7 00           	DB	%00000000	; ░░░░░░░░
  810+3FC8
  811+3FC8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (121)
  812+3FC9 00           	DB	%00000000	; ░░░░░░░░
  813+3FCA 44           	DB	%01000100	; ░█░░░█░░
  814+3FCB 44           	DB	%01000100	; ░█░░░█░░
  815+3FCC 44           	DB	%01000100	; ░█░░░█░░
  816+3FCD 3C           	DB	%00111100	; ░░████░░
  817+3FCE 04           	DB	%00000100	; ░░░░░█░░
  818+3FCF 38           	DB	%00111000	; ░░███░░░
  819+3FD0
  820+3FD0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (122)
  821+3FD1 00           	DB	%00000000	; ░░░░░░░░
  822+3FD2 7C           	DB	%01111100	; ░█████░░
  823+3FD3 08           	DB	%00001000	; ░░░░█░░░
  824+3FD4 10           	DB	%00010000	; ░░░█░░░░
  825+3FD5 20           	DB	%00100000	; ░░█░░░░░
  826+3FD6 7C           	DB	%01111100	; ░█████░░
  827+3FD7 00           	DB	%00000000	; ░░░░░░░░
  828+3FD8
  829+3FD8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (123)
  830+3FD9 0E           	DB	%00001110	; ░░░░███░
  831+3FDA 08           	DB	%00001000	; ░░░░█░░░
  832+3FDB 30           	DB	%00110000	; ░░██░░░░
  833+3FDC 08           	DB	%00001000	; ░░░░█░░░
  834+3FDD 08           	DB	%00001000	; ░░░░█░░░
  835+3FDE 0E           	DB	%00001110	; ░░░░███░
  836+3FDF 00           	DB	%00000000	; ░░░░░░░░
  837+3FE0
  838+3FE0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (124)
  839+3FE1 08           	DB	%00001000	; ░░░░█░░░
  840+3FE2 08           	DB	%00001000	; ░░░░█░░░
  841+3FE3 08           	DB	%00001000	; ░░░░█░░░
  842+3FE4 08           	DB	%00001000	; ░░░░█░░░
  843+3FE5 08           	DB	%00001000	; ░░░░█░░░
  844+3FE6 08           	DB	%00001000	; ░░░░█░░░
  845+3FE7 00           	DB	%00000000	; ░░░░░░░░
  846+3FE8
  847+3FE8 00           	DB	%00000000	; ░░░░░░░░ CHR$ (125)
  848+3FE9 70           	DB	%01110000	; ░███░░░░
  849+3FEA 10           	DB	%00010000	; ░░░█░░░░
  850+3FEB 0C           	DB	%00001100	; ░░░░██░░
  851+3FEC 10           	DB	%00010000	; ░░░█░░░░
  852+3FED 10           	DB	%00010000	; ░░░█░░░░
  853+3FEE 70           	DB	%01110000	; ░███░░░░
  854+3FEF 00           	DB	%00000000	; ░░░░░░░░
  855+3FF0
  856+3FF0 00           	DB	%00000000	; ░░░░░░░░ CHR$ (126)
  857+3FF1 14           	DB	%00010100	; ░░░█░█░░
  858+3FF2 28           	DB	%00101000	; ░░█░█░░░
  859+3FF3 00           	DB	%00000000	; ░░░░░░░░
  860+3FF4 00           	DB	%00000000	; ░░░░░░░░
  861+3FF5 00           	DB	%00000000	; ░░░░░░░░
  862+3FF6 00           	DB	%00000000	; ░░░░░░░░
  863+3FF7 00           	DB	%00000000	; ░░░░░░░░
  864+3FF8
  865+3FF8 3C           	DB	%00111100	; ░░████░░ CHR$ (127)
  866+3FF9 42           	DB	%01000010	; ░█░░░░█░
  867+3FFA 99           	DB	%10011001	; █░░██░░█
  868+3FFB A1           	DB	%10100001	; █░█░░░░█
  869+3FFC A1           	DB	%10100001	; █░█░░░░█
  870+3FFD 99           	DB	%10011001	; █░░██░░█
  871+3FFE 42           	DB	%01000010	; ░█░░░░█░
  872+3FFF 3C           	DB	%00111100	; ░░████░░
# file closed: plus3FONT.asm
19829+4000
19830+4000              ;===============================================================================
19831+4000
19832+4000              ; Acknowledgements
19833+4000              ; -----------------
19834+4000              ; Sean Irvine               for default list of section headings
19835+4000              ; Dr. Ian Logan             for labels and functional disassembly.
19836+4000              ; Dr. Frank O'Hara          for labels and functional disassembly.
19837+4000              ;
19838+4000              ; Credits
19839+4000              ; -------
19840+4000              ; Alex Pallero Gonzales     for corrections.
19841+4000              ; Mike Dailly               for comments.
19842+4000              ; Alvin Albrecht            for comments.
19843+4000              ; Andy Styles               for full relocatability implementation and testing.
19844+4000              ; Andrew Owen               for ZASM compatibility and format improvements.
19845+4000
19846+4000              ;   For other assemblers you may have to add directives like these near the
19847+4000              ;   beginning - see accompanying documentation.
19848+4000              ;   ZASM (MacOs) cross-assembler directives. (uncomment by removing $3B )
19849+4000              ;   #target rom           ; declare target file format as binary.
19850+4000              ;   #code   0,$4000       ; declare code segment.
19851+4000              ;   Also see notes at Address Labels 0609 and 1CA5 if your assembler has
19852+4000              ;   trouble with expressions.
19853+4000              ;
19854+4000              ;   Note. The Sinclair Interface 1 ROM written by Dr. Ian Logan and Martin
19855+4000              ;   Brennan calls numerous routines in this ROM.
19856+4000              ;   Non-standard entry points have a label beginning with X.
19857+4000
# file closed: plus3ROM3.asm
  124 4000
  125 4000              ; ==================================================================================================
  126 4000              ; https://github.com/dejotaerre/p3e8b-tap-support
# file closed: plus3.asm

Value    Label
------ - -----------------------------------------------------------
0x3CDA X ROM3_SPARE2
0x0026   R3_FREE_2
0x3CCD   NO_ERROR_P3DOS
0x3C8E   ERROR_EN_CARGA
0x3C80   NODESB
0x3C43   OK_IM1
0x3C2E   RET_CALL2
0x3C13   CALL_OTRAS
0x3C09   FREE_ROM3_2
0x3BFC X ROM3_SPARE1
0x0003   R3_FREE_1
0x3C37   REST_RAM_ROM
0x3BED X RETPAG7_3
0x3BDF   RETPAG7
0x3BC2   CONT_SET_POS
0x3BA4   SET_POS_FILE
0x3BB3   RESET_FILE
0x3B49   SWITCH_ROM2
0x3B20   ALT_ENTRY
0x3B15   DO_FILL_BUFFER
0x3AF6   OK_HAY_UN_BYTE
0x3B0C   RET_READ_BYTE
0x3AD3   RETRY_RBYTE
0x3C01   o3C01
0x3AB9   o3AB9
0x3AA2   o3AA2
0x3AB1   o3AB1
0x3A86   o3A86
0x3A79   o3A79
0x3A6E   o3A6E
0x3A55   o3A55
0x3A46   o3A46
0x3A37   o3A37
0x3A34   o3A34
0x3A1B X o3A1B
0x3D00   FONT
0x3A05 X o3A05
0x3A08   o3A08
0x39FC X ROM3_SPARE0
0x0004   R3_FREE_0
0x3CB0   CHECK_TERMINAR
0x3ACB   READ_BYTE
0x39EB   ERROR_PARITY
0x39F1   TAPE_ERROR
0x3AC0   CONTINUARA
0x39DB   CONT_NEXT_BYTE
0x39CF X VERIF
0x39D7   SET_LOAD
0x3C09   END_LDTAPE
0x39EF   BAD_SIZE
0x3C64   SET_POS_SIG
0x39F4   GET_BYTE_TAPE
0x3C5E   DUMMY_IM2
0x3CCF   STANDAR_RAM
0x3936 X SIMULAR_TAPE
0x391A X RET_NEW_LOAD
0x3912   RETLOAD2
0x38F3   ENCONTRADA
0x38EE   NOMEMORY
0x38D6   LFIND_UPPERMEM
0x38B5   FREE_ROM3_0
0x387F   o387F
0x387C   o387C
0x386C X o386C
0x386A X o386A
0x385D X o385D
0x37F8   o37F8
0x37A8 X o37A8
0x37A1 X o37A1
0x373D X o373D
0x371C X o371C
0x371A X o371A
0x370E   o370E
0x3703   o3703
0x3705   o3705
0x36C2 X o36C2
0x36B7 X o36B7
0x3687   o3687
0x3671   o3671
0x365F   o365F
0x360C   o360C
0x35DC   o35DC
0x35B7   o35B7
0x3585   o3585
0x3588   o3588
0x3572   o3572
0x356B   o356B
0x3575   o3575
0x3564   o3564
0x358C   o358C
0x354E   o354E
0x3543   o3543
0x3507   o3507
0x34E4   o34E4
0x34D3   o34D3
0x34E7   o34E7
0x34B0   o34B0
0x3483   o3483
0x3474   o3474
0x3453 X o3453
0x343E   o343E
0x33F8   o33F8
0x33F7   o33F7
0x33F1   o33F1
0x33DE   o33DE
0x33C8   o33C8
0x338C   o338C
0x338E   o338E
0x3380   o3380
0x336C   o336C
0x3365   o3365
0x3362   o3362
0x335E   o335E
0x340F   o340F
0x342D   o342D
0x3449   o3449
0x33A2   o33A2
0x3783   o3783
0x369B   o369B
0x34F9   o34F9
0x3506   o3506
0x367A   o367A
0x33C6   o33C6
0x3686   o3686
0x3501   o3501
0x35C9   o35C9
0x361F   o361F
0x34B3   o34B3
0x34A5   o34A5
0x34AC   o34AC
0x346A   o346A
0x3492   o3492
0x384A   o384A
0x36AF   o36AF
0x36C4   o36C4
0x3713   o3713
0x37E2   o37E2
0x3843   o3843
0x3833   o3833
0x37DA   o37DA
0x37AA   o37AA
0x37B5   o37B5
0x3674   o3674
0x3669   o3669
0x3645   o3645
0x34BC   o34BC
0x35DE   o35DE
0x359C   o359C
0x352D   o352D
0x353B   o353B
0x3851   o3851
0x33A1   o33A1
0x343C   o343C
0x368F   o368F
0x32D7   o32D7
0x32D3 X o32D3
0x32CC X o32CC
0x32C5   o32C5
0x32B2   o32B2
0x32BD   o32BD
0x32B1   o32B1
0x3297   o3297
0x328A   o328A
0x327E   o327E
0x3283   o3283
0x3261   o3261
0x3267   o3267
0x325E   o325E
0x3252   o3252
0x326D   o326D
0x326C   o326C
0x3233   o3233
0x323F   o323F
0x3272   o3272
0x3221   o3221
0x3214   o3214
0x31FA   o31FA
0x31F9   o31F9
0x31F2   o31F2
0x31DB X o31DB
0x31D2   o31D2
0x31E2   o31E2
0x31AF   o31AF
0x3186   o3186
0x316E   o316E
0x3195   o3195
0x315E   o315E
0x3159   o3159
0x316C   o316C
0x3151   o3151
0x3146   o3146
0x313D   o313D
0x313B   o313B
0x3114   o3114
0x3125   o3125
0x315D   o315D
0x30EF   o30EF
0x30F0   o30F0
0x30CA   o30CA
0x30C0   o30C0
0x30BC   o30BC
0x30BE   o30BE
0x30B1   o30B1
0x3155   o3155
0x30A3   o30A3
0x30A5   o30A5
0x309F   o309F
0x307C   o307C
0x3055   o3055
0x3293   o3293
0x303C   o303C
0x303E   o303E
0x3014   o3014
0x346E   o346E
0x300F   o300F
0x300D   o300D
0x2FFB   o2FFB
0x3004   o3004
0x2FE5   o2FE5
0x2FF9   o2FF9
0x2FAF   o2FAF
0x2F9B   o2F9B
0x2F85   o2F85
0x2F83   o2F83
0x2F64   o2F64
0x32CE X o32CE
0x2F6C   o2F6C
0x2F46   o2F46
0x2F2D   o2F2D
0x2F25   o2F25
0x2F18   o2F18
0x2F8B   o2F8B
0x2EEF   o2EEF
0x2EEC   o2EEC
0x2EDF   o2EDF
0x2FDD   o2FDD
0x2ECB   o2ECB
0x2EB8   o2EB8
0x2EB3   o2EB3
0x2EA9   o2EA9
0x2EA1   o2EA1
0x2E8A   o2E8A
0x2FBA   o2FBA
0x2E6F   o2E6F
0x2ECF   o2ECF
0x2E25 X o2E25
0x2E7B   o2E7B
0x2E24   o2E24
0x2E1E   o2E1E
0x2E56   o2E56
0x2E01   o2E01
0x2DF8 X o2DF8
0x2DF2 X o2DF2
0x2DE1   o2DE1
0x2DC1   o2DC1
0x2DAD   o2DAD
0x2D8E   o2D8E
0x2D8C X o2D8C
0x2D7F   o2D7F
0x2D7B   o2D7B
0x2D6E X o2D6E
0x2D6D X o2D6D
0x2D71   o2D71
0x2D60   o2D60
0x350B   o350B
0x2D55   o2D55
0x2D40   o2D40
0x2D4F   o2D4F
0x2D18   o2D18
0x2CFF   o2CFF
0x2CFE   o2CFE
0x2CF2   o2CF2
0x2D22   o2D22
0x2CDA   o2CDA
0x2CCF   o2CCF
0x2CEB   o2CEB
0x2CCB   o2CCB
0x31AD   o31AD
0x2CB3   o2CB3
0x2CA2   o2CA2
0x2CB8   o2CB8
0x2C7F   o2C7F
0x2C7C   o2C7C
0x2C2E   o2C2E
0x2C2D   o2C2D
0x2C1F   o2C1F
0x2C05   o2C05
0x2BC6   o2BC6
0x2BA3   o2BA3
0x2BAF   o2BAF
0x2B72   o2B72
0x2BA6   o2BA6
0x2B59   o2B59
0x2BEA   o2BEA
0x2B3E   o2B3E
0x2B4F   o2B4F
0x2BC0   o2BC0
0x2B29   o2B29
0x2B1F   o2B1F
0x2B0C   o2B0C
0x2B66   o2B66
0x2AE8   o2AE8
0x2AEB   o2AEB
0x33A9   o33A9
0x2AB6   o2AB6
0x2AA8   o2AA8
0x2A94   o2A94
0x2ACD   o2ACD
0x2A81   o2A81
0x2AAD   o2AAD
0x2AB1   o2AB1
0x2A22   o2A22
0x2A2C   o2A2C
0x2A7A   o2A7A
0x2AEE   o2AEE
0x29FB   o29FB
0x2A45   o2A45
0x29E0   o29E0
0x2A48   o2A48
0x2A12   o2A12
0x29D8   o29D8
0x29C3   o29C3
0x2A20   o2A20
0x29A1   o29A1
0x29AE   o29AE
0x29E7   o29E7
0x33C0   o33C0
0x2991   o2991
0x2981   o2981
0x295A   o295A
0x2943   o2943
0x293E   o293E
0x2929   o2929
0x2912   o2912
0x293F   o293F
0x292A   o292A
0x2932   o2932
0x2900   o2900
0x28FD   o28FD
0x2951   o2951
0x28D4   o28D4
0x28E3   o28E3
0x28EF   o28EF
0x288D   o288D
0x288B   o288B
0x2852   o2852
0x2843   o2843
0x2885   o2885
0x2831   o2831
0x2825   o2825
0x28AB   o28AB
0x2812 X o2812
0x2814   o2814
0x2808   o2808
0x2802   o2802
0x27F4   o27F4
0x27E4   o27E4
0x27D9   o27D9
0x27E9   o27E9
0x27E6   o27E6
0x27D0   o27D0
0x27F7   o27F7
0x2790   o2790
0x2761   o2761
0x2764   o2764
0x2758 X o2758
0x275B   o275B
0x2773   o2773
0x2795   o2795
0x2A52   o2A52
0x2734   o2734
0x2723   o2723
0x2713   o2713
0x26DD   o26DD
0x26B6   o26B6
0x2C9B   o2C9B
0x26B5   o26B5
0x26C9   o26C9
0x2C88   o2C88
0x2657   o2657
0x2660   o2660
0x3A5A   o3A5A
0x2665   o2665
0x270D   o270D
0x2630   o2630
0x2625   o2625
0x27BD   o27BD
0x2712   o2712
0x25CB   o25CB
0x25D9   o25D9
0x267B   o267B
0x2672   o2672
0x2668   o2668
0x2634   o2634
0x25F8   o25F8
0x25F5   o25F5
0x25AF   o25AF
0x268D   o268D
0x25E8   o25E8
0x25B3   o25B3
0x2580   o2580
0x255D   o255D
0x255A   o255A
0x254F   o254F
0x2535   o2535
0x37B7 X o37B7
0x252D   o252D
0x2522   o2522
0x250F   o250F
0x2684   o2684
0x2596   o2596
0x24FF   o24FF
0x24EC   o24EC
0x24F7   o24F7
0x24DB   o24DB
0x24D4   o24D4
0x24CE   o24CE
0x24CB   o24CB
0x24C4   o24C4
0x2497   o2497
0x2495   o2495
0x24B7   o24B7
0x2439   o2439
0x245F   o245F
0x23C1   o23C1
0x23A3 X o23A3
0x2420   o2420
0x235A   o235A
0x247D   o247D
0x233B   o233B
0x2314   o2314
0x2303   o2303
0x22FD   o22FD
0x22E5   o22E5
0x22D4   o22D4
0x22CB   o22CB
0x24F9   o24F9
0x22A6   o22A6
0x2287   o2287
0x227D   o227D
0x2257   o2257
0x2258   o2258
0x2246   o2246
0x223E   o223E
0x226C   o226C
0x2244   o2244
0x2228   o2228
0x2273   o2273
0x2234   o2234
0x21E1   o21E1
0x21CE X o21CE
0x21D0   o21D0
0x2AB2   o2AB2
0x219B   o219B
0x2174   o2174
0x21D6   o21D6
0x2161   o2161
0x21B9   o21B9
0x2148   o2148
0x213A   o213A
0x215E   o215E
0x211A   o211A
0x211C   o211C
0x21AF   o21AF
0x20ED   o20ED
0x20D8   o20D8
0x20AD   o20AD
0x2096   o2096
0x206E   o206E
0x2061   o2061
0x2067   o2067
0x203C   o203C
0x21F2   o21F2
0x2024   o2024
0x2307   o2307
0x200E   o200E
0x1FFC   o1FFC
0x204E   o204E
0x1FE5   o1FE5
0x1FF2   o1FF2
0x2045   o2045
0x1FCF   o1FCF
0x1FC3   o1FC3
0x3BB6   EOF
0x1F94   o1F94
0x1F86   o1F86
0x1FA6   o1FA6
0x1FBD   o1FBD
0x1F7D   o1F7D
0x1F89   o1F89
0x1F6A   o1F6A
0x1F49   o1F49
0x1F4F   o1F4F
0x1F3D   o1F3D
0x1F36   o1F36
0x1F1A X o1F1A
0x1F15   o1F15
0x1EDC   o1EDC
0x1EDA   o1EDA
0x1EAF   o1EAF
0x1E9C   o1E9C
0x1E8E   o1E8E
0x2DD5   o2DD5
0x1E85   o1E85
0x1E5A   o1E5A
0x1E2C   o1E2C
0x1E37   o1E37
0x1E08 X o1E08
0x1E0A   o1E0A
0x1E1E   o1E1E
0x1DEC   o1DEC
0x1DE9 X o1DE9
0x1DE2 X o1DE2
0x1E73   o1E73
0x1DD8   o1DD8
0x1D8B   o1D8B
0x1DA3   o1DA3
0x1D7C   o1D7C
0x1D84   o1D84
0x1DDA   o1DDA
0x1D34   o1D34
0x1D10   o1D10
0x1D00   o1D00
0x21E2   o21E2
0x1CD6   o1CD6
0x1CA5 X o1CA5
0x1C79   o1C79
0x1C59   o1C59
0x1C2E   o1C2E
0x1C46   o1C46
0x1C30   o1C30
0x1C96   o1C96
0x1C0D   o1C0D
0x1C4E   o1C4E
0x1C10   o1C10
0x3A4B   o3A4B
0x1BB0 X o1BB0
0x1BEC   o1BEC
0x1BBF   o1BBF
0x1BD1   o1BD1
0x1B9E   o1B9E
0x1BF4   o1BF4
0x3A3B   o3A3B
0x1B7B X o1B7B
0x1B7D   o1B7D
0x1C01   o1C01
0x1B6F   o1B6F
0x1B52   o1B52
0x1B55   o1B55
0x1B76   o1B76
0x1BB3   o1BB3
0x1B28   o1B28
0x1B29   o1B29
0x1F60   o1F60
0x2320   o2320
0x1FC9   o1FC9
0x2382   o2382
0x1DED   o1DED
0x1EAC   o1EAC
0x1EA1   o1EA1
0x1BB2   o1BB2
0x2C02   o2C02
0x2089   o2089
0x1FCD   o1FCD
0x1D03   o1D03
0x1F23   o1F23
0x1EED   o1EED
0x1CF0   o1CF0
0x1A8D   o1A8D
0x1ABB   o1ABB
0x1AD2   o1AD2
0x1ABE   o1ABE
0x1A81   o1A81
0x1AB5   o1AB5
0x1AAB   o1AAB
0x1AC1   o1AC1
0x1AB1   o1AB1
0x1A98   o1A98
0x1AC5   o1AC5
0x1AAE   o1AAE
0x1AE0   o1AE0
0x1A9F   o1A9F
0x1A86   o1A86
0x1A7D   o1A7D
0x1A90   o1A90
0x2627   o2627
0x1AA5   o1AA5
0x1AA2   o1AA2
0x1AF5   o1AF5
0x1AA8   o1AA8
0x1ACF   o1ACF
0x1ACC   o1ACC
0x1AC9   o1AC9
0x1A8A   o1A8A
0x1ADC   o1ADC
0x1AD9   o1AD9
0x1AF1   o1AF1
0x1AF0   o1AF0
0x1AEF   o1AEF
0x1AEE   o1AEE
0x1AED   o1AED
0x1AEC   o1AEC
0x1AEB   o1AEB
0x1AE7   o1AE7
0x1AE3   o1AE3
0x1AE1   o1AE1
0x1AE2   o1AE2
0x1B02   o1B02
0x1AFC   o1AFC
0x1B0A   o1B0A
0x1B06   o1B06
0x1B14   o1B14
0x1AF9   o1AF9
0x1A48   o1A48
0x1A30   o1A30
0x1A42   o1A42
0x1A15   o1A15
0x2D3B   o2D3B
0x19DD   o19DD
0x19DB   o19DB
0x19CE   o19CE
0x19C7   o19C7
0x19D5   o19D5
0x19B1   o19B1
0x2ACC   o2ACC
0x19AD   o19AD
0x19A5   o19A5
0x1998   o1998
0x199A   o199A
0x1990   o1990
0x1988 X o1988
0x1974   o1974
0x1968   o1968
0x195A   o195A
0x196C   o196C
0x192B   o192B
0x1909   o1909
0x18F3   o18F3
0x1937   o1937
0x18B4   o18B4
0x1894   o1894
0x1A28   o1A28
0x1865   o1865
0x1980   o1980
0x1835   o1835
0x1822   o1822
0x181A   o181A
0x1814   o1814
0x181F   o181F
0x17F9   o17F9
0x17FB   o17FB
0x17F5   o17F5
0x1833   o1833
0x17E4   o17E4
0x17CE   o17CE
0x17E1   o17E1
0x1793   o1793
0x178B   o178B
0x1789   o1789
0x1781   o1781
0x177A   o177A
0x1765   o1765
0x1767   o1767
0x175D   o175D
0x1756   o1756
0x1725   o1725
0x1727   o1727
0x171C   o171C
0x1716   o1716
0x1708 X o1708
0x16FC   o16FC
0x1701   o1701
0x16E5   o16E5
0x16DB   o16DB
0x16D4 X o16D4
0x1691   o1691
0x168F   o168F
0x1646   o1646
0x164D   o164D
0x1642   o1642
0x1634   o1634
0x162D   o162D
0x160E   o160E
0x1610   o1610
0x162C   o162C
0x15F7   o15F7
0x15E4 X o15E4
0x15E6   o15E6
0x15DE   o15DE
0x3AA8   o3AA8
0x15AB   o15AB
0x157D   o157D
0x1555   o1555
0x1537 X o1537
0x1384   o1384
0x1376   o1376
0x1373   o1373
0x1386   o1386
0x3A29   o3A29
0x133C   o133C
0x1313   o1313
0x1B8A   o1B8A
0x1300 X o1300
0x155D   o155D
0x1B17   o1B17
0x12AC   o12AC
0x12A2   o12A2
0x12A9   o12A9
0x1539   o1539
0x15C6   o15C6
0x15AF   o15AF
0x121C X o121C
0x1219   o1219
0x11EF   o11EF
0x11E2   o11E2
0x11DC   o11DC
0x11DA X o11DA
0x11B7   o11B7
0x11A7   o11A7
0x117E   o117E
0x115E   o115E
0x117C   o117C
0x1150   o1150
0x18E1   o18E1
0x187D   o187D
0x1167   o1167
0x1113   o1113
0x110D   o110D
0x10F4   o10F4
0x10E6   o10E6
0x10FA   o10FA
0x111B   o111B
0x1190   o1190
0x1795   o1795
0x1051   o1051
0x103E   o103E
0x1195   o1195
0x1026   o1026
0x1011   o1011
0x1031   o1031
0x190F   o190F
0x1001   o1001
0x1855   o1855
0x107C   o107C
0x1076   o1076
0x1015   o1015
0x1059   o1059
0x0FF3   o0FF3
0x1007   o1007
0x0FA9   o0FA9
0x0FA0   o0FA0
0x1652   o1652
0x0F8B   o0F8B
0x101E   o101E
0x2F5E   o2F5E
0x0F6C   o0F6C
0x0F92   o0F92
0x0F38   o0F38
0x0F2C   o0F2C
0x0F1E   o0F1E
0x0F18   o0F18
0x0F14   o0F14
0x0F0A X o0F0A
0x0F0C   o0F0C
0x1F54   o1F54
0x0EFD   o0EFD
0x0EE7   o0EE7
0x0EDF   o0EDF
0x0ED3   o0ED3
0x0EDA   o0EDA
0x0EC9   o0EC9
0x0EF4   o0EF4
0x0EB2   o0EB2
0x0EAF X o0EAF
0x0EAC   o0EAC
0x0E80   o0E80
0x0E4D   o0E4D
0x0E4A   o0E4A
0x0E0D   o0E0D
0x0E19   o0E19
0x0E05   o0E05
0x0DEE   o0DEE
0x0DA0   o0DA0
0x0D94   o0D94
0x0D89   o0D89
0x0D87   o0D87
0x0D8E   o0D8E
0x0E44   o0E44
0x0D65   o0D65
0x0D5B   o0D5B
0x0E00   o0E00
0x0D2D   o0D2D
0x0D1C   o0D1C
0x0CF0   o0CF0
0x0DFE   o0DFE
0x0D00   o0D00
0x0CF8   o0CF8
0x0CD2   o0CD2
0x0C88   o0C88
0x0D02   o0D02
0x0C44   o0C44
0x0C35   o0C35
0x0C22   o0C22
0x0C17   o0C17
0x0C41   o0C41
0x0C14   o0C14
0x0C08   o0C08
0x0BFA   o0BFA
0x0BDB   o0BDB
0x0BC1   o0BC1
0x0BB7   o0BB7
0x0BB6   o0BB6
0x0BA4   o0BA4
0x0B76   o0B76
0x0B5F   o0B5F
0x0B6A   o0B6A
0x0B56   o0B56
0x0B4C   o0B4C
0x0B3E   o0B3E
0x0B7F   o0B7F
0x0B38   o0B38
0x0B1D   o0B1D
0x0AF0   o0AF0
0x0AFC   o0AFC
0x0ADC   o0ADC
0x0B24   o0B24
0x0AD0   o0AD0
0x0C86   o0C86
0x1E9F   o1E9F
0x0ABF   o0ABF
0x0AAC   o0AAC
0x0AC2   o0AC2
0x2211   o2211
0x0A7D   o0A7D
0x0A80   o0A80
0x0A87   o0A87
0x3AC7 X RET_BASIC
0x0AC3   o0AC3
0x0C55   o0C55
0x0ECD   o0ECD
0x0B65   o0B65
0x0DD9   o0DD9
0x0A38   o0A38
0x0A3A   o0A3A
0x0A75   o0A75
0x0A7A   o0A7A
0x2707   o2707
0x0A4F   o0A4F
0x0A3D   o0A3D
0x0A23   o0A23
0x0A5F   o0A5F
0x0A11   o0A11
0x0A69   o0A69
0x0AD9   o0AD9
0x0991   o0991
0x0958   o0958
0x0955   o0955
0x091E   o091E
0x0912   o0912
0x0901   o0901
0x0909   o0909
0x0923   o0923
0x08F9   o08F9
0x08DF   o08DF
0x08D7   o08D7
0x08F0   o08F0
0x08D2   o08D2
0x08AD   o08AD
0x084C   o084C
0x082E   o082E
0x0825   o0825
0x0819   o0819
0x0802   o0802
0x07F4   o07F4
0x0806   o0806
0x07E9   o07E9
0x28DE   o28DE
0x08B6   o08B6
0x07CB   o07CB
0x07AD   o07AD
0x07A6   o07A6
0x078A   o078A
0x0767   o0767
0x0970   o0970
0x073A   o073A
0x0723   o0723
0x06F9   o06F9
0x06F5   o06F5
0x06F0   o06F0
0x06E1   o06E1
0x2048   o2048
0x0710   o0710
0x06C3   o06C3
0x075A   o075A
0x1BEE   o1BEE
0x068F   o068F
0x0692   o0692
0x0670 X o0670
0x0685   o0685
0x06A0   o06A0
0x18A1   o18A1
0x0642 X o0642
0x0644   o0644
0x0629   o0629
0x0621   o0621
0x1ADF   o1ADF
0x0609 X o0609
0x0605   o0605
0x05ED   o05ED
0x05E9   o05E9
0x05C4   o05C4
0x05C2   o05C2
0x05BD   o05BD
0x05B3   o05B3
0x05A9   o05A9
0x05C8   o05C8
0x058F   o058F
0x0580   o0580
0x05E3   o05E3
0x0574   o0574
0x05E7   o05E7
0x056C   o056C
0x056B   o056B
0x0565 X CONT_LOAD
0x38B5   NEW_LOAD
0x0552 X o0552
0x0554   o0554
0x053C   o053C
0x051A   o051A
0x051C   o051C
0x0514   o0514
0x0511   o0511
0x0505   o0505
0x050E   o050E
0x04FE   o04FE
0x04F2   o04F2
0x04EA   o04EA
0x04D8   o04D8
0x04D0   o04D0
0x04C2   o04C2
0x1C8A   o1C8A
0x3406   o3406
0x27B0   o27B0
0x046E   o046E
0x046C   o046C
0x03F2   o03F2
0x03D6   o03D6
0x03D4 X o03D4
0x03D3 X o03D3
0x03D2 X o03D2
0x03B2   o03B2
0x0389   o0389
0x039D   o039D
0x0364   o0364
0x1A9C   o1A9C
0x034A   o034A
0x0341   o0341
0x0367   o0367
0x1E27   o1E27
0x032C   o032C
0x0308   o0308
0x0333   o0333
0x02F1   o02F1
0x0310   o0310
0x031E   o031E
0x02D1   o02D1
0x02C6   o02C6
0x029F   o029F
0x0296   o0296
0x028E   o028E
0x0284   o0284
0x026A   o026A
0x0260   o0260
0x0246   o0246
0x022C   o022C
0x0205   o0205
0x0095   o0095
0x1AB8   o1AB8
0x0090   o0090
0x0078   o0078
0x1736   o1736
0x0066 X o0066
0x005F X o005F
0x386E   o386E
0x169E   o169E
0x0030 X o0030
0x335B   o335B
0x0028 X o0028
0x0074   o0074
0x007D   o007D
0x0018   o0018
0x0010 X o0010
0x0053   o0053
0x0008 X o0008
0x11CB   o11CB
0x0000 X o0000
0x3FF6   l3ff6
0x3FC6   l3fc6
0x3FCD   l3fcd
0x3FE1   l3fe1
0x3FA8   l3fa8
0x3F8E   l3f8e
0x3F93   l3f93
0x3FAB   l3fab
0x3F63 X n3f63
0x3F42   x3f42
0x3F00 X n3f00
0x3EDF   l3edf
0x3EBB   l3ebb
0x3F77   x3f77
0x3EA4   l3ea4
0x3ED1   l3ed1
0x3E84   l3e84
0x3E54   l3e54
0x3E52   l3e52
0x3E5E   l3e5e
0x3E49   l3e49
0x3E41   x3e41
0x3DC0   l3dc0
0x3DD2   l3dd2
0x2573   o2573
0x3D83   l3d83
0x3D59   l3d59
0x3D2A   l3d2a
0x3D00   l3d00
0x3CBD   l3cbd
0x3CB3   l3cb3
0x3C69   l3c69
0x3C8C   l3c8c
0x3C7C   l3c7c
0x3C26   l3c26
0x3C15   l3c15
0x3C1A   l3c1a
0x3C80   l3c80
0x3C7D   l3c7d
0x3C0D   l3c0d
0x3C7E   l3c7e
0x3BBC X l3bbc
0x3BAF   l3baf
0x3B7C X l3b7c
0x3B6F   l3b6f
0x3B41 X l3b41
0x3C99   l3c99
0x3B34   l3b34
0x3B07   l3b07
0x3DE4   l3de4
0x3AEB   l3aeb
0x3D6A   l3d6a
0x3D8E   l3d8e
0x3AD3   l3ad3
0x3AD1   l3ad1
0x3AC2   l3ac2
0x3AAF X l3aaf
0x3A80   l3a80
0x3A7E   l3a7e
0x3A9C   l3a9c
0x3A65   l3a65
0x3A7F   l3a7f
0x3A84   l3a84
0x3A44   l3a44
0x1024   o1024
0x15F2   o15F2
0x3A04   l3a04
0x3A01   l3a01
0x39F4   l39f4
0x39F6   l39f6
0x39E5   l39e5
0x39DC   l39dc
0x39DA   l39da
0x39D5   l39d5
0x39D6   l39d6
0x39C1   l39c1
0x39B2   l39b2
0x398E   l398e
0x397B   l397b
0x39B8   l39b8
0x392E   l392e
0x3909   l3909
0x38F4   l38f4
0x38B7   l38b7
0x38B1   l38b1
0x38B4   l38b4
0x3857   l3857
0x383A   l383a
0x3848   l3848
0x382E   l382e
0x0020 X o0020
0x382C X l382c
0x387E   n3871
0x3813   l3813
0x37D3   l37d3
0x37C1   l37c1
0x3765   l3765
0x0507   o0507
0x3739   l3739
0x377D   l377d
0x372B   l372b
0x386A   l386a
0x02AB   o02AB
0x3705   l3705
0x3736   l3736
0x36F5   l36f5
0x36E7   l36e7
0x36F3   l36f3
0x36E5   l36e5
0x36C0   l36c0
0x3735   l3735
0x3668   l3668
0x3691   l3691
0x37E5   l37e5
0x3637   l3637
0x362C   l362c
0x3655   l3655
0x361A   l361a
0x35FC   l35fc
0x37DD   l37dd
0x35E8   l35e8
0x35F8   l35f8
0x3875   l3875
0x3829   l3829
0x364C   l364c
0x3621   l3621
0x3533   l3533
0x3526   l3526
0x34F0   l34f0
0x34EC   l34ec
0x34DC   l34dc
0x34D6   l34d6
0x34D1   l34d1
0x34CA   l34ca
0x34C3   l34c3
0x34EB   l34eb
0x34A3 X l3496
0x3492 X l3485
0x3481 X l3474
0x3458   l3458
0x3441   l3441
0x3434   l3434
0x3438   l3438
0x33D2   l33d2
0x339B   l339b
0x338F   l338f
0x33CA   l33ca
0x33BB   l33bb
0x3323   l3323
0x3318   l3318
0x346F   l346f
0x336C   l336c
0x3306   l3306
0x32E9   l32e9
0x2425   o2425
0x328F   l328f
0x3245   l3245
0x324B   l324b
0x32F5   l32f5
0x3223   l3223
0x3208   l3208
0x3202   l3202
0x31D5   l31d5
0x31C3   l31c3
0x31AE   l31ae
0x31C4   l31c4
0x31A9   l31a9
0x1AD6   o1AD6
0x31C7   l31c7
0x3183   l3183
0x3189   l3189
0x3155   l3155
0x3146   l3146
0x314C   l314c
0x3138   l3138
0x311C   l311c
0x30F1   l30f1
0x30D6   l30d6
0x30A4   l30a4
0x30A2   l30a2
0x305C   l305c
0x3029   l3029
0x3012   l3012
0x2FF8   l2ff8
0x2FDE   l2fde
0x304C   l304c
0x3052   l3052
0x2FB3   l2fb3
0x2FB0   l2fb0
0x3047   l3047
0x2F90   l2f90
0x2F89   l2f89
0x2F7E   l2f7e
0x2F77   l2f77
0x2F35   l2f35
0x2F63   l2f63
0x2EEC   l2eec
0x2EDE   l2ede
0x2EC6   l2ec6
0x2E6A   l2e6a
0x2EC4   l2ec4
0x2E53   l2e53
0x2E9D   l2e9d
0x2E4A   l2e4a
0x2E3A   l2e3a
0x2EC8   l2ec8
0x2DCE   l2dce
0x2DA0   l2da0
0x2DD0   l2dd0
0x37FA X o37FA
0x2DD8   l2dd8
0x2D78   l2d78
0x2D68   l2d68
0x2D65   l2d65
0x2D48   l2d48
0x2D2B   l2d2b
0x2CE1   l2ce1
0x2CB4   l2cb4
0x2CA0   l2ca0
0x2CD9   l2cd9
0x0425   o0425
0x2C8F   l2c8f
0x2C6A   l2c6a
0x2AF4   o2AF4
0x2C58   l2c58
0x2C38   l2c38
0x2BFF   l2bff
0x2C03   l2c03
0x2BF3   l2bf3
0x2BEB   l2beb
0x2BF8   l2bf8
0x2BDF   l2bdf
0x2BFD   l2bfd
0x2BCD   l2bcd
0x2BC4   l2bc4
0x2BC3   l2bc3
0x2B8E   l2b8e
0x2B8D   l2b8d
0x2B31   l2b31
0x2D07   l2d07
0x2EFC   l2efc
0x2EF4   l2ef4
0x2A7A   l2a7a
0x2ECD   l2ecd
0x2A3C   l2a3c
0x2A26   l2a26
0x2A10   l2a10
0x2A0E   l2a0e
0x2A13   l2a13
0x29F0   x29f0
0x29FC   l29fc
0x29D9   l29d9
0x299F   l299f
0x298C   l298c
0x2972   l2972
0x29BA   x29ba
0x29B2   l29b2
0x29A7   l29a7
0x2928   l2928
0x290B   l290b
0x2906   l2906
0x3006   l3006
0x292A   l292a
0x28F3   l28f3
0x28EF   l28ef
0x28EB   l28eb
0x28DC   l28dc
0x28D3   l28d3
0x28C4   l28c4
0x2934   o2934
0x28EE   l28ee
0x28AC   l28ac
0x2893   x2893
0x289F   l289f
0x2937   l2937
0x2819   l2819
0x27C5   l27c5
0x0B93   o0B93
0x27AA   l27aa
0x279B   l279b
0x277B   l277b
0x27A7   l27a7
0x27B9   l27b9
0x275E   l275e
0x274E   l274e
0x270B   l270b
0x26EC   l26ec
0x2748   l2748
0x26C1   l26c1
0x272C   x272c
0x2735   l2735
0x269F   x269f
0x26A4   l26a4
0x2693   l2693
0x2684   l2684
0x267C   x267c
0x2649   l2649
0x263D   l263d
0x2611   l2611
0x2614   l2614
0x25C0   l25c0
0x25F3   l25f3
0x25B5   l25b5
0x25BE   l25BE
0x26A8   l26a8
0x256E   l256e
0x2571   l2571
0x2678   l2678
0x2519   l2519
0x24F8   l24f8
0x254A   l254a
0x257E   l257e
0x2553   l2553
0x24D7   l24d7
0x24EC   l24ec
0x2738   l2738
0x24D0   l24d0
0x24B7   l24b7
0x24B0   l24b0
0x249D   l249d
0x0427   o0427
0x2423 X ROM2_SPARE0
0x2423   FREE_ROM2_0
0x22F0   o22F0
0x22B8 X n231d
0x229E X n2303
0x2294 X n22f9
0x227A X n22df
0x2260 X n22c5
0x2220   l2220
0x2226   l2226
0x2203   l2203
0x2209   l2209
0x21F7   l21f7
0x21E6   l21e6
0x222F   l222f
0x21EC   l21ec
0x21D1   l21d1
0x3772   l3772
0x21B8   l21b8
0x219A   l219a
0x21BA   l21ba
0x21A3   l21a3
0x2170   l2170
0x214A   l214a
0x212B   l212b
0x2214   l2214
0x21C5   l21c5
0x2134   l2134
0x2112   l2112
0x20FB   l20fb
0x20EF   l20ef
0x20F2   l20f2
0x20D3   l20d3
0x209F   l209f
0x20A5   l20a5
0x2084   l2084
0x20DF   l20df
0x2061   l2061
0x2043   l2043
0x202C   x202c
0x201A   l201a
0x20CE   l20ce
0x2036   l2036
0x200C   l200c
0x203A   l203a
0x1FFF   l1fff
0x2007   x2007
0x2016   l2016
0x1FF1   l1ff1
0x1FE2   l1fe2
0x1FDE   l1fde
0x216A   x216a
0x1F96   x1f96
0x1F7F   l1f7f
0x1F78   l1f78
0x1F71   l1f71
0x1F69   l1f69
0x20E6   l20e6
0x1F3E   l1f3e
0x1F34   l1f34
0x20A9   l20a9
0x1F1E   l1f1e
0x1F22   x1f22
0x1EF6   l1ef6
0x1ED7   l1ed7
0x1ED1   l1ed1
0x1EC7   l1ec7
0x1EC9   l1ec9
0x1EAF   l1eaf
0x1E9A   l1e9a
0x1FC9   l1fc9
0x1E82   l1e82
0x3519   l3519
0x1E78   l1e78
0x1E86   l1e86
0x1E31   l1e31
0x1E2D   l1e2d
0x1E0E   l1e0e
0x1F75   l1f75
0x1DF5   l1df5
0x1DEF   l1def
0x1F64   l1f64
0x1D73   l1d73
0x1E64   l1e64
0x1D40   l1d40
0x1D36   l1d36
0x1D30   l1d30
0x1D49   x1d49
0x1D15   l1d15
0x1D0F   l1d0f
0x1D64   o1D64
0x1CCE   l1cce
0x1EF2   l1ef2
0x2159   l2159
0x1CB7   l1cb7
0x1CA1   l1ca1
0x2119   l2119
0x1CC5   l1cc5
0x1C5F   l1c5f
0x1785   o1785
0x1C56   l1c56
0x1C4A   l1c4a
0x1C3E   x1c3e
0x1C2B   l1c2b
0x1BD8   l1bd8
0x3C96   SWP_RTALERT
0x1BD1   l1bd1
0x1BDF   l1bdf
0x1BC6   l1bc6
0x1C12   x1c12
0x29EA   o29EA
0x1BA6   l1ba6
0x1B66   l1b66
0x1B48   x1b48
0x1B11   l1b11
0x1B2D   l1b2d
0x27CE   l27ce
0x1A84   l1a84
0x1A77   l1a77
0x1A98   l1a98
0x1A8B   l1a8b
0x1A49   l1a49
0x1A4C   l1a4c
0x27C2   x27c2
0x276D   l276d
0x3886   l3886
0x1A65   l1a65
0x1A0A   l1a0a
0x1A06   l1a06
0x19DD   l19dd
0x22C4   l22c4
0x1963   l1963
0x1944   l1944
0x1929   l1929
0x1927   l1927
0x1909   l1909
0x1903   l1903
0x18F3   l18f3
0x18EF   l18ef
0x18C8   l18c8
0x18AC   l18ac
0x18AE   l18ae
0x190A   l190a
0x187B   l187b
0x186C   l186c
0x184E   l184e
0x183F   l183f
0x18D3   l18d3
0x1805   l1805
0x180D   l180d
0x17EB   l17eb
0x17C3   l1845
0x1AC9   l1ac9
0x17AE   l17ae
0x1982   l1982
0x197C   l197c
0x1988   l1988
0x1783   l1783
0x176E   l176e
0x1724   l1724
0x172F   l172f
0x18B6   l18b6
0x18DF   l18df
0x18E8   l18e8
0x16F1   l16f1
0x16C9   l16c9
0x16CE   l16ce
0x169C   l169c
0x1693   l1693
0x16A2   l16a2
0x16A6   l16a6
0x1688   l1688
0x1682   l1682
0x1677   l1677
0x166E   l166e
0x1639   l1639
0x2C5B   l2c5b
0x1638   l1638
0x161A   l161a
0x1619   l1619
0x1613   l1613
0x1610   l1610
0x1654   l1654
0x15E4   x15e4
0x15E3   l15e3
0x15DE   l15de
0x1829   l1829
0x15BC   l15bc
0x36A0   o36A0
0x15AF   l15af
0x171E   l171e
0x1589   l1589
0x16E4   l16e4
0x1576   l1576
0x1B35   l1b35
0x1716   l1716
0x1658   l1658
0x1547   x1547
0x170F   l170f
0x1519   l1519
0x1530   l1530
0x1704   l1704
0x1511   l1511
0x150C   x150c
0x1707   l1707
0x14F1   l14f1
0x14EE   l14ee
0x14BF   l14bf
0x14CD   l14cd
0x1672   l1672
0x145B   l145b
0x1412   l1412
0x1409   l1409
0x13B2   x13b2
0x1578   l1578
0x13B6   l13b6
0x139E   l139e
0x13BD   l13bd
0x1392   l1392
0x1388   l1388
0x1394   l1394
0x138B   x138b
0x13DC   l13dc
0x1349   l1349
0x1323   l1323
0x100C   o100C
0x135D   l135d
0x111D   o111D
0x13A4   x13a4
0x1416   l1416
0x1433   l1433
0x1353   l1353
0x1371   l1371
0x1309   l1309
0x12CD   l12cd
0x12C8   l12c8
0x129D   l129d
0x128B   l128b
0x1278   l1278
0x125C   l125c
0x123A   l123a
0x12CF   l12cf
0x11E2   l11e2
0x11C4   l11c4
0x11B0   l11b0
0x11A0   l11a0
0x119F   l119f
0x117C   x117c
0x115B   l115b
0x113A   l113a
0x12FE   l12fe
0x10F6   l10f6
0x0525   o0525
0x3270   l3270
0x10D9   l10d9
0x10D6   l10d6
0x10C9   l10c9
0x10BB   l10bb
0x2129   o2129
0x10B2   l10b2
0x10AC   l10ac
0x109A   l109a
0x108C   l108c
0x108E   l108e
0x1088   l1088
0x109C   l109c
0x1059   l1059
0x1049   l1049
0x104D   l104d
0x1020   l1020
0x1026   l1026
0x0FE9   l0fe9
0x0FBB   l0fbb
0x0FAF   l0faf
0x0FA8   l0fa8
0x3860   l3860
0x0FA5   l0fa5
0x0F9A   x0f9a
0x0F94   l0f94
0x0F8F   l0f8f
0x0F8A   l0f8a
0x0F86   l0f86
0x0F7B   l0f7b
0x0F8E   l0f8e
0x0F54   l0f54
0x0F48   l0f48
0x0F67   l0f67
0x0F1C   l0f1c
0x0F0A   l0f0a
0x0F07   l0f07
0x0EF4   l0ef4
0x0EDE   l0ede
0x0ECB   l0ecb
0x0FBE   l0fbe
0x0E91   l0e91
0x0E61   l0e61
0x0E65   l0e65
0x0E56   l0e56
0x1590   x1590
0x1A9D   l1a9d
0x30EA   o30EA
0x15D8   l15d8
0x0E0C   l0e0c
0x0E1D   l0e1d
0x0E6D   l0e6d
0x0E21   l0e21
0x0DF9   l0df9
0x0DE5   l0de5
0x0DD7   l0dd7
0x0DDD   l0ddd
0x0E5A   l0e5a
0x0DB3   l0db3
0x0DA8   l0da8
0x15BF   l15bf
0x0D9C   l0d9c
0x0D98   l0d98
0x0D8E   l0d8e
0x0D7C   l0d7c
0x0D82   l0d82
0x0D68   l0d68
0x0D72   l0d72
0x0D87   l0d87
0x0D36   l0d36
0x0D05   l0d05
0x0CE3   l0ce3
0x0CE8   l0ce8
0x103E   l103e
0x0FEB   l0feb
0x0CEB   l0ceb
0x0CD5   l0cd5
0x0FCB   l0fcb
0x0CA4   l0ca4
0x0C94   l0c94
0x0C83   l0c83
0x0C77   l0c77
0x3129   l3129
0x0D1E   l0d1e
0x0C6D   l0c6d
0x0C53   l0c53
0x0C60   l0c60
0x17EF   l17ef
0x0BD6   x0bd6
0x0BE2   l0be2
0x0BC9   l0bc9
0x0BC8   l0bc8
0x0BEF   l0bef
0x0BF9   l0bf9
0x0BBD   l0bbd
0x0BA0   l0ba0
0x0BC6   l0bc6
0x0BCF   l0bcf
0x0B8A   l0b8a
0x0B70   l0b70
0x0B66   l0b66
0x0B84   l0b84
0x0B51   l0b51
0x0BD3   l0bd3
0x0B25   l0b25
0x0BDD   l0bdd
0x0B42   l0b42
0x0B2B   l0b2b
0x0B0C   l0b0c
0x0B02   l0b02
0x0AF3   l0af3
0x0B49   l0b49
0x0AE5   x0ae5
0x0AD9   l0ad9
0x0F6A   l0f6a
0x0AA9   l0aa9
0x0AC3   x0ac3
0x0AAB   l0aab
0x0A7B   l0a7b
0x205D   l205d
0x0A6E   l0a6e
0x0AD3   l0ad3
0x0A62   l0a62
0x0A4F   l0a4f
0x09FA   l09fa
0x09EF   l09ef
0x0A1A   l0a1a
0x09E2   l09e2
0x09B1   l09b1
0x1035   l1035
0x0E24   l0e24
0x0F38   l0f38
0x09B7   l09b7
0x0929   l0929
0x0914   l0914
0x0F9E   l0f9e
0x08F9   l08f9
0x1445   l1445
0x0845   l0845
0x0832   l0832
0x114C   l114c
0x0817   x0817
0x085C   l085c
0x21D4 X o21D4
0x0857   l0857
0x125F   l125f
0x0803   l0803
0x07F7   l07f7
0x1267   l1267
0x1226   l1226
0x07DC   x07dc
0x107F   l107f
0x07B9   l07b9
0x1063   l1063
0x0797   l0797
0x181B   l181b
0x1632   l1632
0x0F35   l0f35
0x102D   l102d
0x0786   x0786
0x0CB6   l0cb6
0x1685   l1685
0x07A1   x07a1
0x0789   l0789
0x1896   x1896
0x0EB3   l0eb3
0x06E0   l06e0
0x0D3A   l0d3a
0x1871   x1871
0x06A5   l06a5
0x069E   l069e
0x07E6   l07e6
0x06B1   x06b1
0x0938   l0938
0x0685   l0685
0x03F6   o03F6
0x06E8   l06e8
0x067E   l067e
0x0863   l0863
0x17ED   o17ED
0x0672   l0672
0x06A3   l06a3
0x080B   l080b
0x06CC   l06cc
0x0667   l0667
0x0687   l0687
0x0D9E   l0d9e
0x0AE9   l0ae9
0x0627   l0627
0x0602   l0602
0x05FD   l05fd
0x05FB   l05fb
0x0756   l0756
0x05F1   l05f1
0x05DC   l05dc
0x05D6   l05d6
0x0C13   l0c13
0x0D7A   l0d7a
0x05B0   l05b0
0x05C4   l05c4
0x058B   l058b
0x0586   l0586
0x0576   l0576
0x0568   l0568
0x0573   l0573
0x053C   l053c
0x0558   l0558
0x0529   l0529
0x18C1   o18C1
0x0532   l0532
0x0521   x0521
0x17CB   l17cb
0x050B   l050b
0x04FF   l04ff
0x04FE   l04fe
0x04F8   l04f8
0x04F5   l04f5
0x04ED   l04ed
0x04EB   l04eb
0x03C2   l03c2
0x03BC   l03bc
0x03B3   l03b3
0x03B1   l03b1
0x0398   l0398
0x0392   l0392
0x0390   l0390
0x037D   l037d
0x0397   l0397
0x03C6   l03c6
0x0DEF   l0def
0x03C7   l03c7
0x0358   l0358
0x034C   l034c
0x0345   l0345
0x034A   l034a
0x033C   l033c
0x031F   l031f
0x03CD   x03cd
0x030A   x030a
0x02FF   l02ff
0x02F6   l02f6
0x02E5   l02e5
0x02EE   l02ee
0x029E   x029e
0x029C   l029c
0x028A   l028a
0x0290   l0290
0x027B   l027b
0x02CC   l02cc
0x024F   l024f
0x0245   l0245
0x0233   l0233
0x0216   l0216
0x020F   l020f
0x166B   o166B
0x04AA X o04AA
0x14A1   l14a1
0x1ABB   l1abb
0x149C   l149c
0x1AB1   l1ab1
0x0508   l0508
0x14A5   l14a5
0x1798   x1798
0x1737   l1737
0x01C4   l01c4
0x24BF   l24bf
0x39BD   l39bd
0x3EE6   l3ee6
0x019C X l019c
0x21A6   l21a6
0x0199 X l0199
0x2181   l2181
0x0196 X l0196
0x2122   l2122
0x0193 X l0193
0x3EF5   l3ef5
0x0190 X l0190
0x1FD5   l1fd5
0x018D X l018d
0x1DA6   l1da6
0x018A X l018a
0x1D64   l1d64
0x0187 X l0187
0x1C50   l1c50
0x1EEB   l1eeb
0x0181 X l0181
0x1F5B   l1f5b
0x017E X l017e
0x1F4F   l1f4f
0x017B X l017b
0x1D51   l1d51
0x0178 X l0178
0x39BF   LOOP_LOAD_TAP
0x1CF6   l1cf6
0x0175 X l0175
0x1EDB   l1edb
0x0172 X l0172
0x1CAC   l1cac
0x016F X l016f
0x1C9A   l1c9a
0x0697   l0697
0x016C X x016c
0x1C8C   x1c8c
0x0169 X l0169
0x1C83   x1c83
0x0166 X l0166
0x1C75   l1c75
0x0163 X l0163
0x1966   l1966
0x0160 X l0160
0x015D X l015d
0x1F91   l1f91
0x015A X l015a
0x1F86   l1f86
0x0157   l0157
0x1935   l1935
0x0154 X l0154
0x17C5   l17c5
0x0151 X l0151
0x02F0   l02f0
0x014E X l014e
0x070E   l070e
0x014B X l014b
0x0963   l0963
0x0148 X l0148
0x08CD   l08cd
0x0145 X l0145
0x05CF   l05cf
0x0142 X l0142
0x01F2   l01f2
0x0921   o0921
0x01EC   l01ec
0x013C X l013c
0x1068   l1068
0x0139   l0139
0x107B   l107b
0x0136 X x0136
0x105F   l105f
0x2EC9   l2ec9
0x0906   l0906
0x0130 X x0130
0x0919   l0919
0x012D   l012d
0x1B4D   l1b4d
0x012A X l012a
0x0979   l0979
0x0127 X l0127
0x092E   l092e
0x0124 X l0124
0x2899   l2899
0x08FC   l08fc
0x0121 X l0121
0x0A23   l0a23
0x3524   o3524
0x011E X l011e
0x1219   l1219
0x011B X l011b
0x1129   l1129
0x0118 X l0118
0x117F   l117f
0x0115 X l0115
0x19C0   l19c0
0x0112   l0112
0x08BB   l08bb
0x010F X x010f
0x076B   l076b
0x010C X l010c
0x074A   l074a
0x0109   l0109
0x0635   l0635
0x0106   l0106
0x01DC   l01dc
0x0103 X l0103
0x01A8   l01a8
0x0100 X l0100
0x3531   l3531
0x2C84   l2c84
0x34AC   l34ac
0x33CD   l33cd
0x3370   l3370
0x3227   l3227
0x31E1   l31e1
0x30BB   l30bb
0x30AF   l30af
0x314E   l314e
0x3106   l3106
0x3131   l3131
0x318B   l318b
0x3083   l3083
0x306C   l306c
0x2CDB   l2cdb
0x2C94   l2c94
0x2C3B   l2c3b
0x2B92   l2b92
0x2C0F   l2c0f
0x2F93   l2f93
0x2D0B   l2d0b
0x2DE2   l2de2
0x2BC8   l2bc8
0x2A01   l2a01
0x25FB   l25fb
0x2558   l2558
0x280D   l280d
0x3A20   l3a20
0x2828   l2828
0x249A   l249a
0x2808   l2808
0x0095   l0095
0x0066 X x0066
0x3D64   l3d64
0x3D55   l3d55
0x3D5F   l3d5f
0x3CC9   l3cc9
0x3A24   l3a24
0x0068   l0068
0x3E72   l3e72
0x0010 X n0010
0x0008 X n0008
0x22C2   l22c2
0x0000 X n0000
0x3FD9 X ROM1_SPARE1
0x0027   R1_FREE_1
0x3F90   m3f90
0x3F69   m3f69
0x3F2E X m3f2a
0x3F42   m3f42
0x3EC5 X m3ec5
0x3EB5 X m3eb5
0x3EA2 X m3ea2
0x3E3F   m3e3f
0x3E58   m3e58
0x3E0C   m3e0c
0x3E06   m3e06
0x3DDD   m3ddd
0x3DE9   m3de9
0x3DB3   m3db3
0x3D0C   m3d0c
0x3D2E   m3d2e
0x3CFF   m3cff
0x3CF8   m3cf8
0x3CA7   m3ca7
0x3D68   m3d68
0x3D63   m3d63
0x3D5D   m3d5d
0x3D57   m3d57
0x3D52   m3d52
0x3C8F   m3c8f
0x3D27   m3d27
0x3D2B   m3d2b
0x3C46   m3c46
0x3C14   m3c14
0x35BF   o35BF
0x3D7A   m3d7a
0x3CF9   m3cf9
0x3C0E   m3c0e
0x3D15   m3d15
0x3BDD   m3bdd
0x3D77   m3d77
0x3C06   m3c06
0x3D48   m3d48
0x3B6F   m3b77
0x3B67   m3b6f
0x3DA8   m3da8
0x3E5C   m3e5c
0x3B21   m3b29
0x3B18   m3b20
0x3D21   m3d21
0x3AD9   m3ae1
0x3AD3   m3adb
0x3AA3   m3aab
0x3A75   m3a7d
0x3A86   m3a8e
0x3A13   m3a1b
0x39FB   m3a03
0x3A35   m3a3d
0x3A17   m3a1f
0x39D4   m39dc
0x3DF2   m3df2
0x39B3 X m39bb
0x39A5   m39ad
0x3990   m3998
0x3971 X m3979
0x3986   m398e
0x3968   m3970
0x3955   m395d
0x391D   m3925
0x3912   m391a
0x3904   m390c
0x38F2   m38fa
0x38FB   m3903
0x3D8B   m3d8b
0x38C6   m38ce
0x38B2   m38ba
0x3982   m398a
0x395D   m3965
0x3891 X m3899
0x3886   m388e
0x3873   m387b
0x385B   m3863
0x385A   m3862
0x38BF   m38c7
0x3952   m395a
0x3816 X m3824
0x3807   m3815
0x37EA   m37f8
0x37D7   m37e5
0x37CF   m37dd
0x36CE   m36dc
0x36AF   m36bd
0x36A2   strver
0x3666 X ROM1_SPARE0
0x0018   R1_FREE_0
0x3666 X FREE_ROM1_0
0x3650   ok_opentap
0x3662   notap
0x3617   is_tap
0x3617   SPARE_ROM1_0
0x35F0   m35f0
0x35D7 X m35d7
0x35D3   m35d3
0x35B3   m35b3
0x3571   m3571
0x35B9   m35b9
0x35AD   m35ad
0x3554   m3554
0x35A4   m35a4
0x359A   m359a
0x352F   m352f
0x3537   m3537
0x3591   m3591
0x34FB   m34fb
0x34D4   m34d4
0x34CF   m34cf
0x3465   m3465
0x347F   m347f
0x346F   m346f
0x3454   m3454
0x344C   m344c
0x3437   m3437
0x3426   m3426
0x3418   m3418
0x33EF   m33ef
0x3432   m3432
0x341F   m341f
0x343F   m343f
0x3412   m3412
0x3402   m3402
0x33D1   m33d1
0x3381   m3381
0x33C5   m33c5
0x34BF   m34bf
0x3376   m3376
0x0873   o0873
0x3373   m3373
0x21DB   l21db
0x33B9   m33b9
0x3347 X m3347
0x3347   x34be
0x3252   m3252
0x3238   m3238
0x31BD   m31bd
0x31A4   m31a4
0x318E   m318e
0x3214   m3214
0x3142   m3142
0x313D   m313d
0x311A X m311a
0x3119   m3119
0x3107   m3107
0x30F8   m30f8
0x3103   m3103
0x30CF   m30cf
0x30C4   m30c4
0x3069   m3069
0x3042   m3042
0x301E   m301e
0x2FD2   m2fd2
0x2FB9   m2fb9
0x2F9F   m2f9f
0x2F61   m2f61
0x309E   m309e
0x2F23   m2f23
0x2F0B   m2f0b
0x2EED X m2eed
0x2F08   m2f08
0x2F2D   m2f2d
0x2E95   m2e95
0x2E74   m2e74
0x2ECD   m2ecd
0x2F44   m2f44
0x2DEB X m2deb
0x2E5D   m2e5d
0x2DD1   m2dd1
0x0800   o0800
0x2DB7   m2db7
0x2DAF   m2daf
0x2DC7   m2dc7
0x2D94   m2d94
0x2D6E   m2d6e
0x2D72   m2d72
0x2D5E   m2d5e
0x3268   m3268
0x1CDB   o1CDB
0x3EDD   m32a5
0x2D4C   m2d4c
0x3EC9   m3291
0x30D9   m30d9
0x2CF7   m2cf7
0x2CC5   m2cc5
0x2CC1   m2cc1
0x2CBB   m2cbb
0x2D26   m2d26
0x2D58   m2d58
0x2CA9   m2ca9
0x3283   m3283
0x30B6   m30b6
0x3123   m3123
0x30E3   m30e3
0x2C4D   m2c4d
0x30F0   m30f0
0x3109   m3109
0x2C05 X m2c05
0x2BFF   m2bff
0x2C0A   m2c0a
0x2BED   m2bed
0x013F X l013f
0x2BD7   m2bd7
0x3219   m3219
0x2C1E   m2c1e
0x2BB4   m2bb4
0x2BB2   m2bb2
0x2B7E   m2b7e
0x1E94   o1E94
0x2B56   m2b56
0x2B14   m2b14
0x16C5   o16C5
0x2AEF X m2aef
0x2AE8 X m2ae8
0x2AEB   m2aeb
0x2AD5 X m2ad5
0x2AD1 X m2ad1
0x3790   m379e
0x377F   m378d
0x3773   m3781
0x375F   m376d
0x3733   m3741
0x3725   m3733
0x3716   m3724
0x36FE   m370c
0x36ED   m36fb
0x2ABD   m2a97
0x2AB0   m2a8a
0x2A9A   m2a74
0x2A7F   m2a59
0x2A68   m2a42
0x2A35   m2a0f
0x2A1D   m29f7
0x2A0C   m29e6
0x29FC   m29d6
0x29E7   m29c1
0x29D5   m29af
0x29A9   m2983
0x29A2   m297c
0x2994   m296e
0x298B   m2965
0x0F02   l0f02
0x2974   m294e
0x2965   m293f
0x2959   m2933
0x2945   m291f
0x2939   m2913
0x2931   m290b
0x2923   m28fd
0x290B   m28e5
0x351B   o351B
0x28F8   m28d2
0x28EB   m28c5
0x28DA   m28b4
0x28CC   m28a6
0x28C3   m289d
0x28B2   m288c
0x289F   m2879
0x0394   l0394
0x2891   m286b
0x2882   m285c
0x2874   m284e
0x2868   m2842
0x2855   m282f
0x2849   m2823
0x2838   m2812
0x282A   m2804
0x2819   m27f3
0x2808   m27e2
0x27FA   m27d4
0x27E7   m27c1
0x27DB   m27b5
0x27C8   m27a2
0x27B7   m2791
0x27AD   m2787
0x279E   m2778
0x2793   m276d
0x26EA X m26ea
0x2703   m2703
0x26DB   m26db
0x26C0   m26c0
0x26A1   m26a1
0x2686   m2686
0x2672   m2672
0x2664   m2664
0x2661   m2661
0x2674   m2674
0x1097   o1097
0x1A1B   o1A1B
0x1536   o1536
0x1391   o1391
0x2637   m2637
0x2ACE   m2ace
0x2705   m2705
0x2631   m2631
0x261A   m261a
0x2612   m2612
0x2614   m2614
0x25DF   m25df
0x2585   m2585
0x268E   m268e
0x2567   m2567
0x2559   m2559
0x250C X m250c
0x2560   m2560
0x24CC   m24cc
0x367E   rest_ink
0x24B9   m24b9
0x3B5C   m3b64
0x24A2   m24a2
0x0517   l0517
0x369A   m36a8
0x24C0   m24b5
0x3690   m369e
0x2481   m24a3
0x2435 X m242a
0x2427   m2427
0x240A   m240a
0x2401   m2401
0x23F4   m23f4
0x23EE   m23ee
0x23E1   m23e1
0x23E4   m23e4
0x23C7   m23c7
0x24B2   m24b2
0x23BA   m23ba
0x23B7   m23b7
0x23A5   m23a5
0x2393   m2393
0x2389   m2389
0x2397   m2397
0x2385   m2385
0x237A   m237a
0x2371   m2371
0x0716   o0716
0x1615   o1615
0x2DE3   o2DE3
0x2321 X m2321
0x2347   m2347
0x2316   m2316
0x2312   m2312
0x2368   m2368
0x22D0   m22d0
0x0DAF   o0DAF
0x2C15   o2C15
0x2996   o2996
0x22BF   m22bf
0x2477   o2477
0x22A2   m22a2
0x22C3   m22c3
0x2280   m2280
0x35BE   m35be
0x2262   m2262
0x225A X m225a
0x223B X m223b
0x2BA3   m2ba3
0x2223   m2223
0x2218   m2218
0x21FB   m21fb
0x21F0   m21f0
0x2257   m2257
0x2237   m2237
0x21D0 X m21d0
0x21CD   m21cd
0x21C5 X m21c5
0x3328   m3328
0x20C1   o20C1
0x2196 X m2196
0x219C   m219c
0x1FDF   o1FDF
0x2185   m2185
0x217D   m217d
0x2167 X m2167
0x22AA   o22AA
0x2153   m2153
0x2147   m2147
0x2136   m2136
0x215F   m215f
0x212C   m212c
0x062E   l062e
0x2118   m2118
0x210C   m210c
0x19D6   o19D6
0x2174   m2174
0x2100   m2100
0x2107   m2107
0x2151   m2151
0x216B   m216b
0x20E7   m20e7
0x20CE   m20ce
0x20B9 X m20b9
0x20A9   m20a9
0x2098   m2098
0x2092   m2092
0x2080   m2080
0x207F X m207f
0x2067   m2067
0x205B X m205c
0x20A8   m20a8
0x2043   m2043
0x203E   m203e
0x2038   m2038
0x2030   m2030
0x2017   m2017
0x200E   m200e
0x1FEE   m1fee
0x1FF6   m1ff6
0x1FE8   m1fe8
0x0048   l0048
0x2001   m2001
0x1FDE   m1fde
0x1FD0   m1fd0
0x1FC8   m1fc8
0x1FCC   m1fcc
0x1FB1   m1fb1
0x064B   o064B
0x1FAB   m1fab
0x0B52   o0B52
0x1FA0   m1fa0
0x1FF5   o1FF5
0x2020   m2020
0x1F89   m1f89
0x2051   m2051
0x1F6E   m1f6e
0x1F64   m1f64
0x1F5B   m1f5b
0x1F46   m1f46
0x1F41   m1f41
0x1F23   m1f23
0x1F15   m1f15
0x1F0A   m1f0a
0x1EF8   m1ef8
0x1EEF   m1eef
0x1EDA   m1eda
0x1ED5   m1ed5
0x1EFB   m1efb
0x1EB9   m1eb9
0x1EC2   m1ec2
0x1EB2   m1eb2
0x1E8C X m1e8c
0x0133   l0133
0x1E89   m1e89
0x1E85   m1e85
0x2D63   l2d63
0x1E70 X m1e70
0x1E47   m1e47
0x1E33   m1e33
0x1E50   m1e50
0x1E30   m1e30
0x1E21   m1e21
0x1E15   m1e15
0x1E05 X m1e05
0x37F0   m37fe
0x1DF7   m1df7
0x1DD5   m1dd5
0x1DBD   m1dbd
0x1DB7   m1db7
0x1DAC   m1dac
0x1DA2   m1da2
0x001C   o001C
0x0070   o0070
0x0077   o0077
0x02A1   o02A1
0x034F   o034F
0x0382   o0382
0x1C77   m1c77
0x1C7A   m1c7a
0x334A   l334a
0x1C5D   m1c5d
0x1C54   m1c54
0x1C2B   m1c2b
0x1C14   m1c14
0x1BFA   m1bfa
0x1BEA   m1bea
0x1C48   m1c48
0x1BB6   m1bb6
0x1BA8   m1ba8
0x1B9D   m1b9d
0x1C22   o1C22
0x1B85   m1b85
0x1B74   m1b74
0x1D5C   m1d5c
0x1B57   m1b57
0x1B5A   m1b5a
0x1B33   m1b33
0x1AF6 X m1af6
0x1AF7   m1af7
0x1AF3   m1af3
0x1AE9   m1ae9
0x1ADA   m1ada
0x374B   m3759
0x1AB1   m1ab1
0x1D7B   m1d7b
0x1AA6   m1aa6
0x1A9A   m1a9a
0x1A77 X m1a77
0x1A4B X m1a4b
0x1A4C   m1a4c
0x1A45   m1a45
0x1C84   m1c84
0x1A25 X m1a25
0x1A2D   m1a2d
0x1DBF   m1dbf
0x1B20   m1b20
0x1A0E   m1a0e
0x19FA   m19fa
0x19AF X m19af
0x198B X m198b
0x1B28   m1b28
0x1966 X m1966
0x198A   m198a
0x194D   m194d
0x195C   m195c
0x1929   m1929
0x1926   m1926
0x0B03   o0B03
0x1916   m1916
0x1962   m1962
0x19EE   m19ee
0x1920   m1920
0x1AB6   m1ab6
0x19A2   m19a2
0x199A   m199a
0x196F   m196f
0x1A07   m1a07
0x3296   o3296
0x2265 X m2265
0x18E9   m18e9
0x18E4   m18e4
0x1D91   m1d91
0x18DC   m18dc
0x18CB   m18cb
0x18BC   m18bc
0x19D6   m19d6
0x18A8   m18a8
0x189B   m189b
0x1883   m1883
0x1872   m1872
0x1864   m1864
0x181E   m181e
0x17F7   m17f7
0x17DC   m17dc
0x17AE   m17ae
0x1813   m1813
0x26C3   o26C3
0x1B18   m1b18
0x1792   m1792
0x3432   l3432
0x1791   m1791
0x1B00   m1b00
0x177C   m177c
0x1771   m1771
0x1770   m1770
0x19B8   m19b8
0x2538   l2538
0x021B   l021b
0x19DE   m19de
0x1990   m1990
0x1755   m1755
0x1741   m1741
0x1B08   m1b08
0x172E   m172e
0x173C   m173c
0x1731   m1731
0x1714   m1714
0x16FD X m16fd
0x1B10   m1b10
0x16F0   m16f0
0x16E6   m16e6
0x16DF   m16df
0x16CB   m16cb
0x16D8   m16d8
0x16CD   m16cd
0x16C0   m16c0
0x16BD   m16bd
0x1AD1   m1ad1
0x16B1   m16b1
0x0652   o0652
0x16A3   m16a3
0x1BAF   m1baf
0x1B64   m1b64
0x1A81   m1a81
0x11BD   l11bd
0x1697   m1697
0x168B   m168b
0x1B30   m1b30
0x1B7F   m1b7f
0x19E7   m19e7
0x1683   m1683
0x1748   m1748
0x1678   m1678
0x166C   m166c
0x08F5   l08f5
0x165A   m165a
0x1653   m1653
0x163B   m163b
0x163E   m163e
0x1636   m1636
0x162A   m162a
0x1669   m1669
0x1A6A   m1a6a
0x161D   m161d
0x158C   m158c
0x1586 X m1586
0x1583 X m1583
0x1579   m1579
0x1571   m1571
0x156D X m156d
0x156A   m156a
0x155D X m155d
0x1562   m1562
0x155A   m155a
0x1567   m1567
0x1547   m1547
0x2530   o2530
0x153F X m153f
0x153B   m153b
0x152F X m152f
0x2AFF   o2AFF
0x2D28   o2D28
0x1DAB   o1DAB
0x1515   m1515
0x1506 X m1506
0x14F0   m14f0
0x2B19   m2b19
0x2B35   m2b35
0x22AD   m22ad
0x14B5   m14b5
0x1303   o1303
0x14C4   m14c4
0x1465   m1465
0x0F32   l0f32
0x1439   m1439
0x140C   m140c
0x13F3   m13f3
0x14DF   m14df
0x13C9   m13c9
0x1524   m1524
0x1383   m1383
0x3E00   n3e00
0x3E80   m3e80
0x1356   m1356
0x133D   m133d
0x22C7   m22c7
0x152E   m152e
0x13C6   m13c6
0x12B8   m12b8
0x3DA8   l3da8
0x12AA   m12aa
0x12CA   m12ca
0x12E1   m12e1
0x12A1   m12a1
0x12AD   m12ad
0x2C8D   o2C8D
0x128E   m128e
0x127D   m127d
0x2239   l2239
0x1266   m1266
0x1236   m1236
0x1232   m1232
0x1207   m1207
0x1E45   o1E45
0x1E67   o1E67
0x1FA6   x1fa6
0x1E39   o1E39
0x11F5   m11f5
0x24FB   o24FB
0x252F X m252f
0x11E8   m11e8
0x11F3   m11f3
0x3A00 X o3A00
0x1D86   o1D86
0x11C2   m11c2
0x11D9   m11d9
0x11A1   m11a1
0x1D16   o1D16
0x119D   m119d
0x1185   m1185
0x34E9   o34E9
0x1175   m1175
0x1CBE   o1CBE
0x21FC   o21FC
0x0D4D   o0D4D
0x113A   m113a
0x1C82   o1C82
0x1C7A   o1C7A
0x1105   o1105
0x111C   m111c
0x1C6C   o1C6C
0x1C56   o1C56
0x1C1F   o1C1F
0x110B   m110b
0x1CDE   o1CDE
0x10D8   m10d8
0x10D4   m10d4
0x10D7   m10d7
0x115B   m115b
0x2A4F   m2a29
0x1157   m1157
0x111D   m111d
0x112D   m112d
0x21B2   o21B2
0x10EA   m10ea
0x1118   m1118
0x10E6   m10e6
0x1110   m1110
0x0EC1   l0ec1
0x110C   m110c
0x10E9   m10e9
0x198B   o198B
0x10AD   m10ad
0x1080   m1080
0x1092   m1092
0x1048   m1048
0x105C   m105c
0x0F30   o0F30
0x10B8   m10b8
0x103A   m103a
0x2AF9   m2af9
0x10C5   m10c5
0x102A   m102a
0x105D   l105d
0x100D   m100d
0x1004   m1004
0x1031   m1031
0x1073   m1073
0x16BF   o16BF
0x0BD3   o0BD3
0x0FD0   m0fd0
0x0FD1   m0fd1
0x0FBF   m0fbf
0x23F1   m23f1
0x0FBC   m0fbc
0x3AA7   cmdspec
0x0FB9   m0fb9
0x1283   m1283
0x2294   o2294
0x1E7A   o1E7A
0x2286   m2286
0x03F8   o03F8
0x1535   m1535
0x0DF4   o0DF4
0x2177   m2177
0x21AA   m21aa
0x2296   m2296
0x1E42   o1E42
0x29BD   m2997
0x11E2   m11e2
0x11A2   m11a2
0x22DC   o22DC
0x1204   m1204
0x1E4F   o1E4F
0x1E80   o1E80
0x1539   m1539
0x11F9   m11f9
0x259E   m259e
0x1072   m1072
0x14E2   m14e2
0x218F   m218f
0x217B   m217b
0x1178   m1178
0x1CEE   o1CEE
0x124A   m124a
0x115E   m115e
0x0F79   m0f79
0x1C11   o1C11
0x0F5E   m0f5e
0x0F61   m0f61
0x0F24   m0f24
0x0F58   m0f58
0x0F82   m0f82
0x0F4E   m0f4e
0x0F64   m0f64
0x0F3F   m0f3f
0x0F3B   m0f3b
0x0F68   m0f68
0x0F1D   m0f1d
0x0F51   m0f51
0x0F42   m0f42
0x0F29   m0f29
0x0F20   m0f20
0x3BCE   SIN_ERROR
0x0F33   m0f33
0x0F48   m0f48
0x0F45   m0f45
0x0F5B   m0f5b
0x0F98   m0f98
0x0F4B   m0f4b
0x0F72   m0f72
0x0F6F   m0f6f
0x0F6C   m0f6c
0x0F2D   m0f2d
0x0F7F   m0f7f
0x0F7C   m0f7c
0x0F94   m0f94
0x0F93   m0f93
0x0F92   m0f92
0x0F91   m0f91
0x0F90   m0f90
0x0F8F   m0f8f
0x0F8E   m0f8e
0x0F8A   m0f8a
0x0F86   m0f86
0x0F84   m0f84
0x0F85   m0f85
0x0FA5   m0fa5
0x0F9F   m0f9f
0x0CAA   x0caa
0x0FB2   m0fb2
0x0FAC   m0fac
0x0FA9   m0fa9
0x0FB6   m0fb6
0x0F9C   m0f9c
0x0EDB   m0edb
0x0ED5 X m0ed5
0x0ED9   m0ed9
0x0EDC   m0edc
0x0ECB   m0ecb
0x0ECA   m0eca
0x0E9B X m0e9b
0x0E41   msg18
0x0E31   m0e31
0x15D4   o15D4
0x09A1   o09A1
0x0E0C   m0e0c
0x0DF6   m0df6
0x0DB1   m0db1
0x0D9B   m0d9b
0x0E10   m0e10
0x2D8B   m2d8b
0x0D56   m0d56
0x0D53   m0d53
0x0D3C   m0d3c
0x0D1C   m0d1c
0x0D10   m0d10
0x0CFF   m0cff
0x0D07   m0d07
0x0D21   m0d21
0x0CF7   m0cf7
0x0D2A   m0d2a
0x0CE9   m0ce9
0x0CDD   m0cdd
0x0CD5   m0cd5
0x0CEE   m0cee
0x0CD0   m0cd0
0x0CBD X m0cbd
0x1B10   o1B10
0x0CA9   m0ca9
0x19E5   o19E5
0x0C48   m0c48
0x0C6F   m0c6f
0x1F05   o1F05
0x0C2A   m0c2a
0x0C21   m0c21
0x0C15   m0c15
0x0C0A X m0c0a
0x341B   o341B
0x0BF8   m0bf8
0x0BF6   m0bf6
0x0BE2   m0be2
0x0BFC   m0bfc
0x0C00   m0c00
0x0BD7   m0bd7
0x0CB2   m0cb2
0x0C04   m0c04
0x0BB9   m0bb9
0x3F8A   m3f8a
0x0B92   m0b92
0x0B6C   m0b6c
0x0BA6   m0ba6
0x0B2F   m0b2f
0x0B28   m0b28
0x0C0A   o0C0A
0x09C0   o09C0
0x0B0C   m0b0c
0x0AE9   m0ae9
0x0B41   m0b41
0x0D6E   m0d6e
0x0AA6 X m0aa6
0x0AB5   m0ab5
0x0A96   m0a96
0x24C7   n24c7
0x0A9C   m0a9c
0x1E99   o1E99
0x0A6F X m0a6f
0x0A72   m0a72
0x0A6C   m0a6c
0x1121   m1121
0x0A67   m0a67
0x1CE6   o1CE6
0x0A58   m0a56
0x0E94   m0e94
0x0A47 X m0a45
0x0A8F   m0a8f
0x0A89   m0a89
0x0A3A   m0a36
0x0AD5   m0ad5
0x0A13 X m0a0d
0x0A06   m09fe
0x0A09   m0a01
0x09FC   m09f4
0x09E8   m09e0
0x28B2   o28B2
0x09D4 X m09cc
0x1125   m1125
0x0A17   m0a11
0x09B8   m09ac
0x09BF   m09b3
0x09A5   m0999
0x098E   m0982
0x0986   m097a
0x09A4   m0998
0x09A6   m099a
0x0970 X m0970
0x0966   m0966
0x0948   m0948
0x0945   m0945
0x2172   m2172
0x0937   m095d
0x091C X m0942
0x0969   m0969
0x0978   m096c
0x090B   m090a
0x0910   m090f
0x08FF   m08fe
0x08E5   m08e0
0x08E9   m08e4
0x3C89   MOVE_NEXT_BLQ
0x08B5   m08b0
0x0F54   m0f54
0x08AB   m08a6
0x1017   l1017
0x09C6   m09ba
0x1129   m1129
0x0F83   m0f83
0x088D   m0888
0x0556   o0556
0x0889   m0884
0x086F X m086a
0x0884   m087f
0x086A   m0865
0x3BE0   m3be0
0x087F   m087a
0x0888   m0883
0x0839   m0834
0x053F   o053F
0x0835   m0830
0x082D   m0828
0x15EF   o15EF
0x0805   m0800
0x0806   m0801
0x192A   o192A
0x1560   l1560
0x07F5 X m07f0
0x07ED X m07e8
0x3A7E   o3A7E
0x07DF   m07df
0x0EEB   m0eeb
0x07D7   m07d7
0x07D3   m07d3
0x07CF   m07cf
0x3FB9   m07d1
0x3FB1   m07c9
0x079C   m079a
0x0786 X m0784
0x0780   m077e
0x077D   m077b
0x075C X m075c
0x07F6   m07f1
0x3A8E   o3A8E
0x0743 X m0743
0x0828   m0823
0x073A   m073a
0x0823   m081e
0x072B   m072b
0x24DF   o24DF
0x0818   m0813
0x07E7   m07e2
0x081E   m0818
0x071C   m071c
0x070E X m070e
0x1ABE   m1abe
0x073E   m073e
0x0702 X m0702
0x06F6   m06f6
0x257D   o257D
0x06F8   m06f8
0x06EE   m06ee
0x06FC   m06fc
0x06D8   m06d8
0x06D2 X m06d2
0x06C4 X m06c4
0x06BB   m06bb
0x06B8   m06b8
0x07BC   m07ba
0x06B7   m06b7
0x1F8E   m1f8e
0x06AB   m06ab
0x068C   m068c
0x067F   m067f
0x0668   m0668
0x05CA   o05CA
0x34C6   m34c6
0x063A   m063a
0x062E X m062e
0x0645   m0645
0x0628   m0628
0x0623   m0623
0x060A   m060a
0x05FE X m05fe
0x321C   m321c
0x3B4D   n3b4d
0x05E8   m05e8
0x2488   m2488
0x05F8   m05f8
0x3B40   m3b48
0x062B   m062b
0x05DA   m05da
0x2CD5   o2CD5
0x05DD   m05dd
0x2070   o2070
0x05B8   m05b8
0x059F   m059f
0x059E   m059e
0x0594   m0594
0x0596   m0596
0x058C   m058c
0x1881   o1881
0x056E   m056e
0x0561   m0561
0x054B   m054b
0x0518   m0518
0x0508 X m0508
0x0541   m0541
0x04F0   m04f0
0x04E5   m04e5
0x04D5   m04d5
0x04C8 X m04c8
0x3F63   m3f63
0x0493   m0493
0x0481   m0481
0x047C   m047c
0x3FD0   myn
0x04CA   m04ca
0x04C1   m04c1
0x3FC9   merase
0x0499   m0499
0x171E   o171E
0x046D   m046d
0x0455   m0455
0x044A   m044a
0x0442   m0442
0x043B   m043b
0x0434   m0434
0x207B   l207b
0x0427   m0427
0x0411 X m0411
0x0415   m0415
0x0407   m0407
0x03F6 X m03f6
0x041C   m041c
0x03EC X m03ec
0x296B   o296B
0x03E6 X m03e6
0x0392   m0392
0x038B X m038b
0x038E   m038e
0x0384   m0384
0x03A7   m03a7
0x0374   m0374
0x0365   m0365
0x036F   m036f
0x0345   m0345
0x0C0C   l0c0c
0x0342   m0342
0x032D   m032d
0x0381   m0381
0x0315   m0315
0x0306   m0306
0x0E9A   m0e9a
0x02EC   m02ec
0x3D06   l3d06
0x32EE   m32ee
0x3F00   m3f00
0x3C20   l3c20
0x32B6   m32b6
0x02D2   m02d2
0x02D3   m02d3
0x2B64   m2b64
0x02BF   m02bf
0x2B89   m2b89
0x02AB   m02ab
0x029C   m029c
0x028D   m028d
0x0291   m0291
0x10B1   m10b1
0x1C8C   o1C8C
0x311B   o311B
0x027E X m027e
0x1DD9   m1dd9
0x1E02   m1e02
0x03E3   m03e3
0x026C   m026c
0x0269   m0269
0x0239   m0239
0x0240   m0240
0x021B   m021b
0x12CF   o12CF
0x0201   m0201
0x01F8   m01f8
0x217E   l217e
0x0206   m0206
0x021E   m021e
0x01E3   m01e3
0x01BF   m01bf
0x01EA   m01ea
0x01A8   m01a8
0x01C7   m01c7
0x01D5   m01d5
0x0188   m0188
0x017D   m017d
0x0158   m0158
0x0156   m0156
0x0162   m0162
0x014D   m014d
0x0145   m0145
0x013B   m013b
0x0121   m0121
0x0117   m0117
0x00FD   m00fd
0x00E3   m00e3
0x00BC   m00bc
0x00A1   m00a1
0x0070   m0070
0x0066 X m0066
0x005E   m005e
0x0056   m0056
0x0074   m0074
0x0176   m0176
0x39E9   ERROR_LFLAG
0x0048   m0048
0x0038 X m0038
0x00AA   m00aa
0x0030 X m0030
0x0028 X m0028
0x0018 X m0018
0x0010 X m0010
0x2ADA   m2ada
0x0008 X m0008
0x0000 X m0000
0x3FF7 X l3ff0
0x3FEC   l3fec
0x3FDE   l3fde
0x3FCF   l3fcf
0x3FAF X l3faf
0x3FA4   l3fa4
0x3F95   l3f95
0x3F77 X l3f77
0x198F   m198f
0x3F42   l3f42
0x0254   m0254
0x3F00   l3f00
0x3EE0 X l3ee0
0x3F15   l3f15
0x2913   o2913
0x3F63   l3f63
0x3EC5 X l3ec5
0x3EB5 X l3eb5
0x3EA2 X l3ea2
0x3E7B X l3e7b
0x3E7C   l3e7c
0x0F75   m0f75
0x3EC9   l3ec9
0x3E6C   l3e6c
0x3E63   l3e63
0x3E4E X l3e4e
0x3E41   l3e41
0x3E05 X l3e05
0x2770   o2770
0x3A31 X ROM0_SPARE4
0x03CF   R0_FREE_4
0x3A31   FREE_ROM0_4
0x2730   x2730
0x3A29   l3a29
0x3A79   m3a81
0x3A0C   l3a0c
0x39FB X l39fb
0x39EF X l39ef
0x39DF   l39df
0x39D7 X l39d7
0x39BE   l39be
0x39AE   l39ae
0x39A1   l39a1
0x3993   l3993
0x3985   l3985
0x3989   l3989
0x3996   l3996
0x3962   l3962
0x399C   l399c
0x3955   l3955
0x3967   l3967
0x392D   l392d
0x0055   o0055
0x38EE   l38ee
0x3917   l3917
0x38D5   l38d5
0x38D9   l38d9
0x294B   o294B
0x38DC   l38dc
0x38D1   l38d1
0x38F8   l38f8
0x107F   o107F
0x3927   l3927
0x3921   l3921
0x3907   l3907
0x38AB   l38ab
0x389B   l389b
0x38A2   l38a2
0x37EE X m14e5
0x29C0   o29C0
0x37DB   l37db
0x26DF   o26DF
0x1A7A   o1A7A
0x378E   l378e
0x37CA   l37ca
0x376B   l376b
0x233C   m233c
0x3748   l3748
0x3726   l3726
0x3709 X l3709
0x3703 X l3703
0x0C3B   o0C3B
0x36F0   l36f0
0x36EC   l36ec
0x1709   m1709
0x36E9 X l36e9
0x0D1F   m0d1f
0x36E6 X l36e6
0x36F8   l36f8
0x36D3 X l36d3
0x36CC X l36cc
0x3719   l3719
0x36BA X l36ba
0x2B8A   l2b8a
0x2B7B X l2b7b
0x2B71   l2b71
0x2B95   l2b95
0x2B62 X l2b62
0x2B3E X l2b3e
0x2B1F   l2b1f
0x2B02 X ROM0_SPARE3
0x001D   R0_FREE_3
0x2B02   FREE_ROM0_3
0x2AFD   l2afd
0x2AF7   l2af7
0x2AEF   l2aef
0x2AB9 X l2ab9
0x2AAD   l2aad
0x2B09   m2b09
0x0818   m0812
0x2AA5   l2aa5
0x2A99   l2a99
0x2A7D   l2a7d
0x2A72   l2a72
0x2A66   l2a66
0x2A5B   l2a5b
0x2A9C   l2a9c
0x2A20   l2a20
0x2A3B   l2a3b
0x2A0C   l2a0c
0x29F0   l29f0
0x2B9B   o2B9B
0x29DF   l29df
0x29D4   l29d4
0x167F   o167F
0x29BA   l29ba
0x0020 X m0020
0x29C5   l29c5
0x29AF   l29af
0x29A4   l29a4
0x2994   l2994
0x297B   l297b
0x298E   l298e
0x296A   l296a
0x2AC2   l2ac2
0x2950   l2950
0x12AB   l12ab
0x29FA   l29fa
0x2926   l2926
0x290A   l290a
0x28F4   l28f4
0x2935   l2935
0x106E   o106E
0x28BF   l28bf
0x28B0   l28b0
0x28A2   l28a2
0x2897   l2897
0x28AF   l28af
0x2887   l2887
0x288B   l288b
0x287C   l287c
0x2893   l2893
0x2870   l2870
0x28E4   l28e4
0x285B   l285b
0x285C   l285c
0x2AEB   l2aeb
0x283D   l283d
0x284A   l284a
0x2F59   o2F59
0x280E   l280e
0x27E1   l27e1
0x27F1   l27f1
0x27C2   l27c2
0x27B7 X l27b7
0x27AC X l27ac
0x27A1   l27a1
0x279E   l279e
0x2793 X l2793
0x2788 X l2788
0x277D X l277d
0x2772 X l2772
0x2767 X l2767
0x275C X l275c
0x2F4A   o2F4A
0x274C X l274c
0x273F X l273f
0x2739 X l2739
0x2730   l2730
0x2727   l2727
0x272C   l272c
0x2715   l2715
0x270C   l270c
0x26F8   l26f8
0x26F5   l26f5
0x26E2   l26e2
0x26DB   l26db
0x26C9   l26c9
0x314B   m314b
0x26C5   l26c5
0x26BC   l26bc
0x2ABD   l2abd
0x26E0   l26e0
0x269F X l269f
0x2692 X l2692
0x268A   l268a
0x267F   l267f
0x267C   l267c
0x2800   l2800
0x265F   l265f
0x2650   l2650
0x261C X l261c
0x2666   l2666
0x2624   l2624
0x2C8C   m2c8c
0x260B   l260b
0x25EC X l25ec
0x25DB X l25db
0x25D5   l25d5
0x25B1   l25b1
0x25A4   l25a4
0x2584 X l2584
0x2569 X l2569
0x2563 X l2563
0x254E   l254e
0x254B   l254b
0x253E   l253e
0x196A   l196a
0x26AA   l26aa
0x24E8 X l24e8
0x24F1   l24f1
0x252A   l252a
0x3C63   m3c63
0x24E2   l24e2
0x24BD X l24bd
0x24AB   l24ab
0x249F   l249f
0x2486   l2486
0x24B6   l24b6
0x2479   l2479
0x08EB   o08EB
0x24AF   l24af
0x2449 X l2449
0x2A49   l2a49
0x25BE   l25be
0x242A   l242a
0x2F52   o2F52
0x2423   l2423
0x2B0B   o2B0B
0x241C   l241c
0x3FB0   l3fb0
0x23F1 X l23f1
0x2415   l2415
0x201E   o201E
0x3274 X m3274
0x2A16   l2a16
0x23BE   l23be
0x3D70   m3d70
0x23B6   l23b6
0x23B0   l23b0
0x23C5   l23c5
0x239E   l239e
0x3FD9   FREE_ROM1_1
0x2398 X l2398
0x2395   l2395
0x238E   l238e
0x237D   l237d
0x238A   l238a
0x239A   l239a
0x23D2   l23d2
0x2354   l2354
0x233E   l233e
0x235F   l235f
0x2331   l2331
0x3E79   l3e79
0x2338   l2338
0x2359   l2359
0x2317   l2317
0x2314   l2314
0x2468   l2468
0x0808   o0808
0x27E4   l27e4
0x28BB   l28bb
0x22E9   l22e9
0x22F5   l22f5
0x0C10   o0C10
0x22B4   l22b4
0x22C0   l22c0
0x22A1   l22a1
0x2296 X l2296
0x2286   l2286
0x27D0   l27d0
0x227A   l227a
0x2277   l2277
0x226C   l226c
0x2261   l2261
0x2259   l2259
0x2254 X l2254
0x2788   o2788
0x207D   l207d
0x274C   o274C
0x25DB   o25DB
0x25BE   o25BE
0x2A49   o2A49
0x21AF   l21af
0x21BB   l21bb
0x21A9   l21a9
0x21A0   l21a0
0x0D6E   o0D6E
0x2187   l2187
0x2183   l2183
0x2186   l2186
0x2179   l2179
0x216A   l216a
0x215B X l215b
0x2154   l2154
0x214E   l214e
0x2146   l2146
0x213E   l213e
0x2196   l2196
0x2136   l2136
0x2150   l2150
0x212E   l212e
0x25CB   m25cb
0x2109   l2109
0x1664   o1664
0x20F9   l20f9
0x20F0   l20f0
0x20DA   l20da
0x20C8   l20c8
0x20BD   l20bd
0x20C3   l20c3
0x20C6   l20c6
0x206D   l206d
0x2081   l2081
0x208E   l208e
0x065C   m065c
0x204A   l204a
0x0D74   l0d74
0x2052   l2052
0x2059   l2059
0x3279   m3279
0x202C   l202c
0x202F   l202f
0x2015   l2015
0x2007   l2007
0x201B   l201b
0x1FEE   l1fee
0x1FDC   l1fdc
0x1FD4   l1fd4
0x1FE5   l1fe5
0x1FF7   l1ff7
0x1FB9   l1fb9
0x1FBD   l1fbd
0x1FC2   l1fc2
0x1F9C   l1f9c
0x1F96   l1f96
0x1FA6   l1fa6
0x1F8B   l1f8b
0x1F6D   l1f6d
0x1F50   l1f50
0x1F53   l1f53
0x1E5F   o1E5F
0x026F X m026f
0x1F3F   l1f3f
0x1F56   l1f56
0x1F59   l1f59
0x191C   o191C
0x1F42   l1f42
0x1F27   l1f27
0x1F22   l1f22
0x1F03   l1f03
0x1EC5   l1ec5
0x1EC6   l1ec6
0x1EC2   l1ec2
0x3C1B   m3c1b
0x1F10   l1f10
0x2113   l2113
0x1010   m1010
0x1E91   l1e91
0x1FA9   l1fa9
0x1E69   l1e69
0x04CE X m04ce
0x1F60   l1f60
0x1E5F   l1e5f
0x1EB1   l1eb1
0x1E57   l1e57
0x1F7C   l1f7c
0x1E4B   l1e4b
0x1E80   l1e80
0x1E46   l1e46
0x1E87   l1e87
0x1F30   l1f30
0x1E34   l1e34
0x16B0   o16B0
0x1DFC   l1dfc
0x1D93   l1d93
0x1D7F   l1d7f
0x1D7B   l1d7b
0x1D75   l1d75
0x1D56   l1d56
0x1D62   l1d62
0x370C   o370C
0x1D4F   l1d4f
0x1D49   l1d49
0x1D3E   l1d3e
0x1DC5   l1dc5
0x1D24   l1d24
0x1D23   l1d23
0x1CFB   l1cfb
0x1CF1   l1cf1
0x1CF0   l1cf0
0x1CE3   l1ce3
0x1DA5   l1da5
0x1D2A   l1d2a
0x1CDA   l1cda
0x1DAD   l1dad
0x1C9E X l1c9e
0x1C98   l1c98
0x1C83   l1c83
0x1C7A   l1c7a
0x1C6E   l1c6e
0x1C63   l1c63
0x25B0   l25b0
0x1C6D   l1c6d
0x1C42   l1c42
0x1C3B   l1c3b
0x1C2A   l1c2a
0x1C3E   l1c3e
0x2D2B   o2D2B
0x19E8   o19E8
0x1655   o1655
0x1BCB   l1bcb
0x1BD2   l1bd2
0x3F78   l3f78
0x1BDC   l1bdc
0x1C49   l1c49
0x1C18   l1c18
0x1B8D   l1b8d
0x1B7C   l1b7c
0x2DA2   o2DA2
0x33B4   o33B4
0x1B64   l1b64
0x391E   ES128K
0x1C43   l1c43
0x1B48   l1b48
0x1B50   l1b50
0x2D1B   o2D1B
0x1B4C   l1b4c
0x1B2C   l1b2c
0x1B26 X l1b26
0x1B14   l1b14
0x1AEA   l1aea
0x1B1B   l1b1b
0x1AD2   l1ad2
0x2002   l2002
0x18B6   o18B6
0x19B8   o19B8
0x1AB7   l1ab7
0x1BCD   l1bcd
0x1C12   l1c12
0x1A92 X l1a92
0x1A72   l1a72
0x2758   l2758
0x1A67   l1a67
0x1A24   l1a24
0x1A14   l1a14
0x19F5   l19f5
0x19F3   l19f3
0x19E8   l19e8
0x19EC   l19ec
0x19D7   l19d7
0x19C3   l19c3
0x19B7   l19b7
0x19B2   l19b2
0x0E88   o0E88
0x19A0   l19a0
0x199B   l199b
0x1993   l1993
0x1990   l1990
0x0E9B   o0E9B
0x197B   l197b
0x1DA1   l1da1
0x196D   l196d
0x1965   l1965
0x0325   l0325
0x195F   l195f
0x2F4C   l2f4c
0x195A   l195a
0x1951   l1951
0x192E   l192e
0x1931   l1931
0x19DC   l19dc
0x032D   l032d
0x190B   l190b
0x3EC3   l3ec3
0x18D5   l18d5
0x18D2   l18d2
0x18C9   l18c9
0x18C3   l18c3
0x1A0C   l1a0c
0x1A34   l1a34
0x1925   l1925
0x19FE   l19fe
0x194D   l194d
0x1F3A   o1F3A
0x07F0   m07eb
0x10DB   o10DB
0x1896   l1896
0x1894   l1894
0x351E   l351e
0x1872   l1872
0x186E   l186e
0x1887   l1887
0x0AFF   l0aff
0x183A   l183a
0x1875   l1875
0x1817   l1817
0x17F4   l17f4
0x17D2   l17d2
0x17A9   l17a9
0x17A4   l17a4
0x34E3   m34e3
0x179C   l179c
0x32C8 X o32C8
0x1798   l1798
0x17A8   l17a8
0x17BD   l17bd
0x1CBF   l1cbf
0x1CAA   l1caa
0x1CD3   l1cd3
0x1736   l1736
0x1CCC   l1ccc
0x1AC5   l1ac5
0x1722   l1722
0x1D2B   l1d2b
0x170E   l170e
0x16F3   l16f3
0x16E6   l16e6
0x16B3   l16b3
0x1696   l1696
0x37BF   l37bf
0x166F   l166f
0x2B69   l2b69
0x168E   l168e
0x166C   l166c
0x1675   l1675
0x1661   l1661
0x164E   l164e
0x1641   l1641
0x168B   l168b
0x1689   l1689
0x162E   l162e
0x1623   l1623
0x1636   l1636
0x0184 X l0184
0x1604   l1604
0x387F   l387f
0x1601 X l1601
0x20FA   o20FA
0x15FE   l15fe
0x3873   l3873
0x15DA   l15da
0x15AD   l15ad
0x15AB   l15ab
0x1590   l1590
0x158F   l158f
0x15D3   l15d3
0x15C9   l15c9
0x1547   l1547
0x158B   l158b
0x15F0   l15f0
0x15E4   l15e4
0x39ED   ERROR_VERIF
0x150C   l150c
0x1514   l1514
0x1515   l1515
0x1509   l1509
0x14FD   l14fd
0x14F3   l14f3
0x14F0   l14f0
0x14D7 X l14d7
0x14B3   l14b3
0x1494   l1494
0x19FB   o19FB
0x149D   l149d
0x1492   l1492
0x1490   l1490
0x146F   l146f
0x1476   l1476
0x147D   l147d
0x1484   l1484
0x148B   l148b
0x1442   l1442
0x152A   l152a
0x3916   l3916
0x15B0   l15b0
0x16BF   l16bf
0x13F1   l13f1
0x13FF   l13ff
0x13F4   l13f4
0x13FA   l13fa
0x13D5   l13d5
0x1611   l1611
0x13B8   l13b8
0x13B2 X l13b2
0x13A9 X l13a9
0x1428   l1428
0x08B7   l08b7
0x16D4   l16d4
0x16C6   l16c6
0x138B   l138b
0x1381   l1381
0x136E   l136e
0x1350   l1350
0x1330   l1330
0x132B   l132b
0x2F0C   o2F0C
0x1312   l1312
0x1321   l1321
0x12EC   l12ec
0x12D6   l12d6
0x12D2   l12d2
0x12E4   l12e4
0x12C0   l12c0
0x12A7   l12a7
0x12E9   l12e9
0x16E0   l16e0
0x1288   l1288
0x1252   l1252
0x1EB7   o1EB7
0x124E   l124e
0x126E   l126e
0x121A   l121a
0x3AC0   FREE_ROM3_1
0x120B   l120b
0x120D   l120d
0x11E4   l11e4
0x13A4   l13a4
0x11C6   l11c6
0x11CF   l11cf
0x119E   l119e
0x1191   l1191
0x0F65   l0f65
0x118A   l118a
0x1185   l1185
0x1180   l1180
0x117C   l117c
0x1143   l1143
0x113C   l113c
0x0A6D   o0A6D
0x113B   l113b
0x1127   l1127
0x110F   l110f
0x10FD   l10fd
0x10E8   l10e8
0x10C1   l10c1
0x1F6E   l1f6e
0x10A7   l10a7
0x10C6   l10c6
0x10C5   l10c5
0x1163   l1163
0x108D   l108d
0x1152   l1152
0x1076   l1076
0x1072   l1072
0x1080   l1080
0x1044 X l1044
0x103F X l103f
0x1042   l1042
0x103D   l103d
0x1028 X l1028
0x1022   l1022
0x1018   l1018
0x3239   l3239
0x100F   l100f
0x1000   l1000
0x1AE3   l1ae3
0x1297   l1297
0x16DC   o16DC
0x23D0   m23d0
0x0FFF   l0fff
0x0FE5   l0fe5
0x0FBA   l0fba
0x0FBD   l0fbd
0x30A9   o30A9
0x123C   l123c
0x0F90   l0f90
0x0F96   l0f96
0x0F9A   l0f9a
0x3EE9   l3ee9
0x0F5C   l0f5c
0x0F46   l0f46
0x0F3A   l0f3a
0x0F24   l0f24
0x0F29   l0f29
0x0EEB   l0eeb
0x0EE9   l0ee9
0x0ED7   l0ed7
0x0EC6   l0ec6
0x0EBA   l0eba
0x1291   l1291
0x0EA9   l0ea9
0x0E9C   l0e9c
0x0E8D   l0e8d
0x0E8C   l0e8c
0x0E6C   l0e6c
0x0EDC   l0edc
0x0E60   l0e60
0x1925   o1925
0x1385   l1385
0x0E5D   l0e5d
0x02BF   o02BF
0x0EB7   l0eb7
0x0E7A   l0e7a
0x0E47   l0e47
0x0E53   l0e53
0x0E30   l0e30
0x0E22   l0e22
0x0E06   l0e06
0x0DE9   l0de9
0x0E13   l0e13
0x0DF8   l0df8
0x0DD8   l0dd8
0x1DF6   l1df6
0x0DBD   l0dbd
0x24F0   m24f0
0x1DFA   l1dfa
0x142D   l142d
0x0D6E   l0d6e
0x0D5B   l0d5b
0x0D2B   l0d2b
0x0D19   l0d19
0x0D10   l0d10
0x0CFE   l0cfe
0x3559   o3559
0x0CE2   l0ce2
0x0CF6   l0cf6
0x0CD6   l0cd6
0x0CC3   l0cc3
0x0CD2   l0cd2
0x0CB7   l0cb7
0x0D30   l0d30
0x16EE   l16ee
0x0FA1   l0fa1
0x0C8B   l0c8b
0x0C50   l0c50
0x0C31   l0c31
0x0C23   l0c23
0x0C25   l0c25
0x29CA   l29ca
0x0D33   l0d33
0x0C0A   l0c0a
0x1442   x1442
0x0BF8   l0bf8
0x104E   l104e
0x0BFA   l0bfa
0x0D47   l0d47
0x0CAA   l0caa
0x3AD4   l3ad4
0x0CFC   l0cfc
0x0C9F   l0c9f
0x0B38   l0b38
0x0BCD   l0bcd
0x0B20   l0b20
0x0BD6   l0bd6
0x2F9C   m2f9c
0x0B0D   l0b0d
0x0BC4   l0bc4
0x0BFB   l0bfb
0x0AF6   l0af6
0x0AE5   l0ae5
0x173A   l173a
0x1749   l1749
0x0CD4   l0cd4
0x0CB5   l0cb5
0x1CA3   l1ca3
0x0F9C   l0f9c
0x0D17   l0d17
0x0A4A   l0a4a
0x0D59   l0d59
0x0A35   l0a35
0x0A45   l0a45
0x0A29   l0a29
0x0A07 X l0a07
0x0C26   l0c26
0x0FE0   l0fe0
0x0F4F   l0f4f
0x2152   l2152
0x09A3   l09a3
0x099C   l099c
0x09B3   l09b3
0x1C8C   l1c8c
0x0EED   l0eed
0x0AC3   l0ac3
0x097C   l097c
0x0935 X l0935
0x1451   m1451
0x0930   l0930
0x1A95   l1a95
0x12E8   m12e8
0x090E X l090e
0x191D   l191d
0x08FF   l08ff
0x1A64   l1a64
0x1488   m1488
0x0F30   m0f30
0x093F   l093f
0x0884 X ROM0_SPARE2
0x001B   R0_FREE_2
0x0884 X l0884
0x0884   FREE_ROM0_2
0x086B   l086b
0x35A1   m35a1
0x0864   l0864
0x083A   l083a
0x08CA   l08ca
0x0928   l0928
0x08C5   l08c5
0x0917   l0917
0x082A   l082a
0x0817   l0817
0x080F   l080f
0x0809   l0809
0x08DF   l08df
0x3840   l3840
0x0950   l0950
0x0937   l0937
0x08E8   l08e8
0x07F0   l07f0
0x19C8   l19c8
0x19B9   l19b9
0x07E0   l07e0
0x1950   l1950
0x0AB7   l0ab7
0x07A7   l07a7
0x03B5   o03B5
0x07A1   l07a1
0x0786   l0786
0x38CB   l38cb
0x09AA   l09aa
0x1C95   l1c95
0x0EFB   l0efb
0x1A8E   l1a8e
0x077B   l077b
0x0766   l0766
0x0768   l0768
0x0763   l0763
0x09BC   l09bc
0x0741   l0741
0x0736   l0736
0x0794   l0794
0x072E   l072e
0x2166   l2166
0x0724   l0724
0x0716   l0716
0x0799   l0799
0x238D   o238D
0x1871   l1871
0x0706   l0706
0x0ABD   l0abd
0x1695   o1695
0x196E   o196E
0x06DA   l06da
0x06DD   l06dd
0x1A5F   l1a5f
0x1A5A   l1a5a
0x0992   l0992
0x06B1   l06b1
0x06B4   l06b4
0x120F   m120f
0x0693   l0693
0x185A   l185a
0x067B   l067b
0x0703   l0703
0x189A   l189a
0x07FF   l07ff
0x07F2   l07f2
0x065C   l065c
0x1758   l1758
0x16B6   l16b6
0x0989   l0989
0x07C5   l07c5
0x07DF   l07df
0x0077   R2_FREE_0
0x07DC   l07dc
0x0626   l0626
0x07B1   l07b1
0x0748   l0748
0x0A0F   l0a0f
0x110C   l110c
0x1140   l1140
0x098D   l098d
0x108A   l108a
0x26A0   l26a0
0x2166   m2166
0x10E5   l10e5
0x09F6   l09f6
0x09E6   l09e6
0x0B45   l0b45
0x0B52   l0b52
0x0A76   l0a76
0x0A4E   l0a4e
0x0AAC   l0aac
0x0A9F   l0a9f
0x0AF0   l0af0
0x0B1A   l0b1a
0x0BAE   l0bae
0x0BA2   l0ba2
0x0B80   l0b80
0x3290   o3290
0x0B5F   l0b5f
0x05E6   l05e6
0x05C1   l05c1
0x05A1   l05a1
0x0597   l0597
0x059E   l059e
0x058C   l058c
0x057E   l057e
0x0577   l0577
0x1726   l1726
0x0559   l0559
0x0565   l0565
0x0574   l0574
0x11EC   l11ec
0x0540   l0540
0x12F9   l12f9
0x053A   l053a
0x2BF1   o2BF1
0x1712   l1712
0x0521   l0521
0x052E   l052e
0x0513   l0513
0x0504   l0504
0x1D6B   l1d6b
0x04FB   l04fb
0x0C43   l0c43
0x04E9   l04e9
0x0AD2   l0ad2
0x16FE   l16fe
0x04D7   l04d7
0x04D0   l04d0
0x04CD X l04cd
0x04C8 X l04c8
0x1420   l1420
0x04BF X l04bf
0x049E X l049e
0x0ADC   l0adc
0x0496 X l0496
0x0F31   l0f31
0x0F0F   l0f0f
0x38AC   o38AC
0x0476 X l0476
0x0461 X l0461
0x3F85   l3f85
0x045F X l045f
0x0446 X l0446
0x03D1   o03D1
0x2C69   m2c69
0x043A X l043a
0x106F   l106f
0x1182   l1182
0x1338   l1338
0x11AD   l11ad
0x0423 X l0423
0x042E   l042e
0x041F X l041f
0x11A4   l11a4
0x12F0   l12f0
0x1418   l1418
0x093E   o093E
0x0408 X l0408
0x040B   l040b
0x0401   l0401
0x03FA   l03fa
0x03DB X l03db
0x0F81   o0F81
0x0672   o0672
0x15C4   o15C4
0x10A8   o10A8
0x09F4   o09F4
0x0391 X ROM0_SPARE1
0x001F   R0_FREE_1
0x0391   FREE_ROM0_1
0x038A   l038a
0x037F   l037f
0x0379   l0379
0x0371   l0371
0x0373   l0373
0x035E X l035e
0x034F   l034f
0x0352   l0352
0x032E   l032e
0x092C   o092C
0x089F   l089f
0x030A   l030a
0x0307   l0307
0x0302   l0302
0x02DF   l02df
0x03B0   l03b0
0x02CE   l02ce
0x1601   o1601
0x02AE X l02ae
0x064E   l064e
0x0633   l0633
0x2410   m2410
0x3E80   l3e80
0x05A7   l05a7
0x05CC   l05cc
0x029E   l029e
0x3834   l3834
0x02AA   l02aa
0x0D6B   o0D6B
0x03CD   l03cd
0x03B8   l03b8
0x01B0 X l01b0
0x1661   o1661
0x016C X l016c
0x39B0   l39b0
0x0165   l0165
0x377F   l377f
0x0167   l0167
0x0367   l0367
0x0136   l0136
0x0130   l0130
0x0111   l0111
0x253A   m253a
0x00F7 X l00f7
0x00E7 X l00e7
0x00DE X l00de
0x00CD X l00cd
0x00BD   l00bd
0x00A3   l00a3
0x26E6 X m26e6
0x0070   l0070
0x0066 X l0066
0x004F X ROM0_SPARE0
0x0017   R0_FREE_0
0x004F   FREE_ROM0_0
0x0074   l0074
0x0038   o0038
0x0048   o0048
0x0038 X l0038
0x00AE   l00ae
0x0030 X l0030
0x1403   l1403
0x0028 X l0028
0x0020 X l0020
0x0018 X l0018
0x3B00   m3b08
0x0010 X l0010
0x010F   l010f
0x2778   l2778
0x0004   l0004
0x0000 X l0000
0x1FFD   PBANK678
0x7FFD   PBANKM
0x3369   l3369
